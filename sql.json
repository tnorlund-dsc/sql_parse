{
    "dm-ga": {
        "transform.dmt.ga_visit_summary.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ga_visit_delta"
                    ],
                    "select": [
                        "A.visit_id"
                    ],
                    "where": [
                        "dw_load_date_timestamp",
                        "stg.ga_visit_customers.customer_id",
                        "stg.customers.created_at"
                    ],
                    "join": [
                        "stg.ga_src_prod.evar_obfuscatedcustomerid",
                        "stg.customers.obfuscated_id",
                        "stg.ga_visit_customers.obfuscated_customer_id"
                    ]
                },
                "tables": [
                    "extract.ga_visit_delta",
                    "stg.ga_src_prod",
                    "stg.customers",
                    "stg.ga_visit_customers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO extract.ga_visit_delta\nSELECT\n\t A.visit_id\nFROM stg.ga_src_prod a\nWHERE dw_load_date_timestamp :: TIMESTAMP >= '<start_date>' :: TIMESTAMP - INTERVAL '8 hours'\nand a.visitStartTime >= cast(DATEDIFF(s, '1970-01-01 00:00:00.000', '2021-03-01 00:00:00.000' ) as bigint)\nGROUP BY 1\n\nUNION\n\nSELECT\n\t A.visit_id\nFROM stg.ga_src_prod a\nJOIN stg.customers c\nON a.evar_obfuscatedcustomerid = c.obfuscated_id\nLEFT JOIN stg.ga_visit_customers vc\nON c.obfuscated_id = vc.obfuscated_customer_id\nWHERE vc.customer_id IS NULL\n\tAND c.created_at BETWEEN getdate()::DATE - INTERVAL '1 week' AND getdate()::DATE - INTERVAL '8 hours'\n\tAND a.visitStartTime >= cast(DATEDIFF(s, '1970-01-01 00:00:00.000', '2021-03-01 00:00:00.000' ) as bigint)\nGROUP BY 1\n; --Affected rows: 851072"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.ga_visit_id_url.visit_id",
                        "extract.ga_visit_delta.visit_id"
                    ]
                },
                "tables": [
                    "stg.ga_visit_id_url"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.ga_visit_id_url\nUSING extract.ga_visit_delta\nWHERE stg.ga_visit_id_url.visit_id = extract.ga_visit_delta.visit_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ga_visit_id_url"
                    ],
                    "select": [
                        "a.visit_id",
                        "evar_pagePathNoParams"
                    ]
                },
                "tables": [
                    "stg.ga_visit_id_url"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.ga_visit_id_url\nSELECT\n\ta.visit_id\n\t, evar_pagePathNoParams AS page_url --evar11\n\t, min(dateadd(S, hitTime_gmt, '19700101')) AS min_hit_timestamp\n\t, max(dateadd(S, hitTime_gmt, '19700101')) AS max_hit_timestamp\nFROM stg.ga_src_prod a\nINNER JOIN extract.ga_visit_delta dd\nON a.visit_id = dd.visit_id\nGROUP BY 1, 2\n; --Affected rows: 3093085"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.ga_visit_customers.visit_id",
                        "extract.ga_visit_delta.visit_id"
                    ]
                },
                "tables": [
                    "stg.ga_visit_customers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.ga_visit_customers\nUSING extract.ga_visit_delta\nWHERE stg.ga_visit_customers.visit_id = extract.ga_visit_delta.visit_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ga_visit_customers"
                    ],
                    "select": [
                        "a.post_visitorIdHigh",
                        "a.post_visitorIdLow",
                        "a.visitNumber",
                        "a.visitStartTime",
                        "cu.obfuscated_id",
                        "cu.id",
                        "a.visit_id",
                        "s",
                        "hitTime_gmt"
                    ]
                },
                "tables": [
                    "stg.ga_visit_customers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.ga_visit_customers\nSELECT\n\ta.post_visitorIdHigh as post_visid_high\n\t, a.post_visitorIdLow as post_visid_low\n\t, a.visitNumber as visit_num\n\t, a.visitStartTime as visit_start_time_gmt\n\t, cu.obfuscated_id as obfuscated_customer_id\n\t, cu.id AS customer_id\n\t, a.visit_id\n\t, dateadd(s, min(hitTime_gmt),'19700101') :: TIMESTAMP as visit_customer_min_timestamp\n\t, dateadd(s, max(hitTime_gmt),'19700101') :: TIMESTAMP as visit_customer_max_timestamp\n\t, v.purchase_flag\n\t, getdate() as dw_load_date_timestamp\n\t, cu.uuid as customer_uuid --a.post_evar_customeruuid as customer_uuid\nFROM stg.ga_src_prod a\nINNER JOIN extract.ga_visit_delta dd\nON a.visit_id = dd.visit_id\nINNER JOIN stg.customers cu\nON nvl(a.evar_obfuscatedcustomerid, a.post_evar_obfuscatedcustomerid) = cu.obfuscated_id\nINNER JOIN\n(\n\tSELECT\n\ta.visit_id\n\t,max(CASE WHEN purchasetype is not null THEN 1 ELSE 0 END) AS purchase_flag\n\t --evar11 SIMILAR TO '%(/get-started/complete|/welcome/|/welcome|/your-box/cart/checkout/success|/manage/now/checkout/success|/purchase/success|/gift/plan/success|/gift/ecard/purchase/success|gift/ecard/success|/preorder/confirmation|/upgrade/congratulations)'\n\tFROM stg.ga_src_prod a\n\tINNER JOIN extract.ga_visit_delta dd\n\tON a.visit_id = dd.visit_id\n\tWHERE a.eventnames = 'purchase'\n\tGROUP BY 1\n) v\nON v.visit_id = a.visit_id\nwhere a.visitStartTime >= cast(DATEDIFF(s, '1970-01-01 00:00:00.000', '2021-03-01 00:00:00.000' ) as bigint)\nGROUP BY 1,2,3,4,5,6,7,10,12\n\nunion\n\nSELECT\n\ta.post_visitorIdHigh as post_visid_high\n\t, a.post_visitorIdLow as post_visid_low\n\t, a.visitNumber as visit_num\n\t, a.visitStartTime as visit_start_time_gmt\n\t, cu.obfuscated_id as obfuscated_customer_id\n\t, cu.id AS customer_id\n\t, a.visit_id\n\t, dateadd(s, min(hitTime_gmt),'19700101') :: TIMESTAMP as visit_customer_min_timestamp\n\t, dateadd(s, max(hitTime_gmt),'19700101') :: TIMESTAMP as visit_customer_max_timestamp\n\t, v.purchase_flag\n\t, getdate() as dw_load_date_timestamp\n\t, cu.uuid as customer_uuid --a.post_evar_customeruuid as customer_uuid\nFROM stg.ga_src_prod a\nINNER JOIN extract.ga_visit_delta dd\nON a.visit_id = dd.visit_id\nINNER JOIN stg.customers cu\nON a.evar_customeruuid = cu.uuid\nINNER JOIN\n(\n\tSELECT\n\ta.visit_id\n\t,max(CASE WHEN purchasetype is not null THEN 1 ELSE 0 END) AS purchase_flag\n\t --evar11 SIMILAR TO \u2018%(/get-started/complete|/welcome/|/welcome|/your-box/cart/checkout/success|/manage/now/checkout/success|/purchase/success|/gift/plan/success|/gift/ecard/purchase/success|gift/ecard/success|/preorder/confirmation|/upgrade/congratulations)'\n\tFROM stg.ga_src_prod a\n\tINNER JOIN extract.ga_visit_delta dd\n\tON a.visit_id = dd.visit_id\n\tWHERE a.eventnames = 'purchase'\n\tGROUP BY 1\n) v\nON v.visit_id = a.visit_id\nwhere a.visitStartTime >= cast(DATEDIFF(s, '1970-01-01 00:00:00.000', '2021-03-01 00:00:00.000' ) as bigint)\nGROUP BY 1,2,3,4,5,6,7,10,12\n; --Affected rows: 245314"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "dmt.ga_visit_summary.visit_id",
                        "extract.ga_visit_delta.visit_id"
                    ]
                },
                "tables": [
                    "dmt.ga_visit_summary"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM dmt.ga_visit_summary\nUSING extract.ga_visit_delta\nWHERE dmt.ga_visit_summary.visit_id = extract.ga_visit_delta.visit_id\n;"
            },
            {
                "skipped": true,
                "value": "INSERT INTO dmt.ga_visit_summary\nSELECT\n\tx.mcvisid,\n\tx.visit_num,\n\tx.post_visid_high,\n\tx.post_visid_low,\n\tx.visit_start_time_gmt_epoch,\n\tx.visit_id,\n\tx.visit_start_time_gmt ,\n\tx.visit_end_time_gmt,\n\tx.visit_start_time_pst,\n\tx.visit_end_time_pst,\n\tleft(x.landing_url_with_params, 512) as landing_url_with_params,\n\tleft(x.landing_url_without_params, 512) as landing_url_without_params,\n\tx.first_utm_source as first_utm_source,\n\tx.first_utm_medium as first_utm_medium,\n\tx.first_utm_campaign as first_utm_campaign,\n\tx.first_utm_content as first_utm_content,\n\tleft(x.first_utm_term, 512) as first_utm_term,\n\tx.landing_pagename,\n\tleft(x.ab_test_assignment, 4000) as ab_test_assignment,\n\tx.last_utm_medium as last_utm_medium,\n\tx.last_utm_source as last_utm_source,\n\tx.last_utm_campaign as last_utm_campaign,\n\tx.last_utm_content as last_utm_content,\n\tleft(x.last_utm_term, 512) as last_utm_term,\n\tx.platform,\n\tleft(x.useragent, 512) as useragent,\n\t(CASE WHEN x.shopcode in ('WWW', 'www', 'ask') or x.shopcode ilike 'www%'then 'WWW'\n\t\tWHEN x.shopcode = 'au' or x.shopcode ilike 'au%' then 'AU'\n\t\tWHEN x.shopcode = 'ca' or x.shopcode ilike 'ca%' then 'CA'\n\t\tWHEN x.shopcode = 'uk' or x.shopcode ilike 'uk%' then 'UK'\n\t\tElse 'NA' END) AS shopcode,\n\tleft(x.referring_url, 512) as referring_url,\n\tx.referring_domain,\n\tz.obfuscated_customer_id as obfuscated_customer_id,\n\tz.customer_id AS customer_id,\n\tx.obfuscated_order_id,\n\tx.visit_page_view_count,\n\tleft(x.exit_url, 512) AS exit_url,\n\tx.exit_pagename,\n\tnull as browser,\n\tx.browser_name,\n\tx.browser_height,\n\tx.browser_width,\n\tnull as os,\n\tx.os_name,\n\tx.visit_ref_type,\n\tx.visit_keywords,\n\tnull as ip,\n\tx.geo_country,\n\tx.geo_region,\n\tnull as geo_zip,\n\tx.geo_city,\n\tx.mobile_id,\n\tnull as hourly_visitor,\n\tnull as daily_visitor,\n\tnull as weekly_visitor,\n\tnull as monthly_visitor,\n\tnull as quarterly_visitor,\n\tx.plan_purchase_flag,\n\tnull as subscription_purchase_flag,\n\tnull as subscription_shipnow_purchase_flag,\n\tx.plan_shipnow_purchase_flag,\n\tx.nsrq_purchase_flag,\n\tx.gift_bundle_purchase_flag,\n\tnull as gift_ecard_purchase_flag,\n\tnull as preorder_purchase_flag,\n\tx.order_count,\n\tnull as first_va_finder_id,\n\tnull as first_va_closer_id,\n\tnull as last_va_closer_id,\n\tgetdate() as dw_load_date_time,\n\tx.min_login_timestamp_pst,\n\n\tz.customer_uuid,\n\t'ga' as analytics\n\nFROM\n\t(\nSELECT\na.visit_id\n, a.visitNumber as visit_num\n, a.visitorId as mcvisid\n, a.post_visitorIdHigh as post_visid_high\n, a.post_visitorIdLow as post_visid_low\n, a.visitStartTime AS visit_start_time_gmt_epoch\n, (TIMESTAMP 'epoch' + a.visitStartTime  * INTERVAL '1 Second') :: TIMESTAMP AS visit_start_time_gmt\n\n, TIMESTAMP 'epoch' + last_value(a.hitTime_gmt) IGNORE NULLS OVER( PARTITION BY a.visit_id\nORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) * INTERVAL '1 Second' AS visit_end_time_gmt\n\n, convert_timezone('PST', TIMESTAMP 'epoch' + a.visitStartTime * INTERVAL '1 Second') AS visit_start_time_pst\n\n, convert_timezone('PST', TIMESTAMP 'epoch' + last_value(a.hitTime_gmt) IGNORE NULLS OVER ( PARTITION BY a.visit_id\nORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) * INTERVAL '1 Second' ) AS visit_end_time_pst\n\n, first_value(a.evar_pagePath) IGNORE NULLS OVER (PARTITION BY a.visit_id\nORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS landing_url_with_params\n\n, first_value(a.evar_pagePathNoParams) IGNORE NULLS OVER (PARTITION BY a.visit_id\nORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS landing_url_without_params\n\n, first_value(a.evar_source) OVER (PARTITION BY a.visit_id ORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS first_utm_source\n, first_value(left(a.evar_49_medium,128)) OVER (PARTITION BY a.visit_id ORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS first_utm_medium\n, first_value(a.evar_48_campaign) OVER (PARTITION BY a.visit_id ORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS first_utm_campaign\n, first_value(a.evar_50_content) OVER (PARTITION BY a.visit_id ORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS first_utm_content\n, first_value(a.evar_keyword) OVER (PARTITION BY a.visit_id ORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS first_utm_term\n\n, first_value(a.pageName) IGNORE NULLS OVER (PARTITION BY a.visit_id ORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS landing_pagename\n, listagg(DISTINCT abtests, ';') ab_test_assignment\n\n, last_value(left(a.evar_49_medium,128)) OVER (PARTITION BY a.visit_id ORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS last_utm_medium\n, last_value(a.evar_source) OVER (PARTITION BY a.visit_id ORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS last_utm_source\n, last_value(a.evar_48_campaign) OVER (PARTITION BY a.visit_id ORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS last_utm_campaign\n, last_value(a.evar_50_content) OVER (PARTITION BY a.visit_id ORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS last_utm_content\n, last_value(a.evar_keyword) OVER (PARTITION BY a.visit_id ORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS last_utm_term\n\n, first_value(a.deviceCategory) IGNORE NULLS OVER (PARTITION BY a.visit_id\nORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS platform\n\n, first_value(a.evar_userAgent) IGNORE NULLS OVER (PARTITION BY a.visit_id\nORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS useragent\n\n, first_value(a.fx_shopCode) IGNORE NULLS OVER (PARTITION BY a.visit_id\nORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS shopcode\n\n, first_value(a.referralPath) OVER (PARTITION BY a.visit_id\nORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS referring_url\n\n, first_value(a.ref_domain) OVER (PARTITION BY a.visit_id\nORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS referring_domain\n\n, first_value(a.evar_obfuscatedorderid) IGNORE NULLS OVER (PARTITION BY a.visit_id\nORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS obfuscated_order_id\n\n, SUM(CASE WHEN a.pageevent = 0 THEN 1 ELSE 0 END) OVER (PARTITION BY a.visit_id\nORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS visit_page_view_count\n\n, last_value(a.evar_pagePathNoParams) IGNORE NULLS OVER (PARTITION BY a.visit_id\nORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS exit_url\n\n, last_value(a.pagename) IGNORE NULLS OVER (PARTITION BY a.visit_id\nORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS exit_pagename\n\n--, a.browser\n, a.browser as browser_name\n, a.screenResolution_height as browser_height\n, a.screenResolution_width as browser_width\n\n--, a.os\n, a.operatingSystem as os_name\n\n, first_value(a.referralType) OVER (PARTITION BY a.visit_id\nORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS visit_ref_type\n\n--, first_value(a.post_keyword) OVER (PARTITION BY a.visit_id\n--ORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS visit_keywords\n, first_value(a.evar_keyword) OVER (PARTITION BY a.visit_id\nORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS visit_keywords\n--, ip\n\n, a.country as geo_country\n, a.region as geo_region\n--, geo_zip\n, a.city as geo_city\n\n, a.mobileId as mobile_id\n\n, max( CASE WHEN a.eventnames = 'purchase' and a.purchasetype = 'plan' THEN 1 ELSE 0 END ) OVER (PARTITION BY a.visit_id ORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS plan_purchase_flag\n, max( CASE WHEN a.eventnames = 'purchase' and a.purchasetype = 'plan_shipnow' THEN 1 ELSE 0 END ) OVER (PARTITION BY a.visit_id ORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS plan_shipnow_purchase_flag\n, max( CASE WHEN a.eventnames = 'purchase' and a.purchasetype = 'nsrq' THEN 1 ELSE 0 END ) OVER (PARTITION BY a.visit_id ORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS nsrq_purchase_flag\n, max( CASE WHEN a.eventnames = 'purchase' and a.purchasetype = 'gift_bundle' THEN 1 ELSE 0 END ) OVER (PARTITION BY a.visit_id ORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS gift_bundle_purchase_flag\n\n--, SUM( CASE WHEN '|'||a.eventList||'|' LIKE '%|purchase|%' THEN 1 ELSE 0 END ) OVER (PARTITION BY a.visit_id ORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS order_count\n, SUM( CASE WHEN a.eventnames = 'purchase' THEN 1 ELSE 0 END ) OVER (PARTITION BY a.visit_id ORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS order_count\n\n, convert_timezone('PST', TIMESTAMP 'epoch' + min(CASE WHEN a.evar_pagePathNoParams LIKE '%/login' THEN a.hitTime_gmt END) OVER (PARTITION BY a.visit_id\nORDER BY a.hitTime_gmt, a.timeStamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING )* INTERVAL '1 Second') as min_login_timestamp_pst\n\n, row_number() OVER (PARTITION BY a.visit_id ORDER BY a.hitTime_gmt, a.timeStamp ) AS rnk\n\n\nFROM stg.ga_src_prod a\nINNER JOIN extract.ga_visit_delta dd\nON a.visit_id = dd.visit_id\n\nWHERE 1 = 1\n\nGROUP BY\na.visit_id\n, a.visitNumber\n, a.visitorId\n, a.post_visitorIdHigh\n, a.post_visitorIdLow\n, a.visitStartTime\n, a.visitStartTime\n, a.hitTime_gmt\n, a.timeStamp\n, a.visitStartTime\n, a.evar_pagePath\n, a.evar_pagePathNoParams\n, a.evar_source, a.evar_49_medium, a.evar_48_campaign, a.evar_50_content, a.evar_keyword\n, a.pageName\n, a.deviceCategory\n, a.evar_userAgent\n, a.fx_shopCode\n, a.referralPath\n, a.ref_domain\n, a.evar_obfuscatedorderid\n, a.pageevent\n, a.browser\n, a.screenResolution_height\n, a.screenResolution_width\n, a.operatingSystem\n, a.referralType\n, a.country\n, a.region\n, a.city\n, a.mobileId\n, a.purchasetype\n, a.eventnames\n) x\n\nLEFT JOIN\n(\n\tSELECT\n\t\tvisit_id,\n\t\tCOALESCE(purchase_customer_id, general_customer_id) as customer_id,\n\t\tCOALESCE(purchase_obfuscated_id, general_obfuscated_id) as obfuscated_customer_id,\n\t\tCOALESCE(purchase_customer_uuid, general_customer_uuid) as customer_uuid\n\n\tFROM\n\t\t(\n\t\t\tSELECT\n\t\t\t\tvisit_id,\n\n\t\t\t\tfirst_value(CASE WHEN purchase_flag = 1 THEN customer_uuid ELSE NULL END) OVER (PARTITION BY visit_id ORDER BY visit_customer_min_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS purchase_customer_uuid,\n\t\t\t\tfirst_value(customer_uuid) OVER (PARTITION BY visit_id ORDER BY visit_customer_min_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS general_customer_uuid,\n\t\t\t\tfirst_value(CASE WHEN purchase_flag = 1 THEN obfuscated_customer_id ELSE NULL END) OVER (PARTITION BY visit_id ORDER BY visit_customer_min_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS purchase_obfuscated_id,\n\t\t\t\tfirst_value(obfuscated_customer_id) OVER (PARTITION BY visit_id ORDER BY visit_customer_min_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS general_obfuscated_id,\n\t\t\t\tfirst_value(CASE WHEN purchase_flag = 1 THEN customer_id ELSE NULL END) OVER (PARTITION BY visit_id ORDER BY visit_customer_min_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS purchase_customer_id,\n\t\t\t\tfirst_value(customer_id) OVER (PARTITION BY visit_id ORDER BY visit_customer_min_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) as general_customer_id,\n\n\t\t\t\trow_number() OVER (PARTITION BY visit_id ORDER BY visit_customer_min_timestamp, obfuscated_customer_id) AS rnk\n\t\t\tFROM stg.ga_visit_customers\n\t\t) ab\n\t WHERE ab.rnk = 1\n) z\nON x.visit_id = z.visit_id\n\nWHERE x.rnk = 1\n--and x.visit_start_time_gmt_epoch >= 1614556800\nAND x.visit_start_time_gmt_epoch >= cast(DATEDIFF(s, '1970-01-01 00:00:00.000', '2021-03-01 00:00:00.000' ) as bigint)\n; --Affected rows: 850729"
            }
        ],
        "load.stg.ga_src_prod.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ga_src_prod"
                    ],
                    "select": [
                        "extract.ga_src_prod.*",
                        "*"
                    ],
                    "where": [
                        "hittime_gmt",
                        "tgt.hitidlow"
                    ],
                    "join": [
                        "extract.ga_src_prod.hitidhigh",
                        "tgt.hitidhigh",
                        "extract.ga_src_prod.hitidlow",
                        "tgt.hitidlow"
                    ]
                },
                "tables": [
                    "stg.ga_src_prod",
                    "extract.ga_src_prod",
                    "timestamp"
                ],
                "subqueries": {
                    "tgt": "SELECT * FROM stg.ga_src_prod WHERE hittime_gmt BETWEEN EXTRACT (EPOCH FROM '<start_date>' :: timestamp) and EXTRACT (EPOCH FROM '<end_date>' :: timestamp)"
                },
                "skipped": false,
                "value": "insert into stg.ga_src_prod\nSELECT src.* ,\n       getdate() as dw_load_date_timestamp\nFROM extract.ga_src_prod src\n  LEFT JOIN\n        (SELECT * FROM stg.ga_src_prod\n            WHERE hittime_gmt BETWEEN EXTRACT(EPOCH FROM '<start_date>'::timestamp) and EXTRACT(EPOCH FROM '<end_date>'::timestamp )) tgt\n  ON src.hitidhigh = tgt.hitidhigh\n    AND src.hitidlow = tgt.hitidlow\n  WHERE tgt.hitidlow IS NULL ;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ga_src_prod_temp"
                    ],
                    "select": [
                        "extract.ga_src_prod.*",
                        "*"
                    ],
                    "where": [
                        "hittime_gmt",
                        "tgt.hitidhigh"
                    ],
                    "join": [
                        "extract.ga_src_prod.hitidhigh",
                        "tgt.hitidhigh"
                    ]
                },
                "tables": [
                    "stg.ga_src_prod_temp",
                    "extract.ga_src_prod",
                    "timestamp"
                ],
                "subqueries": {
                    "tgt": "SELECT * FROM stg.ga_src_prod_temp WHERE hittime_gmt BETWEEN EXTRACT (EPOCH FROM '<start_date>' :: timestamp) and EXTRACT (EPOCH FROM '<end_date>' :: timestamp)"
                },
                "skipped": false,
                "value": "insert into stg.ga_src_prod_temp\nSELECT src.* ,\n       getdate() as dw_load_date_timestamp\nFROM extract.ga_src_prod src\n  LEFT JOIN\n        (SELECT * FROM stg.ga_src_prod_temp\n            WHERE hittime_gmt BETWEEN EXTRACT(EPOCH FROM '<start_date>'::timestamp) and EXTRACT(EPOCH FROM '<end_date>'::timestamp )) tgt\n  ON src.hitidhigh = tgt.hitidhigh\n  WHERE tgt.hitidhigh IS NULL;"
            }
        ],
        "transform.dmt.ga_visit_level_getstartedcomplete_page_metadata.sql": [
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "visit_id"
                    ],
                    "where": [
                        "dw_load_date_time"
                    ]
                },
                "tables": [
                    "dm_delta",
                    "stg.ga_src_prod"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "CREATE TEMP TABLE dm_delta AS\nSELECT visit_id\nFROM stg.ga_src_prod a\nWHERE 1=1\nand dw_load_date_time :: TIMESTAMP >= '<start_date>' :: TIMESTAMP - INTERVAL '36 hours'\nand CONVERT_TIMEZONE ( 'UTC', 'PST', (TIMESTAMP 'epoch' + hitTime_gmt  * INTERVAL '1 Second') :: TIMESTAMP) >= '2020-12-15'\nGROUP BY 1\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "dmt.ga_visit_level_getstartedcomplete_page_metadata.visit_id",
                        "dm_delta.visit_id"
                    ]
                },
                "tables": [
                    "dmt.ga_visit_level_getstartedcomplete_page_metadata"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM dmt.ga_visit_level_getstartedcomplete_page_metadata\nUSING dm_delta\nWHERE dmt.ga_visit_level_getstartedcomplete_page_metadata.visit_id = dm_delta.visit_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ga_visit_level_getstartedcomplete_page_metadata"
                    ],
                    "select": [
                        "v.visit_id",
                        "v.visit_start_time_gmt",
                        "v.visitnumber",
                        "v.mcvisid",
                        "v.evar_obfuscatedCustomerid",
                        "v.evar_pagepathnoparams",
                        "v.page_view_count",
                        "v.min_ts"
                    ]
                },
                "tables": [
                    "dmt.ga_visit_level_getstartedcomplete_page_metadata"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "Insert into dmt.ga_visit_level_getstartedcomplete_page_metadata\nselect v.visit_id\n, v.visit_start_time_gmt\n, v.visitnumber as visit_num\n, v.mcvisid\n, v.evar_obfuscatedCustomerid as obfuscated_customer_id\n, v.evar_pagepathnoparams as url\n, v.page_view_count\n, convert_timezone('UTC','America/Los_Angeles', v.min_ts)  as complete_page_ts_pst\n, v.min_ts as complete_page_ts_gmt\n--, v.prior_url, v.two_prior\n, v.prior_evar_pagepathnoparams as prior_url\n, v.two_prior_evar_pagepathnoparams as two_prior_url\n--, v.prior_pageurl\n--, v.two_prior_pageurl\n, v.post_visid_high\n, v.post_visid_low\n, v.shopcode\n, c.id as customer_id\n, c.uuid as customer_uuid\n, getdate() as dw_load_date_time\nfrom\n    (\n    select u.*,--u.visid_concat, u.visit_start_time_gmt, u.visit_num, u.mcvisid,\n    lag(u.evar_pagepathnoparams,1) OVER (PARTITION BY u.visit_id ORDER BY u.max_ts) as prior_evar_pagepathnoparams,\n    lag(u.evar_pagepathnoparams,2) OVER (PARTITION BY u.visit_id ORDER BY u.max_ts) as two_prior_evar_pagepathnoparams\n    --lag(u.pageurl,1) OVER (PARTITION BY u.visit_id ORDER BY u.max_ts) as prior_pageurl,\n    --lag(u.pageurl,2) OVER (PARTITION BY u.visit_id ORDER BY u.max_ts) as two_prior_pageurl\n    from\n    \n        (select mt.visit_id\n                , mt.post_visitorIdHigh as post_visid_high\n                , mt.post_visitorIdLow as post_visid_low\n                , mt.visitStartTime as visit_start_time_gmt\n                , mt.visitnumber\n                , mt.visitorid as mcvisid\n                , mt.evar_pagepathnoparams\n                --, mt.pageUrl\n                , mx.evar_obfuscatedCustomerid\n                , mx.page_view_count\n                --, mx.purchase_event_count\n                --, mx.purchase_counter_count\n                , shopcode\n                , (TIMESTAMP 'epoch' + min(hitTime_gmt)  * INTERVAL '1 Second') :: TIMESTAMP as min_ts\n                , (TIMESTAMP 'epoch' + max(hitTime_gmt)  * INTERVAL '1 Second') :: TIMESTAMP as max_ts\n        from stg.ga_src_prod mt\n        \n                join (\n                      select mt.visit_id\n                        , mt.post_visitorIdHigh as post_visid_high\n                        , mt.post_visitorIdLow as post_visid_low\n                        , mt.visitStartTime as visit_start_time_gmt\n                        , mt.visitnumber\n                        , mt.visitorid as mcvisid\n                        , mt.evar_pagepathnoparams\n                        --, mt.pageUrl -- may be we have to bring in shop_code\n                        ,(CASE WHEN fx_shopcode in ('WWW', 'www', 'ask') or fx_shopcode ilike 'www%'then 'WWW'\n                            WHEN fx_shopcode = 'au' or fx_shopcode ilike 'au%' then 'AU'\n                            WHEN fx_shopcode = 'ca' or fx_shopcode ilike 'ca%' then 'CA'\n                            WHEN fx_shopcode = 'uk' or fx_shopcode ilike 'uk%' then 'UK'\n                            Else 'NA' END) AS shopcode\n                        , max(nvl(mt.evar_obfuscatedCustomerid,mt.post_evar_obfuscatedCustomerid)) as evar_obfuscatedCustomerid\n                        , sum(case when mt.post_pageEvent = 0 then 1 else 0 end) as page_view_count\n                        --, null --sum(case when mt.page_event_var2 = 'purchase' then 1 else 0 end) as purchase_event_count\n                        --, null --sum(case when mt.page_event_var2 = 'purchase-counter' then 1 else 0 end) as purchase_counter_count\n                        --, min(mt.date_time) as min_ts \n                        --,(TIMESTAMP 'epoch' + min(hitTime_gmt)  * INTERVAL '1 Second') :: TIMESTAMP as min_ts\n                        , min(hitTime_gmt) as min_ts\n                        from stg.ga_src_prod mt join dm_delta dm on mt.visit_id = dm.visit_id\n                        where 1=1\n                        --and mt.username = 'dscnongdprprod'\n                        --and mt.useragent NOT SIMILAR TO '%(bot|crawl|slurp|spider|archiv|spinn|sniff|seo|audit|survey|pingdom|worm|capture|\n                        --(browser|screen)shots|analyz|index|thumb|check|facebook|YandexBot|Twitterbot|a_archiver|\n                        --prerender|Prerender|facebookexternalhit|Bingbot|Googlebot|Baiduspider|360(Spider|User-agent)|semalt|HeadlessChrome|SpeedCurve)%'\n                        --and mt.userserver in ('www.dollarshaveclub.com','uk.dollarshaveclub.com','try.dollarshaveclub.com','content.dollarshaveclub.com','ca.dollarshaveclub.com','au.dollarshaveclub.com','help.dollarshaveclub.com','get.dollarshaveclub.com',\n                        --'uk-help.dollarshaveclub.com','ca-help.dollarshaveclub.com','au-help.dollarshaveclub.com','ask.dollarshaveclub.com','www.dollarspaceclub.com','aus.dollarshaveclub.com','can.dollarshaveclub.com')\n                        --and mt.prop8 = 'WWW'\n                        --and mt.exclude_hit = 0\n                        \n                        --and mt.evar11 in ('https://www.dollarshaveclub.com/get-started/complete','https://www.dollarshaveclub.com/upgrade/congratulations')\n                        and mt.evar_pagepathnoparams in ('/get-started/complete','/upgrade/congratulations')\n                        --and mt.mcvisid = '48697380825361218943866465508748081184'\n                        --and visit_id = '24017249215979777461611457682'\n                        --and mt.date_time >= '2020-01-01'\n                        \n                        group by 1,2,3,4,5,6,7,8\n                     ) mx \n                on mx.visit_id = mt.visit_id\n                and mt.hitTime_gmt <= mx.min_ts\n        \n        where 1=1\n        --and mt.date_time >= '2021-01-17'\n        and mt.evar_pagepathnoparams in (select distinct url from tmp.funnel_urls)\n        group by 1,2,3,4,5,6,7,8,9,10\n        ) u\n    ) v\n    left join stg.customers c on c.obfuscated_id =  v.evar_obfuscatedCustomerid\n\nwhere v.evar_pagepathnoparams in ('/get-started/complete','/upgrade/congratulations')\n;"
            }
        ],
        "transform.dmt.ga_ab_test.sql": [
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "visit_id"
                    ],
                    "where": [
                        "dw_load_date_time"
                    ]
                },
                "tables": [
                    "dm_delta",
                    "stg.ga_src_prod"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "CREATE TEMP TABLE dm_delta AS\nSELECT visit_id\nFROM stg.ga_src_prod a\nWHERE 1=1\nand dw_load_date_time :: TIMESTAMP >= '<start_date>' :: TIMESTAMP - INTERVAL '36 hours'\nand CONVERT_TIMEZONE ( 'UTC', 'PST', (TIMESTAMP 'epoch' + hitTime_gmt  * INTERVAL '1 Second') :: TIMESTAMP) >= '2021-01-15'\nGROUP BY 1\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "dmt.ga_ab_test.visit_id",
                        "dm_delta.visit_id"
                    ]
                },
                "tables": [
                    "dmt.ga_ab_test"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM dmt.ga_ab_test\nUSING dm_delta\nWHERE dmt.ga_ab_test.visit_id = dm_delta.visit_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ga_ab_test"
                    ],
                    "select": [
                        "visitorid",
                        "visit_start_time_gmt_epoch",
                        "visit_start_time_gmt",
                        "visit_end_time_gmt"
                    ]
                },
                "tables": [
                    "dmt.ga_ab_test"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO dmt.ga_ab_test\nselect \ndistinct \n  visit_id\n, visitorid as mcvisid\n, visit_start_time_gmt_epoch\n, visit_start_time_gmt\n, visit_end_time_gmt\n, convert_timezone('PST', visit_start_time_gmt ) AS visit_start_time_pst\n, convert_timezone('PST', visit_end_time_gmt ) AS visit_end_time_pst\n--, parsed_action\n, split_part(split_part(parsed_action,':',2),'=',1) as test_name\n, split_part(parsed_action,'=',2) as test_assignment_variant\n, split_part(parsed_action,':',1) as test_source\n, pageurl as first_pageurl\n, evar_pagePathNoParams as first_evar_pagePathNoParams\n, device_category\n, browser\n, user_agent\n, c.customer_id\n, c.obfuscated_id as obfuscated_customer_id\n, c.customer_uuid\n, getdate() as dw_load_date_time\n--, min_hit_time_pst\nfrom (\n    select\n      src.visit_id\n      , src.visitorid\n      , src.visitStartTime as visit_start_time_gmt_epoch\n      , (TIMESTAMP 'epoch' + visitStartTime  * INTERVAL '1 Second') :: TIMESTAMP AS visit_start_time_gmt\n      , TIMESTAMP 'epoch' + last_value(max_hittime_gmt) IGNORE NULLS    \n                            OVER( PARTITION BY src.visit_id ORDER BY hittime_gmt ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) * INTERVAL '1 Second' AS visit_end_time_gmt\n      , split_part(abtests,';',n) as parsed_action \n      , abtests\n      --,pageurl\n      , first_value(pageurl) IGNORE NULLS OVER (PARTITION BY src.visit_id ORDER BY hittime_gmt ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS pageurl\n      , first_value(evar_pagePathNoParams) IGNORE NULLS OVER (PARTITION BY src.visit_id ORDER BY hittime_gmt ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS evar_pagePathNoParams\n      , first_value(devicecategory) IGNORE NULLS OVER (PARTITION BY src.visit_id ORDER BY hittime_gmt ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS device_category\n      , first_value(browser) IGNORE NULLS OVER (PARTITION BY src.visit_id ORDER BY hittime_gmt ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS browser\n      , first_value(useragent) IGNORE NULLS OVER (PARTITION BY src.visit_id ORDER BY hittime_gmt ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS user_agent  \n      , convert_timezone('PST', TIMESTAMP 'epoch' + min(hittime_gmt) IGNORE NULLS \n                    OVER (PARTITION BY src.visit_id ORDER BY hittime_gmt ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) * INTERVAL '1 Second') AS min_hit_time_pst -- this min is ata abtest level not visit level\n      , visit_rollup.evar_obfuscatedCustomerId              \n    from\n      stg.ga_src_prod src \n      join dm_delta dm_delta on src.visit_id = dm_delta.visit_id \n      join (\n            select visit_id,max_hittime_gmt,evar_obfuscatedCustomerId,rnk from \n                    ( \n                      select src.visit_id \n                      , last_value(hittime_gmt) IGNORE NULLS OVER( PARTITION BY src.visit_id ORDER BY hittime_gmt ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)  AS max_hittime_gmt\n                      , first_value(evar_obfuscatedCustomerId) IGNORE NULLS OVER (PARTITION BY src.visit_id ORDER BY hittime_gmt ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS evar_obfuscatedCustomerId\n                      , row_number() OVER (PARTITION BY src.visit_id ORDER BY hittime_gmt) AS rnk\n                      from stg.ga_src_prod src \n                            join dm_delta dm_delta on src.visit_id = dm_delta.visit_id \n                            --where dm_delta.visit_id = '25932816398200671261610907957'\n              )  where rnk = 1\n      ) visit_rollup on visit_rollup.visit_id = src.visit_id\n    cross join\n      map.num_ga_abtest\n    where\n      split_part(abtests,';',n) is not null\n      and split_part(abtests,';',n) != ''\n      and abtests is not null -- NOTE THIS - here we are making all first_value columns specific to where abtest has a value (except visit rollup columns)\n  ) ab\n  left JOIN dmt.d_customer c on c.obfuscated_id = ab.evar_obfuscatedCustomerId\n;"
            }
        ]
    },
    "dm-optimove-export": {
        "export.stg.carts_customer_carts.sql": [],
        "export.stg.marketing_campaign_email_variations.sql": [],
        "export.stg.marketing_campaign_emails.sql": [],
        "export.stg.ps_scheduled_cart_item_tiered_percentage_discounts.sql": [],
        "export.stg.marketing_transactional_email_opens.sql": [],
        "export.stg.customer_acxiom_output.sql": [],
        "export.stg.cheetah_click_events.sql": [],
        "export.stg.cheetah_send_events.sql": [],
        "export.spectrum.waitlist.sql": [],
        "export.stg.zuora_payment_methods.sql": [],
        "export.stg.mbo_order_base.sql": [],
        "export.stg.marketing_campaign_email_variation_events.sql": [],
        "export.stg.cheetah_opt_out_segment.sql": [],
        "export.stg.ps_plan_item_tiered_percentage_discounts.sql": [],
        "export.stg.product_removal_reason_code.sql": [],
        "export.stg.close_scheduled_cart_items.sql": [],
        "export.stg.cheetah_semi_login_token.sql": [],
        "export.dmt.d_date.sql": [],
        "export.stg.carts_customer_cart_extras.sql": [],
        "export.audit.dm_file_load_status.sql": [],
        "export.stg.coupon_instances.sql": [],
        "export.stg.cheetah_customer_product_segments.sql": [],
        "export.stg.extras.sql": [],
        "export.stg.marketing_transactional_email_variations.sql": [],
        "export.stg.ps_scheduled_cart_items.sql": [],
        "export.dmt.staq_daily_spend.sql": [],
        "export.audit.dm_pipeline_status.sql": [],
        "export.stg.ps_plan_cancellations.sql": [],
        "export.dmt.d_customer_360.sql": [],
        "export.stg.ps_plans.sql": [],
        "export.dmt.d_customer_subscription_pause.sql": [],
        "export.stg.customer_phone_numbers.sql": [],
        "export.stg.customer_cohorts.sql": [],
        "export.stg.plan_state_histories.sql": [],
        "export.braze_spectrum.event_type_users_messages_email_open.sql": [],
        "export.stg.change_snooze_events.sql": [],
        "export.stg.marketing_transactional_email_instances.sql": [],
        "export.dmt.d_bundle_discounted_value.sql": [],
        "export.stg.cheetah_box_manager_topic.sql": [],
        "export.stg.marketing_transactional_emails.sql": [],
        "export.stg.cheetah_open_events.sql": [],
        "export.stg.ps_subscription_to_plan_conversion.sql": [],
        "export.stg.customer_shop_attributes.sql": [],
        "export.stg.ps_plan_items_20190507.sql": [],
        "export.stg.customer_primary_addresses.sql": [],
        "export.dmt.f_invoice.sql": [],
        "export.dmt.d_customer_answer.sql": [],
        "export.stg.adobe_src.sql": [],
        "export.stg.customer_subscription_cancellation_reasons.sql": [],
        "export.stg.marketing_campaign_email_opens.sql": [],
        "export.dmt.adobe_base.sql": [],
        "export.stg.marketing_campaign_email_clicks.sql": [],
        "export.dmt.f_gift_card.sql": [],
        "export.stg.coupons.sql": [],
        "export.stg.marketing_campaign_unsubscribes.sql": [],
        "export.stg.referrals.sql": [],
        "export.dmt.d_customer_plan_360.sql": [],
        "export.stg.adobe_web_orig.sql": [],
        "export.stg.ps_change_plan_attribute_events.sql": [],
        "export.dmt.f_invoice_product.sql": [],
        "export.stg.cheetah_bounce_events.sql": [],
        "export.stg.marketing_campaign_email_instances.sql": [],
        "export.stg.ml_model_scores.sql": [],
        "export.dmt.d_product.sql": [],
        "export.dmt.d_customer.sql": [],
        "export.stg.customer_subscription_extras.sql": [],
        "export.dmt.f_customer_credit.sql": [],
        "export.dmt.f_gift.sql": [],
        "export.stg.ps_change_plan_item_events.sql": [],
        "export.stg.customer_status_changes.sql": [],
        "export.dmt.d_customer_status.sql": [],
        "export.stg.survey_options.sql": [],
        "export.stg.mobile_app_usage.sql": [],
        "export.stg.ps_plan_items.sql": [],
        "export.stg.replenishment_dates.sql": [],
        "export.dmt.d_customer_subscription.sql": [],
        "export.stg.customer_subscription_product_frequency_histories.sql": [],
        "export.stg.customer_reviews.sql": [],
        "export.stg.marketing_transactional_email_clicks.sql": [],
        "export.stg.addresses.sql": [],
        "export.stg.ps_scheduled_carts.sql": [],
        "export.stg.ps_change_scheduled_cart_item_events.sql": []
    },
    "dm-extract": {
        "load.stg.erp_order_products.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.erp_order_products.id",
                        "extract.erp_order_products.id"
                    ]
                },
                "tables": [
                    "stg.erp_order_products"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.erp_order_products\nusing extract.erp_order_products\nwhere stg.erp_order_products.id = extract.erp_order_products.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "erp_order_products"
                    ],
                    "select": [
                        "id",
                        "order_id",
                        "invoice_id",
                        "customer_id",
                        "discount",
                        "effective_unit_price",
                        "inclusion_reason",
                        "item_type",
                        "parent_order_product_id",
                        "product_id",
                        "quantity",
                        "tax",
                        "unit_price",
                        "product_name",
                        "product_nature",
                        "sku",
                        "taxable",
                        "product_type",
                        "bundle_id",
                        "bundle_product_id",
                        "bundle_maximum_quantity",
                        "price_contribution",
                        "source_id",
                        "source_type",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.erp_order_products",
                    "extract.erp_order_products"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.erp_order_products\nselect\n    id\n  ,order_id\n  ,invoice_id\n  ,customer_id\n  ,discount\n  ,effective_unit_price\n  ,inclusion_reason\n  ,item_type\n  ,parent_order_product_id\n  ,product_id\n  ,quantity\n  ,tax\n  ,unit_price\n  ,product_name\n  ,product_nature\n  ,sku\n  ,taxable\n  ,product_type\n  ,bundle_id\n  ,bundle_product_id\n  ,bundle_maximum_quantity\n  ,price_contribution\n  ,source_id\n  ,source_type\n  ,dsc_processed_at\nfrom extract.erp_order_products\n;"
            }
        ],
        "load.stg.bundles.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.bundles.id",
                        "extract.bundles.id"
                    ]
                },
                "tables": [
                    "stg.bundles"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.bundles\nusing extract.bundles\nwhere stg.bundles.id = extract.bundles.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "bundles"
                    ],
                    "select": [
                        "id",
                        "product_id",
                        "maximum_quantity",
                        "created_at",
                        "updated_at",
                        "pricing_type"
                    ]
                },
                "tables": [
                    "stg.bundles",
                    "extract.bundles"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.bundles\nselect\n    id\n\t, product_id\n\t, maximum_quantity\n\t, created_at\n\t, updated_at\n\t, pricing_type\nfrom extract.bundles\n;"
            }
        ],
        "load.stg.ps_change_plan_item_events.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.ps_change_plan_item_events.event",
                        "extract.ps_change_plan_item_events.event",
                        "stg.ps_change_plan_item_events.plan_id",
                        "extract.ps_change_plan_item_events.plan_id",
                        "stg.ps_change_plan_item_events.sku",
                        "extract.ps_change_plan_item_events.sku",
                        "stg.ps_change_plan_item_events.rails_site_processed_at",
                        "extract.ps_change_plan_item_events.rails_site_processed_at"
                    ]
                },
                "tables": [
                    "stg.ps_change_plan_item_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.ps_change_plan_item_events\nusing extract.ps_change_plan_item_events\nwhere 1=1\n  and stg.ps_change_plan_item_events.event = extract.ps_change_plan_item_events.event\n  and stg.ps_change_plan_item_events.plan_id = extract.ps_change_plan_item_events.plan_id\n  and stg.ps_change_plan_item_events.sku = extract.ps_change_plan_item_events.sku\n  and stg.ps_change_plan_item_events.rails_site_processed_at = extract.ps_change_plan_item_events.rails_site_processed_at\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ps_change_plan_item_events"
                    ],
                    "select": [
                        "event",
                        "plan_id",
                        "sku",
                        "rails_site_processed_at",
                        "quantity",
                        "old_quantity",
                        "new_quantity",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.ps_change_plan_item_events",
                    "extract.ps_change_plan_item_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.ps_change_plan_item_events\nselect\n    event::VARCHAR(255),\n    plan_id::INT,\n    sku::VARCHAR(255),\n    rails_site_processed_at::VARCHAR(255),\n    quantity::INT,\n    old_quantity::INT,\n    new_quantity::INT,\n    dsc_processed_at::TIMESTAMP\nfrom extract.ps_change_plan_item_events\nwhere 1=1\n;"
            }
        ],
        "load.stg.customer_subscriptions.sql": [
            {
                "skipped": true,
                "value": "delete from dm.stg.customer_subscriptions\nusing dm.extract.customer_subscriptions\nwhere dm.stg.customer_subscriptions.id = dm.extract.customer_subscriptions.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_subscriptions"
                    ],
                    "select": [
                        "id",
                        "subscription_id",
                        "start_date_time",
                        "end_date_time",
                        "shipping_address_id",
                        "product_quantity",
                        "created_at",
                        "updated_at",
                        "customer_id",
                        "frequency",
                        "zuora_latest_subscription_id",
                        "status",
                        "product_rate_plan_id",
                        "zuora_original_subscription_id",
                        "zuora_subscription_status",
                        "current_cycle_start_date_time",
                        "current_cycle_end_date_time",
                        "last_add_amendment_date_time",
                        "iteration_count",
                        "current_iteration_count",
                        "obfuscated_id",
                        "last_bill_date_time",
                        "next_bill_date_time",
                        "bill_cycle_reference_date_time",
                        "scheduled_for_cancellation_at_date_time",
                        "shop_id"
                    ]
                },
                "tables": [
                    "dm.stg.customer_subscriptions",
                    "dm.extract.customer_subscriptions"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into dm.stg.customer_subscriptions\nselect\n    id \n\t,subscription_id \n\t,start_date_time  \n\t,end_date_time  \n\t,shipping_address_id \n\t,product_quantity \n\t,created_at   \n\t,updated_at \n\t,customer_id \n\t,frequency \n\t,zuora_latest_subscription_id \n\t,status \n\t,product_rate_plan_id  \n\t,zuora_original_subscription_id \n\t,zuora_subscription_status \n\t,current_cycle_start_date_time \n\t,current_cycle_end_date_time \n\t,last_add_amendment_date_time   \n\t,iteration_count \n\t,current_iteration_count \n\t,obfuscated_id \n\t,last_bill_date_time \n\t,next_bill_date_time  \n\t,bill_cycle_reference_date_time   \n\t,scheduled_for_cancellation_at_date_time\n\t,shop_id \nfrom dm.extract.customer_subscriptions\n;"
            }
        ],
        "extract.plan_stream.scheduled_cart_items.sql": [],
        "extract.erp.invoiced_customer_credit_attributions.sql": [],
        "load.stg.ps_scheduled_cart_item_tiered_percentage_discounts.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.ps_scheduled_cart_item_tiered_percentage_discounts.scheduled_cart_item_id",
                        "extract.ps_scheduled_cart_item_tiered_percentage_discounts.scheduled_cart_item_id",
                        "stg.ps_scheduled_cart_item_tiered_percentage_discounts.promotion_id",
                        "extract.ps_scheduled_cart_item_tiered_percentage_discounts.promotion_id"
                    ]
                },
                "tables": [
                    "stg.ps_scheduled_cart_item_tiered_percentage_discounts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.ps_scheduled_cart_item_tiered_percentage_discounts\nusing extract.ps_scheduled_cart_item_tiered_percentage_discounts\nwhere 1=1\n  and stg.ps_scheduled_cart_item_tiered_percentage_discounts.scheduled_cart_item_id = extract.ps_scheduled_cart_item_tiered_percentage_discounts.scheduled_cart_item_id\n  and stg.ps_scheduled_cart_item_tiered_percentage_discounts.promotion_id = extract.ps_scheduled_cart_item_tiered_percentage_discounts.promotion_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ps_scheduled_cart_item_tiered_percentage_discounts"
                    ],
                    "select": [
                        "promotion_id",
                        "scheduled_cart_item_id",
                        "scheduled_cart_id",
                        "plan_id",
                        "shop_id",
                        "customer_id",
                        "scheduled_cart_created_at",
                        "scheduled_cart_updated_at",
                        "scheduled_cart_closed_at",
                        "item_quantity",
                        "item_base_unit_price",
                        "item_unit_price",
                        "item_total_discount",
                        "item_total_price",
                        "product_size",
                        "product_id",
                        "product_nature",
                        "product_sku",
                        "product_taxable",
                        "product_type",
                        "product_bundle_id",
                        "promotion_activation_id",
                        "promotion_activation_valid_at",
                        "promotion_activation_valid_until",
                        "promotion_activation_orders_count",
                        "promotion_type",
                        "promotion_name",
                        "promotion_redeemable_at",
                        "promotion_redeemable_until",
                        "promotion_requires_active_plan",
                        "promotion_erp_code",
                        "promotion_created_at",
                        "promotion_shop_id",
                        "current_tier_name",
                        "current_tier_discount_percentage",
                        "current_tier_minimum_quantity",
                        "next_tier_name",
                        "next_tier_discount_percentage",
                        "next_tier_minimum_quantity",
                        "rails_site_processed_at",
                        "removed",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.ps_scheduled_cart_item_tiered_percentage_discounts",
                    "extract.ps_scheduled_cart_item_tiered_percentage_discounts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.ps_scheduled_cart_item_tiered_percentage_discounts\nselect\n    promotion_id::INT,\n    scheduled_cart_item_id::INT,\n    scheduled_cart_id::INT,\n    plan_id::INT,\n    shop_id::INT,\n    customer_id::INT,\n    scheduled_cart_created_at::VARCHAR(255),\n    scheduled_cart_updated_at::VARCHAR(255),\n    scheduled_cart_closed_at::VARCHAR(255),\n    item_quantity::INT,\n    item_base_unit_price::VARCHAR(255),\n    item_unit_price::VARCHAR(255),\n    item_total_discount::VARCHAR(255),\n    item_total_price::VARCHAR(255),\n    product_size::VARCHAR(255),\n    product_id::INT,\n    product_nature::VARCHAR(255),\n    product_sku::VARCHAR(255),\n    product_taxable::BOOLEAN,\n    product_type::VARCHAR(255),\n    product_bundle_id::VARCHAR(255),\n    promotion_activation_id::INT,\n    promotion_activation_valid_at::VARCHAR(255),\n    promotion_activation_valid_until::VARCHAR(255),\n    promotion_activation_orders_count::INT,\n    promotion_type::VARCHAR(255),\n    promotion_name::VARCHAR(255),\n    promotion_redeemable_at::VARCHAR(255),\n    promotion_redeemable_until::VARCHAR(255),\n    promotion_requires_active_plan::VARCHAR(255),\n    promotion_erp_code::VARCHAR(255),\n    promotion_created_at::VARCHAR(255),\n    promotion_shop_id::INT,\n    current_tier_name::VARCHAR(255),\n    current_tier_discount_percentage::VARCHAR(255),\n    current_tier_minimum_quantity::VARCHAR(255),\n    next_tier_name::VARCHAR(255),\n    next_tier_discount_percentage::VARCHAR(255),\n    next_tier_minimum_quantity::INT,\n    rails_site_processed_at::VARCHAR(255),\n    removed::BOOLEAN,\n    dsc_processed_at::TIMESTAMP\nfrom extract.ps_scheduled_cart_item_tiered_percentage_discounts\nwhere 1=1\n;"
            }
        ],
        "load.stg.marketing_transactional_email_instances.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.marketing_transactional_email_instances.id",
                        "extract.marketing_transactional_email_instances.id"
                    ]
                },
                "tables": [
                    "stg.marketing_transactional_email_instances"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.marketing_transactional_email_instances\nUSING extract.marketing_transactional_email_instances\n  WHERE stg.marketing_transactional_email_instances.id = extract.marketing_transactional_email_instances.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "marketing_transactional_email_instances"
                    ],
                    "select": [
                        "id",
                        "customer_id",
                        "transactional_email_variation_id",
                        "emails_instance_id",
                        "obfuscated_id",
                        "status",
                        "created_at",
                        "updated_at",
                        "email_template_id",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.marketing_transactional_email_instances",
                    "extract.marketing_transactional_email_instances"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.marketing_transactional_email_instances\nSELECT\n       id\n     , customer_id\n     , transactional_email_variation_id\n     , emails_instance_id\n     , obfuscated_id\n     , status\n     , created_at\n     , updated_at\n     , email_template_id\n     , dsc_processed_at\nFROM extract.marketing_transactional_email_instances\n;"
            }
        ],
        "extract.derived.product_catalog.sql": [],
        "load.stg.brands.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.brands.id",
                        "extract.brands.id"
                    ]
                },
                "tables": [
                    "stg.brands"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.brands\nusing extract.brands\nwhere stg.brands.id = extract.brands.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "brands"
                    ],
                    "select": [
                        "id",
                        "name",
                        "code",
                        "created_at",
                        "updated_at",
                        "sample_maximum"
                    ]
                },
                "tables": [
                    "stg.brands",
                    "extract.brands"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.brands\nSelect    \n\tid   \n\t,name  \n\t,code \n\t,created_at   \n\t,updated_at  \n\t,sample_maximum\nfrom extract.brands\n;"
            }
        ],
        "load.stg.erp_gift_card_status_histories.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.erp_gift_card_status_histories.id",
                        "extract.erp_gift_card_status_histories.id"
                    ]
                },
                "tables": [
                    "stg.erp_gift_card_status_histories"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.erp_gift_card_status_histories\nusing extract.erp_gift_card_status_histories\nwhere stg.erp_gift_card_status_histories.id = extract.erp_gift_card_status_histories.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "erp_gift_card_status_histories"
                    ],
                    "select": [
                        "id",
                        "gift_card_id",
                        "from_status",
                        "to_status",
                        "created_at"
                    ]
                },
                "tables": [
                    "stg.erp_gift_card_status_histories",
                    "extract.erp_gift_card_status_histories"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.erp_gift_card_status_histories\nselect\n\tid \n\t,gift_card_id    \n\t,from_status \n\t,to_status \n\t,created_at::TIMESTAMP \n\t,dsc_processed_at \nfrom extract.erp_gift_card_status_histories\n;"
            }
        ],
        "load.stg.erp_customer_credit_attributions.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.erp_customer_credit_attributions.id",
                        "extract.erp_customer_credit_attributions.id"
                    ]
                },
                "tables": [
                    "stg.erp_customer_credit_attributions"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.erp_customer_credit_attributions\nusing extract.erp_customer_credit_attributions\nwhere stg.erp_customer_credit_attributions.id = extract.erp_customer_credit_attributions.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "erp_customer_credit_attributions"
                    ],
                    "select": [
                        "id",
                        "customer_id",
                        "attribution_type",
                        "reason_type",
                        "shop_name",
                        "shop_code",
                        "amount",
                        "credit_type",
                        "currency_code",
                        "created_at",
                        "source_type",
                        "debit_type",
                        "dsc_processed_at",
                        "customer_credit_id"
                    ]
                },
                "tables": [
                    "stg.erp_customer_credit_attributions",
                    "extract.erp_customer_credit_attributions"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.erp_customer_credit_attributions\nselect\n    id\n,customer_id\n,attribution_type\n,reason_type\n,shop_name\n,shop_code\n,amount\n,credit_type\n,currency_code\n,created_at\n,source_type\n,debit_type\n,dsc_processed_at\n,customer_credit_id\nfrom extract.erp_customer_credit_attributions\n;"
            }
        ],
        "load.stg.payments.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.payments.id",
                        "extract.payments.id"
                    ]
                },
                "tables": [
                    "stg.payments"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.payments\nusing extract.payments\nwhere stg.payments.id = extract.payments.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "payments"
                    ],
                    "select": [
                        "id",
                        "customer_id",
                        "invoice_id",
                        "payment_method_id",
                        "payment_gateway_id",
                        "payment_gateway_transaction_id",
                        "amount",
                        "status",
                        "created_at",
                        "updated_at",
                        "payment_gateway_response_message",
                        "payment_gateway_response_code",
                        "payment_gateway_authorization_code",
                        "avs_result",
                        "cvv_result",
                        "is_duplicate",
                        "payment_gateway_transaction_type",
                        "obfuscated_id",
                        "is_rebill",
                        "processed_at_date_time",
                        "transaction_fee",
                        "refunded_amount",
                        "status_details",
                        "raw_payment_gateway_response",
                        "is_authorization_required",
                        "is_avs_check_required",
                        "is_cvv_check_required",
                        "is_authorization_successful",
                        "is_avs_check_successful",
                        "is_cvv_check_successful",
                        "avs_type",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.payments",
                    "extract.payments"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.payments\nselect\n    id\n  , customer_id\n  , invoice_id\n  , payment_method_id\n  , payment_gateway_id\n  , payment_gateway_transaction_id\n  , amount\n  , status\n  , created_at\n  , updated_at\n  , payment_gateway_response_message\n  , payment_gateway_response_code\n  , payment_gateway_authorization_code\n  , avs_result\n  , cvv_result\n  , is_duplicate\n  , payment_gateway_transaction_type\n  , obfuscated_id\n  , is_rebill\n  , processed_at_date_time\n  , transaction_fee\n  , refunded_amount\n  , status_details\n  , raw_payment_gateway_response\n  , is_authorization_required\n  , is_avs_check_required\n  , is_cvv_check_required\n  , is_authorization_successful\n  , is_avs_check_successful\n  , is_cvv_check_successful\n  , avs_type\n  , dsc_processed_at\nfrom extract.payments\n;"
            }
        ],
        "load.stg.customer_reviews.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.customer_reviews.id",
                        "extract.customer_reviews.id"
                    ]
                },
                "tables": [
                    "stg.customer_reviews"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.customer_reviews\nusing extract.customer_reviews\nwhere stg.customer_reviews.id = extract.customer_reviews.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_reviews"
                    ],
                    "select": [
                        "id",
                        "title",
                        "review_type",
                        "bazaar_voice_question_id",
                        "is_recommended",
                        "moderation_status",
                        "author_id",
                        "value",
                        "bazaar_voice_last_modified",
                        "submission_id",
                        "product_id",
                        "user_id",
                        "user_type",
                        "created_at",
                        "updated_at",
                        "bazaar_voice_submission_time",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.customer_reviews",
                    "extract.customer_reviews"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.customer_reviews\nselect\n     id\n   , title\n   , review_type\n   , bazaar_voice_question_id\n   , is_recommended\n   , moderation_status\n   , author_id\n   , value\n   , bazaar_voice_last_modified\n   , submission_id\n   , product_id\n   , user_id\n   , user_type\n   , created_at\n   , updated_at\n   , bazaar_voice_submission_time\n   , dsc_processed_at\nfrom extract.customer_reviews\n;"
            }
        ],
        "load.stg.ps_create_and_activate_plan.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.ps_create_and_activate_plan.plan_id",
                        "extract.ps_create_and_activate_plan.plan_id"
                    ]
                },
                "tables": [
                    "stg.ps_create_and_activate_plan"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.ps_create_and_activate_plan\nusing extract.ps_create_and_activate_plan\nwhere 1=1\n  and stg.ps_create_and_activate_plan.plan_id = extract.ps_create_and_activate_plan.plan_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ps_create_and_activate_plan"
                    ],
                    "select": [
                        "plan_id",
                        "created_at"
                    ]
                },
                "tables": [
                    "stg.ps_create_and_activate_plan",
                    "extract.ps_create_and_activate_plan"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.ps_create_and_activate_plan\nselect\n     plan_id::INT    \n\t,created_at::TIMESTAMP\n\t,activated_at::TIMESTAMP\n\t,rails_site_processed_at::TIMESTAMP\n\t,original_order_id::INT \n    ,dsc_processed_at::TIMESTAMP\nfrom extract.ps_create_and_activate_plan\nwhere 1=1\n;"
            }
        ],
        "extract.dsc_prod.carts_customer_cart_extras.sql": [],
        "load.stg.coupons.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.coupons.id",
                        "extract.coupons.id"
                    ]
                },
                "tables": [
                    "stg.coupons"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.coupons\nusing extract.coupons\nwhere stg.coupons.id = extract.coupons.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "coupons"
                    ],
                    "select": [
                        "id"
                    ]
                },
                "tables": [
                    "stg.coupons",
                    "extract.coupons"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.coupons\nSelect\n\tid\n\t,type\n\t,nature\n\t,code\n\t,data\n\t,created_at\n\t,updated_at\n\t,valid_starting\n\t,valid_ending\n\t,name\n\t,description\n\t,is_recurring\n\t,coupon_template_type\n\t,coupon_template_id\n\t,modal_title\n\t,modal_subtitle\n\t,modal_body\n\t,shop_id\n\t,dsc_processed_at\nfrom extract.coupons\n;"
            }
        ],
        "extract.dsc_prod.coupon_instances.sql": [],
        "load.stg.customer_subscription_extras.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.customer_subscription_extras.id",
                        "extract.customer_subscription_extras.id"
                    ]
                },
                "tables": [
                    "stg.customer_subscription_extras"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.customer_subscription_extras\nusing extract.customer_subscription_extras\nwhere stg.customer_subscription_extras.id = extract.customer_subscription_extras.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_subscription_extras"
                    ],
                    "select": [
                        "id",
                        "extra_id",
                        "customer_subscription_id",
                        "created_at",
                        "updated_at",
                        "quantity",
                        "status",
                        "obfuscated_id",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.customer_subscription_extras",
                    "extract.customer_subscription_extras"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.customer_subscription_extras\nselect\n    id \n\t,extra_id \n\t,customer_subscription_id    \n\t,created_at \n\t,updated_at \n\t,quantity \n\t,status \n\t,obfuscated_id \n\t,dsc_processed_at \nfrom extract.customer_subscription_extras\n;"
            }
        ],
        "load.stg.erp_shipments.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.erp_shipments.id",
                        "extract.erp_shipments.id"
                    ]
                },
                "tables": [
                    "stg.erp_shipments"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.erp_shipments\nusing extract.erp_shipments\nwhere stg.erp_shipments.id = extract.erp_shipments.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "erp_shipments"
                    ],
                    "select": [
                        "id",
                        "shipping_address_id",
                        "order_id",
                        "invoice_id",
                        "customer_id",
                        "tracking_number",
                        "price",
                        "tax",
                        "created_at",
                        "updated_at",
                        "status",
                        "provider_status",
                        "provider_method",
                        "total_weight",
                        "packaging_weight",
                        "contents_weight",
                        "delivered_at",
                        "fulfillment_provider_id",
                        "fulfillment_provider_name",
                        "inventory_location_id",
                        "order_fulfillment_id",
                        "shipped_at",
                        "shipment_cost",
                        "handling_cost",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.erp_shipments",
                    "extract.erp_shipments"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.erp_shipments\nselect\n    id\n  , shipping_address_id\n  , order_id\n  , invoice_id\n  , customer_id\n  , tracking_number\n  , price\n  , tax\n  , created_at\n  , updated_at\n  , status\n  , provider_status\n  , provider_method\n  , total_weight\n  , packaging_weight\n  , contents_weight\n  , delivered_at\n  , fulfillment_provider_id\n  , fulfillment_provider_name\n  , inventory_location_id\n  , order_fulfillment_id\n  , shipped_at\n  , shipment_cost\n  , handling_cost\n  , dsc_processed_at\n  , uuid\n  , primary_shipment_uuid\nfrom extract.erp_shipments\n;"
            }
        ],
        "load.stg.erp_payments.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.erp_payments.id",
                        "extract.erp_payments.id"
                    ]
                },
                "tables": [
                    "stg.erp_payments"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.erp_payments\nusing extract.erp_payments\nwhere stg.erp_payments.id = extract.erp_payments.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "erp_payments"
                    ],
                    "select": [
                        "id",
                        "invoice_id",
                        "order_id",
                        "customer_id",
                        "amount",
                        "processed_at_date_time",
                        "refunded_amount",
                        "status",
                        "transaction_fee",
                        "payment_gateway_id",
                        "payment_gateway_name",
                        "payment_method_id",
                        "credit_card_type",
                        "payment_method_status",
                        "settlement_date",
                        "is_duplicate",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.erp_payments",
                    "extract.erp_payments"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.erp_payments\nselect\n  id\n,invoice_id\n,order_id\n,customer_id\n,amount\n,processed_at_date_time\n,refunded_amount\n,status\n,transaction_fee\n,payment_gateway_id\n,payment_gateway_name\n,payment_method_id\n,credit_card_type\n,payment_method_status\n,settlement_date\n,is_duplicate\n,dsc_processed_at\nfrom extract.erp_payments\n;"
            }
        ],
        "load.stg.customer_phone_numbers.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.customer_phone_numbers.id",
                        "extract.customer_phone_numbers.id"
                    ]
                },
                "tables": [
                    "stg.customer_phone_numbers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.customer_phone_numbers\nusing extract.customer_phone_numbers\nwhere stg.customer_phone_numbers.id = extract.customer_phone_numbers.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_phone_numbers"
                    ],
                    "select": [
                        "*"
                    ]
                },
                "tables": [
                    "stg.customer_phone_numbers",
                    "extract.customer_phone_numbers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.customer_phone_numbers\nselect\n  *\nfrom extract.customer_phone_numbers\n;"
            }
        ],
        "extract.cheetah.box_manager_topic.sql": [],
        "load.stg.cheetah_bounce_events.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.cheetah_bounce_events.pk_id",
                        "extract.cheetah_bounce_events.pk_id"
                    ]
                },
                "tables": [
                    "stg.cheetah_bounce_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.cheetah_bounce_events\nusing extract.cheetah_bounce_events\nwhere stg.cheetah_bounce_events.pk_id = extract.cheetah_bounce_events.pk_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "cheetah_bounce_events"
                    ],
                    "select": [
                        "pk_id",
                        "msg_id",
                        "bounce_time",
                        "campaign_id",
                        "campaign_name",
                        "category_id",
                        "category_name",
                        "email_address",
                        "status_id",
                        "shop_code",
                        "customer_id",
                        "created_at",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.cheetah_bounce_events",
                    "extract.cheetah_bounce_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.cheetah_bounce_events\nselect\n    pk_id\n  , msg_id\n  , bounce_time\n  , campaign_id\n  , campaign_name\n  , category_id\n  , category_name\n  , email_address\n  , status_id\n  , shop_code\n  , customer_id\n  , created_at\n  , dsc_processed_at\nfrom extract.cheetah_bounce_events\n;"
            }
        ],
        "load.stg.erp_fulfillments.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.erp_fulfillments.id",
                        "extract.erp_fulfillments.id"
                    ]
                },
                "tables": [
                    "stg.erp_fulfillments"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.erp_fulfillments\nusing extract.erp_fulfillments\nwhere stg.erp_fulfillments.id = extract.erp_fulfillments.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "erp_fulfillments"
                    ],
                    "select": [
                        "id",
                        "order_id",
                        "invoice_id",
                        "customer_id",
                        "processing_type"
                    ]
                },
                "tables": [
                    "stg.erp_fulfillments",
                    "extract.erp_fulfillments"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.erp_fulfillments\nselect\nid\n,order_id\n,invoice_id\n,customer_id\n,processing_type\n,type\n,status\n,fulfill_at\n,fulfilled_at\n,data\n,created_at\n,updated_at\n,dsc_processed_at\nfrom extract.erp_fulfillments\n;"
            }
        ],
        "load.stg.test_customers.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.test_customers.customer_id",
                        "extract.test_customers.customer_id"
                    ]
                },
                "tables": [
                    "stg.test_customers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.test_customers\nusing extract.test_customers\nwhere stg.test_customers.customer_id = extract.test_customers.customer_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "test_customers"
                    ],
                    "select": [
                        "customer_id",
                        "created_at",
                        "updated_at",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.test_customers",
                    "extract.test_customers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.test_customers\nselect\n\t  customer_id\n\t, max(created_at) as created_at\n\t, max(updated_at) as updated_at\n\t, max(dsc_processed_at) as dsc_processed_at\nfrom extract.test_customers\ngroup by\n  customer_id\n;"
            }
        ],
        "extract.erp.invoiced_customer_credits.sql": [],
        "load.stg.plan_state_histories.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.plan_state_histories.id",
                        "extract.plan_state_histories.id"
                    ]
                },
                "tables": [
                    "stg.plan_state_histories"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.plan_state_histories\nusing extract.plan_state_histories\nwhere 1=1\n  and stg.plan_state_histories.id = extract.plan_state_histories.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "plan_state_histories"
                    ],
                    "select": [
                        "id",
                        "plan_id",
                        "from_state",
                        "to_state",
                        "created_at",
                        "updated_at",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.plan_state_histories",
                    "extract.plan_state_histories"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.plan_state_histories\nselect\n        id\n     , plan_id\n     , from_state\n     , to_state\n     , created_at\n     , updated_at\n     , dsc_processed_at\nfrom extract.plan_state_histories\n;"
            }
        ],
        "extract.plan_stream.plan_cancellations.sql": [],
        "extract.erp.invoice_items.sql": [],
        "extract.dsc_prod.customer_subscription_extras.sql": [],
        "load.stg.cheetah_box_manager_topic.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.cheetah_box_manager_topic.customer_id",
                        "extract.cheetah_box_manager_topic.customer_id",
                        "stg.cheetah_box_manager_topic.shop_code",
                        "extract.cheetah_box_manager_topic.shop_code"
                    ]
                },
                "tables": [
                    "stg.cheetah_box_manager_topic"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.cheetah_box_manager_topic\nusing extract.cheetah_box_manager_topic\nwhere stg.cheetah_box_manager_topic.customer_id = extract.cheetah_box_manager_topic.customer_id\n     and stg.cheetah_box_manager_topic.shop_code = extract.cheetah_box_manager_topic.shop_code\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "cheetah_box_manager_topic"
                    ],
                    "select": [
                        "customer_id",
                        "first_name",
                        "last_name",
                        "email_address",
                        "next_box_contents",
                        "locale",
                        "subscription_status",
                        "next_bill_date",
                        "wallet_balance",
                        "shop_code",
                        "shop_name",
                        "shipping_address_line_1",
                        "shipping_address_line_2",
                        "shipping_address_city",
                        "shipping_address_state",
                        "shipping_address_zip_code",
                        "shipping_address_country",
                        "payment_method_type",
                        "payment_method_credit_card_type",
                        "payment_method_credit_card_mask_number",
                        "payment_method_credit_card_expiration_month",
                        "payment_method_credit_card_expiration_year",
                        "encoded_at"
                    ]
                },
                "tables": [
                    "stg.cheetah_box_manager_topic",
                    "extract.cheetah_box_manager_topic"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.cheetah_box_manager_topic\nselect\n       customer_id\n     , first_name\n     , last_name\n     , email_address\n     , next_box_contents\n     , locale\n     , subscription_status\n     , next_bill_date\n     , wallet_balance\n     , shop_code\n     , shop_name\n     , shipping_address_line_1\n     , shipping_address_line_2\n     , shipping_address_city\n     , shipping_address_state\n     , shipping_address_zip_code\n     , shipping_address_country\n     , payment_method_type\n     , payment_method_credit_card_type\n     , payment_method_credit_card_mask_number\n     , payment_method_credit_card_expiration_month\n     , payment_method_credit_card_expiration_year\n     , encoded_at\nfrom extract.cheetah_box_manager_topic\n;"
            }
        ],
        "extract.plan_stream.scheduled_cart_item_tiered_flat_discounts.sql": [],
        "extract.derived.fact_customer_orders.sql": [],
        "extract.experian.latest.sql": [],
        "load.stg.ps_flat_promotion_tiers.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.ps_flat_promotion_tiers.promotion_id",
                        "extract.ps_flat_promotion_tiers.promotion_id",
                        "stg.ps_flat_promotion_tiers.tier_name",
                        "extract.ps_flat_promotion_tiers.tier_name"
                    ]
                },
                "tables": [
                    "stg.ps_flat_promotion_tiers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.ps_flat_promotion_tiers\nusing extract.ps_flat_promotion_tiers\nwhere 1=1\n  and stg.ps_flat_promotion_tiers.promotion_id = extract.ps_flat_promotion_tiers.promotion_id\n  and stg.ps_flat_promotion_tiers.tier_name = extract.ps_flat_promotion_tiers.tier_name\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ps_flat_promotion_tiers"
                    ],
                    "select": [
                        "promotion_id",
                        "tier_name",
                        "promotion_name",
                        "promotion_redeemable_at",
                        "promotion_redeemable_until",
                        "promotion_requires_active_plan",
                        "promotion_erp_code",
                        "promotion_created_at",
                        "promotion_shop_id",
                        "flat_price",
                        "minimum_quantity",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.ps_flat_promotion_tiers",
                    "extract.ps_flat_promotion_tiers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.ps_flat_promotion_tiers\nselect\n    promotion_id::INT,\n    tier_name::VARCHAR(255),\n    promotion_name::VARCHAR(255),\n    promotion_redeemable_at::VARCHAR(255),\n    promotion_redeemable_until::VARCHAR(255),\n    promotion_requires_active_plan::VARCHAR(255),\n    promotion_erp_code::VARCHAR(255),\n    promotion_created_at::VARCHAR(255),\n    promotion_shop_id::INT,\n    flat_price::VARCHAR(255),\n    minimum_quantity::INT,\n    dsc_processed_at::TIMESTAMP\nfrom extract.ps_flat_promotion_tiers\nwhere 1=1\n;"
            }
        ],
        "load.stg.product_prices.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.product_prices.id",
                        "extract.product_prices.id"
                    ]
                },
                "tables": [
                    "stg.product_prices"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.product_prices\nusing extract.product_prices\nwhere stg.product_prices.id = extract.product_prices.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "product_prices"
                    ],
                    "select": [
                        "id",
                        "product_id",
                        "price",
                        "currency_id",
                        "created_at",
                        "updated_at",
                        "valid_starting",
                        "valid_ending"
                    ]
                },
                "tables": [
                    "stg.product_prices",
                    "extract.product_prices"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.product_prices\nSelect    \n\tid    \n\t,product_id    \n\t,price   \n\t,currency_id    \n\t,created_at \n\t,updated_at   \n\t,valid_starting  \n\t,valid_ending  \nfrom extract.product_prices\n;"
            }
        ],
        "extract.dsc_prod.customer_sources.sql": [],
        "extract.plan_stream.change_scheduled_cart_item_events.sql": [],
        "load.stg.facts_customers.sql": [
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "--\n-- delete from stg.facts_customers\n-- using extract.facts_customers\n-- where stg.facts_customers.id = extract.facts_customers.id\n-- ;\ninsert into stg.facts_customers\nselect\n  *\nfrom extract.facts_customers\n;"
            }
        ],
        "load.stg.customer_subscription_cancellation_reasons.sql": [
            {
                "skipped": true,
                "value": "delete from dm.stg.customer_subscription_cancellation_reasons\nusing dm.extract.customer_subscription_cancellation_reasons\nwhere dm.stg.customer_subscription_cancellation_reasons.id = dm.extract.customer_subscription_cancellation_reasons.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_subscription_cancellation_reasons"
                    ],
                    "select": [
                        "id",
                        "customer_subscription_id",
                        "reason",
                        "created_at",
                        "updated_at",
                        "survey_option_id",
                        "parent_id",
                        "admin_id"
                    ]
                },
                "tables": [
                    "stg.customer_subscription_cancellation_reasons",
                    "extract.customer_subscription_cancellation_reasons"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.customer_subscription_cancellation_reasons\nselect\n    id \n\t,customer_subscription_id    \n\t,reason \n\t,created_at  \n\t,updated_at \n\t,survey_option_id \n\t,parent_id    \n\t,admin_id \nfrom extract.customer_subscription_cancellation_reasons\n;"
            }
        ],
        "transform.dmt.d_product.sql": [
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "stg.products.id"
                    ],
                    "where": [
                        "stg.products.updated_at"
                    ]
                },
                "tables": [
                    "dm_delta",
                    "stg.products"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "CREATE TEMP TABLE dm_delta AS\nSelect p.id as id\nfrom stg.products p\nwhere p.updated_at >= '<start_date>'::timestamp\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "dmt.d_product.product_id",
                        "dm_delta.id"
                    ]
                },
                "tables": [
                    "dmt.d_product"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from dmt.d_product\nusing dm_delta\nwhere dmt.d_product.product_id = dm_delta.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "d_product"
                    ],
                    "select": [
                        "p.id",
                        "sku",
                        "name",
                        "description",
                        "primary_image",
                        "created_at",
                        "updated_at"
                    ]
                },
                "tables": [
                    "dmt.d_product"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO dmt.d_product\nSelect\n    p.id as product_id \n\t,sku \n\t,name\n\t,description  \n\t,primary_image \n\t,created_at   \n\t,updated_at  \n\t,type \n\t,nature \n\t,status\n\t,internal_description \n\t,internal_name  \n\t,secondary_image   \n\t,taxable  \n\t,brand_id\n--derived columns\n    ,CASE WHEN brand_id = 2 THEN 'Humble Twin'   \n        WHEN brand_id = 1 THEN '4x' \n        WHEN brand_id = 5 THEN 'Executive'      \n        WHEN brand_id = 8 THEN 'Big Cloud'       \n        WHEN brand_id = 6 THEN 'Boogies' \n        WHEN brand_id = 7 THEN 'Charlies' \n        WHEN brand_id = 4 THEN 'Dr. Carvers'    \n        WHEN brand_id = 9 THEN 'Wanderer' \n        WHEN brand_id = 10 THEN 'Physical Goods' \n        else 'Other' END \n        AS brand_id_name\n\n    ,CASE WHEN type in (0,1) THEN 'Razor Subs'\n       WHEN type in (2,3) THEN 'Razor Extras'\n       WHEN type in (6,10,11,17,20) THEN 'Dr. Carvers'\n       WHEN type = 9 THEN 'Charlies'\n       WHEN type = 8 THEN 'Gift Card'\n       WHEN type = 12 THEN 'Boogies'\n       WHEN type = 18 THEN 'Big Cloud'\n       WHEN type = 14 THEN 'Bundle'\n       WHEN type = 19 THEN 'Wanderer'\n       WHEN type = 22 THEN 'Traveler'\n       WHEN type = 24 and brand_id = 8 THEN 'Trial Size - Big Cloud'\n       WHEN type = 24 and brand_id = 6 THEN 'Trial Size - Boogies'\n       WHEN type = 24 and brand_id = 7 THEN 'Trial Size - Charlies'\n       WHEN type = 24 and brand_id = 4 THEN 'Trial Size - Dr. Carvers'\n       WHEN type = 24 and brand_id = 9 THEN 'Trial Size - Wanderer'       \n      else 'Other' END \n      AS class    \n      \n    ,CASE WHEN type in (0,1,2,3) THEN 'Razor'\n        WHEN type in (6,9,10,11,12,17,18,19,20,22) THEN 'Nrp'\n        WHEN type in (8,13,16,21) THEN 'Gift'\n        WHEN type in (14) THEN 'Bundle' \n        WHEN type = 24 THEN 'Minis'\n        else 'Other' END \n        AS class_type    \n        \n    , CASE\n            WHEN type in (0,1) and left(name,2) = 'Hu' THEN 'HT'   -- type in (0,1) means 'Razor Subs'\n            WHEN type in (0,1) and left(name,2) = '4X' THEN '4x'\n            WHEN type in (0,1) and left(name,2) = 'Ex' THEN 'Exec'\n            ELSE 'other' END \n            AS name_umbrella \n\n    ,CASE WHEN nature = 0 THEN 'Physical'\n        WHEN nature = 1 THEN 'Composite'\n        WHEN nature = 2 THEN 'Digital'\n        WHEN nature = 3 THEN 'Virtual'\n        WHEN nature = 4 THEN 'Process'\n        WHEN nature = 5 THEN 'Product Bundle'\n        WHEN nature = 6 THEN 'Kit'     \n        else 'unknown' END  \n        AS nature_name \n\n    ,CASE \n            WHEN left(sku,5) = 'M-4X-' THEN '4x'\n            WHEN left(sku,5) = 'MRZ-4' THEN '4x'\n            WHEN left(sku,8) = 'M-DTWIN-' THEN 'Twin'\n            WHEN left(sku,5) = 'MRZ-2' THEN 'Twin'\n            WHEN left(sku,7) = 'M-EXEC-' THEN 'Exec'\n            WHEN left(sku,5) = 'MRZ-6' THEN 'Exec'\n            ELSE sku END \n            AS razor_plan \n\n    , CASE WHEN sku = 'ESB-6Z-1' THEN 'Shave Butter 6oz' \n        WHEN sku = 'ESB-3Z-1' THEN 'Shave Butter 3oz' \n        WHEN sku = 'MPS-3Z-2' THEN 'Post Shave' \n        WHEN sku = 'OWC-40C-3' THEN 'One Wipe Charlies' \n        WHEN sku = 'OWC-40T-2' THEN 'One Wipe Charlies - Travel' \n        WHEN sku = 'MRZ-2B-2' THEN 'Twin Blade' \n        WHEN sku = 'MRZ-2H-3' THEN 'Twin Handle' \n        WHEN sku = 'MRZ-4B-2' THEN '4x Blade' \n        WHEN sku = 'MRZ-4B-1' THEN '4x Blade' \n        WHEN sku = 'MRZ-4H-2' THEN '4x Handle' \n        WHEN sku = 'MRZ-6B-3' THEN 'Exec Blade' \n        WHEN sku = 'MRZ-6H-2' THEN 'Exec Handle' \n        WHEN sku = 'MPS-SRM-2Z-1' THEN 'Repair Serum' \n        WHEN sku = 'BGEL-3Z-CURRENT' THEN 'Boogies Gel 3oz' \n        WHEN sku = 'BGEL-5Z-CURRENT' THEN 'Boogies Gel 5oz' \n        WHEN sku = 'BFIB-2Z-CURRENT' THEN 'Boogies Fiber' \n        WHEN sku = 'BCLAY-2Z-CURRENT' THEN 'Boogies Clay' \n        WHEN sku = 'BTP-3Z-CURRENT' THEN 'Boogies Paste' \n        WHEN sku = 'BCREM-3Z-CURRENT' THEN 'Boogies Cream' \n        WHEN sku = 'MPS-SAMPLE-BUNDLE' THEN 'Post Shave Sample' \n        WHEN sku = 'OWC-SAMPLE-BUNDLE' THEN 'OWC Sample' \n        WHEN sku = 'MPS-SRM-SAMPLE-BUNDLE' THEN 'Repair Serum Sample' \n        WHEN sku = 'ESB-SAMPLE-BUNDLE' THEN 'Shave Butter Sample' \n        else 'Other' END\n        AS sku_code \n\n    ,CASE \n       WHEN left(sku,5) = 'M-4X-' THEN 'MRZ-4B-X'\n       WHEN left(sku,8) = 'M-DTWIN-' THEN 'MRZ-2B-X'\n       WHEN left(sku,7) = 'M-EXEC-' THEN 'MRZ-6B-X'\n       ELSE sku END \n       AS sku_razor_clean \n\n    ,CASE WHEN status = 0 THEN 1 ELSE 0 END AS status_retention_science \n\n    ,CASE WHEN status = 0 THEN 'Active'\n          WHEN status = 1 THEN 'Pending Review'\n          WHEN status = 2 THEN 'Inactive'\n          WHEN status = 3 THEN 'Retired'\n          WHEN status = 4  THEN 'Coming Soon' \n        else 'Other' END  \n        AS status_name\n    \n    ,CASE WHEN type = 0 THEN 'Subscription'\n       WHEN type = 1 THEN 'Subscription Bundle'\n       WHEN type = 2 THEN 'Blade'\n       WHEN type = 3 THEN 'Handle'\n       WHEN type = 4 THEN 'Packaging'\n       WHEN type = 5 THEN 'Marketing'\n       WHEN type = 6 THEN 'Shave Butter'\n       WHEN type = 7 THEN 'Sample'\n       WHEN type = 8 THEN 'Gift Card'\n       WHEN type = 9 THEN 'Wipe'\n       WHEN type = 10 THEN 'Post Shave'\n       WHEN type = 11 THEN 'Serum'\n       WHEN type = 12 THEN 'Hair'\n       WHEN type = 13 THEN 'Gift Plan'\n       WHEN type = 14 THEN 'Bundle'\n       WHEN type = 15 THEN 'Gifting Overbox'\n       WHEN type = 16 THEN 'Gift Kit'\n       WHEN type = 17 THEN 'Shave Lather'\n       WHEN type = 18 THEN 'Big Cloud'\n       WHEN type = 19 THEN 'Wanderer'\n       WHEN type = 20 THEN 'Pre-Shave'\n       WHEN type = 21 THEN 'Gift Wrap'\n       WHEN type = 22 THEN 'Traveler'\n       WHEN type = 24 THEN 'Minis'\n      else 'Other' END \n      AS type_name \n\n    from dm_delta dd\n    inner join stg.products p\n    on dd.id = p.id\n;"
            }
        ],
        "load.stg.ps_plan_item_discounts.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.ps_plan_item_discounts.plan_item_id",
                        "extract.ps_plan_item_discounts.plan_item_id",
                        "stg.ps_plan_item_discounts.plan_id",
                        "extract.ps_plan_item_discounts.plan_id"
                    ]
                },
                "tables": [
                    "stg.ps_plan_item_discounts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.ps_plan_item_discounts\nusing extract.ps_plan_item_discounts\nwhere 1=1\n  and stg.ps_plan_item_discounts.plan_item_id = extract.ps_plan_item_discounts.plan_item_id\n  and stg.ps_plan_item_discounts.plan_id = extract.ps_plan_item_discounts.plan_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ps_plan_item_discounts"
                    ],
                    "select": [
                        "promotion_id",
                        "plan_item_id",
                        "plan_id",
                        "shop_id",
                        "customer_id",
                        "plan_state",
                        "plan_frequency",
                        "plan_bills_at",
                        "plan_activated_at",
                        "plan_created_at",
                        "plan_updated_at",
                        "plan_cancellation_id",
                        "item_quantity",
                        "item_base_unit_price",
                        "item_unit_price",
                        "item_total_discount",
                        "item_total_price",
                        "product_id",
                        "product_nature",
                        "product_sku",
                        "product_taxable",
                        "product_type",
                        "product_bundle_id",
                        "promotion_activation_id",
                        "promotion_activation_valid_at",
                        "promotion_activation_valid_until",
                        "promotion_activation_orders_count",
                        "promotion_type",
                        "promotion_name",
                        "promotion_redeemable_at",
                        "promotion_redeemable_until",
                        "promotion_requires_active_plan",
                        "promotion_erp_code",
                        "promotion_created_at",
                        "promotion_shop_id",
                        "current_tier_name",
                        "next_tier_name",
                        "rails_site_processed_at",
                        "removed",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.ps_plan_item_discounts",
                    "extract.ps_plan_item_discounts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.ps_plan_item_discounts\nselect\n    promotion_id::INT,\n    plan_item_id::INT,\n    plan_id::INT,\n    shop_id::INT,\n    customer_id::INT,\n    plan_state::VARCHAR(255),\n    plan_frequency::INT,\n    plan_bills_at::VARCHAR(255),\n    plan_activated_at::VARCHAR(255),\n    plan_created_at::VARCHAR(255),\n    plan_updated_at::VARCHAR(255),\n    plan_cancellation_id::INT,\n    item_quantity::INT,\n    item_base_unit_price::VARCHAR(255),\n    item_unit_price::VARCHAR(255),\n    item_total_discount::VARCHAR(255),\n    item_total_price::VARCHAR(255),\n    product_id::INT,\n    product_nature::VARCHAR(255),\n    product_sku::VARCHAR(255),\n    product_taxable::BOOLEAN,\n    product_type::VARCHAR(255),\n    product_bundle_id::VARCHAR(255),\n    promotion_activation_id::INT,\n    promotion_activation_valid_at::VARCHAR(255),\n    promotion_activation_valid_until::VARCHAR(255),\n    promotion_activation_orders_count::INT,\n    promotion_type::VARCHAR(255),\n    promotion_name::VARCHAR(255),\n    promotion_redeemable_at::VARCHAR(255),\n    promotion_redeemable_until::VARCHAR(255),\n    promotion_requires_active_plan::VARCHAR(255),\n    promotion_erp_code::VARCHAR(255),\n    promotion_created_at::VARCHAR(255),\n    promotion_shop_id::INT,\n    current_tier_name::VARCHAR(255),\n    next_tier_name::VARCHAR(255),\n    rails_site_processed_at::VARCHAR(255),\n    removed::BOOLEAN,\n    dsc_processed_at::TIMESTAMP\nfrom extract.ps_plan_item_discounts\nwhere 1=1\n;"
            }
        ],
        "extract.dsc_prod.orders.sql": [],
        "load.stg.derived_product_catalog.sql": [
            {
                "type": "DELETE",
                "columns": null,
                "tables": [
                    "stg.derived_product_catalog"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.derived_product_catalog;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "derived_product_catalog"
                    ],
                    "select": [
                        "product_id",
                        "product_code",
                        "product_code_generic",
                        "product_name",
                        "generic_name",
                        "brand",
                        "is_mini"
                    ]
                },
                "tables": [
                    "stg.derived_product_catalog",
                    "extract.derived_product_catalog"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.derived_product_catalog\nselect\n\t  product_id\n\t, product_code\n\t, product_code_generic\n\t, product_name\n\t, generic_name\n\t, brand\n\t, is_mini\nfrom extract.derived_product_catalog\n;"
            }
        ],
        "load.stg.erp_invoiced_customer_credit_attributions.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.erp_invoiced_customer_credit_attributions.id",
                        "extract.erp_invoiced_customer_credit_attributions.id"
                    ]
                },
                "tables": [
                    "stg.erp_invoiced_customer_credit_attributions"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.erp_invoiced_customer_credit_attributions\nusing extract.erp_invoiced_customer_credit_attributions\nwhere stg.erp_invoiced_customer_credit_attributions.id = extract.erp_invoiced_customer_credit_attributions.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "erp_invoiced_customer_credit_attributions"
                    ],
                    "select": [
                        "invoice_id",
                        "customer_id",
                        "order_id",
                        "attribution_type",
                        "reason_type",
                        "shop_name",
                        "shop_code",
                        "amount",
                        "credit_type",
                        "currency_code",
                        "created_at",
                        "source_type",
                        "debit_type",
                        "dsc_processed_at",
                        "id",
                        "customer_credit_id"
                    ]
                },
                "tables": [
                    "stg.erp_invoiced_customer_credit_attributions",
                    "extract.erp_invoiced_customer_credit_attributions"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.erp_invoiced_customer_credit_attributions\nselect\n    invoice_id\n,customer_id\n,order_id\n,attribution_type\n,reason_type\n,shop_name\n,shop_code\n,amount\n,credit_type\n,currency_code\n,created_at\n,source_type\n,debit_type\n,dsc_processed_at\n,id\n,customer_credit_id\nfrom extract.erp_invoiced_customer_credit_attributions\n;"
            }
        ],
        "extract.plan_stream.change_plan_item_events.sql": [],
        "extract.dsc_prod.marketing_transactional_email_instances.sql": [],
        "extract.plan_stream.plan_items.sql": [],
        "extract.dsc_prod.customer_attributes.sql": [],
        "load.stg.carts_customer_carts.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.carts_customer_carts.id",
                        "extract.carts_customer_carts.id"
                    ]
                },
                "tables": [
                    "stg.carts_customer_carts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.carts_customer_carts\nusing extract.carts_customer_carts\nwhere stg.carts_customer_carts.id = extract.carts_customer_carts.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "carts_customer_carts"
                    ],
                    "select": [
                        "id",
                        "customer_id",
                        "created_at",
                        "updated_at",
                        "shipping_address",
                        "billing_address",
                        "coupon_code",
                        "shop_id",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.carts_customer_carts",
                    "extract.carts_customer_carts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.carts_customer_carts\nselect\n\tid  \n\t,customer_id    \n\t,created_at   \n\t,updated_at  \n\t,shipping_address\n\t,billing_address\n\t,coupon_code \n\t,shop_id \n\t,dsc_processed_at\nfrom extract.carts_customer_carts\n;"
            }
        ],
        "load.stg.bundle_extras.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.bundle_extras.id",
                        "extract.bundle_extras.id"
                    ]
                },
                "tables": [
                    "stg.bundle_extras"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.bundle_extras\nusing extract.bundle_extras\nwhere stg.bundle_extras.id = extract.bundle_extras.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "bundle_extras"
                    ],
                    "select": [
                        "id",
                        "bundle_id",
                        "extra_id",
                        "quantity",
                        "created_at",
                        "updated_at",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.bundle_extras",
                    "extract.bundle_extras"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.bundle_extras\nSelect    \n\t  id\n\t, bundle_id\n\t, extra_id\n\t, quantity\n\t, created_at\n\t, updated_at\n\t, dsc_processed_at\nfrom extract.bundle_extras\n;"
            }
        ],
        "load.stg.marketing_campaign_email_opens.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.marketing_campaign_email_opens.id",
                        "extract.marketing_campaign_email_opens.id"
                    ]
                },
                "tables": [
                    "stg.marketing_campaign_email_opens"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.marketing_campaign_email_opens\nUSING extract.marketing_campaign_email_opens\n  WHERE stg.marketing_campaign_email_opens.id = extract.marketing_campaign_email_opens.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "marketing_campaign_email_opens"
                    ],
                    "select": [
                        "id",
                        "user_agent",
                        "browser",
                        "browser_version",
                        "ip_address",
                        "created_at",
                        "updated_at",
                        "campaign_email_instance_id",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.marketing_campaign_email_opens",
                    "extract.marketing_campaign_email_opens"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.marketing_campaign_email_opens\nSELECT\n        id\n      , user_agent\n      , browser\n      , browser_version\n      , ip_address\n      , created_at\n      , updated_at\n      , campaign_email_instance_id\n      , dsc_processed_at\n  FROM extract.marketing_campaign_email_opens\n;"
            }
        ],
        "extract.dsc_prod.bundle_subscriptions.sql": [],
        "load.stg.ps_change_scheduled_cart_item_events.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.ps_change_scheduled_cart_item_events.event",
                        "extract.ps_change_scheduled_cart_item_events.event",
                        "stg.ps_change_scheduled_cart_item_events.scheduled_cart_id",
                        "extract.ps_change_scheduled_cart_item_events.scheduled_cart_id",
                        "stg.ps_change_scheduled_cart_item_events.sku",
                        "extract.ps_change_scheduled_cart_item_events.sku",
                        "stg.ps_change_scheduled_cart_item_events.rails_site_processed_at",
                        "extract.ps_change_scheduled_cart_item_events.rails_site_processed_at"
                    ]
                },
                "tables": [
                    "stg.ps_change_scheduled_cart_item_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.ps_change_scheduled_cart_item_events\nusing extract.ps_change_scheduled_cart_item_events\nwhere 1=1\n  and stg.ps_change_scheduled_cart_item_events.event = extract.ps_change_scheduled_cart_item_events.event\n  and stg.ps_change_scheduled_cart_item_events.scheduled_cart_id = extract.ps_change_scheduled_cart_item_events.scheduled_cart_id\n  and stg.ps_change_scheduled_cart_item_events.sku = extract.ps_change_scheduled_cart_item_events.sku\n  and stg.ps_change_scheduled_cart_item_events.rails_site_processed_at = extract.ps_change_scheduled_cart_item_events.rails_site_processed_at\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ps_change_scheduled_cart_item_events"
                    ],
                    "select": [
                        "event",
                        "scheduled_cart_id",
                        "sku",
                        "rails_site_processed_at",
                        "quantity",
                        "old_quantity",
                        "new_quantity",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.ps_change_scheduled_cart_item_events",
                    "extract.ps_change_scheduled_cart_item_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.ps_change_scheduled_cart_item_events\nselect\n    event::VARCHAR(255),\n    scheduled_cart_id::INT,\n    sku::VARCHAR(255),\n    rails_site_processed_at::VARCHAR(255),\n    quantity::INT,\n    old_quantity::INT,\n    new_quantity::INT,\n    dsc_processed_at::TIMESTAMP\nfrom extract.ps_change_scheduled_cart_item_events\nwhere 1=1\n;"
            }
        ],
        "extract.plan_stream.scheduled_cart_item_tiered_percentage_discounts.sql": [],
        "load.stg.erp_invoices.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.erp_invoices.id",
                        "extract.erp_invoices.id"
                    ]
                },
                "tables": [
                    "stg.erp_invoices"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.erp_invoices\nusing extract.erp_invoices\nwhere stg.erp_invoices.id = extract.erp_invoices.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "erp_invoices"
                    ],
                    "select": [
                        "id",
                        "sub_total",
                        "total_shipping",
                        "profit",
                        "profit_margin",
                        "total_line_item_shipping_discount",
                        "total_discount",
                        "base_shipping_discount",
                        "base_shipping",
                        "status",
                        "total_tax",
                        "total_line_item_shipping_tax",
                        "total_line_item_shipping",
                        "base_discount",
                        "base_tax",
                        "total_shipping_discount",
                        "grand_total",
                        "total_line_item_discount",
                        "total_line_item_tax",
                        "created_at",
                        "base_shipping_tax",
                        "total_cost",
                        "total_shipping_tax",
                        "balance",
                        "customer_id",
                        "customer_created_at",
                        "test_customer",
                        "customer_type",
                        "customer_first_name",
                        "customer_last_name",
                        "customer_gender",
                        "customer_email",
                        "order_id",
                        "order_created_at",
                        "order_base_shipping_charges",
                        "order_creation_reason",
                        "order_creation_source",
                        "order_currency_code",
                        "order_discount",
                        "order_ignore_shipping_charges",
                        "order_is_on_the_house",
                        "order_shipping_charges",
                        "shop_id",
                        "order_sub_total",
                        "order_tax",
                        "order_total",
                        "order_total_shipping_charges",
                        "tax_rate_id",
                        "tax_rate_country",
                        "tax_rate_state_province",
                        "tax_rate_county",
                        "tax_rate_post_code",
                        "tax_rate",
                        "shipping_address_id",
                        "shipping_address_country",
                        "shipping_address_state_province",
                        "shipping_address_post_code",
                        "cost_calculation_completed",
                        "billing_address_id",
                        "billing_address_country",
                        "billing_address_state_province",
                        "billing_address_post_code",
                        "dsc_processed_at",
                        "order_attribution_id",
                        "order_attribution_attribution_id",
                        "order_attribution_attribution_type",
                        "order_attribution_created_at",
                        "order_attribution_updated_at"
                    ]
                },
                "tables": [
                    "stg.erp_invoices",
                    "extract.erp_invoices"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.erp_invoices\nselect\n    id\n  , sub_total\n  , total_shipping\n  , profit\n  , profit_margin\n  , total_line_item_shipping_discount\n  , total_discount\n  , base_shipping_discount\n  , base_shipping\n  , status\n  , total_tax\n  , total_line_item_shipping_tax\n  , total_line_item_shipping\n  , base_discount\n  , base_tax\n  , total_shipping_discount\n  , grand_total\n  , total_line_item_discount\n  , total_line_item_tax\n  , created_at\n  , base_shipping_tax\n  , total_cost\n  , total_shipping_tax\n  , balance\n  , customer_id\n  , customer_created_at\n  , test_customer\n  , customer_type\n  , customer_first_name\n  , customer_last_name\n  , customer_gender\n  , customer_email\n  , order_id\n  , order_created_at\n  , order_base_shipping_charges\n  , order_creation_reason\n  , order_creation_source\n  , order_currency_code\n  , order_discount\n  , order_ignore_shipping_charges\n  , order_is_on_the_house\n  , order_shipping_charges\n  , shop_id\n  , order_sub_total\n  , order_tax\n  , order_total\n  , order_total_shipping_charges\n  , tax_rate_id\n  , tax_rate_country\n  , tax_rate_state_province\n  , tax_rate_county\n  , tax_rate_post_code\n  , tax_rate\n  , shipping_address_id\n  , shipping_address_country\n  , shipping_address_state_province\n  , shipping_address_post_code\n  , cost_calculation_completed\n  , billing_address_id\n  , billing_address_country\n  , billing_address_state_province\n  , billing_address_post_code\n  , dsc_processed_at\n  , order_attribution_id\n  , order_attribution_attribution_id\n  , order_attribution_attribution_type\n  , order_attribution_created_at\n  , order_attribution_updated_at\nfrom extract.erp_invoices\n;"
            }
        ],
        "extract.derived.nrp_purchase_history.sql": [],
        "extract.erp.gifts.sql": [],
        "load.stg.invoices.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.invoices.id",
                        "extract.invoices.id"
                    ]
                },
                "tables": [
                    "stg.invoices"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.invoices\nusing extract.invoices\nwhere stg.invoices.id = extract.invoices.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "invoices"
                    ],
                    "select": [
                        "id",
                        "currency",
                        "order_id",
                        "created_at",
                        "updated_at",
                        "customer_id",
                        "shipping_address_id",
                        "billing_address_id",
                        "coupon_instance_id",
                        "base_tax",
                        "base_discount",
                        "base_shipping",
                        "base_shipping_tax",
                        "total_line_item_tax",
                        "total_line_item_discount",
                        "total_line_item_shipping",
                        "total_line_item_shipping_tax",
                        "total_tax",
                        "total_discount",
                        "total_shipping",
                        "total_shipping_tax",
                        "sub_total",
                        "grand_total",
                        "total_cost",
                        "customer_subscription_bill_run_id",
                        "obfuscated_id",
                        "balance",
                        "status",
                        "total_line_item_shipping_discount",
                        "base_shipping_discount",
                        "total_shipping_discount",
                        "profit",
                        "profit_margin",
                        "cost_calculation_completed",
                        "ignore_total_line_item_shipping",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.invoices",
                    "extract.invoices"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.invoices\nselect\n    id\n  , currency\n  , order_id\n  , created_at\n  , updated_at\n  , customer_id\n  , shipping_address_id\n  , billing_address_id\n  , coupon_instance_id\n  , base_tax\n  , base_discount\n  , base_shipping\n  , base_shipping_tax\n  , total_line_item_tax\n  , total_line_item_discount\n  , total_line_item_shipping\n  , total_line_item_shipping_tax\n  , total_tax\n  , total_discount\n  , total_shipping\n  , total_shipping_tax\n  , sub_total\n  , grand_total\n  , total_cost\n  , customer_subscription_bill_run_id\n  , obfuscated_id\n  , balance\n  , status\n  , total_line_item_shipping_discount\n  , base_shipping_discount\n  , total_shipping_discount\n  , profit\n  , profit_margin\n  , cost_calculation_completed\n  , ignore_total_line_item_shipping\n  , dsc_processed_at\nfrom extract.invoices\n;"
            }
        ],
        "extract.dsc_prod.coupons.sql": [],
        "extract.plan_stream.plan_item_discounts.sql": [],
        "extract.dsc_prod.marketing_transactional_email_opens.sql": [],
        "load.stg.nrp_purchase_history.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.nrp_purchase_history.invoice_item_id",
                        "extract.nrp_purchase_history.invoice_item_id"
                    ]
                },
                "tables": [
                    "stg.nrp_purchase_history"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.nrp_purchase_history\nusing extract.nrp_purchase_history\nwhere stg.nrp_purchase_history.invoice_item_id = extract.nrp_purchase_history.invoice_item_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "nrp_purchase_history"
                    ],
                    "select": [
                        "invoice_item_id",
                        "id",
                        "purchase_date",
                        "shipment_tenure",
                        "nrp_tenure",
                        "shipment_type",
                        "sku",
                        "product_abbreviation",
                        "generic_abbreviation",
                        "brand",
                        "quantity"
                    ]
                },
                "tables": [
                    "stg.nrp_purchase_history",
                    "extract.nrp_purchase_history"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.nrp_purchase_history\nSelect\n    invoice_item_id\n  , id\n  , purchase_date\n  , shipment_tenure\n  , nrp_tenure\n  , shipment_type\n  , sku\n  , product_abbreviation\n  , generic_abbreviation\n  , brand\n  , quantity\nfrom extract.nrp_purchase_history\n;"
            }
        ],
        "load.stg.payment_retries.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.payment_retries.id",
                        "extract.payment_retries.id"
                    ]
                },
                "tables": [
                    "stg.payment_retries"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.payment_retries\nusing extract.payment_retries\nwhere stg.payment_retries.id = extract.payment_retries.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "payment_retries"
                    ],
                    "select": [
                        "id",
                        "retry_payment_id",
                        "source_payment_id",
                        "scheduled_for_date_time",
                        "created_at",
                        "updated_at",
                        "triggered_at_date_time",
                        "status",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.payment_retries",
                    "extract.payment_retries"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.payment_retries\nselect\n    id\n  , retry_payment_id\n  , source_payment_id\n  , scheduled_for_date_time\n  , created_at\n  , updated_at\n  , triggered_at_date_time\n  , status\n  , dsc_processed_at\nfrom extract.payment_retries\n;"
            }
        ],
        "load.stg.ps_scheduled_carts.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.ps_scheduled_carts.id",
                        "extract.ps_scheduled_carts.id"
                    ]
                },
                "tables": [
                    "stg.ps_scheduled_carts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.ps_scheduled_carts\nusing extract.ps_scheduled_carts\nwhere 1=1\n  and stg.ps_scheduled_carts.id = extract.ps_scheduled_carts.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ps_scheduled_carts"
                    ],
                    "select": [
                        "id",
                        "plan_id",
                        "shop_id",
                        "customer_id",
                        "scheduled_cart_created_at",
                        "scheduled_cart_updated_at",
                        "scheduled_cart_closed_at",
                        "rails_site_processed_at",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.ps_scheduled_carts",
                    "extract.ps_scheduled_carts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.ps_scheduled_carts\nselect\n    id::INT,\n    plan_id::INT,\n    shop_id::INT,\n    customer_id::INT,\n    scheduled_cart_created_at::VARCHAR(255),\n    scheduled_cart_updated_at::VARCHAR(255),\n    scheduled_cart_closed_at::VARCHAR(255),\n    rails_site_processed_at::VARCHAR(255),\n    dsc_processed_at::TIMESTAMP\nfrom extract.ps_scheduled_carts\nwhere 1=1\n;"
            }
        ],
        "load.stg.ps_scheduled_cart_item_discounts.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.ps_scheduled_cart_item_discounts.scheduled_cart_item_id",
                        "extract.ps_scheduled_cart_item_discounts.scheduled_cart_item_id",
                        "stg.ps_scheduled_cart_item_discounts.promotion_id",
                        "extract.ps_scheduled_cart_item_discounts.promotion_id"
                    ]
                },
                "tables": [
                    "stg.ps_scheduled_cart_item_discounts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.ps_scheduled_cart_item_discounts\nusing extract.ps_scheduled_cart_item_discounts\nwhere 1=1\n  and stg.ps_scheduled_cart_item_discounts.scheduled_cart_item_id = extract.ps_scheduled_cart_item_discounts.scheduled_cart_item_id\n  and stg.ps_scheduled_cart_item_discounts.promotion_id = extract.ps_scheduled_cart_item_discounts.promotion_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ps_scheduled_cart_item_discounts"
                    ],
                    "select": [
                        "promotion_id",
                        "scheduled_cart_item_id",
                        "scheduled_cart_id",
                        "plan_id",
                        "shop_id",
                        "customer_id",
                        "scheduled_cart_created_at",
                        "scheduled_cart_updated_at",
                        "scheduled_cart_closed_at",
                        "item_quantity",
                        "item_base_unit_price",
                        "item_unit_price",
                        "item_total_discount",
                        "item_total_price",
                        "product_size",
                        "product_id",
                        "product_nature",
                        "product_sku",
                        "product_taxable",
                        "product_type",
                        "product_bundle_id",
                        "promotion_activation_id",
                        "promotion_activation_valid_at",
                        "promotion_activation_valid_until",
                        "promotion_activation_orders_count",
                        "promotion_type",
                        "promotion_name",
                        "promotion_redeemable_at",
                        "promotion_redeemable_until",
                        "promotion_requires_active_plan",
                        "promotion_erp_code",
                        "promotion_created_at",
                        "promotion_shop_id",
                        "current_tier_name",
                        "next_tier_name",
                        "rails_site_processed_at",
                        "removed",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.ps_scheduled_cart_item_discounts",
                    "extract.ps_scheduled_cart_item_discounts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.ps_scheduled_cart_item_discounts\nselect\n    promotion_id::INT,\n    scheduled_cart_item_id::INT,\n    scheduled_cart_id::INT,\n    plan_id::INT,\n    shop_id::INT,\n    customer_id::INT,\n    scheduled_cart_created_at::VARCHAR(255),\n    scheduled_cart_updated_at::VARCHAR(255),\n    scheduled_cart_closed_at::VARCHAR(255),\n    item_quantity::INT,\n    item_base_unit_price::VARCHAR(255),\n    item_unit_price::VARCHAR(255),\n    item_total_discount::VARCHAR(255),\n    item_total_price::VARCHAR(255),\n    product_size::VARCHAR(255),\n    product_id::INT,\n    product_nature::VARCHAR(255),\n    product_sku::VARCHAR(255),\n    product_taxable::BOOLEAN,\n    product_type::VARCHAR(255),\n    product_bundle_id::VARCHAR(255),\n    promotion_activation_id::INT,\n    promotion_activation_valid_at::VARCHAR(255),\n    promotion_activation_valid_until::VARCHAR(255),\n    promotion_activation_orders_count::INT,\n    promotion_type::VARCHAR(255),\n    promotion_name::VARCHAR(255),\n    promotion_redeemable_at::VARCHAR(255),\n    promotion_redeemable_until::VARCHAR(255),\n    promotion_requires_active_plan::VARCHAR(255),\n    promotion_erp_code::VARCHAR(255),\n    promotion_created_at::VARCHAR(255),\n    promotion_shop_id::INT,\n    current_tier_name::VARCHAR(255),\n    next_tier_name::VARCHAR(255),\n    rails_site_processed_at::VARCHAR(255),\n    removed::BOOLEAN,\n    dsc_processed_at::TIMESTAMP\nfrom extract.ps_scheduled_cart_item_discounts\nwhere 1=1\n;"
            }
        ],
        "load.stg.extras.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.extras.id",
                        "extract.extras.id"
                    ]
                },
                "tables": [
                    "stg.extras"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.extras\nusing extract.extras\nwhere stg.extras.id = extract.extras.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "extras"
                    ],
                    "select": [
                        "id",
                        "product_id",
                        "created_at",
                        "updated_at",
                        "maximum_quantity",
                        "extrascol",
                        "delivery_option",
                        "user_accessible"
                    ]
                },
                "tables": [
                    "stg.extras",
                    "extract.extras"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.extras\nSelect    \n\tid    \n\t,product_id    \n\t,created_at    \n\t,updated_at   \n\t,maximum_quantity    \n\t,extrascol  \n\t,delivery_option \n\t,user_accessible \nfrom extract.extras\n;"
            }
        ],
        "extract.plan_stream.plan_item_tiered_flat_discounts.sql": [],
        "load.stg.products.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.products.id",
                        "extract.products.id"
                    ]
                },
                "tables": [
                    "stg.products"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.products\nusing extract.products\nwhere stg.products.id = extract.products.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "products"
                    ],
                    "select": [
                        "id",
                        "sku",
                        "name",
                        "description",
                        "primary_image",
                        "created_at",
                        "updated_at"
                    ]
                },
                "tables": [
                    "stg.products",
                    "extract.products"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.products\nselect\n    id  \n\t,sku \n\t,name  \n\t,description  \n\t,primary_image \n\t,created_at   \n\t,updated_at  \n\t,type \n\t,nature \n\t,status\n\t,internal_description \n\t,internal_name  \n\t,secondary_image   \n\t,taxable  \n\t,brand_id\nfrom extract.products\n;"
            }
        ],
        "load.stg.addresses.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.addresses.id",
                        "extract.addresses.id"
                    ]
                },
                "tables": [
                    "stg.addresses"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.addresses\nusing extract.addresses\nwhere stg.addresses.id = extract.addresses.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "addresses"
                    ],
                    "select": [
                        "id",
                        "address_line_1",
                        "address_line_2",
                        "city",
                        "state",
                        "country_id",
                        "zip_code",
                        "created_at",
                        "updated_at",
                        "customer_id",
                        "first_name",
                        "last_name",
                        "obfuscated_id",
                        "shop_id",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.addresses",
                    "extract.addresses"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.addresses\nselect\n    id\n  , address_line_1\n  , address_line_2\n  , city\n  , state\n  , country_id\n  , zip_code\n  , created_at\n  , updated_at\n  , customer_id\n  , first_name\n  , last_name\n  , obfuscated_id\n  , shop_id\n  , dsc_processed_at\nfrom extract.addresses\n;"
            }
        ],
        "load.stg.survey_options.sql": [
            {
                "skipped": true,
                "value": "delete from dm.stg.survey_options\nusing dm.extract.survey_options\nwhere dm.stg.survey_options.id = dm.extract.survey_options.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "survey_options"
                    ],
                    "select": [
                        "id",
                        "target",
                        "message",
                        "created_at",
                        "updated_at",
                        "is_custom",
                        "code"
                    ]
                },
                "tables": [
                    "dm.stg.survey_options",
                    "dm.extract.survey_options"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into dm.stg.survey_options\nselect\n    id \n\t,target    \n\t,message   \n\t,created_at  \n\t,updated_at  \n\t,is_custom \n\t,code \n\t,ordinality \n\t,is_internal\n\t,parent_id  \n\t,placeholder \nfrom dm.extract.survey_options\n;"
            }
        ],
        "extract.plan_stream.change_plan_attribute_events.sql": [],
        "extract.plan_stream.create_and_activate_plan.sql": [],
        "load.stg.invoice_item_discounts.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.erp_invoice_item_discounts.id",
                        "extract.erp_invoice_item_discounts.id"
                    ]
                },
                "tables": [
                    "stg.erp_invoice_item_discounts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.erp_invoice_item_discounts\nusing extract.erp_invoice_item_discounts\nwhere stg.erp_invoice_item_discounts.id = extract.erp_invoice_item_discounts.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "erp_invoice_item_discounts"
                    ],
                    "select": [
                        "id",
                        "invoice_item_id",
                        "promotion_id",
                        "promotion_activation_id",
                        "unit_discount",
                        "total_discount",
                        "quantity_discounted",
                        "erp_code",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.erp_invoice_item_discounts",
                    "extract.erp_invoice_item_discounts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.erp_invoice_item_discounts\nselect\n    id::bigint\n  , invoice_item_id::INTEGER\n  , promotion_id::INTEGER\n  , promotion_activation_id::INTEGER\n  , unit_discount::numeric(37,15)\n  , total_discount::numeric(37,15)\n  , quantity_discounted::INTEGER\n  , erp_code::VARCHAR(64)\n  , dsc_processed_at::TIMESTAMP\nfrom extract.erp_invoice_item_discounts\n;"
            }
        ],
        "load.stg.ps_plan_item_tiered_flat_discounts.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.ps_plan_item_tiered_flat_discounts.plan_item_id",
                        "extract.ps_plan_item_tiered_flat_discounts.plan_item_id",
                        "stg.ps_plan_item_tiered_flat_discounts.promotion_id",
                        "extract.ps_plan_item_tiered_flat_discounts.promotion_id"
                    ]
                },
                "tables": [
                    "stg.ps_plan_item_tiered_flat_discounts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.ps_plan_item_tiered_flat_discounts\nusing extract.ps_plan_item_tiered_flat_discounts\nwhere 1=1\n  and stg.ps_plan_item_tiered_flat_discounts.plan_item_id = extract.ps_plan_item_tiered_flat_discounts.plan_item_id\n  and stg.ps_plan_item_tiered_flat_discounts.promotion_id = extract.ps_plan_item_tiered_flat_discounts.promotion_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ps_plan_item_tiered_flat_discounts"
                    ],
                    "select": [
                        "promotion_id",
                        "plan_item_id",
                        "plan_id",
                        "shop_id",
                        "customer_id",
                        "plan_state",
                        "plan_frequency",
                        "plan_bills_at",
                        "plan_activated_at",
                        "plan_created_at",
                        "plan_updated_at",
                        "plan_cancellation_id",
                        "item_quantity",
                        "item_base_unit_price",
                        "item_unit_price",
                        "item_total_discount",
                        "item_total_price",
                        "product_id",
                        "product_nature",
                        "product_sku",
                        "product_taxable",
                        "product_type",
                        "product_bundle_id",
                        "promotion_activation_id",
                        "promotion_activation_valid_at",
                        "promotion_activation_valid_until",
                        "promotion_activation_orders_count",
                        "promotion_type",
                        "promotion_name",
                        "promotion_redeemable_at",
                        "promotion_redeemable_until",
                        "promotion_requires_active_plan",
                        "promotion_erp_code",
                        "promotion_created_at",
                        "promotion_shop_id",
                        "current_tier_name",
                        "current_tier_flat_price",
                        "current_tier_minimum_quantity",
                        "next_tier_name",
                        "next_tier_flat_price",
                        "next_tier_minimum_quantity",
                        "rails_site_processed_at",
                        "removed",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.ps_plan_item_tiered_flat_discounts",
                    "extract.ps_plan_item_tiered_flat_discounts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.ps_plan_item_tiered_flat_discounts\nselect\n    promotion_id::INT,\n    plan_item_id::INT,\n    plan_id::INT,\n    shop_id::INT,\n    customer_id::INT,\n    plan_state::VARCHAR(255),\n    plan_frequency::INT,\n    plan_bills_at::VARCHAR(255),\n    plan_activated_at::VARCHAR(255),\n    plan_created_at::VARCHAR(255),\n    plan_updated_at::VARCHAR(255),\n    plan_cancellation_id::INT,\n    item_quantity::INT,\n    item_base_unit_price::VARCHAR(255),\n    item_unit_price::VARCHAR(255),\n    item_total_discount::VARCHAR(255),\n    item_total_price::VARCHAR(255),\n    product_id::INT,\n    product_nature::VARCHAR(255),\n    product_sku::VARCHAR(255),\n    product_taxable::BOOLEAN,\n    product_type::VARCHAR(255),\n    product_bundle_id::VARCHAR(255),\n    promotion_activation_id::INT,\n    promotion_activation_valid_at::VARCHAR(255),\n    promotion_activation_valid_until::VARCHAR(255),\n    promotion_activation_orders_count::INT,\n    promotion_type::VARCHAR(255),\n    promotion_name::VARCHAR(255),\n    promotion_redeemable_at::VARCHAR(255),\n    promotion_redeemable_until::VARCHAR(255),\n    promotion_requires_active_plan::VARCHAR(255),\n    promotion_erp_code::VARCHAR(255),\n    promotion_created_at::VARCHAR(255),\n    promotion_shop_id::INT,\n    current_tier_name::VARCHAR(255),\n    current_tier_flat_price::VARCHAR(255),\n    current_tier_minimum_quantity::VARCHAR(255),\n    next_tier_name::VARCHAR(255),\n    next_tier_flat_price::VARCHAR(255),\n    next_tier_minimum_quantity::INT,\n    rails_site_processed_at::VARCHAR(255),\n    removed::BOOLEAN,\n    dsc_processed_at::TIMESTAMP\nfrom extract.ps_plan_item_tiered_flat_discounts\nwhere 1=1\n;"
            }
        ],
        "extract.dsc_prod.carts_customer_cart_bundles.sql": [],
        "load.stg.customers.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.customers.id",
                        "extract.customers.id"
                    ]
                },
                "tables": [
                    "stg.customers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.customers\nusing extract.customers\nwhere stg.customers.id = extract.customers.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customers"
                    ],
                    "select": [
                        "*"
                    ]
                },
                "tables": [
                    "stg.customers",
                    "extract.customers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.customers\nselect\n  *\nfrom extract.customers\n;"
            }
        ],
        "extract.dsc_prod.bundles.sql": [],
        "load.stg.ps_plan_items.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.ps_plan_items.id",
                        "extract.ps_plan_items.id",
                        "stg.ps_plan_items.plan_id",
                        "extract.ps_plan_items.plan_id"
                    ]
                },
                "tables": [
                    "stg.ps_plan_items"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.ps_plan_items\nusing extract.ps_plan_items\nwhere 1=1\n  and stg.ps_plan_items.id = extract.ps_plan_items.id\n  and stg.ps_plan_items.plan_id = extract.ps_plan_items.plan_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ps_plan_items"
                    ],
                    "select": [
                        "id",
                        "plan_id",
                        "shop_id",
                        "customer_id",
                        "plan_state",
                        "plan_frequency",
                        "plan_bills_at"
                    ]
                },
                "tables": [
                    "stg.ps_plan_items",
                    "extract.ps_plan_items"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.ps_plan_items\nselect\n    id::INT,\n    plan_id::INT,\n    shop_id::INT,\n    customer_id::INT,\n    plan_state::VARCHAR(255),\n    plan_frequency::INT,\n    plan_bills_at::TIMESTAMP,\n    plan_activated_at::TIMESTAMP,\n    plan_created_at::TIMESTAMP,\n    plan_updated_at::TIMESTAMP,\n    plan_cancellation_id::INT,\n    quantity::INT,\n    base_unit_price::VARCHAR(255),\n    unit_price::VARCHAR(255),\n    total_discount::VARCHAR(255),\n    total_price::VARCHAR(255),\n    product_id::INT,\n    product_nature::VARCHAR(255),\n    product_sku::VARCHAR(255),\n    product_taxable::BOOLEAN,\n    product_type::VARCHAR(255),\n    product_bundle_id::VARCHAR(255),\n    rails_site_processed_at::TIMESTAMP,\n    (case when deleted_at is not null then 'true' else removed end)::BOOLEAN,\n    dsc_processed_at::TIMESTAMP,\n    snooze_until::TIMESTAMP,\n    deleted_at :: TIMESTAMP\nfrom extract.ps_plan_items\nwhere 1=1\n;"
            }
        ],
        "load.stg.derived_fact_customers.sql": [
            {
                "type": "DELETE",
                "columns": null,
                "tables": [
                    "stg.derived_fact_customers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.derived_fact_customers;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "derived_fact_customers"
                    ],
                    "select": [
                        "customer_id",
                        "email",
                        "wallet_balance",
                        "provider",
                        "customer_subscription_id",
                        "subscription_id",
                        "frequency",
                        "initial_start_date",
                        "start_date_time",
                        "end_date_time",
                        "status",
                        "sign_in_count",
                        "iteration_count",
                        "current_iteration_count",
                        "mobile_singup",
                        "shop_id",
                        "state",
                        "utm_source",
                        "utm_medium",
                        "utm_campaign",
                        "utm_content",
                        "mobile_last_login",
                        "klout_score",
                        "referred_by",
                        "members_referred",
                        "admin_credits",
                        "gc_credits",
                        "mails_sent",
                        "mails_opened",
                        "mails_clicked",
                        "mails_open_rate",
                        "mails_click_rate",
                        "last_interaction",
                        "age",
                        "income",
                        "gender",
                        "marital_status",
                        "mosaic",
                        "education",
                        "cc_signup_type",
                        "cc_signup_card_type",
                        "tickets_opened",
                        "ticket_first_date",
                        "surveyed",
                        "surveyed_date",
                        "original_subscription_id",
                        "first_freq_switch",
                        "first_suspend_date",
                        "first_pause_date",
                        "ios_first_date",
                        "ios_signup",
                        "ios_cart_adds",
                        "android_first_date",
                        "android_signup",
                        "android_cart_adds",
                        "gift_card",
                        "gift_bundle",
                        "acquisition_bundle",
                        "mkt_unsubscribe",
                        "free_month_trial",
                        "whale_status",
                        "pauses",
                        "paused_months",
                        "initial_signup_credit_card_type",
                        "delighted_score",
                        "zuora_declines",
                        "cc_hard_declines",
                        "cc_soft_declines",
                        "tickets_issue_opened",
                        "account_actions",
                        "store_path_sub"
                    ]
                },
                "tables": [
                    "stg.derived_fact_customers",
                    "extract.derived_fact_customers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.derived_fact_customers\nselect\n    customer_id\n  , email\n  , wallet_balance\n  , provider\n  , customer_subscription_id\n  , subscription_id\n  , frequency\n  , initial_start_date\n  , start_date_time\n  , end_date_time\n  , status\n  , sign_in_count\n  , iteration_count\n  , current_iteration_count\n  , mobile_singup\n  , shop_id\n  , state\n  , utm_source\n  , utm_medium\n  , utm_campaign\n  , utm_content\n  , mobile_last_login\n  , klout_score\n  , referred_by\n  , members_referred\n  , admin_credits\n  , gc_credits\n  , mails_sent\n  , mails_opened\n  , mails_clicked\n  , mails_open_rate\n  , mails_click_rate\n  , last_interaction\n  , age\n  , income\n  , gender\n  , marital_status\n  , mosaic\n  , education\n  , cc_signup_type\n  , cc_signup_card_type\n  , tickets_opened\n  , ticket_first_date\n  , surveyed\n  , surveyed_date\n  , original_subscription_id\n  , first_freq_switch\n  , first_suspend_date\n  , first_pause_date\n  , ios_first_date\n  , ios_signup\n  , ios_cart_adds\n  , android_first_date\n  , android_signup\n  , android_cart_adds\n  , gift_card\n  , gift_bundle\n  , acquisition_bundle\n  , mkt_unsubscribe\n  , free_month_trial\n  , whale_status\n  , pauses\n  , paused_months\n  , initial_signup_credit_card_type\n  , delighted_score\n  , zuora_declines\n  , cc_hard_declines\n  , cc_soft_declines\n  , tickets_issue_opened\n  , account_actions\n  , store_path_sub\nfrom extract.derived_fact_customers\n;"
            }
        ],
        "load.stg.marketing_transactional_email_opens.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.marketing_transactional_email_opens.id",
                        "extract.marketing_transactional_email_opens.id"
                    ]
                },
                "tables": [
                    "stg.marketing_transactional_email_opens"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.marketing_transactional_email_opens\nUSING extract.marketing_transactional_email_opens\n  WHERE stg.marketing_transactional_email_opens.id = extract.marketing_transactional_email_opens.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "marketing_transactional_email_opens"
                    ],
                    "select": [
                        "id",
                        "transactional_email_instance_id",
                        "user_agent",
                        "browser",
                        "browser_version",
                        "ip_address",
                        "created_at",
                        "updated_at",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.marketing_transactional_email_opens",
                    "extract.marketing_transactional_email_opens"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.marketing_transactional_email_opens\n  SELECT\n       id\n     , transactional_email_instance_id\n     , user_agent\n     , browser\n     , browser_version\n     , ip_address\n     , created_at\n     , updated_at\n     , dsc_processed_at\n  FROM extract.marketing_transactional_email_opens\n;"
            }
        ],
        "load.stg.facts_customer_orders.sql": [
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "--\n-- delete from stg.facts_customers\n-- using extract.facts_customers\n-- where stg.facts_customers.id = extract.facts_customers.id\n-- ;\ninsert into stg.facts_customer_orders\nselect\n  *\nfrom extract.facts_customer_orders\n;"
            }
        ],
        "extract.plan_stream.plans.sql": [],
        "extract.dsc_prod.bundle_extras.sql": [],
        "load.stg.erp_invoiced_customer_credits.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.erp_invoiced_customer_credits.id",
                        "extract.erp_invoiced_customer_credits.id"
                    ]
                },
                "tables": [
                    "stg.erp_invoiced_customer_credits"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.erp_invoiced_customer_credits\nusing extract.erp_invoiced_customer_credits\nwhere stg.erp_invoiced_customer_credits.id = extract.erp_invoiced_customer_credits.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "erp_invoiced_customer_credits"
                    ],
                    "select": [
                        "invoice_id",
                        "customer_id",
                        "order_id",
                        "shop_name",
                        "shop_code",
                        "amount",
                        "credit_type",
                        "currency_code",
                        "created_at",
                        "source_type",
                        "debit_type",
                        "dsc_processed_at",
                        "id"
                    ]
                },
                "tables": [
                    "stg.erp_invoiced_customer_credits",
                    "extract.erp_invoiced_customer_credits"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.erp_invoiced_customer_credits\nselect\n  invoice_id\n,customer_id\n,order_id\n,shop_name\n,shop_code\n,amount\n,credit_type\n,currency_code\n,created_at\n,source_type\n,debit_type\n,dsc_processed_at\n,id\nfrom extract.erp_invoiced_customer_credits\n;"
            }
        ],
        "load.stg.ps_change_plan_attribute_events.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.ps_change_plan_attribute_events.event",
                        "extract.ps_change_plan_attribute_events.event",
                        "stg.ps_change_plan_attribute_events.plan_id",
                        "extract.ps_change_plan_attribute_events.plan_id",
                        "stg.ps_change_plan_attribute_events.rails_site_processed_at",
                        "extract.ps_change_plan_attribute_events.rails_site_processed_at"
                    ]
                },
                "tables": [
                    "stg.ps_change_plan_attribute_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.ps_change_plan_attribute_events\nusing extract.ps_change_plan_attribute_events\nwhere 1=1\n  and stg.ps_change_plan_attribute_events.event = extract.ps_change_plan_attribute_events.event\n  and stg.ps_change_plan_attribute_events.plan_id = extract.ps_change_plan_attribute_events.plan_id\n  and stg.ps_change_plan_attribute_events.rails_site_processed_at = extract.ps_change_plan_attribute_events.rails_site_processed_at\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ps_change_plan_attribute_events"
                    ],
                    "select": [
                        "event",
                        "plan_id",
                        "rails_site_processed_at",
                        "old_bill_date",
                        "new_bill_date",
                        "old_frequency",
                        "new_frequency",
                        "created_at",
                        "activated_at",
                        "ended_at",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.ps_change_plan_attribute_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.ps_change_plan_attribute_events\nselect\n    event::VARCHAR(255),\n    plan_id::INT,\n    rails_site_processed_at::VARCHAR(255),\n    old_bill_date::VARCHAR(255),\n    new_bill_date::VARCHAR(255),\n    old_frequency::INT,\n    new_frequency::INT,\n    created_at::VARCHAR(255),\n    activated_at::VARCHAR(255),\n    ended_at::VARCHAR(255),\n    dsc_processed_at::TIMESTAMP,\n    initiated_by::VARCHAR(255) ------ new field 04-11\nfrom extract.ps_change_plan_attribute_events\nwhere 1=1\n;"
            }
        ],
        "load.stg.carts_customer_cart_bundles.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.carts_customer_cart_bundles.id",
                        "extract.carts_customer_cart_bundles.id"
                    ]
                },
                "tables": [
                    "stg.carts_customer_cart_bundles"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.carts_customer_cart_bundles\nusing extract.carts_customer_cart_bundles\nwhere stg.carts_customer_cart_bundles.id = extract.carts_customer_cart_bundles.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "carts_customer_cart_bundles"
                    ],
                    "select": [
                        "id",
                        "customer_cart_id",
                        "status",
                        "bundle_id",
                        "quantity",
                        "obfuscated_id",
                        "created_at",
                        "updated_at"
                    ]
                },
                "tables": [
                    "stg.carts_customer_cart_bundles",
                    "extract.carts_customer_cart_bundles"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.carts_customer_cart_bundles\nselect\n\tid \n\t,customer_cart_id    \n\t,status  \n\t,bundle_id    \n\t,quantity    \n\t,obfuscated_id   \n\t,created_at   \n\t,updated_at  \n\t,source    \n\t,dsc_processed_at\nfrom extract.carts_customer_cart_bundles\n;"
            }
        ],
        "load.stg.erp_gifts.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.erp_gifts.id",
                        "extract.erp_gifts.id"
                    ]
                },
                "tables": [
                    "stg.erp_gifts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.erp_gifts\nusing extract.erp_gifts\nwhere stg.erp_gifts.id = extract.erp_gifts.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "erp_gifts"
                    ],
                    "select": [
                        "id",
                        "invoice_id",
                        "order_id",
                        "amount",
                        "balance",
                        "gifter_customer_id",
                        "recipient_customer_id",
                        "purchased_bundle_product_id",
                        "purchased_bundle_product_sku",
                        "gift_wrap_product_id",
                        "gift_wrap_product_sku",
                        "first_email_delivery_date_time",
                        "created_at",
                        "dsc_processed_at",
                        "message",
                        "shipping_address_id",
                        "recipient_subscription_id",
                        "recipient_subscription_type_id",
                        "recipient_subscription_product_id",
                        "recipient_subscription_product_sku",
                        "recipient_subscription_bundle_id",
                        "first_shipping_address_id"
                    ]
                },
                "tables": [
                    "stg.erp_gifts",
                    "extract.erp_gifts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.erp_gifts\nselect\n      id\n    ,invoice_id\n    ,order_id\n    ,amount\n    ,balance\n    ,gifter_customer_id\n    ,recipient_customer_id\n    ,purchased_bundle_product_id\n    ,purchased_bundle_product_sku\n    ,gift_wrap_product_id\n    ,gift_wrap_product_sku\n    ,first_email_delivery_date_time\n    ,created_at\n    ,dsc_processed_at\n    ,message \n\t  ,shipping_address_id \n\t  ,recipient_subscription_id \n\t  ,recipient_subscription_type_id \n\t  ,recipient_subscription_product_id \n\t  ,recipient_subscription_product_sku \n\t  ,recipient_subscription_bundle_id \n\t  ,first_shipping_address_id \nfrom extract.erp_gifts\n;"
            }
        ],
        "load.stg.erp_invoice_items.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.erp_invoice_items.id",
                        "extract.erp_invoice_items.id"
                    ]
                },
                "tables": [
                    "stg.erp_invoice_items"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.erp_invoice_items\nusing extract.erp_invoice_items\nwhere stg.erp_invoice_items.id = extract.erp_invoice_items.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "erp_invoice_items"
                    ],
                    "select": [
                        "id",
                        "invoice_id",
                        "customer_id",
                        "order_id",
                        "order_product_id",
                        "coupon_instance_id",
                        "effective_unit_price",
                        "price",
                        "quantity",
                        "shipping",
                        "shipping_discount",
                        "shipping_tax",
                        "tax",
                        "total_cost",
                        "unit_cost",
                        "discount",
                        "unit_price",
                        "product_id",
                        "product_sku",
                        "bundle_breakdown_id",
                        "discount_distribution",
                        "price_contribution",
                        "shipping_contribution",
                        "shipping_discount_distribution",
                        "top_level_invoice_item_id",
                        "top_level_invoice_item_sku",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.erp_invoice_items",
                    "extract.erp_invoice_items"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.erp_invoice_items\nselect\n    id\n  , invoice_id\n  , customer_id\n  , order_id\n  , order_product_id\n  , coupon_instance_id\n  , effective_unit_price\n  , price\n  , quantity\n  , shipping\n  , shipping_discount\n  , shipping_tax\n  , tax\n  , total_cost\n  , unit_cost\n  , discount\n  , unit_price\n  , product_id\n  , product_sku\n  , bundle_breakdown_id\n  , discount_distribution\n  , price_contribution\n  , shipping_contribution\n  , shipping_discount_distribution\n  , top_level_invoice_item_id\n  , top_level_invoice_item_sku\n  , dsc_processed_at\nfrom extract.erp_invoice_items\n;"
            }
        ],
        "load.stg.erp_refunds.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.erp_refunds.id",
                        "extract.erp_refunds.id"
                    ]
                },
                "tables": [
                    "stg.erp_refunds"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.erp_refunds\nusing extract.erp_refunds\nwhere stg.erp_refunds.id = extract.erp_refunds.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "erp_refunds"
                    ],
                    "select": [
                        "id",
                        "shop_code",
                        "shop_id",
                        "status",
                        "amount",
                        "processed_at_date_time"
                    ]
                },
                "tables": [
                    "stg.erp_refunds",
                    "extract.erp_refunds"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.erp_refunds\nselect\n      id::INTEGER\n    , shop_code::VARCHAR(31)\n    , shop_id::INTEGER\n    , status::VARCHAR(64)\n    , amount::numeric(37,15)\n    , processed_at_date_time::TIMESTAMP\n    , type::VARCHAR(64)\n    , payment_id::INTEGER\n    , payment_status::VARCHAR(64)\n    , payment_method::VARCHAR(255)\n    , payment_gateway::VARCHAR(255)\n    , payment_settlement_date::TIMESTAMP\n    , payment_amount::numeric(37,15)\n    , payment_is_duplicate::BOOLEAN\n    , payment_transaction_fee::numeric(37,15)\n    , payment_processed_at_date_time::TIMESTAMP\n     ,dsc_processed_at::TIMESTAMP\nfrom extract.erp_refunds\n;"
            }
        ],
        "load.stg.ps_percentage_promotion_tiers.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.ps_percentage_promotion_tiers.promotion_id",
                        "extract.ps_percentage_promotion_tiers.promotion_id",
                        "stg.ps_percentage_promotion_tiers.tier_name",
                        "extract.ps_percentage_promotion_tiers.tier_name"
                    ]
                },
                "tables": [
                    "stg.ps_percentage_promotion_tiers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.ps_percentage_promotion_tiers\nusing extract.ps_percentage_promotion_tiers\nwhere 1=1\n  and stg.ps_percentage_promotion_tiers.promotion_id = extract.ps_percentage_promotion_tiers.promotion_id\n  and stg.ps_percentage_promotion_tiers.tier_name = extract.ps_percentage_promotion_tiers.tier_name\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ps_percentage_promotion_tiers"
                    ],
                    "select": [
                        "promotion_id",
                        "tier_name",
                        "promotion_name",
                        "promotion_redeemable_at",
                        "promotion_redeemable_until",
                        "promotion_requires_active_plan",
                        "promotion_erp_code",
                        "promotion_created_at",
                        "promotion_shop_id",
                        "discount_percentage",
                        "minimum_quantity",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.ps_percentage_promotion_tiers",
                    "extract.ps_percentage_promotion_tiers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.ps_percentage_promotion_tiers\nselect\n    promotion_id::INT,\n    tier_name::VARCHAR(255),\n    promotion_name::VARCHAR(255),\n    promotion_redeemable_at::VARCHAR(255),\n    promotion_redeemable_until::VARCHAR(255),\n    promotion_requires_active_plan::VARCHAR(255),\n    promotion_erp_code::VARCHAR(255),\n    promotion_created_at::VARCHAR(255),\n    promotion_shop_id::INT,\n    discount_percentage::VARCHAR(255),\n    minimum_quantity::INT,\n    dsc_processed_at::TIMESTAMP\nfrom extract.ps_percentage_promotion_tiers\nwhere 1=1\n;"
            }
        ],
        "extract.dsc_prod.carts_customer_carts.sql": [],
        "extract.dsc_prod.test_customers.sql": [],
        "extract.dsc_prod.customer_answers.sql": [],
        "load.stg.bundle_subscriptions.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.bundle_subscriptions.id",
                        "extract.bundle_subscriptions.id"
                    ]
                },
                "tables": [
                    "stg.bundle_subscriptions"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.bundle_subscriptions\nusing extract.bundle_subscriptions\nwhere stg.bundle_subscriptions.id = extract.bundle_subscriptions.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "bundle_subscriptions"
                    ],
                    "select": [
                        "id",
                        "bundle_id",
                        "subscription_id",
                        "quantity",
                        "delivery_frequency",
                        "created_at",
                        "updated_at"
                    ]
                },
                "tables": [
                    "stg.bundle_subscriptions",
                    "extract.bundle_subscriptions"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.bundle_subscriptions\nSelect    \n\tid \n\t,bundle_id    \n\t,subscription_id    \n\t,quantity    \n\t,delivery_frequency    \n\t,created_at    \n\t,updated_at  \nfrom extract.bundle_subscriptions\n;"
            }
        ],
        "extract.dsc_prod.customer_phone_numbers.sql": [],
        "load.stg.carts_customer_cart_extras.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.carts_customer_cart_extras.id",
                        "extract.carts_customer_cart_extras.id"
                    ]
                },
                "tables": [
                    "stg.carts_customer_cart_extras"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.carts_customer_cart_extras\nusing extract.carts_customer_cart_extras\nwhere stg.carts_customer_cart_extras.id = extract.carts_customer_cart_extras.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "carts_customer_cart_extras"
                    ],
                    "select": [
                        "id",
                        "customer_cart_id",
                        "status",
                        "extra_id",
                        "quantity",
                        "created_at",
                        "updated_at",
                        "obfuscated_id"
                    ]
                },
                "tables": [
                    "stg.carts_customer_cart_extras",
                    "extract.carts_customer_cart_extras"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.carts_customer_cart_extras\nselect\n    id \n\t,customer_cart_id\n\t,status \n\t,extra_id \n\t,quantity \n\t,created_at \n\t,updated_at \n\t,obfuscated_id \n\t,source \n\t,dsc_processed_at \nfrom extract.carts_customer_cart_extras\n;"
            }
        ],
        "extract.plan_stream.plan_item_tiered_percentage_discounts.sql": [],
        "load.stg.plan_cancellations.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.plan_cancellations.id",
                        "extract.plan_cancellations.id"
                    ]
                },
                "tables": [
                    "stg.plan_cancellations"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.plan_cancellations\nUSING extract.plan_cancellations\n  WHERE stg.plan_cancellations.id = extract.plan_cancellations.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "plan_cancellations"
                    ],
                    "select": [
                        "plan_activated_at",
                        "plan_state"
                    ]
                },
                "tables": [
                    "stg.plan_cancellations",
                    "extract.plan_cancellations"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.plan_cancellations\nSELECT\n   id::INTEGER as id\n  , plan_id::INTEGER as plan_id\n  , shop_id::INTEGER as shop_id\n  , customer_id::INTEGER as customer_id\n  , LEFT(plan_state,32)::VARCHAR(32) as plan_state\n  , plan_activated_at::TIMESTAMP as plan_activated_at\n  , plan_created_at::TIMESTAMP as plan_created_at\n  , plan_updated_at::TIMESTAMP as plan_updated_at\n  , LEFT(plan_cancellation_reason, 255)::VARCHAR(255) as plan_cancellation_reason\n  , plan_ended_at::TIMESTAMP as plan_ended_at\n  , LEFT(plan_cancellation_reason_message,512)::VARCHAR(512) as plan_cancellation_reason_message\n  , plan_cancellation_reason_code::VARCHAR(64) as plan_cancellation_reason_code\n  , rails_site_processed_at::TIMESTAMP as rails_site_processed_at\n  , plan_cancellation_reason_coded\n  , dsc_processed_at::TIMESTAMP as dsc_processed_at\nFROM extract.plan_cancellations\n;"
            }
        ],
        "extract.erp.invoice_status_histories.sql": [],
        "extract.dsc_prod.customer_reviews.sql": [],
        "load.stg.marketing_campaign_email_instances.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.marketing_campaign_email_instances.id",
                        "extract.marketing_campaign_email_instances.id"
                    ]
                },
                "tables": [
                    "stg.marketing_campaign_email_instances"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.marketing_campaign_email_instances\nUSING extract.marketing_campaign_email_instances\n  WHERE stg.marketing_campaign_email_instances.id = extract.marketing_campaign_email_instances.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "marketing_campaign_email_instances"
                    ],
                    "select": [
                        "campaign_email_event_id",
                        "customer_id",
                        "status",
                        "email_service_provider_message_id",
                        "created_at",
                        "updated_at",
                        "obfuscated_id",
                        "status_message",
                        "emails_instance_id",
                        "campaign_email_variation_event_id",
                        "email_template_id",
                        "id",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.marketing_campaign_email_instances",
                    "extract.marketing_campaign_email_instances"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.marketing_campaign_email_instances\n  SELECT\n       campaign_email_event_id\n     , customer_id\n     , status\n     , left(email_service_provider_message_id, 64)\n     , created_at\n     , updated_at\n     , obfuscated_id\n     , left(status_message, 64)\n     , emails_instance_id\n     , campaign_email_variation_event_id\n     , email_template_id\n     , id\n     , dsc_processed_at\n  FROM extract.marketing_campaign_email_instances\n;"
            }
        ],
        "load.stg.coupon_instances.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.coupon_instances.id",
                        "extract.coupon_instances.id"
                    ]
                },
                "tables": [
                    "stg.coupon_instances"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.coupon_instances\nusing extract.coupon_instances\nwhere stg.coupon_instances.id = extract.coupon_instances.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "coupon_instances"
                    ],
                    "select": [
                        "id",
                        "code",
                        "use_count",
                        "max_uses",
                        "coupon_id",
                        "created_at",
                        "updated_at",
                        "applicable_until",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.coupon_instances",
                    "extract.coupon_instances"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.coupon_instances\nSelect\n\t  id\n\t, code\n  , use_count\n  , max_uses\n  , coupon_id\n\t, created_at\n\t, updated_at\n  , applicable_until\n  , dsc_processed_at\nfrom extract.coupon_instances\n;"
            }
        ],
        "extract.dsc_prod.payments.sql": [],
        "load.stg.ps_scheduled_cart_items.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.ps_scheduled_cart_items.id",
                        "extract.ps_scheduled_cart_items.id",
                        "stg.ps_scheduled_cart_items.scheduled_cart_id",
                        "extract.ps_scheduled_cart_items.scheduled_cart_id"
                    ]
                },
                "tables": [
                    "stg.ps_scheduled_cart_items"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.ps_scheduled_cart_items\nusing extract.ps_scheduled_cart_items\nwhere 1=1\n  and stg.ps_scheduled_cart_items.id = extract.ps_scheduled_cart_items.id\n  and stg.ps_scheduled_cart_items.scheduled_cart_id = extract.ps_scheduled_cart_items.scheduled_cart_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ps_scheduled_cart_items"
                    ],
                    "select": [
                        "id",
                        "scheduled_cart_id",
                        "plan_id",
                        "shop_id",
                        "customer_id",
                        "scheduled_cart_created_at",
                        "scheduled_cart_updated_at",
                        "scheduled_cart_closed_at",
                        "quantity",
                        "base_unit_price",
                        "unit_price",
                        "total_discount",
                        "total_price",
                        "product_size",
                        "product_id",
                        "product_nature",
                        "product_sku",
                        "product_taxable",
                        "product_type",
                        "product_bundle_id",
                        "rails_site_processed_at",
                        "deleted_at",
                        "removed",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.ps_scheduled_cart_items",
                    "extract.ps_scheduled_cart_items"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.ps_scheduled_cart_items\nselect\n    id::INT,\n    scheduled_cart_id::INT,\n    plan_id::INT,\n    shop_id::INT,\n    customer_id::INT,\n    scheduled_cart_created_at::VARCHAR(255),\n    scheduled_cart_updated_at::VARCHAR(255),\n    scheduled_cart_closed_at::VARCHAR(255),\n    quantity::INT,\n    base_unit_price::VARCHAR(255),\n    unit_price::VARCHAR(255),\n    total_discount::VARCHAR(255),\n    total_price::VARCHAR(255),\n    product_size::VARCHAR(255),\n    product_id::INT,\n    product_nature::VARCHAR(255),\n    product_sku::VARCHAR(255),\n    product_taxable::BOOLEAN,\n    product_type::VARCHAR(255),\n    product_bundle_id::VARCHAR(255),\n    rails_site_processed_at::VARCHAR(255),\n    (case when deleted_at is not null then 'true' else removed end)::BOOLEAN,\n    dsc_processed_at::TIMESTAMP,\n    deleted_at :: TIMESTAMP\nfrom extract.ps_scheduled_cart_items\nwhere 1=1\n;"
            }
        ],
        "extract.dsc_prod.customer_subscription_pauses.sql": [],
        "extract.derived.fact_customers.sql": [],
        "extract.erp.shipments.sql": [],
        "extract.erp.gift_cards.sql": [],
        "extract.cheetah.customer_products_segment.sql": [],
        "extract.erp.payments.sql": [],
        "load.stg.ps_plan_item_tiered_percentage_discounts.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.ps_plan_item_tiered_percentage_discounts.plan_item_id",
                        "extract.ps_plan_item_tiered_percentage_discounts.plan_item_id",
                        "stg.ps_plan_item_tiered_percentage_discounts.promotion_id",
                        "extract.ps_plan_item_tiered_percentage_discounts.promotion_id"
                    ]
                },
                "tables": [
                    "stg.ps_plan_item_tiered_percentage_discounts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.ps_plan_item_tiered_percentage_discounts\nusing extract.ps_plan_item_tiered_percentage_discounts\nwhere 1=1\n  and stg.ps_plan_item_tiered_percentage_discounts.plan_item_id = extract.ps_plan_item_tiered_percentage_discounts.plan_item_id\n  and stg.ps_plan_item_tiered_percentage_discounts.promotion_id = extract.ps_plan_item_tiered_percentage_discounts.promotion_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ps_plan_item_tiered_percentage_discounts"
                    ],
                    "select": [
                        "promotion_id",
                        "plan_item_id",
                        "plan_id",
                        "shop_id",
                        "customer_id",
                        "plan_state",
                        "plan_frequency",
                        "plan_bills_at",
                        "plan_activated_at",
                        "plan_created_at",
                        "plan_updated_at",
                        "plan_cancellation_id",
                        "item_quantity",
                        "item_base_unit_price",
                        "item_unit_price",
                        "item_total_discount",
                        "item_total_price",
                        "product_id",
                        "product_nature",
                        "product_sku",
                        "product_taxable",
                        "product_type",
                        "product_bundle_id",
                        "promotion_activation_id",
                        "promotion_activation_valid_at",
                        "promotion_activation_valid_until",
                        "promotion_activation_orders_count",
                        "promotion_type",
                        "promotion_name",
                        "promotion_redeemable_at",
                        "promotion_redeemable_until",
                        "promotion_requires_active_plan",
                        "promotion_erp_code",
                        "promotion_created_at",
                        "promotion_shop_id",
                        "current_tier_name",
                        "current_tier_discount_percentage",
                        "current_tier_minimum_quantity",
                        "next_tier_name",
                        "next_tier_discount_percentage",
                        "next_tier_minimum_quantity",
                        "rails_site_processed_at",
                        "removed",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.ps_plan_item_tiered_percentage_discounts",
                    "extract.ps_plan_item_tiered_percentage_discounts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.ps_plan_item_tiered_percentage_discounts\nselect\n    promotion_id::INT,\n    plan_item_id::INT,\n    plan_id::INT,\n    shop_id::INT,\n    customer_id::INT,\n    plan_state::VARCHAR(255),\n    plan_frequency::INT,\n    plan_bills_at::VARCHAR(255),\n    plan_activated_at::VARCHAR(255),\n    plan_created_at::VARCHAR(255),\n    plan_updated_at::VARCHAR(255),\n    plan_cancellation_id::INT,\n    item_quantity::INT,\n    item_base_unit_price::VARCHAR(255),\n    item_unit_price::VARCHAR(255),\n    item_total_discount::VARCHAR(255),\n    item_total_price::VARCHAR(255),\n    product_id::INT,\n    product_nature::VARCHAR(255),\n    product_sku::VARCHAR(255),\n    product_taxable::BOOLEAN,\n    product_type::VARCHAR(255),\n    product_bundle_id::VARCHAR(255),\n    promotion_activation_id::INT,\n    promotion_activation_valid_at::VARCHAR(255),\n    promotion_activation_valid_until::VARCHAR(255),\n    promotion_activation_orders_count::INT,\n    promotion_type::VARCHAR(255),\n    promotion_name::VARCHAR(255),\n    promotion_redeemable_at::VARCHAR(255),\n    promotion_redeemable_until::VARCHAR(255),\n    promotion_requires_active_plan::VARCHAR(255),\n    promotion_erp_code::VARCHAR(255),\n    promotion_created_at::VARCHAR(255),\n    promotion_shop_id::INT,\n    current_tier_name::VARCHAR(255),\n    current_tier_discount_percentage::VARCHAR(255),\n    current_tier_minimum_quantity::VARCHAR(255),\n    next_tier_name::VARCHAR(255),\n    next_tier_discount_percentage::VARCHAR(255),\n    next_tier_minimum_quantity::INT,\n    rails_site_processed_at::VARCHAR(255),\n    removed::BOOLEAN,\n    dsc_processed_at::TIMESTAMP\nfrom extract.ps_plan_item_tiered_percentage_discounts\nwhere 1=1\n;"
            }
        ],
        "extract.erp.customer_credits.sql": [],
        "extract.erp.fulfillments.sql": [],
        "load.stg.ps_scheduled_cart_item_tiered_flat_discounts.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.ps_scheduled_cart_item_tiered_flat_discounts.scheduled_cart_item_id",
                        "extract.ps_scheduled_cart_item_tiered_flat_discounts.scheduled_cart_item_id",
                        "stg.ps_scheduled_cart_item_tiered_flat_discounts.promotion_id",
                        "extract.ps_scheduled_cart_item_tiered_flat_discounts.promotion_id"
                    ]
                },
                "tables": [
                    "stg.ps_scheduled_cart_item_tiered_flat_discounts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.ps_scheduled_cart_item_tiered_flat_discounts\nusing extract.ps_scheduled_cart_item_tiered_flat_discounts\nwhere 1=1\n  and stg.ps_scheduled_cart_item_tiered_flat_discounts.scheduled_cart_item_id = extract.ps_scheduled_cart_item_tiered_flat_discounts.scheduled_cart_item_id\n  and stg.ps_scheduled_cart_item_tiered_flat_discounts.promotion_id = extract.ps_scheduled_cart_item_tiered_flat_discounts.promotion_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ps_scheduled_cart_item_tiered_flat_discounts"
                    ],
                    "select": [
                        "promotion_id",
                        "scheduled_cart_item_id",
                        "scheduled_cart_id",
                        "plan_id",
                        "shop_id",
                        "customer_id",
                        "scheduled_cart_created_at",
                        "scheduled_cart_updated_at",
                        "scheduled_cart_closed_at",
                        "item_quantity",
                        "item_base_unit_price",
                        "item_unit_price",
                        "item_total_discount",
                        "item_total_price",
                        "product_size",
                        "product_id",
                        "product_nature",
                        "product_sku",
                        "product_taxable",
                        "product_type",
                        "product_bundle_id",
                        "promotion_activation_id",
                        "promotion_activation_valid_at",
                        "promotion_activation_valid_until",
                        "promotion_activation_orders_count",
                        "promotion_type",
                        "promotion_name",
                        "promotion_redeemable_at",
                        "promotion_redeemable_until",
                        "promotion_requires_active_plan",
                        "promotion_erp_code",
                        "promotion_created_at",
                        "promotion_shop_id",
                        "current_tier_name",
                        "current_tier_flat_price",
                        "current_tier_minimum_quantity",
                        "next_tier_name",
                        "next_tier_flat_price",
                        "next_tier_minimum_quantity",
                        "rails_site_processed_at",
                        "removed",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.ps_scheduled_cart_item_tiered_flat_discounts",
                    "extract.ps_scheduled_cart_item_tiered_flat_discounts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.ps_scheduled_cart_item_tiered_flat_discounts\nselect\n    promotion_id::INT,\n    scheduled_cart_item_id::INT,\n    scheduled_cart_id::INT,\n    plan_id::INT,\n    shop_id::INT,\n    customer_id::INT,\n    scheduled_cart_created_at::VARCHAR(255),\n    scheduled_cart_updated_at::VARCHAR(255),\n    scheduled_cart_closed_at::VARCHAR(255),\n    item_quantity::INT,\n    item_base_unit_price::VARCHAR(255),\n    item_unit_price::VARCHAR(255),\n    item_total_discount::VARCHAR(255),\n    item_total_price::VARCHAR(255),\n    product_size::VARCHAR(255),\n    product_id::INT,\n    product_nature::VARCHAR(255),\n    product_sku::VARCHAR(255),\n    product_taxable::BOOLEAN,\n    product_type::VARCHAR(255),\n    product_bundle_id::VARCHAR(255),\n    promotion_activation_id::INT,\n    promotion_activation_valid_at::VARCHAR(255),\n    promotion_activation_valid_until::VARCHAR(255),\n    promotion_activation_orders_count::INT,\n    promotion_type::VARCHAR(255),\n    promotion_name::VARCHAR(255),\n    promotion_redeemable_at::VARCHAR(255),\n    promotion_redeemable_until::VARCHAR(255),\n    promotion_requires_active_plan::VARCHAR(255),\n    promotion_erp_code::VARCHAR(255),\n    promotion_created_at::VARCHAR(255),\n    promotion_shop_id::INT,\n    current_tier_name::VARCHAR(255),\n    current_tier_flat_price::VARCHAR(255),\n    current_tier_minimum_quantity::VARCHAR(255),\n    next_tier_name::VARCHAR(255),\n    next_tier_flat_price::VARCHAR(255),\n    next_tier_minimum_quantity::INT,\n    rails_site_processed_at::VARCHAR(255),\n    removed::BOOLEAN,\n    dsc_processed_at::TIMESTAMP\nfrom extract.ps_scheduled_cart_item_tiered_flat_discounts\nwhere 1=1\n;"
            }
        ],
        "transform.dmt.d_customer.sql": [
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "stg.customers.id"
                    ],
                    "join": [
                        "stg.customers.id",
                        "stg.customer_attributes.customer_id"
                    ],
                    "where": [
                        "stg.customers.updated_at"
                    ]
                },
                "tables": [
                    "dm_delta",
                    "stg.customers",
                    "stg.customer_attributes"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "CREATE TEMP TABLE dm_delta AS\nSelect c.id as myid\nfrom stg.customers c\n  left outer join stg.customer_attributes ca\n    on c.id = ca.customer_id\nwhere (c.updated_at >= '<start_date>'::timestamp - 1\n       OR ca.updated_at >= '<start_date>'::timestamp) - 1\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "dmt.d_customer.customer_id",
                        "dm_delta.myid"
                    ]
                },
                "tables": [
                    "dmt.d_customer"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from dmt.d_customer\nusing dm_delta\nwhere dmt.d_customer.customer_id = dm_delta.myid\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "d_customer"
                    ],
                    "select": [
                        "c.id",
                        "c.email",
                        "c.encrypted_password",
                        "c.reset_password_token",
                        "c.reset_password_sent_at",
                        "c.remember_created_at",
                        "c.sign_in_count",
                        "c.current_sign_in_at",
                        "c.last_sign_in_at",
                        "c.current_sign_in_ip",
                        "c.last_sign_in_ip",
                        "c.created_at",
                        "c.updated_at",
                        "c.first_name",
                        "c.last_name",
                        "c.location_id",
                        "c.zuora_account_id",
                        "c.referral_code",
                        "c.wallet_balance",
                        "c.provider",
                        "c.uid",
                        "c.gender",
                        "c.birthday",
                        "c.relationship_status",
                        "c.time_zone",
                        "c.audience_type",
                        "c.allow_resubscription",
                        "c.zuora_account_number",
                        "c.fb_token",
                        "c.customer_type",
                        "c.obfuscated_id",
                        "c.last_vip_date_time",
                        "c.rank",
                        "c.authentication_token",
                        "c.force_logout"
                    ]
                },
                "tables": [
                    "dmt.d_customer"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into dmt.d_customer\nselect\n   c.id as customer_id\n\t,c.email\n\t,c.encrypted_password\n\t,c.reset_password_token\n\t,c.reset_password_sent_at\n\t,c.remember_created_at\n\t,c.sign_in_count\n\t,c.current_sign_in_at\n\t,c.last_sign_in_at\n\t,c.current_sign_in_ip\n\t,c.last_sign_in_ip\n\t,c.created_at\n\t,c.updated_at\n\t,c.first_name\n\t,c.last_name\n\t,c.location_id\n\t,c.zuora_account_id\n\t,c.referral_code\n\t,c.wallet_balance\n\t,c.provider\n\t,c.uid\n\t,c.gender\n\t,c.birthday\n\t,c.relationship_status\n\t,c.time_zone\n\t,c.audience_type\n\t,c.allow_resubscription\n\t,c.zuora_account_number\n\t,c.fb_token\n\t,c.customer_type\n\t,c.obfuscated_id\n\t,c.last_vip_date_time\n\t,c.rank\n\t,c.authentication_token\n\t,c.force_logout\n    -- customer attributes\n\t,ca.convertro_id\n\t,ca.initial_referrer\n\t,ca.twitter\n\t,ca.facebook\n\t,ca.cellphone_number\n\t,ca.last_user_agent\n\t,ca.fraud_score\n\t,ca.klout_score\n\t,ca.full_contact_status\n\t,ca.satisfaction_score\n\t,ca.browser_hash\n\t,ca.permanent_cookie\n\t,ca.last_login_request_headers\n\t,ca.failed_credit_card_attempt_count\n\t,ca.primary_referral_name\n\t,ca.secondary_referral_name\n\t,ca.proxy_score\n\t,ca.id  as customer_attributes_id\n\t,ca.registered_in_shop_id\nfrom dm_delta dd\n  inner join stg.customers c\n    on c.id = dd.myid\n  left outer join stg.customer_attributes ca\n    on c.id = ca.customer_id\n;"
            }
        ],
        "extract.dsc_prod.customer_subscriptions.sql": [],
        "load.dmt.d_customer_answer.sql": [
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "extract.customer_answers.customer_answer_id"
                    ],
                    "where": [
                        "extract.customer_answers.customer_answer_updated_at"
                    ]
                },
                "tables": [
                    "dm_delta",
                    "extract.customer_answers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "CREATE TEMP TABLE dm_delta AS\nSelect ans.customer_answer_id as id\nfrom extract.customer_answers ans\nwhere 1=1\n  and ans.customer_answer_updated_at >= '<start_date>'::timestamp - interval '1 day'\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "dmt.d_customer_answer.customer_answer_id",
                        "dm_delta.id"
                    ]
                },
                "tables": [
                    "dmt.d_customer_answer"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from dmt.d_customer_answer\nusing dm_delta\nwhere dmt.d_customer_answer.customer_answer_id = dm_delta.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "d_customer_answer"
                    ],
                    "select": [
                        "customer_id",
                        "question_id",
                        "option_id",
                        "archived",
                        "customer_answerable_id",
                        "customer_answerable_type",
                        "alternate_input",
                        "question",
                        "slug",
                        "question_category_id",
                        "question_category_name",
                        "display_type",
                        "sequence_id",
                        "status",
                        "question_type",
                        "option_name",
                        "question_option_slug",
                        "rule_type",
                        "check_question_id",
                        "check_option_id",
                        "zip",
                        "state",
                        "email",
                        "sku",
                        "birth_date",
                        "age",
                        "age_tier_sort",
                        "age_tier",
                        "whale_status_id",
                        "whale_status",
                        "income",
                        "gender",
                        "marital_status",
                        "education",
                        "mosaic",
                        "total_enhancement_match_type",
                        "plan_original",
                        "plan_current",
                        "shop_id_orig",
                        "shop_id_curr",
                        "shop_name_original",
                        "shop_name_current",
                        "customer_subscription_status_id_original",
                        "customer_subscription_status_id_current",
                        "customer_subscription_status_original",
                        "customer_subscription_status_current",
                        "tenure_month_original",
                        "tenure_month_current",
                        "tenure_months_tier_current",
                        "question_type_name",
                        "question_tier"
                    ]
                },
                "tables": [
                    "dmt.d_customer_answer",
                    "extract.customer_answers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO dmt.d_customer_answer\nSelect\n   customer_answer_id as customer_answer_id\n\t,customer_id \n\t,question_id \n\t,option_id \n\t,customer_answer_created_at as customer_answer_created_at\n\t,customer_answer_updated_at as customer_answer_updated_at\n\t,archived\n\t,customer_answerable_id\n\t,customer_answerable_type\n\t,alternate_input\n\t,question\n\t,slug\n\t,question_category_id\n\t,question_category_name\n\t,display_type\n\t,sequence_id\n\t,status\n\t,question_type\n\t,option_name\n\t,question_option_slug\n\t,rule_type\n\t,check_question_id\n\t,check_option_id\n\t,zip\n\t,state\n\t,email\n\t,sku\n\t,birth_date\n\t,age\n\t,age_tier_sort\n\t,age_tier\n\t,whale_status_id\n\t,whale_status\n\t,income\n\t,gender\n\t,marital_status\n\t,education\n\t,mosaic\n\t,total_enhancement_match_type\n\t,plan_original\n\t,plan_current\n\t,shop_id_orig\n\t,shop_id_curr\n\t,shop_name_original\n\t,shop_name_current\n\t,customer_subscription_status_id_original\n\t,customer_subscription_status_id_current\n\t,customer_subscription_status_original\n\t,customer_subscription_status_current\n\t,tenure_month_original\n\t,tenure_month_current\n\t,tenure_months_tier_current\n\t,question_type_name\n  ,question_tier\n  ,getdate() as dw_loaddatetime\nfrom extract.customer_answers\n;"
            }
        ],
        "load.stg.ps_plan_cancellations.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.ps_plan_cancellations.id",
                        "extract.ps_plan_cancellations.id",
                        "stg.ps_plan_cancellations.plan_id",
                        "extract.ps_plan_cancellations.plan_id"
                    ]
                },
                "tables": [
                    "stg.ps_plan_cancellations"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.ps_plan_cancellations\nusing extract.ps_plan_cancellations\nwhere 1=1\n  and stg.ps_plan_cancellations.id = extract.ps_plan_cancellations.id\n  and stg.ps_plan_cancellations.plan_id = extract.ps_plan_cancellations.plan_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ps_plan_cancellations"
                    ],
                    "select": [
                        "id",
                        "plan_id",
                        "shop_id",
                        "customer_id",
                        "plan_state",
                        "plan_activated_at",
                        "plan_created_at",
                        "plan_updated_at",
                        "plan_cancellation_reason",
                        "plan_ended_at",
                        "rails_site_processed_at",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.ps_plan_cancellations",
                    "extract.ps_plan_cancellations"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.ps_plan_cancellations\nselect\n    id::INT,\n    plan_id::INT,\n    shop_id::INT,\n    customer_id::INT,\n    plan_state::VARCHAR(255),\n    plan_activated_at::VARCHAR(255),\n    plan_created_at::VARCHAR(255),\n    plan_updated_at::VARCHAR(255),\n    plan_cancellation_reason::VARCHAR(255),\n    plan_ended_at::VARCHAR(255),\n    rails_site_processed_at::VARCHAR(255),\n    dsc_processed_at::TIMESTAMP\nfrom extract.ps_plan_cancellations\nwhere 1=1\n;"
            }
        ],
        "load.stg.derived_fact_customer_orders.sql": [
            {
                "type": "DELETE",
                "columns": null,
                "tables": [
                    "stg.derived_fact_customer_orders"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.derived_fact_customer_orders;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "derived_fact_customer_orders"
                    ],
                    "select": [
                        "customer_id",
                        "orders",
                        "first_purchase",
                        "total_rev",
                        "discount_totals",
                        "nrp_first_purchase",
                        "nrp_last_purchase",
                        "nrp_purchases",
                        "nrp_quantity",
                        "nrp_rev",
                        "nrp_bundle_rev"
                    ]
                },
                "tables": [
                    "stg.derived_fact_customer_orders",
                    "extract.derived_fact_customer_orders"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.derived_fact_customer_orders\nselect\n    customer_id\n  , orders\n  , first_purchase\n  , total_rev\n  , discount_totals\n  , nrp_first_purchase\n  , nrp_last_purchase\n  , nrp_purchases\n  , nrp_quantity\n  , nrp_rev\n  , nrp_bundle_rev\nfrom extract.derived_fact_customer_orders\n;"
            }
        ],
        "extract.plan_stream.percentage_promotion_tiers.sql": [],
        "load.stg.customer_subscription_pauses.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.customer_subscription_pauses.id",
                        "extract.customer_subscription_pauses.id"
                    ]
                },
                "tables": [
                    "stg.customer_subscription_pauses"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.customer_subscription_pauses\nusing extract.customer_subscription_pauses\nwhere stg.customer_subscription_pauses.id = extract.customer_subscription_pauses.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_subscription_pauses"
                    ],
                    "select": [
                        "id",
                        "customer_subscription_id",
                        "status",
                        "pause_reason",
                        "scheduled_to_resume_at_date_time",
                        "resumed_at_date_time",
                        "next_bill_date_time_after_resume",
                        "created_at",
                        "updated_at",
                        "survey_option_id",
                        "number_of_months",
                        "resume_type",
                        "previous_customer_subscription_pause_id",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.customer_subscription_pauses",
                    "extract.customer_subscription_pauses"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.customer_subscription_pauses\nselect\n    id \n\t,customer_subscription_id \n\t,status \n\t,pause_reason\n\t,scheduled_to_resume_at_date_time   \n\t,resumed_at_date_time   \n\t,next_bill_date_time_after_resume   \n\t,created_at   \n\t,updated_at   \n\t,survey_option_id    \n\t,number_of_months    \n\t,resume_type  \n\t,previous_customer_subscription_pause_id    \n\t,dsc_processed_at \nfrom extract.customer_subscription_pauses\n;"
            }
        ],
        "extract.dsc_prod.brands.sql": [],
        "validate.invoice_items.sql": [],
        "extract.cheetah.bounce_events.sql": [],
        "load.stg.erp_gift_cards.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.erp_gift_cards.id",
                        "extract.erp_gift_cards.id"
                    ]
                },
                "tables": [
                    "stg.erp_gift_cards"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.erp_gift_cards\nusing extract.erp_gift_cards\nwhere stg.erp_gift_cards.id = extract.erp_gift_cards.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "erp_gift_cards"
                    ],
                    "select": [
                        "id",
                        "invoice_id",
                        "order_id",
                        "product_id",
                        "amount",
                        "balance",
                        "code",
                        "created_at"
                    ]
                },
                "tables": [
                    "stg.erp_gift_cards",
                    "extract.erp_gift_cards"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.erp_gift_cards\nselect\n  id\n ,invoice_id\n ,order_id\n ,product_id\n ,amount\n ,balance\n ,code\n ,created_at::TIMESTAMP\n ,currency_code\n ,delivery_date_time::TIMESTAMP\n ,gift_card_campaign_id\n ,gift_card_campaign_name\n ,gift_card_campaign_code\n ,gift_card_campaign_description\n ,gift_card_campaign_created_at::TIMESTAMP\n ,gift_card_campaign_prefix\n ,gift_card_campaign_generated_by_department\n ,purchased_by_customer_id::INTEGER\n ,redeemed_by_customer_id::INTEGER\n ,shop_name\n ,shop_code\n ,status\n ,dsc_processed_at::TIMESTAMP\n ,recipient_name \n ,recipient_email \n\t,message \n\t,sender_name \n\t,sender_email \nfrom extract.erp_gift_cards\n;"
            }
        ],
        "extract.plan_stream.scheduled_cart_item_discounts.sql": [],
        "extract.plan_stream.scheduled_carts.sql": [],
        "extract.erp.customer_credit_attributions.sql": [],
        "load.stg.cheetah_crm_attributes_segment.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.cheetah_crm_attributes_segment.customer_id",
                        "extract.cheetah_crm_attributes_segment.customer_id",
                        "stg.cheetah_crm_attributes_segment.shop_code",
                        "extract.cheetah_crm_attributes_segment.shop_code"
                    ]
                },
                "tables": [
                    "stg.cheetah_crm_attributes_segment"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.cheetah_crm_attributes_segment\nusing extract.cheetah_crm_attributes_segment\nwhere stg.cheetah_crm_attributes_segment.customer_id = extract.cheetah_crm_attributes_segment.customer_id\n     and stg.cheetah_crm_attributes_segment.shop_code = extract.cheetah_crm_attributes_segment.shop_code\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "cheetah_crm_attributes_segment"
                    ],
                    "select": [
                        "customer_id",
                        "last_used_android_app",
                        "last_used_ios_app",
                        "customer_subscription_frequency",
                        "customer_subscription_start_date_time",
                        "wallet_balance",
                        "initial_customer_subscription_plan",
                        "number_of_boxes",
                        "customer_subscription_status",
                        "customer_subscription_end_date_time",
                        "customer_type",
                        "initial_start_date_time",
                        "next_bill_date_time",
                        "customer_subscription_bill_cycle_reference_date_time",
                        "customer_subscription_plan",
                        "first_order_date",
                        "shell_account",
                        "shipping_state",
                        "last_added_to_cart_date",
                        "last_pause_date",
                        "ever_on_four_x",
                        "ever_on_exec",
                        "ever_on_twin",
                        "changed_plan_in_past",
                        "changed_frequency_in_past",
                        "last_marketing_email_open_date",
                        "last_transactional_email_open_date",
                        "has_unpaid_invoice",
                        "shop_code",
                        "original_content_opt_out",
                        "unsubscribed",
                        "processed_at",
                        "plan_activated_date",
                        "plan_frequency",
                        "plan_shipping_state",
                        "plan_next_bill_date_time",
                        "plan_status",
                        "number_of_plan_boxes",
                        "last_box_shipped_date",
                        "last_box_delivered_date",
                        "subscription_payment_failure_date",
                        "gift_subscriptions_purchased",
                        "gift_cards_purchased",
                        "last_gift_card_date",
                        "subscription_frequency_switches",
                        "last_subscription_frequency_switch_date",
                        "subscription_reactivations",
                        "current_plan_pricing_tier",
                        "quantity_to_next_plan_pricing_tier",
                        "scheduled_cart_quantity",
                        "push_notifications_enabled",
                        "sms_number",
                        "sms_number_transactional_opt_in",
                        "sms_number_marketing_opt_in",
                        "last_gift_subscription_date",
                        "migration_source"
                    ]
                },
                "tables": [
                    "stg.cheetah_crm_attributes_segment",
                    "extract.cheetah_crm_attributes_segment"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.cheetah_crm_attributes_segment\nselect\n       customer_id\n     , last_used_android_app\n     , last_used_ios_app\n     , customer_subscription_frequency\n     , customer_subscription_start_date_time\n     , wallet_balance\n     , initial_customer_subscription_plan\n     , number_of_boxes\n     , customer_subscription_status\n     , customer_subscription_end_date_time\n     , customer_type\n     , initial_start_date_time\n     , next_bill_date_time\n     , customer_subscription_bill_cycle_reference_date_time\n     , customer_subscription_plan\n     , first_order_date\n     , shell_account\n     , shipping_state\n     , last_added_to_cart_date\n     , last_pause_date\n     , ever_on_four_x\n     , ever_on_exec\n     , ever_on_twin\n     , changed_plan_in_past\n     , changed_frequency_in_past\n     , last_marketing_email_open_date\n     , last_transactional_email_open_date\n     , has_unpaid_invoice\n     , shop_code\n     , original_content_opt_out\n     , unsubscribed\n     , processed_at\n     , plan_activated_date\n     , plan_frequency\n     , plan_shipping_state\n     , plan_next_bill_date_time\n     , plan_status\n     , number_of_plan_boxes\n     , last_box_shipped_date\n     , last_box_delivered_date\n     , subscription_payment_failure_date\n     , gift_subscriptions_purchased\n     , gift_cards_purchased\n     , last_gift_card_date\n     , subscription_frequency_switches\n     , last_subscription_frequency_switch_date\n     , subscription_reactivations\n     , current_plan_pricing_tier\n     , quantity_to_next_plan_pricing_tier\n     , scheduled_cart_quantity\n     , push_notifications_enabled\n     , sms_number\n     , sms_number_transactional_opt_in\n     , sms_number_marketing_opt_in\n     , last_gift_subscription_date\n     , migration_source\nfrom extract.cheetah_crm_attributes_segment\n;"
            }
        ],
        "extract.erp.invoice_item_discounts.sql": [],
        "transform.dmt.d_customer_subscription.sql": [
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "stg.customer_subscriptions.customer_id"
                    ],
                    "join": [
                        "stg.customer_subscriptions.id",
                        "stg.customer_subscription_cancellation_reasons.customer_subscription_id",
                        "stg.customer_subscription_cancellation_reasons.survey_option_id",
                        "stg.survey_options.id"
                    ],
                    "where": [
                        "stg.customer_subscriptions.updated_at"
                    ]
                },
                "tables": [
                    "dm_delta",
                    "stg.customer_subscriptions",
                    "stg.customer_subscription_cancellation_reasons",
                    "stg.survey_options"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "CREATE TEMP TABLE dm_delta AS\nSelect distinct cs.customer_id as customer_id\nfrom stg.customer_subscriptions cs\n  left outer join stg.customer_subscription_cancellation_reasons cr\n    on cs.id = cr.customer_subscription_id\n  left outer join stg.survey_options so  \n  on cr.survey_option_id = so.id\nwhere (\n       cs.updated_at >= '<start_date>'::timestamp - 1\n       OR cr.updated_at >= '<start_date>'::timestamp - 1\n       OR so.updated_at >= '<start_date>'::timestamp - 1\n       )\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "dmt.d_customer_subscription.customer_id",
                        "dm_delta.customer_id"
                    ]
                },
                "tables": [
                    "dmt.d_customer_subscription"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from dmt.d_customer_subscription\nusing dm_delta\nwhere dmt.d_customer_subscription.customer_id = dm_delta.customer_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "d_customer_subscription"
                    ],
                    "select": [
                        "cs.id",
                        "first_subscription.first_customer_subscription_id"
                    ]
                },
                "tables": [
                    "dmt.d_customer_subscription"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "Insert into dmt.d_customer_subscription\n Select \n\tcs.id as customer_subscription_id\n  ,first_subscription.first_customer_subscription_id      --derived column\n  ,current_subscription.current_customer_subscription_id  --derived column\n  ,first_subscription_start_date_time.first_customer_subscription_start_date_time           --derived column\n\t,cs.subscription_id \n\t,cs.start_date_time  \n\t,cs.end_date_time  \n\t,cs.shipping_address_id \n\t,cs.product_quantity \n\t,cs.created_at   \n\t,cs.updated_at \n\t,cs.customer_id \n\t,cs.frequency \n\t,cs.zuora_latest_subscription_id \n\t,cs.status \n\t,cs.product_rate_plan_id  \n\t,cs.zuora_original_subscription_id \n\t,cs.zuora_subscription_status \n\t,cs.current_cycle_start_date_time \n\t,cs.current_cycle_end_date_time \n\t,cs.last_add_amendment_date_time   \n\t,cs.iteration_count \n\t,cs.current_iteration_count \n\t,cs.obfuscated_id \n\t,cs.last_bill_date_time \n\t,cs.next_bill_date_time  \n\t,cs.bill_cycle_reference_date_time   \n\t,cs.scheduled_for_cancellation_at_date_time\n\t,cs.shop_id\n    --derived columns  \n  ,NVL(sh.shop_name,'Other') shop_name\n  ,CASE \n      WHEN cs.status = 0 THEN 'Cancelled'\n      WHEN cs.status = 1 THEN 'Active'\n      WHEN cs.status = 2 THEN 'Suspended'\n      WHEN cs.status = 3 THEN 'S Timeout'\n      WHEN cs.status = 4 THEN 'Paused'\n      ELSE 'Other' END status_name   \n  ,reason.customer_subscription_cancellation_reason_id  \n\t,reason.reason\t\n\t,reason.customer_subscription_cancellation_reason_created_at \n\t,reason.reason_parent_id \n\t,reason.survey_option_id \n\t,reason.survey_option_target \n\t,reason.survey_option_message\n\t,reason.survey_option_parent_id\n  ,reason.survey_option_code\n  ,reason.survey_option_id_check\n  ,CASE  \n      WHEN cs.subscription_id in (1,2) THEN 'Twin'\n      WHEN cs.subscription_id = 3 THEN '4x'\n      WHEN cs.subscription_id = 4 THEN 'Exec'\n      END AS subscription_plan\n  ,CASE \n      WHEN cs.subscription_id in (1,2) THEN 3.0\n      WHEN cs.subscription_id = 3 THEN 6.0\n      WHEN cs.subscription_id = 4 THEN 9.0\n      END AS subscription_amount\n  ,CASE WHEN cs.frequency = 1 THEN 'Monthly'\n      WHEN cs.frequency = 2 THEN 'NSH'\n      END AS frequency_name \n  ,getdate() \n    from\n    dm_delta dd\n    inner join stg.customer_subscriptions cs\n    ON dd.customer_id = cs.customer_id\n    left outer join (\n                        select * from (     \n                            select \n                            cs.id as customer_subscription_id\n                            ,cr.id customer_subscription_cancellation_reason_id  \n                            ,cr.reason\t\n                            ,cr.created_at as customer_subscription_cancellation_reason_created_at \n                            ,cr.parent_id as reason_parent_id \n                            ,cr.survey_option_id\n                            ,so.target as survey_option_target\n                            ,so.message as survey_option_message \n                            ,so.parent_id as survey_option_parent_id\n                            ,so.code as survey_option_code\n                            ,case when cr.survey_option_id is NULL OR cr.survey_option_id IN (1,2,3,4,5,6,11,31) THEN 'Yes' else 'No' end survey_option_id_check\n                            ,Row_Number() OVER(partition by cs.id order by cr.created_at desc) rnk\n                            from \n                            dm_delta dd\n                            inner join stg.customer_subscriptions cs\n                            ON dd.customer_id = cs.customer_id\n                            inner join stg.customer_subscription_cancellation_reasons cr\n                            on cs.id = cr.customer_subscription_id\n                            left join stg.survey_options so\n                            ON cr.survey_option_id = so.id\n                            where cr.parent_id is null  \t\n                        ) dedupe where rnk = 1\n                ) reason\n    ON cs.id = reason.customer_subscription_id\n    left join map.shop shop on shop.shop_id = cs.shop_id\n    left join (select dd.customer_id, min(cs.id) as first_customer_subscription_id\n                from dm_delta dd\n                inner join stg.customer_subscriptions cs\n\t\t\t\t\t\t\t\tON dd.customer_id = cs.customer_id\n                group by dd.customer_id\n              ) first_subscription\n    ON dd.customer_id = first_subscription.customer_id \n    left join (select dd.customer_id, max(cs.id) as current_customer_subscription_id\n                from dm_delta dd\n                inner join stg.customer_subscriptions cs\n\t\t\t\t\t\t\t\tON dd.customer_id = cs.customer_id\n                group by dd.customer_id\n              ) current_subscription\n    ON dd.customer_id = current_subscription.customer_id\n    left join (select dd.customer_id, min(cs.start_date_time) as first_customer_subscription_start_date_time\n                from dm_delta dd\n                inner join stg.customer_subscriptions cs\n\t\t\t\t\t\t\t\tON dd.customer_id = cs.customer_id\n                group by dd.customer_id\n              ) first_subscription_start_date_time\n    ON dd.customer_id = first_subscription_start_date_time.customer_id    \n\t\tleft join map.shop sh\n\t\tON sh.shop_id =  cs.shop_id\n    ;"
            }
        ],
        "load.stg.zuora_payment_methods.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.zuora_payment_methods.id",
                        "extract.zuora_payment_methods.id"
                    ]
                },
                "tables": [
                    "stg.zuora_payment_methods"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.zuora_payment_methods\nusing extract.zuora_payment_methods\nwhere stg.zuora_payment_methods.id = extract.zuora_payment_methods.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "zuora_payment_methods"
                    ],
                    "select": [
                        "id",
                        "zuora_payment_method_id",
                        "customer_id",
                        "bank_identification_number",
                        "credit_card_mask_number",
                        "credit_card_type",
                        "billing_address_id",
                        "status",
                        "created_at",
                        "updated_at",
                        "failed_payment_attempts",
                        "credit_card_expiration_month",
                        "credit_card_expiration_year",
                        "payment_gateway_id",
                        "payment_gateway_token",
                        "obfuscated_id",
                        "shop_id",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.zuora_payment_methods",
                    "extract.zuora_payment_methods"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.zuora_payment_methods\nselect\n    id\n  , zuora_payment_method_id\n  , customer_id\n  , bank_identification_number\n  , credit_card_mask_number\n  , credit_card_type\n  , billing_address_id\n  , status\n  , created_at\n  , updated_at\n  , failed_payment_attempts\n  , credit_card_expiration_month\n  , credit_card_expiration_year\n  , payment_gateway_id\n  , payment_gateway_token\n  , obfuscated_id\n  , shop_id\n  , dsc_processed_at\nfrom extract.zuora_payment_methods\n;"
            }
        ],
        "extract.dsc_prod.products.sql": [],
        "extract.erp.invoices.sql": [],
        "extract.dsc_prod.customer_subscription_cancellation_reasons.sql": [],
        "extract.plan_stream.subscription_to_plan_conversion.sql": [],
        "extract.dsc_prod.addresses.sql": [],
        "load.stg.erp_customer_credits.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.erp_customer_credits.id",
                        "extract.erp_customer_credits.id"
                    ]
                },
                "tables": [
                    "stg.erp_customer_credits"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.erp_customer_credits\nusing extract.erp_customer_credits\nwhere stg.erp_customer_credits.id = extract.erp_customer_credits.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "erp_customer_credits"
                    ],
                    "select": [
                        "customer_id",
                        "shop_name",
                        "shop_code",
                        "amount",
                        "credit_type",
                        "currency_code",
                        "created_at",
                        "source_type",
                        "debit_type",
                        "dsc_processed_at",
                        "id"
                    ]
                },
                "tables": [
                    "stg.erp_customer_credits",
                    "extract.erp_customer_credits"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.erp_customer_credits\nselect\n   customer_id\n,shop_name\n,shop_code\n,amount\n,credit_type\n,currency_code\n,created_at\n,source_type\n,debit_type\n,dsc_processed_at\n,id\nfrom extract.erp_customer_credits\n;"
            }
        ],
        "extract.erp.refunds.sql": [],
        "load.stg.ps_subscription_to_plan_conversion.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.ps_subscription_to_plan_conversion.customer_id",
                        "extract.ps_subscription_to_plan_conversion.customer_id",
                        "stg.ps_subscription_to_plan_conversion.plan_id",
                        "extract.ps_subscription_to_plan_conversion.plan_id"
                    ]
                },
                "tables": [
                    "stg.ps_subscription_to_plan_conversion"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.ps_subscription_to_plan_conversion\nusing extract.ps_subscription_to_plan_conversion\nwhere 1=1\n  and stg.ps_subscription_to_plan_conversion.customer_id = extract.ps_subscription_to_plan_conversion.customer_id\n  and stg.ps_subscription_to_plan_conversion.plan_id = extract.ps_subscription_to_plan_conversion.plan_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ps_subscription_to_plan_conversion"
                    ],
                    "select": [
                        "plan_id",
                        "created_at"
                    ]
                },
                "tables": [
                    "stg.ps_subscription_to_plan_conversion",
                    "extract.ps_subscription_to_plan_conversion"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.ps_subscription_to_plan_conversion\nselect\n\t  plan_id::INTEGER\n\t, created_at::TIMESTAMP\n\t, customer_id::INTEGER\n\t, plan_conversion_source::VARCHAR(64)\n\t, rails_site_processed_at::TIMESTAMP\n\t, dsc_processed_at::TIMESTAMP\n\t, plan_selection_decision::VARCHAR(64)\nfrom extract.ps_subscription_to_plan_conversion\nwhere 1=1\n;"
            }
        ],
        "extract.dsc_prod.customers.sql": [],
        "extract.dsc_prod.invoices.sql": [],
        "load.stg.ps_plans.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.ps_plans.id",
                        "extract.ps_plans.id"
                    ]
                },
                "tables": [
                    "stg.ps_plans"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.ps_plans\nusing extract.ps_plans\nwhere 1=1\n  and stg.ps_plans.id = extract.ps_plans.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ps_plans"
                    ],
                    "select": [
                        "id",
                        "shop_id",
                        "customer_id",
                        "plan_state",
                        "plan_frequency",
                        "plan_bills_at"
                    ]
                },
                "tables": [
                    "stg.ps_plans",
                    "extract.ps_plans"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.ps_plans\nselect\n    id::INT,\n    shop_id::INT,\n    customer_id::INT,\n    plan_state::VARCHAR(255),\n    plan_frequency::INT,\n    plan_bills_at::TIMESTAMP,\n    plan_activated_at::TIMESTAMP,\n    plan_created_at::TIMESTAMP,\n    plan_updated_at::TIMESTAMP,\n    plan_cancellation_id::INT,\n    rails_site_processed_at::TIMESTAMP,\n    dsc_processed_at::TIMESTAMP\nfrom extract.ps_plans\nwhere 1=1\n;"
            }
        ],
        "extract.dsc_prod.marketing_campaign_email_instances.sql": [],
        "load.stg.erp_invoice_status_histories.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.erp_invoice_status_histories.id",
                        "extract.erp_invoice_status_histories.id"
                    ]
                },
                "tables": [
                    "stg.erp_invoice_status_histories"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.erp_invoice_status_histories\nusing extract.erp_invoice_status_histories\nwhere stg.erp_invoice_status_histories.id = extract.erp_invoice_status_histories.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "erp_invoice_status_histories"
                    ],
                    "select": [
                        "id",
                        "invoice_id",
                        "from_status",
                        "to_status",
                        "created_at",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.erp_invoice_status_histories",
                    "extract.erp_invoice_status_histories"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.erp_invoice_status_histories\nselect\n   id\n , invoice_id\n , from_status\n ,  to_status\n , created_at\n , dsc_processed_at\nfrom extract.erp_invoice_status_histories\n;"
            }
        ],
        "extract.dsc_prod.survey_options.sql": [],
        "extract.dsc_prod.extras.sql": [],
        "extract.cheetah.crm_attributes_segment.sql": [],
        "extract.plan_stream.flat_promotion_tiers.sql": [],
        "extract.dsc_prod.payment_retries.sql": [],
        "extract.derived.discounted_bundle_values.sql": [],
        "extract.dsc_prod.product_prices.sql": [],
        "load.stg.discounted_bundle_values.sql": [
            {
                "type": "DELETE",
                "columns": null,
                "tables": [
                    "stg.discounted_bundle_values"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.discounted_bundle_values;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "discounted_bundle_values"
                    ],
                    "select": [
                        "bundle_id",
                        "bundle_product_id",
                        "product_id",
                        "discounted_value"
                    ]
                },
                "tables": [
                    "stg.discounted_bundle_values",
                    "extract.discounted_bundle_values"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.discounted_bundle_values\nselect\n\t  bundle_id\n\t, bundle_product_id\n\t, product_id\n\t, discounted_value\nfrom extract.discounted_bundle_values\n;"
            }
        ],
        "extract.dsc_prod.marketing_campaign_unsubscribes.sql": [],
        "extract.erp.gift_card_status_histories.sql": [],
        "load.stg.customer_attributes.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.customer_attributes.id",
                        "extract.customer_attributes.id"
                    ]
                },
                "tables": [
                    "stg.customer_attributes"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.customer_attributes\nusing extract.customer_attributes\nwhere stg.customer_attributes.id = extract.customer_attributes.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_attributes"
                    ],
                    "select": [
                        "*"
                    ]
                },
                "tables": [
                    "stg.customer_attributes",
                    "extract.customer_attributes"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.customer_attributes\nselect\n  *\nfrom extract.customer_attributes\n;"
            }
        ],
        "extract.erp.order_products.sql": [],
        "extract.dsc_prod.zuora_payment_methods.sql": [],
        "load.stg.cheetah_customer_products_segment.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.cheetah_customer_products_segment.customer_id",
                        "extract.cheetah_customer_products_segment.customer_id",
                        "stg.cheetah_customer_products_segment.shop_code",
                        "extract.cheetah_customer_products_segment.shop_code",
                        "stg.cheetah_customer_products_segment.product_id",
                        "extract.cheetah_customer_products_segment.product_id",
                        "stg.cheetah_customer_products_segment.sku",
                        "extract.cheetah_customer_products_segment.sku"
                    ]
                },
                "tables": [
                    "stg.cheetah_customer_products_segment"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.cheetah_customer_products_segment\nusing extract.cheetah_customer_products_segment\nwhere stg.cheetah_customer_products_segment.customer_id = extract.cheetah_customer_products_segment.customer_id\n     and stg.cheetah_customer_products_segment.shop_code = extract.cheetah_customer_products_segment.shop_code\n     and stg.cheetah_customer_products_segment.product_id = extract.cheetah_customer_products_segment.product_id\n     and stg.cheetah_customer_products_segment.sku = extract.cheetah_customer_products_segment.sku\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "cheetah_customer_products_segment"
                    ],
                    "select": [
                        "customer_id",
                        "product_id",
                        "sku",
                        "shop_code",
                        "box_manager_ranking",
                        "processed_at"
                    ]
                },
                "tables": [
                    "stg.cheetah_customer_products_segment",
                    "extract.cheetah_customer_products_segment"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.cheetah_customer_products_segment\nselect\n         customer_id\n       , product_id\n       , sku\n       , shop_code\n       , box_manager_ranking\n       , processed_at\nfrom extract.cheetah_customer_products_segment\n;"
            }
        ],
        "load.stg.marketing_campaign_unsubscribes.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.marketing_campaign_unsubscribes.id",
                        "extract.marketing_campaign_unsubscribes.id"
                    ]
                },
                "tables": [
                    "stg.marketing_campaign_unsubscribes"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.marketing_campaign_unsubscribes\nUSING extract.marketing_campaign_unsubscribes\n  WHERE stg.marketing_campaign_unsubscribes.id = extract.marketing_campaign_unsubscribes.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "marketing_campaign_unsubscribes"
                    ],
                    "select": [
                        "id",
                        "customer_id",
                        "snapshotted_campaign_email_group_id",
                        "campaign_email_id",
                        "campaign_email_instance_id",
                        "created_at",
                        "updated_at",
                        "synced_to_madrivo",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.marketing_campaign_unsubscribes",
                    "extract.marketing_campaign_unsubscribes"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.marketing_campaign_unsubscribes\n  SELECT\n\t\t\tid\n\t\t,\tcustomer_id\n\t  ,\tsnapshotted_campaign_email_group_id\n\t\t,\tcampaign_email_id\n\t\t,\tcampaign_email_instance_id\n\t\t,\tcreated_at\n\t\t,\tupdated_at\n\t\t,\tsynced_to_madrivo\n\t\t,\tdsc_processed_at\n  FROM extract.marketing_campaign_unsubscribes\n;"
            }
        ],
        "extract.dsc_prod.plan_state_histories.sql": [],
        "load.stg.customer_sources.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.customer_sources.id",
                        "extract.customer_sources.id"
                    ]
                },
                "tables": [
                    "stg.customer_sources"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.customer_sources\nusing extract.customer_sources\nwhere 1=1\n  and stg.customer_sources.id = extract.customer_sources.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_sources"
                    ],
                    "select": [
                        "id",
                        "customer_id",
                        "funnel",
                        "created_at"
                    ]
                },
                "tables": [
                    "stg.customer_sources",
                    "extract.customer_sources"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.customer_sources\nselect\n    id::INT,\n    customer_id::INT,\n    left(funnel,100)::VARCHAR(100),\n    created_at::TIMESTAMP,\n    updated_at::TIMESTAMP,\n    dsc_processed_at::TIMESTAMP,\n    source::VARCHAR(100),\n    plan_id::INT\nfrom extract.customer_sources\n;"
            }
        ],
        "extract.dsc_prod.marketing_campaign_email_opens.sql": [],
        "load.stg.orders.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.orders.id",
                        "extract.orders.id"
                    ]
                },
                "tables": [
                    "stg.orders"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.orders\nusing extract.orders\nwhere stg.orders.id = extract.orders.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "orders"
                    ],
                    "select": [
                        "id",
                        "customer_subscription_id",
                        "sub_total",
                        "tax",
                        "shipping_charges",
                        "total",
                        "invoice_id",
                        "created_at",
                        "updated_at",
                        "customer_id",
                        "coupon_instance_id",
                        "currency_id",
                        "discount",
                        "obfuscated_id",
                        "confirmation_email_instance_id",
                        "creation_reason",
                        "creation_source",
                        "created_by",
                        "shipping_address_id",
                        "customer_subscription_bill_run_id",
                        "is_on_the_house",
                        "base_shipping_charges",
                        "total_shipping_charges",
                        "ignore_shipping_charges",
                        "shop_id"
                    ]
                },
                "tables": [
                    "stg.orders",
                    "extract.orders"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.orders\nselect\n    id\n  , customer_subscription_id\n  , sub_total\n  , tax\n  , shipping_charges\n  , total\n  , invoice_id\n  , created_at\n  , updated_at\n  , customer_id\n  , coupon_instance_id\n  , currency_id\n  , discount\n  , obfuscated_id\n  , confirmation_email_instance_id\n  , creation_reason\n  , creation_source\n  , created_by\n  , shipping_address_id\n  , customer_subscription_bill_run_id\n  , is_on_the_house\n  , base_shipping_charges\n  , total_shipping_charges\n  , ignore_shipping_charges\n  , shop_id\nfrom extract.orders\n;"
            }
        ]
    },
    "dm-optimove-import": {
        "load.stg.optimail_email_events.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.optimail_email_events.sg_event_id",
                        "extract.optimail_email_events.sg_event_id"
                    ]
                },
                "tables": [
                    "stg.optimail_email_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.optimail_email_events\nusing extract.optimail_email_events\nwhere stg.optimail_email_events.sg_event_id = extract.optimail_email_events.sg_event_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "optimail_email_events"
                    ],
                    "select": [
                        "campaign_id",
                        "target_group_name",
                        "marketing_action_name",
                        "action_name",
                        "template_name",
                        "subject_line",
                        "optimove_mail_name",
                        "execution_date"
                    ]
                },
                "tables": [
                    "stg.optimail_email_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.optimail_email_events\nselect  distinct   \nsg_event_id\t\n,campaign_id\t\n,target_group_name\t\n,marketing_action_name\t\n,action_name\t\n,template_name\t\n,subject_line\t\n,optimove_mail_name\t\n,execution_date\t\n,\"timestamp\"\t\n,event\t\n,email\t\n,obfuscated_id\t\n,customer_id\t\n,url\t\n,useragent\n--,getdate()::timestamp as dw_load_date_time\n\nfrom extract.optimail_email_events\n;"
            }
        ],
        "load.stg.optimove_popups.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.optimove_popups.campaign_id",
                        "extract.optimove_popups.campaign_id",
                        "stg.optimove_popups.obfuscated_customer_id",
                        "extract.optimove_popups.Obfuscated_id",
                        "stg.optimove_popups.date_time",
                        "extract.optimove_popups.datetime"
                    ]
                },
                "tables": [
                    "stg.optimove_popups"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.optimove_popups\nusing extract.optimove_popups\nwhere stg.optimove_popups.campaign_id = extract.optimove_popups.campaign_id\nand stg.optimove_popups.obfuscated_customer_id = extract.optimove_popups.Obfuscated_id\nand stg.optimove_popups.date_time = extract.optimove_popups.datetime\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "optimove_popups"
                    ],
                    "select": [
                        "obfuscated_id",
                        "datetime",
                        "target_group_name"
                    ]
                },
                "tables": [
                    "stg.optimove_popups",
                    "extract.optimove_popups"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.optimove_popups\nselect  distinct   \ncampaign_id\t\n,obfuscated_id as obfuscated_customer_id\t\n,\"datetime\"\t\n,target_group_name \n,trigger_name \n,test_control \n,getdate()::timestamp as dw_load_date_time\n\nfrom extract.optimove_popups\n;"
            }
        ],
        "load.stg.optimove_customer_output.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.optimove_customer_output.customer_id",
                        "extract.optimove_customer_output.customer_id"
                    ]
                },
                "tables": [
                    "stg.optimove_customer_output"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.optimove_customer_output\nusing extract.optimove_customer_output\nwhere stg.optimove_customer_output.customer_id = extract.optimove_customer_output.customer_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "optimove_customer_output"
                    ],
                    "select": [
                        "customer_id",
                        "initial_microsegment_id",
                        "final_microsegment_id",
                        "src_date",
                        "legacyfullservicefuturevalue",
                        "migratedmembersfuturevalue",
                        "microsegment_name",
                        "lifecycle_stage_id",
                        "lifecycle_stage",
                        "future_value",
                        "churn_rate",
                        "reactivation_rate",
                        "value_segment",
                        "past_spend"
                    ]
                },
                "tables": [
                    "stg.optimove_customer_output",
                    "extract.optimove_customer_output"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.optimove_customer_output\nselect\n    customer_id\n  , initial_microsegment_id\n  , final_microsegment_id\n  , src_date\n  , getdate() as dw_load_date_time\n  , nvl(past_spend,0) as past_spend\n  , legacyfullservicefuturevalue\n  , migratedmembersfuturevalue\n  , microsegment_name \n  , lifecycle_stage_id \n  , lifecycle_stage \n  , future_value \n  , churn_rate \n  , reactivation_rate \n  , value_segment\nfrom extract.optimove_customer_output\n;"
            }
        ],
        "load.stg.d_optimove_microsegments.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.d_optimove_microsegments.microsegment_id",
                        "extract.d_optimove_microsegments.microsegment_id"
                    ]
                },
                "tables": [
                    "stg.d_optimove_microsegments"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.d_optimove_microsegments\nusing extract.d_optimove_microsegments\nwhere stg.d_optimove_microsegments.microsegment_id = extract.d_optimove_microsegments.microsegment_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "d_optimove_microsegments"
                    ],
                    "select": [
                        "microsegment_id",
                        "microsegment_name",
                        "lifecycle_stage_id",
                        "future_value",
                        "churn_rate",
                        "reactivation_rate"
                    ]
                },
                "tables": [
                    "stg.d_optimove_microsegments",
                    "extract.d_optimove_microsegments"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.d_optimove_microsegments\nselect\n    microsegment_id\n  , microsegment_name\n  , lifecycle_stage_id\n  , future_value\n  , churn_rate\n  , reactivation_rate\n  , getdate() as dw_load_date_time\nfrom extract.d_optimove_microsegments\n;"
            }
        ],
        "load.stg.optimove_microsegments.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.optimove_microsegments.microsegment_id",
                        "extract.optimove_microsegments.microsegment_id"
                    ]
                },
                "tables": [
                    "stg.optimove_microsegments"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.optimove_microsegments\nusing extract.optimove_microsegments\nwhere stg.optimove_microsegments.microsegment_id = extract.optimove_microsegments.microsegment_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "optimove_microsegments"
                    ],
                    "select": [
                        "extract.optimove_microsegments.microsegment_id",
                        "microsegment_name",
                        "lifecycle_stage_id",
                        "future_value",
                        "churn_rate",
                        "reactivation_rate",
                        "map.optimove_microsegments_metadata.life_cycle_stage",
                        "map.optimove_microsegments_metadata.value_segment"
                    ],
                    "join": [
                        "extract.optimove_microsegments.microsegment_id",
                        "map.optimove_microsegments_metadata.microsegment_id"
                    ]
                },
                "tables": [
                    "stg.optimove_microsegments",
                    "extract.optimove_microsegments",
                    "map.optimove_microsegments_metadata"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.optimove_microsegments\nselect\n    a.microsegment_id\n  , microsegment_name\n  , lifecycle_stage_id\n  , future_value\n  , churn_rate\n  , reactivation_rate\n  , getdate() as dw_load_date_time\n  , b.life_cycle_stage as lifecycle_stage\n  , b.value_segment as value_segment\nfrom extract.optimove_microsegments a\nleft join map.optimove_microsegments_metadata b\nON a.microsegment_id = b.microsegment_id\n;"
            }
        ],
        "load.stg.optimove_customer_target_group.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.optimove_customer_target_group.optimove_campaign_id",
                        "extract.optimove_customer_target_group.optimove_campaign_id",
                        "stg.optimove_customer_target_group.obfuscated_customer_id",
                        "extract.optimove_customer_target_group.obfuscated_customer_id"
                    ]
                },
                "tables": [
                    "stg.optimove_customer_target_group"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.optimove_customer_target_group\nusing extract.optimove_customer_target_group\nwhere stg.optimove_customer_target_group.optimove_campaign_id = extract.optimove_customer_target_group.optimove_campaign_id\nand  stg.optimove_customer_target_group.obfuscated_customer_id = extract.optimove_customer_target_group.obfuscated_customer_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "optimove_customer_target_group"
                    ],
                    "select": [
                        "Target_group_name",
                        "email_actual_sent_time",
                        "campaign_customer_group_type",
                        "campaign_type",
                        "template_id",
                        "template_name",
                        "target_group_id",
                        "optimove_campaign_id"
                    ]
                },
                "tables": [
                    "stg.optimove_customer_target_group",
                    "extract.optimove_customer_target_group"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.optimove_customer_target_group\nselect  distinct   obfuscated_customer_id\n  , Target_group_name\n  , email_actual_sent_time\n  , campaign_customer_group_type\n  , campaign_type\n  , template_id\n  , template_name\n  , target_group_id\n  , optimove_campaign_id\n  , getdate():: timestamp as dw_load_date_time\n\nfrom extract.optimove_customer_target_group\n;"
            }
        ],
        "load.stg.braze_optimove_customer_target_group.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.braze_optimove_customer_target_group.optimove_campaign_id",
                        "extract.braze_optimove_customer_target_group.optimove_campaign_id",
                        "stg.braze_optimove_customer_target_group.obfuscated_customer_id",
                        "extract.braze_optimove_customer_target_group.obfuscated_customer_id"
                    ]
                },
                "tables": [
                    "stg.braze_optimove_customer_target_group"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.braze_optimove_customer_target_group\nusing extract.braze_optimove_customer_target_group\nwhere stg.braze_optimove_customer_target_group.optimove_campaign_id = extract.braze_optimove_customer_target_group.optimove_campaign_id\nand  stg.braze_optimove_customer_target_group.obfuscated_customer_id = extract.braze_optimove_customer_target_group.obfuscated_customer_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "braze_optimove_customer_target_group"
                    ],
                    "select": [
                        "Target_group_name",
                        "email_actual_sent_time",
                        "campaign_customer_group_type",
                        "campaign_type",
                        "template_id",
                        "template_name",
                        "target_group_id",
                        "optimove_campaign_id",
                        "braze_campaign_id",
                        "send_id"
                    ]
                },
                "tables": [
                    "stg.braze_optimove_customer_target_group",
                    "extract.braze_optimove_customer_target_group"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "Insert into stg.braze_optimove_customer_target_group\nselect  DISTINCT   obfuscated_customer_id\n  , Target_group_name\n  , email_actual_sent_time\n  , campaign_customer_group_type\n  , campaign_type\n  , template_id\n  , template_name\n  , target_group_id\n  , optimove_campaign_id\n  , braze_campaign_id\n  , send_id\n  , getdate():: timestamp as dw_load_date_time\nfrom extract.braze_optimove_customer_target_group\n;"
            }
        ],
        "load.stg.d_customer_optimove_output.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.d_customer_optimove_output.customer_id",
                        "extract.d_customer_optimove_output.customer_id"
                    ]
                },
                "tables": [
                    "stg.d_customer_optimove_output"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.d_customer_optimove_output\nusing extract.d_customer_optimove_output\nwhere stg.d_customer_optimove_output.customer_id = extract.d_customer_optimove_output.customer_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "d_customer_optimove_output"
                    ],
                    "select": [
                        "customer_id",
                        "initial_microsegment_id",
                        "final_microsegment_id",
                        "src_date"
                    ]
                },
                "tables": [
                    "stg.d_customer_optimove_output",
                    "extract.d_customer_optimove_output"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.d_customer_optimove_output\nselect\n    customer_id\n  , initial_microsegment_id\n  , final_microsegment_id\n  , src_date\n  , getdate() as dw_load_date_time\nfrom extract.d_customer_optimove_output\n;"
            }
        ]
    },
    ".DS_Store": {},
    "dm-daily-reports": {
        "load.dmt.rpt_media_aquisition.sql": [
            {
                "type": "CREATE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "---====/// MAIN\n-- truncate table dmt.rpt_media_aquisition;\n\n-- all report dates are in PST timezones\n\n-- order_created_date is in PST timezone\n\nCREATE TEMP TABLE dm_delta AS\nSELECT\n    date_trunc('day', convert_timezone('PST',getdate())::date  -  interval '30 day')::date as order_created_date\n  , date_trunc('day', convert_timezone('PST',getdate()))::date as \"current_date\"\n;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [
                    "dmt.rpt_media_aquisition"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from dmt.rpt_media_aquisition\nwhere 1=1\n  -- and date_trunc('day', convert_timezone('PST',i.order_created_at))::date >= '2019-04-01'\n  and order_created_date >= (SELECT order_created_date FROM dm_delta);"
            },
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- [2019-05-07 15:33:25] 62, 699 rows affected in 2s 274ms\n-- [2019-05-07 15:50:58] 129,637 rows affected in 2s 546ms\n-- [2019-05-07 16:10:34] 108,486 rows affected in 510ms\n\ninsert into dmt.rpt_media_aquisition\nselect\n    date_trunc('day', convert_timezone('PST',i.order_created_at))::date order_created_date\n  , i.plan_initial_invoice\n  , i.initial_invoice\n\n  , dc.platform\n -- , dc.os_name\n  , dc.device_type as device_type\n\n  , dc.utm_source as utm_source\n  , dc.utm_medium as utm_medium\n  , dc.utm_campaign as utm_campaign\n  --  , dc.first_utm_content as utm_content\n  --  , dc.first_utm_term as utm_term\n  -- TODO: rename to shipment_status; consolidated with dmt.rpt_mbo_order.shipment_status\n  , i.shipment_status as revenue_type\n\n  , left(dc.funnel_sku_list, 256) as funnel_sku_list\n  --  , left(dc.bundle_name, 512) as bundle_name\n\n  , dc.bm_type\n  , dc.registered_in_shop_name\n  , dc.plan_frequency as plan_frequency\n\n  , sum(i.grand_total) as grand_total\n  , sum(i.total_revenue) as amount_true\n  , sum(i.total_line_item_discount) as total_line_item_discount\n  , sum(i.total_line_item_tax) as total_line_item_tax\n  , sum(i.base_shipping_tax) as base_shipping_tax\n  , sum(i.total_cost) as total_cost\n  , sum(i.total_shipping_tax) as total_shipping_tax\n  , count(distinct i.customer_id) as customers\n  , count(distinct order_id) as orders\n  , count(*) as total_rec\n  , getdate() dw_load_timestamp\nfrom stg.mbo_order_base i\n    inner join dmt.rpt_member dc\n      on i.customer_id = dc.customer_id\nwhere 1=1\n  --and date_trunc('day', convert_timezone('PST',i.order_created_at))::date >= '2019-04-01'\n  and date_trunc('day', convert_timezone('PST',i.order_created_at))::date >= (SELECT order_created_date FROM dm_delta)\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13\n;"
            }
        ],
        "load.dmt.rpt_email_summary_uat.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "email_source"
                    ]
                },
                "tables": [
                    "dmt.rpt_email_summary"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from dmt.rpt_email_summary where email_source in ('optimove_braze','braze_only')\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "rpt_email_summary"
                    ],
                    "select": [
                        "f.email_source",
                        "f.camp_id",
                        "f.optimove_campaign_id",
                        "f.campaign_name",
                        "f.target_group_name",
                        "f.campaign_customer_group",
                        "f.shop_name",
                        "f.min_open_time",
                        "f.min_click_time",
                        "f.send_time"
                    ]
                },
                "tables": [
                    "dmt.rpt_email_summary"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into dmt.rpt_email_summary\nselect f.email_source,\n       f.camp_id,\n       f.optimove_campaign_id,\n       f.campaign_name,\n       f.target_group_name,\n       f.campaign_customer_group,\n       f.shop_name,\n       case when f.min_open_time is not null then 1 else 0 end as open_flag,\n       case when f.min_click_time is not null then 1 else 0 end as click_flag,\n       CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', f.send_time::timestamp)::date as send_date_pst,\n       count(distinct f.customer_id) as distinct_customers,\n       count(f.customer_id) as total_sends,\n       sum(number_of_opens) as total_opens,\n       count(case when f.min_open_time is not null then f.dispatch_id else null end) as total_unique_opens,\n       sum(number_of_clicks) as total_clicks,\n       count(case when f.min_click_time is not null then f.dispatch_id else null end) as total_unique_click,\n       SUM(ep.add_quantity) as add_qty,\n       sum(ep.add_quantity_invoiced) as add_quantity_invoiced,\n       sum(ep.price_excluding_discount) as price_exc_discount,\n       sum(ep.price_including_discount) as price_inc_discount,\n       getdate()::timestamp as dw_load_date_time,\n      -- md5(f.customer_id||nvl(f.dispatch_id,'')||nvl(f.optimove_campaign_id,-9999)||nvl(f.camp_id,'')||nvl(f.campaign_name,'')||f.send_time::date||nvl(f.campaign_customer_group,'')) as pk_hash\nmd5(nvl(f.optimove_campaign_id,-9999)||nvl(f.camp_id,'')||nvl(f.campaign_name,'')||CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', f.send_time::timestamp)::date||nvl(f.campaign_customer_group,'')) as pk_hash\n\nfrom stg.braze_optimove_email_sends f\n--join dm_delta dd on dd.camp_id = nvl(f.camp_id,0) and  dd.optimove_campaign_id = nvl(f.optimove_campaign_id,0)\nleft join\n\t(\n\tselect\n\t\tcustomer_id,\n\t\tdispatch_id,\n\t\toptimove_campaign_id,\n\t\tcamp_id,\n\t\tsend_time_pst::date as send_time_pst, -- this new addition\n\t\tsum(add_quantity) as add_quantity,\n\t\tsum(add_quantity_invoiced) as add_quantity_invoiced,\n\t\tsum(price_excluding_discount) as price_excluding_discount,\n\t\tsum(price_including_discount) as price_including_discount\n\tfrom dmt.rpt_email_performance\n      where email_source in ('optimove_braze','braze_only')\n\tgroup by 1,2,3,4,5\n\t)ep\non f.customer_id = ep.customer_id\nand (nvl(f.dispatch_id,'abc') = nvl(ep.dispatch_id,'xyz') OR CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles',f.send_time)::date = ep.send_time_pst::date )\nand (nvl(f.camp_id,'abc') = nvl(ep.camp_id,'xyz') OR nvl(f.optimove_campaign_id,-9999) = nvl(ep.optimove_campaign_id,-1))\nwhere email_source in ('optimove_braze','braze_only')\ngroup by 1,2,3,4,5,6,7,8,9,10;"
            }
        ],
        "load.dmt.rpt_member_revenue_monthly.sql": [
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- truncate table dmt.rpt_member_revenue_monthly;\n\ninsert into dmt.rpt_member_revenue_monthly\nselect\n    date_trunc('month', convert_timezone('PST',ip.order_created_at))::date as order_month_date\n  , ip.customer_id\n  , ip.shop_name\n  , dp.class_type -- NRP/ Razor\n  , ip.order_creation_reason_name -- NSRQ / Renewal .. etc\n  , case\n      when ip.shipment_shipped_at is null and ip.invoice_status = 'paid' then 'paid_not_shipped'\n      when ip.shipment_shipped_at is null and ip.invoice_status != 'paid' then ip.invoice_status\n      when ip.shipment_shipped_at is not null and ip.invoice_status = 'paid' then 'paid_shipped'\n      else 'other'\n    end as revenue_type -- add to cart / shipped\n  --, ip.product_sku\n  , count(distinct ip.order_id) as orders\n  , count(distinct ip.shipment_id) as shipments\n  , sum(ip.price) as revenue\n  , sum(ip.quantity) as item_quantity\n  , getdate() as dw_load_timestamp\nfrom dmt.f_invoice_product ip\n  INNER JOIN  dmt.d_product dp\n    on ip.product_id = dp.product_id\n  inner join dmt.d_customer c\n    on ip.customer_id = c.customer_id\n  left outer join stg.test_customers t\n    ON c.customer_id = t.customer_id\n  left outer join map.shop ms\n    on c.registered_in_shop_id = ms.shop_id\nwhere 1=1\n  --and ip.customer_id = '1095353'\n  and ip.price > 0 -- exclude packages and products already included in bundle item :: may need it if item count required\n  and  order_creation_source not in ('msa' ,'fulfillment_monitor')\n  and c.email not ilike '%@dollarshaveclub.%'\n  and t.customer_id is null\n  and ip.order_created_at >= '2018-01-01'\ngroup by\n  1,2,3,4,5,6\norder by\n  1,2,3,4,5,6\n;"
            }
        ],
        "load.stg.mbo_order_channel.sql": [
            {
                "type": "CREATE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- truncate table stg.mbo_order_channel;\n\n\nCREATE TEMP TABLE dm_delta AS\nSELECT\n  date_trunc('day', getdate()::date  -  interval '30 day')::date AS order_created_date,\n  date_trunc('day', getdate())::date AS current_date\n;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [
                    "stg.mbo_order_channel"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.mbo_order_channel\nwhere 1=1\n  -- and date_trunc('day', convert_timezone('PST',i.order_created_at))::date >= '2019-04-01'\n  and order_created_at >= (SELECT order_created_date FROM dm_delta);"
            },
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- [2019-05-10 16:57:29] 91,933 rows affected in 2s 417ms\n\ninsert into stg.mbo_order_channel\nselect\n    oc.order_created_at\n  , oc.customer_id\n  , oc.order_id\n  , oc.visit_id\n  , oc.purchase_flag\n  , oc.visit_customer_min_timestamp\n  , oc.visit_customer_max_timestamp\n  -- , oc.rnk\n  , oc.first_utm_medium\n  , oc.first_utm_source\n  , oc.first_utm_campaign\n  , oc.first_utm_content\n  , oc.first_utm_term\n  , oc.last_utm_medium\n  , oc.last_utm_source\n  , oc.last_utm_campaign\n  , oc.last_utm_content\n  , oc.last_utm_term\n  , oc.mobile_id\n  , oc.os_name\n  , getdate() as dw_load_timestamp\nfrom (\n\nselect\n    o.order_created_at\n  , o.customer_id\n  , o.order_id\n  , avc.visit_id\n  , avc.purchase_flag\n  , avc.visit_customer_min_timestamp\n  , avc.visit_customer_max_timestamp\n  , row_number()\n      over(partition by o.customer_id, o.order_id\n           order by avc.purchase_flag desc\n                 , avc.visit_customer_min_timestamp desc\n      ) rnk\n  , vs.first_utm_medium\n  , vs.first_utm_source\n  , vs.first_utm_campaign\n  , vs.first_utm_content\n  , vs.first_utm_term\n  , vs.last_utm_medium\n  , vs.last_utm_source\n  , vs.last_utm_campaign\n  , vs.last_utm_content\n  , vs.last_utm_term\n  , vs.mobile_id\n  , vs.os_name\n\nfrom stg.mbo_order_base o\n  inner  join stg.adobe_visit_customers avc\n    on o.customer_id = avc.customer_id\n       and o.order_created_at\n       between avc.visit_customer_min_timestamp and visit_customer_max_timestamp\n  inner join dmt.adobe_visit_summary vs\n    on avc.visit_id = vs.visit_id\nwhere 1=1\n  and o.order_created_at  >= (select order_created_date from dm_delta)\n  -- recurring orders are not subject of marketing campaigns, - excluding the false positive\n  and o.box_type not in ('recurring')\n\n)oc\nwhere 1=1\n  and rnk = 1\n;"
            }
        ],
        "load.dmt.rpt_invoice_product.sql": [
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "invoice_product_id",
                        "invoice_id",
                        "customer_id"
                    ],
                    "where": [
                        "dmt.f_invoice_product.dw_load_date_time"
                    ]
                },
                "tables": [
                    "dm_delta",
                    "dmt.f_invoice_product"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "CREATE TEMP TABLE dm_delta AS\nselect invoice_product_id, invoice_id, customer_id\nfrom dmt.f_invoice_product ip\nWHERE convert_timezone('PST', ip.dw_load_date_time) >= '<start_date>'::timestamp  -  interval '3 day'\ngroup by 1, 2, 3\n;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- select count(*) from dm_delta; --32,362,520\n\n\nDELETE FROM dmt.rpt_invoice_product\nUSING dm_delta\nWHERE 1 = 1\n  AND dmt.rpt_invoice_product.invoice_product_id = dm_delta.invoice_product_id\n\tAND dmt.rpt_invoice_product.invoice_id = dm_delta.invoice_id\n\tAND dmt.rpt_invoice_product.customer_id = dm_delta.customer_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "rpt_invoice_product"
                    ],
                    "select": [
                        "ip.invoice_product_id",
                        "ip.invoice_id",
                        "ip.customer_id",
                        "ip.order_id",
                        "ip.order_product_id",
                        "ip.order_created_at",
                        "ip.invoice_status",
                        "ip.shop_name",
                        "ip.effective_unit_price",
                        "ip.price",
                        "ip.quantity",
                        "ip.shipping",
                        "ip.tax"
                    ]
                },
                "tables": [
                    "dmt.rpt_invoice_product"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO dmt.rpt_invoice_product\nSELECT\nip.invoice_product_id\n, ip.invoice_id\n, ip.customer_id\n, ip.order_id\n, ip.order_product_id\n, ip.order_created_at as order_created_date\n, convert_timezone('PST', ip.order_created_at) as order_created_date_pst\n, ip.invoice_status\n, ip.shop_name\n, ip.effective_unit_price\n, ip.price\n, ip.quantity\n, ip.shipping\n, ip.tax\n--, ip.total_cost\n--, ip.unit_cost\n, ip.discount\n, ip.unit_price\n, ip.product_id\n, ip.product_sku\n, ip.shipment_id\n, ip.shipment_created_at as shipment_created_date\n, convert_timezone('PST', ip.shipment_created_at) as shipment_created_date_pst\n, ip.shipment_shipped_at as shipment_shipped_date\n, convert_timezone('PST', ip.shipment_shipped_at) as shipment_shipped_date_pst\n, ip.order_creation_reason\n, ip.order_creation_reason_name\n, ip.nsrq\n, ip.order_creation_source\n, m.currency\n--, ip.initial_invoice\n, ip.shipping_address_id\n, ip.order_attribution_attribution_id\n, ip.order_attribution_attribution_type\n, cc.quantity_recurring\n, (cc.quantity - cc.quantity_recurring) as onetime_quantity\n, getdate()::timestamp as dw_load_date_time\nFROM dm_delta as dd\nINNER JOIN dmt.f_invoice_product as ip\n\tON dd.invoice_product_id = ip.invoice_product_id\n\tAND dd.invoice_id = ip.invoice_id\n\tAND dd.customer_id = ip.customer_id\nLEFT JOIN stg.ps_close_scheduled_cart_items as cc\n\tON ip.customer_id = cc.customer_id AND ip.order_attribution_attribution_id = cc.scheduled_cart_id AND ip.product_id = cc.product_id AND ip.quantity = cc.quantity\nLEFT JOIN map.currency as m\n\tON m.currency_id = ip.currency_id\nWHERE 1 = 1\nAND ip.effective_unit_price > 0\nAND ip.invoice_status = 'paid'\nAND ip.order_creation_source not in ('msa', 'fulfillment_monitor')\n;"
            }
        ],
        "load.dmt.rpt_email_performance.sql": [
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "camp_id",
                        "campaign_name",
                        "send_time",
                        "campaign_customer_group"
                    ],
                    "where": [
                        "send_time"
                    ]
                },
                "tables": [
                    "dm_delta_7day",
                    "stg.cheetah_optimove_email_sends"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "create temp table dm_delta_7day as\nselect md5((nvl(camp_id,0)||campaign_name||CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', send_time)::date||campaign_customer_group)) as pk_hash\nfrom stg.cheetah_optimove_email_sends s\nwhere CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', send_time)::date >= '<start_date>'::timestamp  - interval '7 day'\ngroup by 1\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "dmt.rpt_email_performance.pk_hash",
                        "dm_delta_7day.pk_hash"
                    ]
                },
                "tables": [
                    "dmt.rpt_email_performance"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from  dmt.rpt_email_performance\nusing dm_delta_7day\nwhere dmt.rpt_email_performance.pk_hash = dm_delta_7day.pk_hash\n\n;"
            },
            {
                "skipped": true,
                "value": "insert into dmt.rpt_email_performance\nSELECT\n    t1.camp_id,\n    t1.msg_id,\n    t1.email_source,\n    t1.campaign_name,\n    t1.optimove_campaign_id,\n    t1.target_group_name,\n    t1.campaign_customer_group,\n    t1.customer_id,\n    CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.send_time) AS send_time_pst,\n    CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.first_open_time) AS first_open_time_pst,\n    CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.first_click_time) AS first_click_time_pst,\n    t1.scheduled_cart_id,\n    t1.plan_id,\n    t1.next_bill_date,\n    t1.shop_name,\n    t1.product_id,\n    t1.sku,\n    t1.add_quantity,\n    t1.invoice_qty as add_quantity_invoiced,\n    CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.add_time) AS add_time_pst,\n    CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.order_created_at) AS order_created_at_pst,\n    t1.price_excluding_discount,\n    t1.invoice_id,\n    t1.invoice_status,\n    CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.shipment_shipped_at) AS shipment_shipped_at_pst,\n    t1.price_including_discount,\n    CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.scheduled_cart_closed_at) AS scheduled_cart_closed_at_pst,\n    t1.closed_cart_plan_state,\n    t1.removed,\n    t1.open_cart,\n    t1.churned_suspended,\n    t1.add_type,\n    case when hours_add_from_send <= 72 then true else false end as send72_attrib,\n    case when hours_to_open <= 72 AND hours_add_from_click <= 24 then true else false end as click_attrib,\n    getdate()::timestamp as dw_load_date_time,\n    md5((nvl(camp_id,0)||campaign_name||CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.send_time)::date||campaign_customer_group)) as pk_hash,\n    min(t1.rnk) as email_rank\nFROM(   SELECT\n            c.camp_id,\n            c.msg_id,\n            c.email_source,\n            c.campaign_name,\n            c.optimove_campaign_id,\n            c.target_group_name,\n            c.campaign_customer_group,\n            c.customer_id,\n            c.send_time,\n            c.first_open_time,\n            c.first_click_time,\n            cie.scheduled_cart_id,\n            cie.plan_id,\n            CASE\n                WHEN a.scheduled_cart_id IS NOT NULL\n                AND i.invoice_id IS NULL\n                THEN a.plan_bills_at\n                ELSE NULL\n            END AS next_bill_date,\n            c.shop_name,\n            cie.sku,\n            p.product_id,\n            cie.quantity AS add_quantity,\n            CASE\n                WHEN cie.quantity <= ip.quantity\n                THEN cie.quantity\n                WHEN cie.quantity > ip.quantity\n                THEN ip.quantity\n            END AS invoice_qty,\n            cie.add_time,\n            pp.price* cie.quantity AS price_excluding_discount,\n            i.invoice_id,\n            i.order_created_at,\n            i.invoice_status,\n            i.shipment_shipped_at,\n            ip.effective_unit_price *\n            CASE\n                WHEN cie.quantity <= ip.quantity\n                THEN cie.quantity\n                WHEN cie.quantity > ip.quantity\n                THEN ip.quantity\n            END AS price_including_discount,\n            datediff('hour',c.send_time, cie.add_time) AS hours_add_from_send,\n            datediff('hour',c.first_click_time,cie.add_time) AS hours_add_from_click,\n            datediff('hour',c.first_open_time,c.first_click_time) AS hours_click_from_open,\n            csci.scheduled_cart_closed_at,\n            csci.quantity AS closed_qty,\n            csci.plan_state AS closed_cart_plan_state,\n            c.hours_to_open,\n            CASE\n                WHEN i.invoice_id IS NOT NULL\n                AND ip.id IS NULL\n                THEN 1\n                WHEN i.invoice_id IS NULL\n                AND csci.scheduled_cart_closed_at IS NULL\n                AND z.scheduled_cart_id IS NOT NULL\n                THEN 1\n                ELSE NULL\n            END AS removed,\n            CASE\n                WHEN a.scheduled_cart_id IS NOT NULL\n                AND i.invoice_id IS NULL\n                THEN 1\n                ELSE NULL\n            END AS open_cart,\n            CASE\n                WHEN i.invoice_id IS NULL\n                AND csci. scheduled_cart_id IS NOT NULL\n                AND plan_state !='active'\n                THEN 1\n                ELSE NULL\n            END AS churned_suspended,\n            'scheduled_cart' AS add_type,\n            row_number() over(partition BY cie.scheduled_cart_id,cie.sku\n            ORDER BY cie.add_time DESC) AS rnk\n        FROM (  SELECT\n                    se.camp_id,\n                    se.msg_id,\n                    se.email_source,\n                    se.campaign_name,\n                    se.customer_id,\n                    se.send_time,\n                    m.shop_name,\n                    se.campaign_customer_group,\n                    se.target_group_name,\n                    se.optimove_campaign_id,\n\n                    CASE\n                        WHEN datediff('hour',se.send_time,se.min_open_time)BETWEEN -1\n                        AND 72\n                        THEN se.min_open_time\n                        ELSE NULL\n                    END AS first_open_time,\n                    datediff('hour',se.send_time,se.min_open_time) AS hours_to_open,\n\n                    CASE\n                        WHEN datediff('hour',se.min_open_time,se.min_click_time)BETWEEN -1\n                        AND 24\n                        THEN se.min_click_time\n                        ELSE NULL\n                    END AS first_click_time,\n                    datediff('hour',se.send_time,min_click_time) AS hours_to_click_from_send,\n                    datediff('hour',min_open_time,min_click_time) AS hours_to_click_from_open\n\n                FROM stg.cheetah_optimove_email_sends se\n--                join dm_delta_7day dd on CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles',se.send_time)  >=  dd.delta_date\n--                    JOIN EXTRACT.rpt_email_performance dd\n--                    ON dd.customer_id = se.customer_id\n                    left join map.transactional_email_names en\n                    on en.campaign_name = se.campaign_name\n                    JOIN stg.customers c\n                    ON c.id = se.customer_id\n                    left join stg.customer_attributes ca\n                    on c.id = ca.customer_id\n                    left join map.shop m\n                    on m.shop_id = ca.registered_in_shop_id\n                where en.campaign_name is null\n\n                --GROUP BY 1,2,3,4,5,6\n                ) c\n            LEFT JOIN ( SELECT ie.scheduled_cart_id,\n                            c.shop_id,\n                            c.plan_id,\n                            m.currency_id,\n                            c.customer_id,\n                            ie.sku,\n                            ie.quantity,\n                            ie.rails_site_processed_at::timestamp AS add_time\n                        FROM stg.ps_change_scheduled_cart_item_events ie\n                            JOIN stg.ps_scheduled_carts c\n                            ON c.id = ie.scheduled_cart_id\n--                            JOIN  EXTRACT.rpt_email_performance dd\n--                            ON dd.customer_id = c.customer_id\n                            JOIN MAP.shop_currency m\n                            ON m.shop_id = c.shop_id\n                        WHERE event = 'add_scheduled_cart_item' ) cie\n            ON cie.customer_id = c.customer_id\n            AND datediff('hour',c.send_time,cie.add_time) BETWEEN -1\n            AND 96\n            LEFT JOIN dmt.d_product p\n            ON cie.sku = p.sku\n            LEFT JOIN stg.product_prices pp\n            ON pp.product_id = p.product_id\n            AND cie.add_time BETWEEN nvl(valid_starting,'1999-01-01')\n            AND nvl(valid_ending,getdate())\n            AND pp.currency_id = cie.currency_id\n            LEFT JOIN dmt.f_invoice i\n            ON cie.scheduled_cart_id = i.order_attribution_attribution_id\n            AND order_attribution_attribution_type = 'scheduledcart'\n            LEFT JOIN stg.erp_invoice_items ip\n            ON ip.invoice_id = i.invoice_id\n            AND ip.product_id = p.product_id\n            AND ip.effective_unit_price>0\n            LEFT JOIN stg.ps_close_scheduled_cart_items csci\n            ON csci.scheduled_cart_id = cie.scheduled_cart_id\n            AND csci.product_id = p.product_id\n            LEFT JOIN ( SELECT s.id AS scheduled_cart_id,\n                            s.customer_id,\n                            s.scheduled_cart_closed_at,\n                            p.plan_bills_at,\n                            row_number()over(partition BY s.customer_id\n                            ORDER BY s.scheduled_cart_created_at::timestamp DESC) AS rnk\n                        FROM stg.ps_scheduled_carts s\n--                            JOIN EXTRACT.rpt_email_performance dd\n--                            ON dd.customer_id = s.customer_id\n                            LEFT JOIN stg.ps_plans p\n                            ON p.id = s.plan_id\n                        WHERE scheduled_cart_closed_at ::TIMESTAMP IS NULL\n                            AND p.plan_bills_at >= getdate()::DATE\n                            AND p.plan_state = 'active') a\n            ON a.scheduled_cart_id = cie.scheduled_cart_id\n            AND a.rnk = 1\n            LEFT JOIN ( SELECT s.id AS scheduled_cart_id,\n                            scheduled_cart_closed_at\n                        FROM stg.ps_scheduled_carts s\n--                            JOIN  EXTRACT.rpt_email_performance dd\n--                            ON dd.customer_id = s.customer_id\n                            LEFT JOIN ( SELECT scheduled_cart_id\n                                        FROM stg.ps_close_scheduled_cart_items\n                                        GROUP BY 1) sci\n                            ON s.id = sci.scheduled_cart_id\n                        WHERE s.scheduled_cart_closed_at IS NOT NULL ) z\n            ON z.scheduled_cart_id = cie.scheduled_cart_id\n        WHERE ((hours_add_from_send <= 72 )\n            OR\n            ((c.hours_to_open <= 72 AND hours_add_from_click <= 24))\n            OR\n            (hours_add_from_send <=72 and lower(c.campaign_customer_group) = 'control')\n            )\n\n            AND add_time >='2019-03-01' ) t1\njoin dm_delta_7day dd on dd.pk_hash = md5((nvl(camp_id,0)||campaign_name||CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.send_time)::date||campaign_customer_group))\ngroup by     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36  \n--WHERE t1.rnk = 1\n--limit 1000\n\nUNION ALL\n\n\n\nSELECT\n    t1.camp_id,\n    t1.msg_id,\n    t1.email_source,\n    t1.campaign_name,\n    t1.optimove_campaign_id,\n    t1.target_group_name,\n    t1.campaign_customer_group,\n    t1.customer_id,\n    CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.send_time) AS send_time_pst,\n    CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.first_open_time) AS first_open_time_pst,\n    CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.first_click_time) AS first_click_time_pst,\n    t1.scheduled_cart_id,\n    t1.plan_id,\n    t1.next_bill_date,\n    t1.shop_name,\n    t1.product_id,\n    t1.product_sku,\n    t1.add_quantity,\n    t1.invoice_qty,\n    t1.add_time,\n    t1.order_created_at,\n    t1.price_excluding_discount,\n    t1.invoice_id,\n    t1.invoice_status,\n    CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.shipment_shipped_at) AS shipment_shipped_at_pst,\n    t1.price_including_discount,\n    t1.scheduled_cart_closed_at,\n    t1.closed_cart_plan_state,\n    t1.removed,\n    t1.open_cart,\n    t1.churned_suspended,\n    t1.add_type,\n    case when t1.hours_invoice_from_send <= 72 then true else false end as send72_attrib,\n    case when t1.hours_to_open <= 72 AND t1.hours_invoice_from_click <= 24 then true else false end as click_attrib,\n    getdate()::timestamp as dw_load_date_time,\n    md5((nvl(camp_id,0)||campaign_name||CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.send_time)::date||campaign_customer_group)) as pk_hash,\n    min(t1.rnk) as email_rank\nFROM (  SELECT\n            ema.camp_id,\n            ema.msg_id,\n            ema.email_source,\n            ema.campaign_name,\n            ema.optimove_campaign_id,\n            ema.campaign_customer_group,\n            ema.target_group_name,\n            ema.customer_id,\n            ema.send_time,\n            ema.first_open_time,\n            ema.first_click_time,\n            NULL::INTEGER AS scheduled_cart_id,\n            NULL::integer as plan_id,\n            null::timestamp as next_bill_date,\n            ema.shop_name,\n            i.product_id,\n            i.product_sku,\n            i.quantity AS add_quantity,\n            i.quantity AS invoice_qty,\n            NULL::TIMESTAMP AS add_time,\n            i.order_created_at,\n            i.quantity*i.unit_price AS price_excluding_discount,\n            i.invoice_id,\n            i.invoice_status,\n            i.shipment_shipped_at,\n            i.price AS price_including_discount,\n            NULL::TIMESTAMP AS scheduled_cart_closed_at,\n            NULL AS closed_cart_plan_state,\n            NULL::INTEGER AS removed,\n            NULL::INTEGER AS open_cart,\n            NULL::INTEGER AS churned_suspended,\n            'ship_now' AS add_type,\n            datediff('hour',ema.send_time, i.order_created_at) AS hours_invoice_from_send,\n            datediff('hour',ema.first_click_time, i.order_created_at) AS hours_invoice_from_click,\n            datediff('hour',ema.first_open_time,ema.first_click_time) AS hours_click_from_open,\n            ema.hours_to_open,\n            row_number() over(partition BY i.invoice_id, i.product_id\n            ORDER BY ema.send_time desc) AS rnk\n        FROM (  SELECT\n                    se.camp_id,\n                    se.msg_id,\n                    se.email_source,\n                    se.campaign_name,\n                    se.customer_id,\n                    se.send_time,\n                    m.shop_name,\n                    se.campaign_customer_group,\n                    se.target_group_name,\n                    se.optimove_campaign_id,\n\n                    CASE\n                        WHEN datediff('hour',se.send_time,se.min_open_time)BETWEEN -1\n                        AND 72\n                        THEN se.min_open_time\n                        ELSE NULL\n                    END AS first_open_time,\n                    datediff('hour',se.send_time,se.min_open_time) AS hours_to_open,\n\n                    CASE\n                        WHEN datediff('hour',se.min_open_time,se.min_click_time)BETWEEN -1\n                        AND 24\n                        THEN se.min_click_time\n                        ELSE NULL\n                    END AS first_click_time,\n                    datediff('hour',se.send_time,min_click_time) AS hours_to_click_from_send,\n                    datediff('hour',min_open_time,min_click_time) AS hours_to_click_from_open\n                FROM stg.cheetah_optimove_email_sends se\n                --join dm_delta_7day dd on CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles',se.send_time)  >=  dd.delta_date\n--                    JOIN EXTRACT.rpt_email_performance dd\n--                    ON dd.customer_id = se.customer_id\n                    JOIN stg.customers c\n                    ON c.id = se.customer_id\n                    left join map.transactional_email_names en\n                    on en.campaign_name = se.campaign_name\n                    left join stg.customer_attributes ca\n                    on c.id = ca.customer_id\n                    left join map.shop m\n                    on m.shop_id = ca.registered_in_shop_id\n                where en.campaign_name is null\n                   ) ema\n            JOIN (  SELECT i.invoice_id,\n                        i.customer_id,\n                        i.order_created_at,\n                        i.shipment_shipped_at,\n                        i.shipment_status_code,\n                        i.invoice_status,\n                        i.shop_id,\n                        ii.product_id,\n                        ii.product_sku,\n                        ii.effective_unit_price,\n                        ii.quantity,\n                        ii.price,\n                        ii.unit_price\n                    FROM dmt.f_invoice i\n--                        JOIN  EXTRACT.rpt_email_performance  dd\n--                        ON dd.customer_id = i.customer_id\n                        LEFT JOIN stg.erp_invoice_items ii\n                        ON i.invoice_id = ii.invoice_id\n                        JOIN dmt.d_product p\n                        ON p.product_id = ii.product_id\n                    WHERE i.order_attribution_attribution_type = 'standalonecart'\n                        AND effective_unit_price > 0) i\n            ON i.customer_id = ema.customer_id\n            AND datediff('hour', ema.send_time, i.order_created_at) BETWEEN -1\n            AND 96\n        WHERE (\n        (hours_invoice_from_send <= 72 )\n        OR\n        (ema.hours_to_open <= 72 AND hours_invoice_from_click <= 24)\n        OR\n        (hours_invoice_from_send <=72\n        and lower(ema.campaign_customer_group) = 'control')\n              )\n\n            AND i.order_created_at >='2019-03-01' )t1\njoin dm_delta_7day dd on dd.pk_hash = md5((nvl(camp_id,0)||campaign_name||CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.send_time)::date||campaign_customer_group))\ngroup by     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36  \n--WHERE rnk = 1\n\n\n\n;"
            },
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "id"
                    ],
                    "where": [
                        "scheduled_cart_closed_at"
                    ]
                },
                "tables": [
                    "dm_delta_closed",
                    "stg.ps_scheduled_carts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "create temp table dm_delta_closed as\nSelect\nid as scheduled_cart_id\nfrom stg.ps_scheduled_carts\nwhere scheduled_cart_closed_at >= '<start_date>'::timestamp - interval '3 day'\nand scheduled_cart_closed_at >='2019-03-01'\n\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "dmt.rpt_email_performance.scheduled_cart_id",
                        "dm_delta_closed.scheduled_cart_id",
                        "add_type"
                    ]
                },
                "tables": [
                    "dmt.rpt_email_performance"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from  dmt.rpt_email_performance\nusing dm_delta_closed\nwhere dmt.rpt_email_performance.scheduled_cart_id = dm_delta_closed.scheduled_cart_id\nand add_type = 'scheduled_cart'\n\n;"
            },
            {
                "skipped": true,
                "value": "insert into dmt.rpt_email_performance\nSELECT\n    t1.camp_id,\n    t1.msg_id,\n    t1.email_source,\n    t1.campaign_name,\n    t1.optimove_campaign_id,\n    t1.target_group_name,\n    t1.campaign_customer_group,\n    t1.customer_id,\n    CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.send_time) AS send_time_pst,\n    CONVERT_TIMEZONE ('UTC', 'america/los_angeles', t1.first_open_time) AS first_open_time_pst,\n    CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.first_click_time) AS first_click_time_pst,\n    t1.scheduled_cart_id,\n    t1.plan_id,\n    t1.next_bill_date,\n    t1.shop_name,\n    t1.product_id,\n    t1.sku,\n    t1.add_quantity,\n    t1.invoice_qty as add_quantity_invoiced,\n    CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.add_time) AS add_time_pst,\n    CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.order_created_at) AS order_created_at_pst,\n    t1.price_excluding_discount,\n    t1.invoice_id,\n    t1.invoice_status,\n    CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.shipment_shipped_at) AS shipment_shipped_at_pst,\n    t1.price_including_discount,\n    CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.scheduled_cart_closed_at) AS scheduled_cart_closed_at_pst,\n    t1.closed_cart_plan_state,\n    t1.removed,\n    t1.open_cart,\n    t1.churned_suspended,\n    t1.add_type,\n    case when hours_add_from_send <= 72 then true else false end as send72_attrib,\n    case when hours_to_open <= 72 AND hours_add_from_click <= 24 then true else false end as click_attrib,\n    getdate()::timestamp as dw_load_date_time,\n    md5((nvl(camp_id,0)||campaign_name||CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.send_time)::date||campaign_customer_group)) as pk_hash,\n    min(t1.rnk) as email_rank\nFROM(   SELECT\n            c.camp_id,\n            c.msg_id,\n            c.email_source,\n            c.campaign_name,\n            c.optimove_campaign_id,\n            c.target_group_name,\n            c.campaign_customer_group,\n            c.customer_id,\n            c.send_time,\n            c.first_open_time,\n            c.first_click_time,\n            cie.scheduled_cart_id,\n            cie.plan_id,\n            CASE\n                WHEN a.scheduled_cart_id IS NOT NULL\n                AND i.invoice_id IS NULL\n                THEN a.plan_bills_at\n                ELSE NULL\n            END AS next_bill_date,\n            c.shop_name,\n            cie.sku,\n            p.product_id,\n            cie.quantity AS add_quantity,\n            CASE\n                WHEN cie.quantity <= ip.quantity\n                THEN cie.quantity\n                WHEN cie.quantity > ip.quantity\n                THEN ip.quantity\n            END AS invoice_qty,\n            cie.add_time,\n            pp.price* cie.quantity AS price_excluding_discount,\n            i.invoice_id,\n            i.order_created_at,\n            i.invoice_status,\n            i.shipment_shipped_at,\n            ip.effective_unit_price *\n            CASE\n                WHEN cie.quantity <= ip.quantity\n                THEN cie.quantity\n                WHEN cie.quantity > ip.quantity\n                THEN ip.quantity\n            END AS price_including_discount,\n            datediff('hour',c.send_time, cie.add_time) AS hours_add_from_send,\n            datediff('hour',c.first_click_time,cie.add_time) AS hours_add_from_click,\n            datediff('hour',c.first_open_time,c.first_click_time) AS hours_click_from_open,\n            csci.scheduled_cart_closed_at,\n            csci.quantity AS closed_qty,\n            csci.plan_state AS closed_cart_plan_state,\n            c.hours_to_open,\n            CASE\n                WHEN i.invoice_id IS NOT NULL\n                AND ip.id IS NULL\n                THEN 1\n                WHEN i.invoice_id IS NULL\n                AND csci.scheduled_cart_closed_at IS NULL\n                AND z.scheduled_cart_id IS NOT NULL\n                THEN 1\n                ELSE NULL\n            END AS removed,\n            CASE\n                WHEN a.scheduled_cart_id IS NOT NULL\n                AND i.invoice_id IS NULL\n                THEN 1\n                ELSE NULL\n            END AS open_cart,\n            CASE\n                WHEN i.invoice_id IS NULL\n                AND csci. scheduled_cart_id IS NOT NULL\n                AND plan_state !='active'\n                THEN 1\n                ELSE NULL\n            END AS churned_suspended,\n            'scheduled_cart' AS add_type,\n            row_number() over(partition BY cie.scheduled_cart_id,cie.sku\n            ORDER BY cie.add_time DESC) AS rnk\n        FROM (  SELECT\n                    se.camp_id,\n                    se.msg_id,\n                    se.email_source,\n                    se.campaign_name,\n                    se.customer_id,\n                    se.send_time,\n                    m.shop_name,\n                    se.campaign_customer_group,\n                    se.target_group_name,\n                    se.optimove_campaign_id,\n\n                    CASE\n                        WHEN datediff('hour',se.send_time,se.min_open_time)BETWEEN -1\n                        AND 72\n                        THEN se.min_open_time\n                        ELSE NULL\n                    END AS first_open_time,\n                    datediff('hour',se.send_time,se.min_open_time) AS hours_to_open,\n\n                    CASE\n                        WHEN datediff('hour',se.min_open_time,se.min_click_time)BETWEEN -1\n                        AND 24\n                        THEN se.min_click_time\n                        ELSE NULL\n                    END AS first_click_time,\n                    datediff('hour',se.send_time,min_click_time) AS hours_to_click_from_send,\n                    datediff('hour',min_open_time,min_click_time) AS hours_to_click_from_open\n\n                FROM stg.cheetah_optimove_email_sends se\n                    left join map.transactional_email_names en\n                    on en.campaign_name = se.campaign_name\n                    JOIN stg.customers c\n                    ON c.id = se.customer_id\n                    left join stg.customer_attributes ca\n                    on c.id = ca.customer_id\n                    left join map.shop m\n                    on m.shop_id = ca.registered_in_shop_id\n                where en.campaign_name is null\n\n                --GROUP BY 1,2,3,4,5,6\n                ) c\n            LEFT JOIN ( SELECT ie.scheduled_cart_id,\n                            c.shop_id,\n                            c.plan_id,\n                            m.currency_id,\n                            c.customer_id,\n                            ie.sku,\n                            ie.quantity,\n                            ie.rails_site_processed_at::timestamp AS add_time\n                        FROM stg.ps_change_scheduled_cart_item_events ie\n                            JOIN stg.ps_scheduled_carts c\n                            ON c.id = ie.scheduled_cart_id\n\n                            JOIN MAP.shop_currency m\n                            ON m.shop_id = c.shop_id\n                           join dm_delta_closed dd on dd.scheduled_cart_id = c.id\n                        WHERE event = 'add_scheduled_cart_item' ) cie\n            ON cie.customer_id = c.customer_id\n            AND datediff('hour',c.send_time,cie.add_time) BETWEEN -1\n            AND 96\n            LEFT JOIN dmt.d_product p\n            ON cie.sku = p.sku\n            LEFT JOIN stg.product_prices pp\n            ON pp.product_id = p.product_id\n            AND cie.add_time BETWEEN nvl(valid_starting,'1999-01-01')\n            AND nvl(valid_ending,getdate())\n            AND pp.currency_id = cie.currency_id\n            LEFT JOIN dmt.f_invoice i\n            ON cie.scheduled_cart_id = i.order_attribution_attribution_id\n            AND order_attribution_attribution_type = 'scheduledcart'\n            LEFT JOIN stg.erp_invoice_items ip\n            ON ip.invoice_id = i.invoice_id\n            AND ip.product_id = p.product_id\n            AND ip.effective_unit_price>0\n            LEFT JOIN stg.ps_close_scheduled_cart_items csci\n            ON csci.scheduled_cart_id = cie.scheduled_cart_id\n            AND csci.product_id = p.product_id\n            LEFT JOIN ( SELECT s.id AS scheduled_cart_id,\n                            s.customer_id,\n                            s.scheduled_cart_closed_at,\n                            p.plan_bills_at,\n                            row_number()over(partition BY s.customer_id\n                            ORDER BY s.scheduled_cart_created_at::timestamp DESC) AS rnk\n                        FROM stg.ps_scheduled_carts s\n\n                            LEFT JOIN stg.ps_plans p\n                            ON p.id = s.plan_id\n                            join dm_delta_closed dd on dd.scheduled_cart_id = s.id\n                        WHERE scheduled_cart_closed_at ::TIMESTAMP IS NULL\n                            AND p.plan_bills_at >= getdate()::DATE\n                            AND p.plan_state = 'active') a\n            ON a.scheduled_cart_id = cie.scheduled_cart_id\n            AND a.rnk = 1\n            LEFT JOIN ( SELECT s.id AS scheduled_cart_id,\n                            scheduled_cart_closed_at\n                        FROM stg.ps_scheduled_carts s\n                            join dm_delta_closed dd on dd.scheduled_cart_id = s.id\n                            LEFT JOIN ( SELECT scheduled_cart_id\n                                        FROM stg.ps_close_scheduled_cart_items\n                                        GROUP BY 1) sci\n                            ON s.id = sci.scheduled_cart_id\n                        WHERE s.scheduled_cart_closed_at IS NOT NULL ) z\n            ON z.scheduled_cart_id = cie.scheduled_cart_id\n        WHERE ((hours_add_from_send <= 72 )\n            OR\n            ((c.hours_to_open <= 72 AND hours_add_from_click <= 24))\n            OR\n            (hours_add_from_send <=72 and lower(c.campaign_customer_group) = 'control')\n            )\n\n            AND add_time >='2019-03-01' ) t1\ngroup by     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36  \n\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "dmt.rpt_email_performance.campaign_name",
                        "map.transactional_email_names.campaign_name"
                    ]
                },
                "tables": [
                    "dmt.rpt_email_performance"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM dmt.rpt_email_performance\nusing map.transactional_email_names\nwhere dmt.rpt_email_performance.campaign_name = map.transactional_email_names.campaign_name\n;"
            }
        ],
        "load.dmt.rpt_member_cohort.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "rpt_member_cohort"
                    ],
                    "select": [
                        "utm_source",
                        "utm_medium",
                        "utm_campaign",
                        "utm_content",
                        "utm_term"
                    ]
                },
                "tables": [
                    "dmt.rpt_member_cohort",
                    "dmt.rpt_member"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into dmt.rpt_member_cohort\nselect\n      customer_id as customer_id\n    , platform as platform\n    , device_type as device_type\n    , utm_source as first_utm_source\n    , utm_medium as first_utm_medium\n    , utm_campaign as first_utm_campaign\n    , utm_content as first_utm_content\n    , utm_term as first_utm_term\n    , utm_source as last_utm_source\n    , utm_medium as last_utm_medium\n    , utm_campaign as last_utm_campaign\n    , utm_content as last_utm_content\n    , utm_term as last_utm_term\n    , funnel_sku_list as funnel_sku_list\n    , bm_type as bm_type\n    , registered_in_shop_name as registered_in_shop_name\n    , plan_frequency as plan_frequency\n    , status_name as status_name\n    , start_date as start_date\n    , end_date as end_date\n    , dw_load_timestamp as dw_load_timestamp\nfrom dmt.rpt_member\n;"
            }
        ],
        "load.stg.mbo_cart_base.sql": [
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- has to be refreshed completely every time since UPCOMING/FUTURE orders can change any time\n\ninsert into stg.mbo_cart_base\n-- Upcoming cart recurring vs. onetime revenue\nselect\n    s.next_bill_at\n  , s.customer_id\n  , s.schedule_id -- plan:scheduled_cart_id / sub:customer_id\n  , s.customer_subscription_plan_id\n  , 'scheduled' as revenue_type -- always revenue_type='scheduled' since it is based on scheduled carts\n  -- scheduled revenue is always box_type='recurring' since it is based on scheduled carts, which recur\n  -- scheduled cart = recurring box type\n  , 'recurring' as box_type\n\t, 'not_paid_not_shipped' as shipment_status\n  , s.bm_type -- bm1 / bm2\n  , s.shop_name\n  , s.currency\n  , s.plan_frequency\n\n  , sum(s.product_categories) as product_categories\n  , sum(s.item_quantity) as item_quantity\n\n  , sum(s.total_revenue) as total_revenue\n  , sum(s.recurring_revenue) as recurring_revenue -- in cart and in plan\n  , sum(s.onetime_revenue) as onetime_revenue -- in cart and in NOT plan\n  , getdate() as dw_load_timestamp\nfrom (\n    -- BM2 upcoming /scheduled  cart revenue (at the scheduled_cart_id level)\n    select\n        s.plan_bills_at as next_bill_at\n      , s.customer_id\n      , s.scheduled_cart_id as schedule_id\n      , s.plan_id as customer_subscription_plan_id\n      , 'plan' as bm_type\n      , s.shop_name\n      , s.currency\n      , s.plan_frequency\n      , count(distinct s.product_category)  as product_categories\n      , sum(s.cart_quantity) as item_quantity\n      , nvl(SUM(s.total_revenue),0)  as total_revenue\n      , nvl(SUM(s.recurring_revenue),0) as recurring_revenue\n      , nvl(SUM(s.onetime_revenue),0) as onetime_revenue\n    from (\n          select\n              sc.plan_bills_at\n            , sci.customer_id\n            , sci.scheduled_cart_id\n            , sci.plan_id\n            , cur.shop_name\n            , cur.currency\n            , sc.plan_frequency\n            --, sci.product_sku\n            , p.product_category\n            , sci.quantity as cart_quantity\n            -- , pi.quantity as plan_quantity\n            , nvl((sci.quantity::NUMERIC(37,15) * sci.unit_price::NUMERIC(37,15))::NUMERIC(37,15),0) as total_revenue\n\n            -- cart qty less than plan is APP BUG, defaulting to cart qty in this case\n            -- cart and plan qty match - all revenue is recurring\n            -- cart qty more then plan - take recurring qty from plan\n            , case when sci.quantity < nvl(pi.quantity,0) -- cart qty less than plan is APP BUG, defaulting to cart qty in this case\n                then nvl((sci.quantity::NUMERIC(37,15) * sci.unit_price::NUMERIC(37,15))::NUMERIC(37,15),0)\n                else case when nvl(pi.quantity,0) = sci.quantity or sci.quantity > nvl(pi.quantity,0)\n                  then nvl((pi.quantity::NUMERIC(37,15) * sci.unit_price::NUMERIC(37,15))::NUMERIC(37,15),0)\n                  else 0.0\n                end\n              end as recurring_revenue\n\n            -- cart qty more then plan - take one qty from (cart qty - plan qty)\n            , case when pi.quantity is null or sci.quantity > nvl(pi.quantity,0)\n                then ((sci.quantity-nvl(pi.quantity,0))::NUMERIC(37,15) * sci.unit_price::NUMERIC(37,15))::NUMERIC(37,15)\n                else 0.0\n              end as onetime_revenue\n\n          from stg.ps_scheduled_cart_items sci\n            -- take the most recent active (not closed) cart - workaround for multiple opened carts, which is APP BUG\n            inner join (\n                select\n                      sc0.customer_id\n                    , sc0.plan_id\n                    , sc0.scheduled_cart_id\n                    , sc0.plan_bills_at\n                    , sc0.plan_frequency\n                from (\n                   select\n                       sc1.customer_id\n                     , sc1.plan_id\n                     , sc1.id as scheduled_cart_id\n                     , p1.plan_bills_at\n                     , p1.plan_frequency as plan_frequency\n                     , rank() over(partition by sc1.plan_id order by sc1.scheduled_cart_created_at desc) rnk  -- latest cart rnk = 1\n                  from stg.ps_scheduled_carts sc1\n                     inner join stg.ps_plans p1\n                        on sc1.customer_id = p1.customer_id and sc1.plan_id = p1.id\n                  where 1=1\n                    and sc1.scheduled_cart_closed_at is null -- cart is not closed\n                    and p1.plan_state in ('active', 'rebilling')\n                      -- and sc1.customer_id = 6812405 -- customer with cancelled plan - excluding from the main output\n                ) sc0\n                where 1=1\n                  and sc0.rnk =1\n            ) sc\n              on sci.scheduled_cart_id = sc.scheduled_cart_id\n            inner join dmt.d_product p\n              on sci.product_id = p.product_id\n            inner join map.shop_currency cur\n              on sci.shop_id = cur.shop_id\n            -- only valid customers\n            inner join dmt.rpt_member dc\n              on sci.customer_id = dc.customer_id\n            left outer join stg.ps_plan_items pi\n              on pi.customer_id = sci.customer_id\n                and pi.plan_id = sci.plan_id\n                and pi.product_sku = sci.product_sku\n                and pi.removed is null  --item is not removed\n                and pi.snooze_until is null -- item is not snoozed for the upcoming box\n                and pi.plan_state = 'active' -- only active plans considered for scheduled revenue\n          where 1 = 1\n            and sci.removed is null  --item is not removed from scheduled cart\n            -- and sci.scheduled_cart_closed_at is null -- cart is not closed moved to scheduled cart subquery\n            -- and sci.plan_id = 4131955 -- all recurring\n            -- and sci.customer_id = 3512045 AND sci.scheduled_cart_id = 16678695-- part recurring / part one time, for diferent skus\n            -- and sci.customer_id = 2674195 AND sci.scheduled_cart_id = 15429524 -- scheduled quantity MORE than plan, i.e. one-time and recurring for the same sku\n            -- and sci.customer_id = 2238315 AND sci.scheduled_cart_id = 14256555 -- scheduled quantity LESS than plan, APP BUG, defaulting to cart qty in this case\n            -- and sci.customer_id = 6812405 -- customer with cancelled plan - excluded\n    ) s\n    group by\n        s.plan_bills_at\n      , s.customer_id\n      , s.scheduled_cart_id\n      , s.plan_id\n      , s.shop_name\n      , s.currency\n      , s.plan_frequency\n\n    union\n\n    -- BM1 upcoming [recurring] revenue\n    select\n        cs.next_bill_date_time as next_bill_at\n      , cs.customer_id as customer_id\n      , cs.customer_id as schedule_id\n      , cs.id as customer_subscription_plan_id\n      , 'sub' as bm_type\n      ,  cur.shop_name\n      , cur.currency\n      , cs.frequency as plan_frequency\n      , count(distinct p.product_category)  as product_categories\n      , sum(cs.product_quantity) as item_quantity\n      , sum(nvl((cs.product_quantity::NUMERIC(37,15) * pp.price::NUMERIC(37,15))::NUMERIC(37,15),0)) total_revenue\n      , sum(nvl((cs.product_quantity::NUMERIC(37,15) * pp.price::NUMERIC(37,15))::NUMERIC(37,15),0)) recurring_revenue\n      , sum(0) onetime_revenue\n    from stg.customer_subscriptions cs\n      -- only valid customers\n      inner join dmt.rpt_member dc\n        on cs.customer_id = dc.customer_id\n      inner join dmt.d_product p on cs.subscription_id = p.product_id\n      inner join map.shop_currency cur on cs.shop_id = cur.shop_id\n      inner join stg.product_prices pp on p.product_id = pp.product_id\n        and cur.currency_id = pp.currency_id\n        and cs.created_at >= nvl(pp.valid_starting,'1970-01-01'::timestamp) and cs.created_at < nvl(pp.valid_ending,getdate())\n    where 1=1\n      and cs.status = 1 -- customer subscription is active\n      -- and cs.customer_id = 12344745\n      -- and cs.customer_id = 13616907 -- bm1: sub and extras customer\n    group by\n        cs.next_bill_date_time\n      , cs.customer_id\n      , cs.customer_id\n      , cs.id\n      , cur.shop_name\n      , cur.currency\n      , cs.frequency\n\n    union\n\n    -- BM1 upcoming [one time] revenue - based on sub extras\n    select\n       cs.next_bill_date_time as next_bill_at\n     , cs.customer_id as customer_id\n     , cs.customer_id as schedule_id\n     , cs.id as customer_subscription_plan_id\n     , 'sub' as bm_type\n     , cur.shop_name\n     , cur.currency\n     , cs.frequency as plan_frequency\n     , count(distinct p.product_category)  as product_categories\n     , sum(cse.quantity) as item_quantity\n     , sum(nvl((cse.quantity::NUMERIC(37,15) * pp.price::NUMERIC(37,15))::NUMERIC(37,15),0)) as total_revenue\n     , sum(0)  as recurring_revenue\n     , sum(nvl((cse.quantity::NUMERIC(37,15) * pp.price::NUMERIC(37,15))::NUMERIC(37,15),0)) as onetime_revenue\n         -- select count(distinct customer_id),count(1)\n    from stg.customer_subscriptions cs\n      -- only valid customers\n      inner join dmt.rpt_member dc\n        on cs.customer_id = dc.customer_id\n      inner join stg.customer_subscription_extras cse\n        on cs.id = cse.customer_subscription_id\n      inner join stg.extras x\n        on cse.extra_id = x.id\n      inner join dmt.d_product p\n        on x.product_id = p.product_id\n      inner join map.shop_currency cur\n        on cs.shop_id = cur.shop_id\n      inner join stg.product_prices pp\n        on p.product_id = pp.product_id\n           and cur.currency_id = pp.currency_id\n           and cse.created_at between nvl(pp.valid_starting,'1970-01-01'::timestamp)\n            and nvl(pp.valid_ending,getdate())\n    where 1=1\n      and cse.status = 1 -- added extra product is active\n      and cs.status = 1 -- customer subscription is active\n      and cs.end_date_time is null\n      -- and cs.customer_id = 13166361 -- bm1: extras customer\n      --and cs.customer_id = 13616907 -- bm1: sub and extras customer\n    group by\n       cs.next_bill_date_time\n     , cs.customer_id\n     , cs.customer_id\n     , cs.id\n     , cur.shop_name\n     , cur.currency\n     , cs.frequency\n\n/*\nExtras Status:\n0 = Removed (was removed from the box by the customer)\n1 = Active (still in the box)\n2 = Fulfilled (the product has been billed and shipped)\n*/\n\n) s\ngroup by\n    s.next_bill_at\n  , s.customer_id\n  , s.schedule_id\n  , s.customer_subscription_plan_id\n  , s.bm_type\n  , s.shop_name\n  , s.currency\n  , s.plan_frequency\n-- having count(*) > 1 -- check subs with extras\n-- having count(distinct bm_type) > 1 -- False : OK: no overlap between bm1 and mb2\n;"
            }
        ],
        "load.dmt.rpt_email_summary.sql": [
            {
                "type": "DELETE",
                "columns": null,
                "tables": [
                    "dmt.rpt_email_summary"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from dmt.rpt_email_summary\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "rpt_email_summary"
                    ],
                    "select": [
                        "stg.cheetah_optimove_email_sends.email_source",
                        "stg.cheetah_optimove_email_sends.camp_id",
                        "stg.cheetah_optimove_email_sends.optimove_campaign_id",
                        "stg.cheetah_optimove_email_sends.campaign_name",
                        "stg.cheetah_optimove_email_sends.target_group_name",
                        "stg.cheetah_optimove_email_sends.campaign_customer_group",
                        "stg.cheetah_optimove_email_sends.shop_name",
                        "stg.cheetah_optimove_email_sends.min_open_time",
                        "stg.cheetah_optimove_email_sends.min_click_time",
                        "stg.cheetah_optimove_email_sends.send_time"
                    ]
                },
                "tables": [
                    "dmt.rpt_email_summary",
                    "stg.cheetah_optimove_email_sends"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into dmt.rpt_email_summary\nselect f.email_source,\n       f.camp_id,\n       f.optimove_campaign_id,\n       f.campaign_name,\n       f.target_group_name,\n       f.campaign_customer_group,\n       f.shop_name,\n       case when f.min_open_time is not null then 1 else 0 end as open_flag,\n       case when f.min_click_time is not null then 1 else 0 end as click_flag,\n       CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', f.send_time::timestamp)::date as send_date_pst,\n       count(distinct f.customer_id) as distinct_customers,\n       count(f.customer_id) as total_sends,\n       sum(number_of_opens) as total_opens,\n       count(case when f.min_open_time is not null then f.msg_id else null end) as total_unique_opens,\n       sum(number_of_clicks) as total_clicks,\n       count(case when f.min_click_time is not null then f.msg_id else null end) as total_unique_click,\n       SUM(ep.add_quantity) as add_qty,\n       sum(ep.add_quantity_invoiced) as add_quantity_invoiced,\n       sum(ep.price_excluding_discount) as price_exc_discount,\n       sum(ep.price_including_discount) as price_inc_discount,\n       getdate()::timestamp as dw_load_date_time,\n       md5((nvl(f.camp_id,0)||f.campaign_name||CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', f.send_time)::date||f.campaign_customer_group)) as pk_hash\nfrom stg.cheetah_optimove_email_sends f\n--join dm_delta dd on dd.camp_id = nvl(f.camp_id,0) and  dd.optimove_campaign_id = nvl(f.optimove_campaign_id,0)\nleft join (select msg_id,customer_id,optimove_campaign_id,sum(add_quantity) as add_quantity,\n                  sum(add_quantity_invoiced) as add_quantity_invoiced,\n                  sum(price_excluding_discount) as price_excluding_discount,\n                  sum(price_including_discount) as price_including_discount\n            from dmt.rpt_email_performance\n            group by 1,2,3)\n             ep on nvl(f.msg_id,0) = nvl(ep.msg_id,0) and f.customer_id = ep.customer_id and nvl(f.optimove_campaign_id,0) = nvl(ep.optimove_campaign_id,0)\ngroup by 1,2,3,4,5,6,7,8,9,10;"
            }
        ],
        "load.dmt.rpt_member_status_details.sql": [
            {
                "type": "CREATE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- truncate table dmt.rpt_member_status_details;\n\n/*\nCREATE TEMP TABLE dm_delta AS\nSELECT\n  '2019-02-20'::date AS report_date,\n  '2019-03-30'::date  AS current_date\n;\n*/\n\nCREATE TEMP TABLE dm_delta AS\nSELECT\n  date_trunc('day', convert_timezone('PST', getdate())::date  -  interval '30 day')::date AS report_date,\n  date_trunc('day', convert_timezone('PST', getdate())::date)::date AS \"current_date\"\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "report_date"
                    ],
                    "select": [
                        "report_date"
                    ]
                },
                "tables": [
                    "dmt.rpt_member_status_details",
                    "dm_delta"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from dmt.rpt_member_status_details\nwhere 1=1\n    and report_date >= (SELECT report_date FROM dm_delta)\n    and report_date <= (SELECT current_date FROM dm_delta)\n;"
            },
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- [2019-05-07 17:25:53] 2,167,821 rows affected in 7s 487ms\n-- [2019-05-07 18:22:47] 4,186,086 rows affected in 2s 326ms\n-- [2019-05-07 18:24:08] 4,238,044 rows affected in 1m 0s 257ms\n-- 1,413,926\n/*\nselect\n    report_date\n  , count(*) as total_rec\n  , count(*) as total_rec\nfrom dmt.rpt_member_status_details\n  group by 1\n  order by 1 desc\nlimit 100;\n\n*/\n\n-- report_date in PST timezone - see below: convert_timezone('PST',dc0.start_date_time)\ninsert into dmt.rpt_member_status_details\nselect\n    m.date as report_date\n  , m.platform\n  --, m.os_name\n  , m.device_type\n  , m.utm_source\n  , m.utm_medium\n  , m.utm_campaign\n  -- , m.utm_content\n  -- , m.utm_term\n  , m.funnel_sku_list\n  --, m.bundle_name\n  --  , m.sub_plan_rank\n  , m.bm_type\n  , m.registered_in_shop_name\n  , m.plan_frequency as plan_frequency\n  , m.member_tenure_type as member_tenure_type -- reactivated / original\n  , sum(m.reactivated_member) as reactivated_members\n  , sum(m.new_member) as new_members\n  , sum(m.active_member)  as active_members\n  , sum(m.cancelled_member) as cancelled_members\n  , getdate() as dw_load_timestamp\nfrom (\n---=================== 1\nselect\n    dd.date\n  , dcp.customer_id\n  --, dcp.cancel_reason\n  , dcp.migrated_member\n  , dcp.start_date as start_date\n  , dcp.end_date as end_date\n  , dcp.platform\n -- , dcp.os_name\n  , dcp.device_type\n  , dcp.utm_source\n  , dcp.utm_medium\n  , dcp.utm_campaign\n  --, dcp.utm_content\n  --, dcp.utm_term\n  , dcp.funnel_sku_list\n  -- , dcp.bundle_name\n -- , dcp.sub_plan_rank\n  , dcp.bm_type\n  , dcp.registered_in_shop_name\n  , dcp.frequency as plan_frequency\n-- , lag(date_trunc('day', end_date_time)) over(partition by dd.date, dcp.customer_id order by start_date) as prev_end_date\n\n  -- this is dimension/flag to distinguish between reactivated and regular members\n  -- customer will be labeled as reactivated (1) in case it was ever reactivated\n, case when\n      dcp.migrated_member = False -- only non migrated customers can be reactivated;\n      AND dcp.sub_plan_rank > 1 -- only secondary plans are reactivated;\n    then 'reactivated'\n    else 'original'\n  end as member_tenure_type\n, case when\n      dd.date = dcp.start_date\n      and dcp.migrated_member = False -- only non migrated customers can be reactivated;\n      AND dcp.sub_plan_rank > 1 -- only secondary plans are reactivated;\n    then 1\n    else 0\n  end as reactivated_member\n, case when\n      dd.date = dcp.start_date\n      AND dcp.migrated_member = False -- only non migrated customers can be new; is not null ?\n      AND dcp.sub_plan_rank = 1 -- only first plan is new; migrated customer - start plan date is ignored\n    then 1\n    else 0\n  end as new_member\n, case when dd.date between dcp.start_date::date and dcp.end_date - interval '1 day'\n        -- and dd.date != lag(date_trunc('day', end_date_time)::date) over(partition by dd.date, dcp.customer_id order by start_date)\n    then 1\n  else 0 end as active_member,\n  case when\n    dd.date = dcp.end_date and dcp.migrated_member = False then 1 else 0\n  end as cancelled_member\nfrom dmt.d_date dd\n  left outer join  (\n---===== do not replace with dmt.rpt_member since this script needs data on customer / plan level\nselect\n    dc.customer_id\n  , dc.start_date\n  , dc.end_date\n  --, dc.plan_conversion_source\n  , dc.migrated_member\n\n  , case when avc.platform is null then 'web' else avc.platform end as platform -- default to web if platform is unknown\n--  , avc.os_name\n  , case when TRIM(BOTH ' ' FROM avc.mobile_id) = '0' then 'desktop' else 'mobile' end as device_type\n\n\n  , dc.utm_source\n  , dc.utm_medium\n  , dc.utm_campaign\n  -- , dc.utm_content\n  -- , dc.utm_term\n  , dc.funnel_sku_list\n -- , dc.bundle_name\n  , dc.sub_plan_rank\n  , dc.bm_type\n  , case when dc.registered_in_shop_name is null\n          then 'N/A'\n          else dc.registered_in_shop_name\n    end as registered_in_shop_name\n  , dc.frequency\n from (\n\n  select\n      dc1.customer_id\n    , dc1.start_date\n    , dc1.end_date\n    --, dc1.plan_conversion_source\n    , dc1.migrated_member\n    , left(dc1.utm_source, 32) as utm_source\n    , left(dc1.utm_medium, 64) as utm_medium\n    , left(dc1.utm_campaign, 256) as utm_campaign\n   -- , dc1.utm_content\n   -- , dc1.utm_term\n\n    , left(dc1.funnel_sku_list, 256)  as funnel_sku_list\n    --, dc1.bundle_name\n\n    , dc1.sub_plan_rank\n   -- , dc1.web_shop_name\n   -- , ms.shop_name\n\n    , dc1.bm_type\n\n\n    , coalesce(\n        case\n          when dc1.web_shop_name='WWW' then 'US'\n          when (dc1.web_shop_name='NA') then NULL\n          else dc1.web_shop_name\n        end,\n        ms.shop_name,\n        ps.shop_name,\n        ss.shop_name\n      )  as registered_in_shop_name\n    , dc1.frequency\n  from (\n    select\n        dc0.customer_id\n      , date_trunc('day', convert_timezone('PST',dc0.start_date_time))::date as start_date\n      , date_trunc('day', isnull(convert_timezone('PST',dc0.end_date_time), '2100-01-01' :: timestamp)):: date as end_date\n      --, dc0.plan_conversion_source\n      --, dc0.cancel_reason\n      , case when (dc0.cancel_reason = 'converted_to_plan') OR dc0.plan_conversion_source in ('batch')\n            then True\n            else False\n        end as migrated_member\n\n      , first_value(dc0.last_utm_source) over(\n        partition by dc0.customer_id\n        order by dc0.start_date_time\n        rows between unbounded preceding and unbounded following\n      )  as utm_source\n      , first_value(dc0.last_utm_medium) over(\n        partition by dc0.customer_id\n        order by dc0.start_date_time\n        rows between unbounded preceding and unbounded following\n      ) as utm_medium\n      , first_value(dc0.last_utm_campaign) over(\n        partition by dc0.customer_id\n        order by dc0.start_date_time\n        rows between unbounded preceding and unbounded following\n      )  as utm_campaign\n      -- , dc0.first_utm_content as utm_content\n      -- , dc0.first_utm_term as utm_term\n\n      , dc0.funnel_sku_list\n      -- , dc0.bundle_name\n\n      -- the most recent value   for bm type , shop , frequency\n      , last_value(dc0.bm_type) over(\n        partition by dc0.customer_id\n        order by dc0.start_date_time\n        rows between unbounded preceding and unbounded following\n      ) as bm_type\n\n      , last_value(dc0.web_shop_name) ignore nulls over(\n        partition by dc0.customer_id\n        order by dc0.start_date_time\n        rows between unbounded preceding and unbounded following\n      ) as web_shop_name\n\n      , last_value(dc0.frequency) over(\n        partition by dc0.customer_id\n        order by dc0.start_date_time\n        rows between unbounded preceding and unbounded following\n      ) as frequency\n\n     , dc0.sub_plan_rank\n    from dmt.d_customer_plan_360 dc0\n    where 1=1\n\n) dc1\n  inner join dmt.d_customer c\n    on dc1.customer_id = c.customer_id\n  left outer join stg.test_customers t\n    ON c.customer_id = t.customer_id\n  left outer join map.shop ms\n    on c.registered_in_shop_id = ms.shop_id\n  left outer join (\n      select\n          p.customer_id\n        , p.shop_name\n      from (\n          select\n              p0.customer_id\n           -- , p.id as plan_id\n            , s.shop_name as shop_name\n            , row_number() over (partition by p0.customer_id order by p0.plan_created_at desc) as rnk\n          from stg.ps_plans p0\n            inner join map.shop s\n              on p0.shop_id = s.shop_id\n          where 1=1\n        ) p\n      where p.rnk = 1\n     ) ps\n   on dc1.customer_id = ps.customer_id\n  left outer join (\n      select\n          p.customer_id\n        , p.shop_name\n      from (\n        select\n            p0.customer_id\n          , s.shop_name as shop_name\n          , row_number() over (partition by p0.customer_id order by p0.created_at desc) as rnk\n        from stg.customer_subscriptions p0\n          inner join map.shop s\n            on p0.shop_id = s.shop_id\n        where 1=1\n      ) p\n        where p.rnk = 1\n     ) ss\n   on dc1.customer_id = ss.customer_id\nwhere 1=1\n    and c.email not ilike '%@dollarshaveclub.%'\n    and t.customer_id is null\n) dc\n  left outer join stg.adobe_customer_first_visit_os avc\n    on dc.customer_id = avc.customer_id\nwhere 1=1\n\n---=====////\n\n  ) dcp\n    on dd.date between dcp.start_date and dcp.end_date\n       -- and dcp.customer_id = 1095353\nwhere 1=1\n  and dd.date >= (SELECT report_date FROM dm_delta)\n  and dd.date <= (SELECT current_date FROM dm_delta)\n  --and dcp.customer_id = 1095353 -- prev sub, now - plan\n---===================//// 1\n) m\ngroup by 1,2,3,4,5,6,7,8,9,10,11\n;"
            }
        ],
        "load.dmt.rpt_member.sql": [
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- get customer's mobile_id, os_name , etc. from adobe\ninsert into stg.ga_customer_first_visit_os\nselect\n  avc0.customer_id\n-- null exists because we did not collect prop12 before Aug 2018 ;\n-- web is hardcoded for all browser based reporting suites\n-- as of Feb 2019 platform is always: web\n, case when avc0.platform is null then 'web' else avc0.platform end as platform\n, avc0.os_name\n, avc0.mobile_id\n, avc0.visit_start_time_gmt\n, avc0.plan_purchase_flag\nfrom (\n  select\n      avc.customer_id\n    --, av.platform\n    , first_value(av.platform) ignore nulls over(\n\n          partition by avc.customer_id\n        order by av.plan_purchase_flag, av.visit_start_time_gmt\n        rows between unbounded preceding and unbounded following\n      ) as platform\n\n    , first_value(av.os_name) ignore nulls over(\n\n          partition by avc.customer_id\n        order by av.plan_purchase_flag desc, av.visit_start_time_gmt\n        rows between unbounded preceding and unbounded following\n      ) as os_name\n\n    , first_value(av.mobile_id) ignore nulls over(\n          partition by avc.customer_id\n        order by av.plan_purchase_flag desc, av.visit_start_time_gmt\n        rows between unbounded preceding and unbounded following\n      ) as mobile_id\n\n    , row_number() over(\n          partition by avc.customer_id\n        order by av.plan_purchase_flag desc, av.visit_start_time_gmt\n      ) as rnk\n    , av.visit_start_time_gmt\n    , av.plan_purchase_flag\n  from dmt.ga_visit_summary av\n      inner join stg.ga_visit_customers avc\n        on av.visit_id = avc.visit_id\n      inner join dmt.d_customer c\n        on av.customer_id = c.customer_id\n  where 1=1\n) avc0\nwhere 1=1\n  and avc0.rnk = 1\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "dmt_rpt_member_delta"
                    ],
                    "select": [
                        "dmt.d_customer_plan_360.customer_id"
                    ]
                },
                "tables": [
                    "extract.dmt_rpt_member_delta",
                    "dmt.d_customer_plan_360"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into extract.dmt_rpt_member_delta\nselect\n  c.customer_id\nFROM dmt.d_customer_plan_360 c\nWHERE  1=1\n  -- and c.updated_at >= '<start_date>'::timestamp  -  interval '30 day'\n  and c.dw_load_date_time >= convert_timezone('PST',getdate())::date  -  interval '30 day'\ngroup by c.customer_id\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "dmt.rpt_member.customer_id",
                        "extract.dmt_rpt_member_delta.customer_id"
                    ]
                },
                "tables": [
                    "dmt.rpt_member"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from dmt.rpt_member\nusing extract.dmt_rpt_member_delta\nwhere dmt.rpt_member.customer_id = extract.dmt_rpt_member_delta.customer_id\n;"
            },
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- [2019-05-07 17:10:57] 4868965 rows affected in 4s 519ms\n\n-- truncate table dmt.rpt_member;\n\ninsert into dmt.rpt_member\n\nselect\n    dc2.customer_id\n  , dc2.start_date\n  , dc2.end_date\n  --, dc.plan_conversion_source\n  , dc2.migrated_member\n\n  --, case when avc.platform is null then 'web' else avc.platform end as platform -- default to web if platform is unknown\n  , 'web' as platform -- default to web if platform is unknown\n--  , avc.os_name\n  , case when TRIM(BOTH ' ' FROM avc.mobile_id) = '0' then 'desktop' else 'mobile' end as device_type\n\n\n  , dc2.utm_source\n  , dc2.utm_medium\n  , dc2.utm_campaign\n  , dc2.utm_content\n  , dc2.utm_term\n  , InitCap(dc2.status_name) as status_name\n  , dc2.funnel_sku_list\n -- , dc.bundle_name\n -- , dc2.sub_plan_rank\n  , dc2.bm_type\n  , case when dc2.registered_in_shop_name is null\n          then 'N/A'\n          else dc2.registered_in_shop_name\n    end as registered_in_shop_name\n  , dc2.frequency as plan_frequency\n\n  , nvl(dc2.gender, 'Unknown') as gender\n  , nvl(dc2.race_code, 'Unknown') as race_code\n  , nvl(dc2.income_estimated_household,'Unknown') as income_estimated_household\n  , dc2.age_in_two_year_increments as age_in_two_year_increments\n  , nvl(dc2.marital_status_in_the_household,'Unknown') as marital_status_in_the_household\n  , nvl(dc2.presence_of_children,'Unknown') as presence_of_children\n  , nvl(dc2.acxiom_country_of_origin,'Unknown') as country_of_origin\n  , getdate() as dw_load_timestamp\n  , dc2.sub_plan_rank as current_sub_plan_rank\n  , dc2.customer_created_at\n  , dc2.current_plan_start_date\n  , dc2.ltv_tier\n from (\n\n  select\n      dc1.customer_id\n    , dc1.start_date\n    , dc1.current_plan_start_date\n    , dc1.end_date\n    , c.created_at as customer_created_at\n    --, dc1.plan_conversion_source\n    , dc1.migrated_member\n    , left(dc1.utm_source, 32) as utm_source\n    , left(dc1.utm_medium, 64) as utm_medium\n    , left(dc1.utm_campaign, 256) as utm_campaign\n    , left(dc1.utm_content, 256) as utm_content\n    , left(dc1.utm_term, 256) as utm_term\n    , dc1.status_name\n\n    , left(dc1.funnel_sku_list, 256)  as funnel_sku_list\n    --, dc1.bundle_name\n\n    , dc1.sub_plan_rank\n    , ov.value_segment as ltv_tier\n   -- , dc1.web_shop_name\n   -- , ms.shop_name\n\n    , dc1.bm_type\n\n\n    , coalesce(\n        case\n          when dc1.web_shop_name='WWW' then 'US'\n          when (dc1.web_shop_name='NA') then NULL\n          else dc1.web_shop_name\n        end,\n        ms.shop_name,\n        ps.shop_name,\n        ss.shop_name\n      )  as registered_in_shop_name\n    , dc1.frequency\n    , case when mpr.gender is not null then mpr.gender else acx.gender end as gender\n    , acx.race_code\n    , acx.income_estimated_household\n    , case when mpr.age is not null then mpr.age else acx.age_in_two_year_increments end as age_in_two_year_increments\n    , acx.marital_status_in_the_household\n    , acx.presence_of_children\n    , acx.acxiom_country_of_origin\n  from (\n    select\n        dc0.customer_id\n      , date_trunc('day', convert_timezone('PST',dc0.start_date_time))::date as start_date\n      , date_trunc('day', isnull(convert_timezone('PST',\n\n        last_value(dc0.end_date_time) over(\n          partition by dc0.customer_id\n          order by dc0.start_date_time\n          rows between unbounded preceding and unbounded following\n        )\n\n                                 ), '2100-01-01' :: timestamp)):: date as end_date\n      --, dc0.plan_conversion_source\n      --, dc0.cancel_reason\n      , case when (dc0.cancel_reason = 'converted_to_plan') OR dc0.plan_conversion_source in ('batch')\n            then True\n            else False\n        end as migrated_member\n\n      , first_value(dc0.last_utm_source) over(\n        partition by dc0.customer_id\n        order by dc0.start_date_time\n        rows between unbounded preceding and unbounded following\n      )  as utm_source\n      , first_value(dc0.last_utm_medium) over(\n        partition by dc0.customer_id\n        order by dc0.start_date_time\n        rows between unbounded preceding and unbounded following\n      ) as utm_medium\n      , first_value(dc0.last_utm_campaign) over(\n        partition by dc0.customer_id\n        order by dc0.start_date_time\n        rows between unbounded preceding and unbounded following\n      )  as utm_campaign\n      , first_value(dc0.last_utm_content) over(\n        partition by dc0.customer_id\n        order by dc0.start_date_time\n        rows between unbounded preceding and unbounded following\n      )  as utm_content\n      , first_value(dc0.last_utm_term) over(\n        partition by dc0.customer_id\n        order by dc0.start_date_time\n        rows between unbounded preceding and unbounded following\n      )  as utm_term\n\n      , dc0.funnel_sku_list\n      -- , dc0.bundle_name\n\n      -- the most recent value   for bm type , shop , frequency\n      , last_value(dc0.bm_type) over(\n        partition by dc0.customer_id\n        order by dc0.start_date_time\n        rows between unbounded preceding and unbounded following\n      ) as bm_type\n\n      , last_value(dc0.web_shop_name) ignore nulls over(\n        partition by dc0.customer_id\n        order by dc0.start_date_time\n        rows between unbounded preceding and unbounded following\n      ) as web_shop_name\n\n      , last_value(dc0.frequency) over(\n        partition by dc0.customer_id\n        order by dc0.start_date_time\n        rows between unbounded preceding and unbounded following\n      ) as frequency\n      , last_value(dc0.status_name) over(\n        partition by dc0.customer_id\n        order by dc0.start_date_time\n        rows between unbounded preceding and unbounded following\n      ) as status_name\n      , last_value(case when dc0.plan_conversion_source is not null\n                        then p1.lagged_start_date_time\n                        else dc0.start_date_time end) over(\n        partition by dc0.customer_id\n        order by dc0.start_date_time\n        rows between unbounded preceding and unbounded following\n      ) as current_plan_start_date\n\n      , dc0.sub_plan_rank\n    from dmt.d_customer_plan_360 dc0\n      inner join extract.dmt_rpt_member_delta c\n        on dc0.customer_id = c.customer_id\n    left join (select p.bm_type\n                     ,p.customer_subscription_plan_id\n                     ,lag(p.start_date_time,1) over (\n                        partition by p.customer_id\n                        order by p.start_date_time) as lagged_start_date_time\n                from dmt.d_customer_plan_360 p\n    ) p1 on p1.bm_type = dc0.bm_type\n         and p1.customer_subscription_plan_id = dc0.customer_subscription_plan_id\n    where 1=1\n\n) dc1\n  inner join dmt.d_customer c\n    on dc1.customer_id = c.customer_id\n  left outer join stg.test_customers t\n    ON c.customer_id = t.customer_id\n  left outer join (select customer_id, m.value_segment\n                   from stg.optimove_customer_output co\n                    left join stg.optimove_microsegments m\n                        on co.final_microsegment_id = m.microsegment_id ) ov\n    ON ov.customer_id = c.customer_id\n  left outer join map.shop ms\n    on c.registered_in_shop_id = ms.shop_id\n  left outer join (\n      select\n          p.customer_id\n        , p.shop_name\n      from (\n          select\n              p0.customer_id\n           -- , p.id as plan_id\n            , s.shop_name as shop_name\n            , row_number() over (partition by p0.customer_id order by p0.plan_created_at desc) as rnk\n          from stg.ps_plans p0\n            inner join map.shop s\n              on p0.shop_id = s.shop_id\n          where 1=1\n        ) p\n      where p.rnk = 1\n     ) ps\n   on dc1.customer_id = ps.customer_id\n  left outer join (\n      select\n          p.customer_id\n        , p.shop_name\n      from (\n        select\n            p0.customer_id\n          , s.shop_name as shop_name\n          , row_number() over (partition by p0.customer_id order by p0.created_at desc) as rnk\n        from stg.customer_subscriptions p0\n          inner join map.shop s\n            on p0.shop_id = s.shop_id\n        where 1=1\n      ) p\n        where p.rnk = 1\n     ) ss\n   on dc1.customer_id = ss.customer_id\n\n     left outer join (\n             select customer_id,\n            case when gender_input_individual_8688 = 'M' then 'Male'\n                when gender_input_individual_8688 = 'F' then 'Female'\n            else 'Unknown' end gender,\n            case when race_code_low_detail_3101 = 'A' then 'Asian'\n                when race_code_low_detail_3101 = 'B' then 'African American'\n                when race_code_low_detail_3101 = 'H' then 'Hispanic'\n                when race_code_low_detail_3101 = 'W' then 'White/Other'\n            else 'Unknown' end race_code,\n            nvl(state,'N/A') ,\n            case when income_estimated_household_8641 = '1' then 'Less than $15,000'\n                 when income_estimated_household_8641 = '2' then '$15,000 - $19,999'\n                 when income_estimated_household_8641 = '3' then '$20,000 - $29,999'\n                 when income_estimated_household_8641 = '4' then '$30,000 - $39,999'\n                 when income_estimated_household_8641 = '5' then '$40,000 - $49,999'\n                 when income_estimated_household_8641 = '6' then '$50,000 - $74,999'\n                 when income_estimated_household_8641 = '7' then '$75,000 - $99,999'\n                 when income_estimated_household_8641 = '8' then '$100,000 - $124,999'\n                 when income_estimated_household_8641 = '9' then 'Greater than $124,999'\n            else 'Unknown' end income_estimated_household,\n            age_in_two_year_increments_input_individual_8626::int age_in_two_year_increments,\n            case when marital_status_in_the_household_8609 = 'M' then 'Married'\n                when marital_status_in_the_household_8609 = 'S' then 'Single'\n                when marital_status_in_the_household_8609 = 'A' then 'Inferred Married'\n                when marital_status_in_the_household_8609 = 'B' then 'Inferred Single'\n            else 'Unknown' end marital_status_in_the_household   ,\n            case when presence_of_children_8622 = 'Y' then 'Children Present'\n                when presence_of_children_8622 = 'N' then 'No Children Present'\n            else 'Unknown' end presence_of_children,\n            nvl(acxiom_country_of_origin_name,'Unknown') acxiom_country_of_origin\n        from dmt.v_customer_acxiom v\n        left join map.acxiom_country_of_origin co on co.acxiom_country_of_origin_code = country_of_origin_high_detail_3102\n      ) acx\n   on dc1.customer_id = acx.customer_id\n     left outer join  ( select\n                         cu.id as customer_id,\n                         dob.age,\n                         g.gender\n\n\n                         from stg.customers cu\n                         left join (\n                                     select\n                                     customer_id,\n                                     datediff('year',(left(birth_date,4)||'-'||right(birth_date,2)||'-01')::date,getdate()) as age,\n                                     (left(birth_date,4)||'-'||right(birth_date,2)||'-01')::date birth_date,\n                                     row_number() over (partition by customer_id order by customer_answer_created_at desc) as rnk\n                                     from dmt.d_customer_answer\n                                     where (birth_date is not null\n                                     or birth_date != '')\n                                     and len(birth_date) = 6\n                                   ) dob\n                                   on dob.customer_id = cu.id and dob.rnk = 1\n                         left join (select ca.customer_id as customer_id,\n                                    option_name as gender,\n                                    row_number() over (partition by customer_id order by customer_answer_created_at desc) as rnk\n                                    from   dmt.d_customer_answer ca\n                                    where  question_id = 4\n                                     and option_name in ('Male','Female')\n                                    ) g on g.customer_id = cu.id and g.rnk = 1\n                        where dob.age is not null or g.gender is not null\n                       )mpr on mpr.customer_id = dc1.customer_id\n\nwhere 1=1\n    and dc1.sub_plan_rank =1\n    and c.email not ilike '%@dollarshaveclub.%'\n    and t.customer_id is null\n) dc2\n  left outer join stg.ga_customer_first_visit_os avc\n    on dc2.customer_id = avc.customer_id\nwhere 1=1\n\n\n  -- and dc2.utm_term is not null\n;"
            }
        ],
        "load.dmt.rpt_mbo_order.sql": [
            {
                "type": "CREATE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- truncate table dmt.rpt_mbo_order;\n/*\nCREATE TEMP TABLE dm_delta AS\nSELECT\n  date_trunc('day', convert_timezone('PST','2017-01-01'::date  -  interval '30 day'))::date AS report_date,\n  date_trunc('day', convert_timezone('PST',getdate()))::date AS current_date\n;\n*/\n\nCREATE TEMP TABLE dm_delta AS\nSELECT\n  date_trunc('day', convert_timezone('PST',getdate()::date  -  interval '30 day'))::date AS report_date,\n  date_trunc('day', convert_timezone('PST',getdate()))::date AS \"current_date\"\n;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [
                    "dmt.rpt_mbo_order"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from dmt.rpt_mbo_order\nwhere 1=1\n  -- and date_trunc('day', convert_timezone('PST',i.order_created_at))::date >= '2019-04-01'\n  and report_date >= (SELECT report_date FROM dm_delta);"
            },
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- 88,914\n-- [2019-05-10 16:57:29] 91,933 rows affected in 2s 417ms\n\ninsert into dmt.rpt_mbo_order\nselect\n    date_trunc('day', convert_timezone('PST',o.order_created_at))::date as report_date\n  , o.revenue_type as revenue_type\n  , o.box_type\n  , o.shipment_status\n  , case when o.bm_type is null then 'n/a' else o.bm_type end  as bm_type\n  , o.shop_name as shop_name\n  , o.currency\n  , left(oc.last_utm_source, 32) as utm_source\n  , left(oc.last_utm_medium, 64) as utm_medium\n  , case\n        when (oc.mobile_id = '0')\n        then 'desktop' else 'mobile'\n    end  as device_type\n  , nvl(o.plan_frequency,0) as plan_frequency\n  , op.item_quantity\n  , op.product_categories\n  , count(distinct o.order_id) as orders\n  , count(distinct o.customer_id) as customers\n  , sum(o.total_revenue) as total_revenue\n  , sum(opf.total_revenue) as cart_total_revenue\n  , sum(opf.recurring_revenue) as recurring_revenue\n  , sum(opf.onetime_revenue) as onetime_revenue\n  , getdate() dw_load_timestamp\nfrom stg.mbo_order_base o\n  left outer join stg.mbo_order_channel oc\n    on o.customer_id = oc.customer_id and o.order_id = oc.order_id\n      --and convert_timezone('PST', oc.order_created_at) >= (SELECT report_date FROM dm_delta) - INTERVAL '1 day'\n  left join stg.mbo_pf_paid opf\n    on o.customer_id = opf.customer_id and o.order_id = opf.order_id\n      --and convert_timezone('PST',opf.order_created_at) >= (SELECT report_date FROM dm_delta) - INTERVAL '1 day'\n  left outer join (\n      select\n          customer_id\n        , order_id\n        , sum(case when dp.product_category = 'Gift' OR  dp.nature = 0 then 1 else 0 end) as item_quantity\n        , count(distinct dp.product_category) as product_categories\n      from dmt.f_invoice_product ii\n        inner join dmt.d_product dp\n          on ii.product_id = dp.product_id\n      where 1=1\n        -- and convert_timezone('PST',ii.order_created_at) >= (SELECT report_date FROM dm_delta) - INTERVAL '1 day'\n        and dp.product_category not in ('Other', 'Bundle')\n        --and customer_id = 11217596\n      group by 1,2\n    ) op\n        on o.customer_id = op.customer_id and o.order_id = op.order_id\nwhere 1=1\n  and convert_timezone('PST',o.order_created_at) >= (SELECT report_date FROM dm_delta)\n  --and shipment_status = 'paid'\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13\n;"
            },
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- [2019-05-10 21:26:44] 1,490,143 rows affected in 16s 902ms\n-- [2019-05-15 14:34:33] 680,318 rows affected in 52 s 309 ms\n-- [2019-05-20 14:59:25] 688,276 rows affected in 5 s 425 ms\n-- [2019-05-10 21:51:48] 56,297 rows affected in 8s 232ms\n\ninsert into dmt.rpt_mbo_order\nselect\n    date_trunc('day', convert_timezone('PST',o.next_bill_at))::date as report_date\n  , o.revenue_type as revenue_type\n  , o.box_type\n  , o.shipment_status\n  , case when o.bm_type is null then 'n/a' else o.bm_type end  as bm_type\n  , o.shop_name as shop_name\n  , o.currency\n  , NULL as utm_source\n  , NULL as utm_medium\n  , NULL  as device_type\n  , nvl(o.plan_frequency,0) as plan_frequency\n  , o.item_quantity\n  , o.product_categories\n  -- schedule_id has same function as orders :\n  -- count of future transactions  based on open carts\n  , count(distinct o.schedule_id) as orders\n  , count(distinct o.customer_id) as customers\n  , sum(o.total_revenue) as total_revenue\n  , sum(o.total_revenue) as cart_total_revenue\n  , sum(o.recurring_revenue) as recurring_revenue\n  , sum(o.onetime_revenue) as onetime_revenue\n  , getdate() dw_load_timestamp\nfrom stg.mbo_cart_base o\nwhere 1=1\n  -- removing old/outdated opened cart - these are most likely invalid ones anyway \n  and o.next_bill_at > getdate() - INTERVAL '3 day'\n  -- and customer_id = 11217596\n  -- and shipment_status = 'paid'\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13\n;"
            }
        ],
        "load.map.mkt_medium_channel.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "mkt_medium_channel"
                    ]
                },
                "tables": [
                    "map.mkt_medium_channel"
                ],
                "subqueries": {
                    "t": "select 'snp' as medium_code, 'Paid Social' as channel, 'Paid Social' as sub_channel union all select 'nat' as medium_code, 'Native' as channel, 'Native' as sub_channel union all select 'ema' as medium_code, 'Email' as channel, 'Email' as sub_channel union all select 'par' as medium_code, 'Partner' as channel, 'Partner' as sub_channel union all select 'inc' as medium_code, 'Partner' as channel, 'Incentivized' as sub_channel union all select 'aff' as medium_code, 'Partner' as channel, 'Affiliate Network' as sub_channel union all select 'olv' as medium_code, 'Video' as channel, 'Online Video' as sub_channel union all select 'atv' as medium_code, 'Video' as channel, 'Advanced TV (prg TV, addressable tv)' as sub_channel union all select 'ott' as medium_code, 'Video' as channel, 'Over the Top/connected TV' as sub_channel union all select 'dis' as medium_code, 'Display' as channel, 'Display' as sub_channel union all select 'cpc' as medium_code, 'Paid Search' as channel, 'Paid Search' as sub_channel union all select 'shp' as medium_code, 'Paid Search' as channel, 'Shopping' as sub_channel union all select 'rad' as medium_code, 'Audio' as channel, 'Radio' as sub_channel union all select 'pod' as medium_code, 'Audio' as channel, 'Podcast' as sub_channel union all select 'str' as medium_code, 'Audio' as channel, 'Streaming' as sub_channel union all select 'soc' as medium_code, 'Organic Social' as channel, 'Organic Social' as sub_channel union all select 'pri' as medium_code, 'Offline' as channel, 'Print' as sub_channel union all select 'ooh' as medium_code, 'Offline' as channel, 'Outdoor' as sub_channel union all select 'drm' as medium_code, 'Offline' as channel, 'Direct Mail' as sub_channel union all select 'otv' as medium_code, 'Offline' as channel, 'TV (Offline)' as sub_channel union all select 'inf' as medium_code, 'Influencer' as channel, 'Influencer' as sub_channel union all select 'ref' as medium_code, 'Referrals' as channel, 'Referrals' as sub_channel union all select 'mob' as medium_code, 'Internal' as channel, 'Mobile' as sub_channel union all select 'mem' as medium_code, 'Internal' as channel, 'Member Engagement' as sub_channel union all select 'mel' as medium_code, 'Internal' as channel, 'Mel Magazine' as sub_channel union all select 'pur' as medium_code, 'Internal' as channel, 'Public Relations' as sub_channel union all select 'doh' as medium_code, 'Offline' as channel, 'Digital Out of Home' as sub_channel"
                },
                "skipped": false,
                "value": "insert into map.mkt_medium_channel\nselect\n    medium_code\n  , channel\n  , sub_channel\n  , getdate() as dw_load_timestamp\nfrom (\nselect 'snp' as medium_code, 'Paid Social' as channel, 'Paid Social' as sub_channel union all\nselect 'nat' as medium_code, 'Native' as channel, 'Native' as sub_channel union all\nselect 'ema' as medium_code, 'Email' as channel, 'Email' as sub_channel union all\nselect 'par' as medium_code, 'Partner' as channel, 'Partner' as sub_channel union all\nselect 'inc' as medium_code, 'Partner' as channel, 'Incentivized' as sub_channel union all\nselect 'aff' as medium_code, 'Partner' as channel, 'Affiliate Network' as sub_channel union all\nselect 'olv' as medium_code, 'Video' as channel, 'Online Video' as sub_channel union all\nselect 'atv' as medium_code, 'Video' as channel, 'Advanced TV (prg TV, addressable tv)' as sub_channel union all\nselect 'ott' as medium_code, 'Video' as channel, 'Over the Top/connected TV' as sub_channel union all\nselect 'dis' as medium_code, 'Display' as channel, 'Display' as sub_channel union all\nselect 'cpc' as medium_code, 'Paid Search' as channel, 'Paid Search' as sub_channel union all\nselect 'shp' as medium_code, 'Paid Search' as channel, 'Shopping' as sub_channel union all\nselect 'rad' as medium_code, 'Audio' as channel, 'Radio' as sub_channel union all\nselect 'pod' as medium_code, 'Audio' as channel, 'Podcast' as sub_channel union all\nselect 'str' as medium_code, 'Audio' as channel, 'Streaming' as sub_channel union all\nselect 'soc' as medium_code, 'Organic Social' as channel, 'Organic Social' as sub_channel union all\nselect 'pri' as medium_code, 'Offline' as channel, 'Print' as sub_channel union all\nselect 'ooh' as medium_code, 'Offline' as channel, 'Outdoor' as sub_channel union all\nselect 'drm' as medium_code, 'Offline' as channel, 'Direct Mail' as sub_channel union all\nselect 'otv' as medium_code, 'Offline' as channel, 'TV (Offline)' as sub_channel union all\nselect 'inf' as medium_code, 'Influencer' as channel, 'Influencer' as sub_channel union all\nselect 'ref' as medium_code, 'Referrals' as channel, 'Referrals' as sub_channel union all\nselect 'mob' as medium_code, 'Internal' as channel, 'Mobile' as sub_channel union all\nselect 'mem' as medium_code, 'Internal' as channel, 'Member Engagement' as sub_channel union all\nselect 'mel' as medium_code, 'Internal' as channel, 'Mel Magazine' as sub_channel union all\nselect 'pur' as medium_code, 'Internal' as channel, 'Public Relations' as sub_channel union all\nselect 'doh' as medium_code, 'Offline' as channel, 'Digital Out of Home' as sub_channel\n     ) t\n;"
            }
        ],
        "load.stg.mbo_order_base.sql": [
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "dmt.f_invoice.customer_id"
                    ],
                    "where": [
                        "dw_load_date_time"
                    ]
                },
                "tables": [
                    "dm_delta",
                    "dmt.f_invoice"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "CREATE TEMP TABLE dm_delta AS\nselect distinct i.customer_id as customer_id\nfrom dmt.f_invoice i\nwhere dw_load_date_time >= '<start_date>'::timestamp  -  interval '1 day'\ngroup by 1\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.mbo_order_base.customer_id",
                        "dm_delta.customer_id"
                    ]
                },
                "tables": [
                    "stg.mbo_order_base"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.mbo_order_base\nusing dm_delta\nwhere stg.mbo_order_base.customer_id = dm_delta.customer_id\n;"
            },
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "/*\ndelete from stg.mbo_order_base\nwhere 1=1\n  -- and date_trunc('day', convert_timezone('PST',i.order_created_at))::date >= '2019-04-01'\n  and order_created_at >= (SELECT order_created_date FROM dm_delta);\n;\n*/\n-- [2019-05-13 12:23:21] 1,935,057 rows affected in 2 s 391 ms\n\n-- enriched order data / only selected attributes\n\ninsert into stg.mbo_order_base\nselect\n    i1.order_created_at as order_created_at\n  -- TODO , i1.start_date_time as plan_start_date_time -- removing from top since plan end can change over time\n  -- TODO , i1.end_date_time as plan_end_date_time -- removing from top since plan end can change over time\n\n  , i1.customer_id\n  , i1.order_id -- same function as schedule_id in stg.mbo_cart_base\n  , i1.customer_subscription_plan_id\n\n  -- , i1.order_rank   -- used to identify duplicate orders due to multiple overlapping plans\n  -- , i1.plan_order_start_ss          -- time sec after plan start\n  -- , i1.order_plan_end_ss            -- time sec before plan end\n\n  , 'paid' as revenue_type -- hardcoded as payement recieved since all orders in this data set are valid orders; shipment status provides more details\n  , i1.box_type -- plan_initial / recurring / on_demand_in_plan\n  , i1.shipment_status -- paid_shipped / paid_not_shipped / etc.\n  , i1.bm_type\n  , i1.shop_name -- shop name of the order / customer\n  , i1.currency\n  , i1.plan_frequency\n  , i1.plan_order_rank -- rank of order within the plan /sub\n  , i1.plan_conversion_source\n  --, i1.cancel_reason\n\n  , i1.plan_initial_invoice\n  , i1.initial_invoice\n  -- TODO , i1.order_creation_reason\n  -- TODO , i1.order_attribution_attribution_type\n\n  , i1.grand_total as grand_total\n  , i1.amount_true as total_revenue -- TODO: rename to  total revenue\n  , i1.total_line_item_discount as total_line_item_discount\n  , i1.total_line_item_tax as total_line_item_tax\n  , i1.base_shipping_tax as base_shipping_tax\n  , i1.total_cost as total_cost\n  , i1.total_shipping_tax as total_shipping_tax\n\n  , getdate() as dw_load_timestamp\nfrom (\n\n---==== 1\nselect\n    i0.order_created_at\n  , i0.start_date_time  -- removing from top since plan end can change over time\n  , i0.end_date_time as  end_date_time -- removing from top since plan end can change over time\n  , i0.plan_order_rank\n  , i0.cancel_reason_lag\n  -- used to identify duplicate orders due to multiple overlapping plans\n  , row_number() over (partition by i0.order_id order by i0.start_date_time desc) as order_rank\n  , i0.plan_order_start_ss -- time sec after plan start\n  , i0.order_plan_end_ss -- time sec before plan end\n  , case\n      when (i0.order_creation_reason = 'renewal') then 'recurring'\n      else case when (i0.bm_type = 'sub'\n                and  i0.initial_invoice = false\n                and i0.plan_initial_invoice = false\n                and i0.order_creation_reason != 'on_demand')\n      then 'recurring'\n\n      else case when (i0.bm_type = 'sub'\n                and  i0.initial_invoice = false\n                and i0.plan_initial_invoice = true\n                and i0.order_creation_reason != 'on_demand')\n      then 'plan_initial'\n\n      else case when ((i0.bm_type is not null) and  i0.initial_invoice = true) then 'plan_funnel'\n      -- if not initial invoice then still can be funnel if plan rank = 1\n      -- the 1st order can be out of plan\n      else case when ((i0.bm_type is not null)\n                      and i0.plan_initial_invoice = true\n                      and i0.sub_plan_rank=1\n                      and abs(i0.plan_order_start_ss) < 50\n                     )\n      then 'plan_funnel'\n\n      else case when ((i0.bm_type is null) and  i0.initial_invoice = true)\n      then 'on_demand_out_of_plan'\n      else case when (i0.bm_type = 'plan'\n                      and i0.initial_invoice = false\n                      and i0.plan_initial_invoice = true\n                      and abs(plan_order_start_ss) < 50\n                      and i0.order_attribution_attribution_type = 'standalonecart')\n      then 'plan_initial'\n      else case when ((i0.bm_type is not null)\n                      and i0.plan_initial_invoice = true\n                      and i0.sub_plan_rank > 1\n                      and abs(i0.plan_order_start_ss) < 50\n                     )\n      then 'plan_initial'\n        -- relaxing rules for cases when 1st order cancelled and second order issued in 1 hour after the 1st\n      else case when ((i0.bm_type is not null)\n                      --and i0.plan_initial_invoice = true\n                      and i0.sub_plan_rank = 1\n                      and i0.plan_order_rank = 1 -- first (valid/not cancelled order)\n                      and i0.plan_order_start_ss < 3600\n                     )\n      then 'plan_funnel'\n        -- relaxing rules for cases when 1st order cancelled and second order issued in 1 hour after the 1st\n      else case when ((i0.bm_type is not null)\n                      --and i0.plan_initial_invoice = true\n                      and i0.sub_plan_rank > 1\n                      and i0.plan_order_rank = 1 -- first (valid/not cancelled order)\n                      and i0.plan_order_start_ss < 3600\n                     )\n      then 'plan_initial'\n\n      else case when (i0.bm_type = 'plan'\n                      and i0.initial_invoice = false\n                      and abs(i0.plan_order_start_ss) <= 50\n                      and i0.order_attribution_attribution_type = 'standalonecart')\n      then 'plan_initial'\n\n      else case when (i0.bm_type in ('sub', 'plan')\n                    and i0.order_creation_reason = 'on_demand')\n      then 'on_demand_in_plan'\n      else case when (i0.bm_type in ('plan')\n                    and i0.initial_invoice = false\n                    and i0.plan_initial_invoice = false\n                    and i0.plan_order_start_ss > 50\n                    and i0.plan_order_rank  > 1\n                    and i0.order_attribution_attribution_type is null\n        --  or i0.order_attribution_attribution_type = 'standalonecart'\n                    )\n      then 'on_demand_in_plan'\n      else case when (i0.bm_type in ('plan')\n                    and i0.initial_invoice = false\n                    and i0.plan_initial_invoice = false\n                    and plan_order_start_ss > 50\n                    -- rank can be 1 ; in case if migrated and purchased before the first scheduled order\n                    and plan_order_rank  > 1\n                    and i0.order_attribution_attribution_type = 'standalonecart'\n                    )\n      then 'on_demand_in_plan'\n      else case when (i0.bm_type in ('plan')\n                    and i0.initial_invoice = false\n                    and i0.plan_initial_invoice = false\n                    and plan_order_start_ss > 50\n                    -- rank can be 1 ; in case if migrated and purchased before the first scheduled order\n                    and plan_order_rank  = 1\n                    and (i0.cancel_reason_lag = 'converted_to_plan' or i0.plan_conversion_source = 'batch')\n                    and i0.order_attribution_attribution_type = 'standalonecart'\n                    )\n      then 'on_demand_in_plan'\n\n      else case when (i0.bm_type is null\n                      and i0.customer_subscription_plan_id is null\n                      and i0.initial_invoice = false\n                      and i0.plan_initial_invoice = false)\n      then 'on_demand_out_of_plan'\n      else 'unknown'\n      end end end end end end end end end end end end end end end\n    end as box_type -- plan_funnel, plan_initial, recurring, on_demand_in_plan, on_demand_out_of_plan (nsrq)\n  , i0.shipment_status\n  , i0.customer_id\n  , i0.customer_subscription_plan_id\n  , i0.order_id\n  , i0.bm_type\n  , i0.sub_plan_rank\n  , i0.plan_conversion_source\n  , i0.cancel_reason\n  , i0.shop_name\n  , i0.currency\n  , i0.plan_frequency\n  , i0.plan_initial_invoice\n  , i0.initial_invoice\n  , i0.order_creation_reason\n  , i0.order_attribution_attribution_type\n\n  , i0.grand_total as grand_total\n  , i0.amount_true as amount_true\n  , i0.total_line_item_discount as total_line_item_discount\n  , i0.total_line_item_tax as total_line_item_tax\n  , i0.base_shipping_tax as base_shipping_tax\n  , i0.total_cost as total_cost\n  , i0.total_shipping_tax as total_shipping_tax\n\n-- , i0.plan_id\n-- , i0.customer_subscription_id\n\nfrom (\nselect\n    i.order_created_at\n  , cp.start_date_time\n\n  , isnull(cp.end_date_time, '2100-01-01'::timestamp) as end_date_time\n  , row_number() over (partition by i.customer_id, coalesce(sc.plan_id, i.customer_subscription_id, cp.customer_subscription_plan_id) order by i.order_created_at) as plan_order_rank\n  , lag(cancel_reason) over (partition by i.customer_id order by i.order_created_at) as cancel_reason_lag\n  , datediff(s, cp.start_date_time, i.order_created_at)  as plan_order_start_ss\n  , datediff(s, i.order_created_at, cp.end_date_time)  as order_plan_end_ss\n  , case\n      when i.shipment_shipped_at is null and i.invoice_status = 'paid' then 'paid_not_shipped'\n      when i.shipment_shipped_at is null and i.invoice_status != 'paid' then i.invoice_status\n      when i.shipment_shipped_at is not null and i.invoice_status = 'paid' then 'paid_shipped'\n      else 'other'\n    end as shipment_status\n  , i.customer_id\n  , coalesce(sc.plan_id, i.customer_subscription_id, cp.customer_subscription_plan_id) as customer_subscription_plan_id\n  , i.order_id\n  , case when sc.plan_id is not null\n                then 'plan'\n                else case when i.customer_subscription_id is not null\n                            then 'sub' else cp.bm_type\n                end\n    end as bm_type\n  , cp.sub_plan_rank\n  , cp.plan_conversion_source\n  , cp.cancel_reason\n  , i.shop_name\n  , i.order_currency_code as currency\n  , cp.frequency as plan_frequency\n  -- TODO: fix the logic from d_customer_360\n  -- it labels first standalone order in the plan as funnel\n  -- it is not right in case of the migrated customer\n\n\n-- , sc.plan_id\n-- , i.customer_subscription_id\n  , case\n       when ( cp.bm_type is null)  then false\n       else case when ( abs(datediff(s, cp.start_date_time, i.order_created_at)) > 50) then false\n       else case when ( abs(datediff(s, cp.start_date_time, i.order_created_at)) <= 50) then true\n       else i.plan_initial_invoice\n       end end\n    end as plan_initial_invoice\n\n  , i.initial_invoice\n  , i.order_creation_reason\n  , i.order_attribution_attribution_type\n\n  , i.grand_total as grand_total\n  , i.amount_true as amount_true\n  , i.total_line_item_discount as total_line_item_discount\n  , i.total_line_item_tax as total_line_item_tax\n  , i.base_shipping_tax as base_shipping_tax\n  , i.total_cost as total_cost\n  , i.total_shipping_tax as total_shipping_tax\nfrom dmt.f_invoice i\n  inner join dm_delta dm\n    on i.customer_id = dm.customer_id\n  -- only valid customers\n  inner join dmt.rpt_member dc\n    on i.customer_id = dc.customer_id\n  left outer join stg.ps_scheduled_carts sc\n    on i.customer_id = sc.customer_id and i.order_attribution_attribution_id = sc.id\n  left outer join dmt.d_customer_plan_360 cp\n    on i.customer_id = cp.customer_id and i.order_created_at\n      between  cp.start_date_time - interval '50 second'\n        and isnull(cp.end_date_time, '2100-01-01' :: timestamp) - interval '50 second'\nwhere 1=1\n    --and date_trunc('day', i.order_created_at)::date >= (SELECT order_created_date FROM dm_delta)\n    --and i.order_created_at between '2019-03-01' and '2019-03-18 23:59:59.999'\n    and i.order_creation_source not in ('msa' ,'fulfillment_monitor')\n    -- TODO: allow shipments in process - use shipment_status='paid_shipped' to get valid / shipped orders\n    -- and i.shipment_shipped_at  is not null -- only valid /shipped orders\n    -- ===== unit testing below\n    -- and i.order_creation_reason not in ('renewal')\n    -- and i.order_creation_reason in ('on_demand')\n    -- and i.customer_id = '3291' -- sub/plan/on_demand_in_plan(4x)\n    -- and i.customer_id = '14384' -- initial sub (plan_funnel), migrated to plan (recurring)\n    -- and i.customer_id = '9270' -- plan with one initial order only\n    -- and i.customer_id = '14325' -- on_demand_out_of_plan NSRQ; no sub / plan\n    -- and i.customer_id = '1863' -- sub only recurring\n    -- and i.customer_id = '4262' -- sub / plan on_demand_in_plan\n    -- and i.customer_id = '108770' -- plan_initial / plan_secondary_initial\n    -- and i.customer_id = '1045417' -- on demand in plan (rule #2)\n    -- and i.customer_id = '9005' -- on demand in plan (rule #3)\n    -- and i.customer_id = '10397' -- on demand in plan (rule #4)\n    -- and i.customer_id = '1364302' -- on_demand_out_of_plan\n    -- and i.customer_id = '1930872' -- cancelled shipment - excluded\n    -- and i.customer_id = '12089322' -- on_demand_out_of_plan / empty cancelled plan/ valid plan (#2) => plan_initial\n    -- and i.customer_id = '13144784' -- 1st order cancelled and 2nd valid => plan_funnel\n    -- and i.customer_id = '11217596' -- 2 overlapping subs plans -- TODO -- fix overlap issue:\n    -- and cp.bm_type = 'sub'\n    -- and i.initial_invoice = True\n    -- and cp.customer_id is null\n) i0\nwhere 1=1\n    -- date range limit has to be outside to ensure correct rank calculation\n    -- comment below line - by Alok\n    --and i0.order_created_at >= (SELECT order_created_date FROM dm_delta)\n-- order by\n--     i0.customer_subscription_plan_id\n--   , i0.customer_id\n--   , i0.order_created_at\n-- limit 100;\n---====// 1\n\n) i1\nwhere 1=1\n  and i1.order_rank = 1\n  -- and i1.box_type = 'unknown'\n  -- or i1.box_type is null\n-- order by\n--     i1.customer_id\n--   , i1.order_created_at\n--limit 100\n;"
            },
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- NEW CODE - Insert statement for ENTIRELY NSRQ customers\nINSERT INTO stg.mbo_order_base\nselect \norder_created_at\t\n,customer_id\t\n,order_id\t\n,customer_subscription_plan_id\t\n,revenue_type\t\n,box_type\t\n,shipment_status\t\n,bm_type\t\n,shop_name\t\n,currency\t\n,plan_frequency\t\n,plan_order_rank\t\n,plan_conversion_source\t\n,plan_initial_invoice\t\n,initial_invoice\t\n,grand_total\t\n,total_revenue\t\n,total_line_item_discount\t\n,total_line_item_tax\t\n,base_shipping_tax\t\n,total_cost\t\n,total_shipping_tax\t\n,dw_load_timestamp\nfrom (\n select distinct\n    i.order_created_at as order_created_at\n  , i.customer_id\n  , i.order_id \n  , cast(NULL as bigint) as customer_subscription_plan_id\n  , 'paid' as revenue_type -- hardcoded as payement recieved since all orders in this data set are valid orders; shipment status provides more details\n  , 'on_demand_out_of_plan' as box_type -- plan_initial / recurring / on_demand_in_plan\n  --, i.shipment_status -- paid_shipped / paid_not_shipped / etc.\n  , case\n      when i.shipment_shipped_at is null and i.invoice_status = 'paid' then 'paid_not_shipped'\n      when i.shipment_shipped_at is null and i.invoice_status != 'paid' then i.invoice_status\n      when i.shipment_shipped_at is not null and i.invoice_status = 'paid' then 'paid_shipped'\n      else 'other'\n    end as shipment_status\n  , NULL as bm_type\n  , i.shop_name -- shop name of the order / customer\n  , i.order_currency_code as currency\n  , cast(NULL as int) as plan_frequency\n  --, NULL plan_order_rank -- rank of order within the plan /sub\n  , row_number() over (partition by i.customer_id order by i.order_created_at) as plan_order_rank\n  , NULL plan_conversion_source\n  , false plan_initial_invoice \n  , i.initial_invoice\n  , i.grand_total as grand_total\n  , i.amount_true as total_revenue -- TODO: rename to  total revenue\n  , i.total_line_item_discount as total_line_item_discount\n  , i.total_line_item_tax as total_line_item_tax\n  , i.base_shipping_tax as base_shipping_tax\n  , i.total_cost as total_cost\n  , i.total_shipping_tax as total_shipping_tax\n\n  , getdate() as dw_load_timestamp\n  , row_number() over (partition by i.order_id order by order_created_at desc) as dedupe_rnk\n  -- select i.order_attribution_attribution_type,count(1)\nfrom dmt.f_invoice i\n  inner join dm_delta dm\n    on i.customer_id = dm.customer_id\nwhere 1=1\n--and i.order_created_at >= '2020-01-01' --and i.order_created_at < '2021-03-01'\nand i.order_creation_source not in ('msa' ,'fulfillment_monitor')\n--and i.order_attribution_attribution_type = 'standalonecart' -- we cannot put this one as we are deleting all records (BM1 also) for a customer and reloading\nand i.customer_id NOT in (select distinct customer_id from dmt.d_customer_plan_360) -- customers who neved had any subscription/plan\u2028\nand i.order_id NOT in (select order_id from stg.mbo_order_base) -- just to exclude any orders which is already coming from 1st part of the union \n)\nwhere dedupe_rnk = 1\n;"
            },
            {
                "type": "CREATE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- for the plan_funnel patch \nCREATE TEMP TABLE dm_delta_orders AS\nwith target as (\nselect mbo.customer_id,count(1)\nfrom stg.mbo_order_base mbo join dm_delta dd on mbo.customer_id = dd.customer_id\nwhere box_type = 'plan_funnel'\n--and shipment_status = 'paid_shipped'\nand bm_type = 'plan' -- so just the BM2 orders/customers\ngroup by 1\nhaving count(1) > 1\n)\nselect mbo1.*\n, original_order_id\n, case when mbo1.order_id = ap.original_order_id then 'plan_funnel' else 'on_demand_in_plan' end new_box_type\n--select count(distinct mbo.customer_id),count(1),count(distinct mbo1.order_id)\nfrom target mbo \nJOIN stg.mbo_order_base mbo1 on mbo.customer_id = mbo1.customer_id and box_type = 'plan_funnel'\nleft join stg.ps_create_and_activate_plan ap on mbo1.order_id = ap.original_order_id\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.mbo_order_base.order_id",
                        "dm_delta_orders.order_id",
                        "stg.mbo_order_base.box_type"
                    ]
                },
                "tables": [
                    "stg.mbo_order_base"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.mbo_order_base\nusing dm_delta_orders\nwhere stg.mbo_order_base.order_id = dm_delta_orders.order_id\nand stg.mbo_order_base.box_type = 'plan_funnel'\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "mbo_order_base"
                    ],
                    "select": [
                        "customer_id",
                        "order_id",
                        "customer_subscription_plan_id",
                        "revenue_type",
                        "shipment_status",
                        "bm_type",
                        "shop_name",
                        "currency",
                        "plan_frequency",
                        "plan_order_rank",
                        "plan_conversion_source",
                        "plan_initial_invoice",
                        "initial_invoice",
                        "grand_total",
                        "total_revenue",
                        "total_line_item_discount",
                        "total_line_item_tax",
                        "base_shipping_tax",
                        "total_cost",
                        "total_shipping_tax",
                        "dw_load_timestamp",
                        "new_box_type"
                    ],
                    "where": [
                        "dedupe_rnk"
                    ]
                },
                "tables": [
                    "stg.mbo_order_base",
                    "dm_delta_orders"
                ],
                "subqueries": {
                    "where": "select distinct order_created_at, customer_id, order_id, customer_subscription_plan_id, revenue_type, new_box_type as box_type, shipment_status, bm_type, shop_name, currency, plan_frequency, plan_order_rank, plan_conversion_source, plan_initial_invoice, initial_invoice, grand_total, total_revenue, total_line_item_discount, total_line_item_tax, base_shipping_tax, total_cost, total_shipping_tax, dw_load_timestamp, row_number () over (partition by order_id order by order_created_at desc) as dedupe_rnk from dm_delta_orders"
                },
                "skipped": false,
                "value": "INSERT INTO stg.mbo_order_base\nselect \norder_created_at\t\n,customer_id\t\n,order_id\t\n,customer_subscription_plan_id\t\n,revenue_type\t\n,box_type\t\n,shipment_status\t\n,bm_type\t\n,shop_name\t\n,currency\t\n,plan_frequency\t\n,plan_order_rank\t\n,plan_conversion_source\t\n,plan_initial_invoice\t\n,initial_invoice\t\n,grand_total\t\n,total_revenue\t\n,total_line_item_discount\t\n,total_line_item_tax\t\n,base_shipping_tax\t\n,total_cost\t\n,total_shipping_tax\t\n,dw_load_timestamp\nfrom (\n select distinct\n        order_created_at\t\n        ,customer_id\t\n        ,order_id\t\n        ,customer_subscription_plan_id\t\n        ,revenue_type\t\n        ,new_box_type\tas box_type\n        ,shipment_status\t\n        ,bm_type\t\n        ,shop_name\t\n        ,currency\t\n        ,plan_frequency\t\n        ,plan_order_rank\t\n        ,plan_conversion_source\t\n        ,plan_initial_invoice\t\n        ,initial_invoice\t\n        ,grand_total\t\n        ,total_revenue\t\n        ,total_line_item_discount\t\n        ,total_line_item_tax\t\n        ,base_shipping_tax\t\n        ,total_cost\t\n        ,total_shipping_tax\t\n        ,dw_load_timestamp\n      , row_number() over (partition by order_id order by order_created_at desc) as dedupe_rnk\n    from dm_delta_orders\n    )\nwhere dedupe_rnk = 1\n;"
            }
        ],
        "load.map.mkt_source.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "mkt_source"
                    ]
                },
                "tables": [
                    "map.mkt_source"
                ],
                "subqueries": {
                    ";": "select 'face' as source_code, 'Facebook' as source_name union all select 'inst' as source_code, 'Instagram' as source_name union all select 'twit' as source_code, 'Twitter' as source_name union all select 'pint' as source_code, 'Pinterest' as source_name union all select 'snap' as source_code, 'Snapchat' as source_name union all select 'link' as source_code, 'LinkedIn' as source_name union all select 'plus' as source_code, 'Google+' as source_name union all select 'tabo' as source_code, 'Taboola' as source_name union all select 'outb' as source_code, 'Outbrain' as source_name union all select 'revc' as source_code, 'Rev Content' as source_name union all select 'penn' as source_code, 'Penny Saver' as source_name union all select 'madr' as source_code, 'Madrivo' as source_name union all select 'goog' as source_code, 'Google' as source_name union all select 'bing' as source_code, 'Bing' as source_name union all select 'adnt' as source_code, 'Ad.net' as source_name union all select 'acqu' as source_code, 'Acquisition' as source_name union all select 'gdn' as source_code, 'Google Display Network' as source_name union all select 'crit' as source_code, 'Criteo' as source_name union all select 'zumo' as source_code, 'Zumobi' as source_name union all select 'glob' as source_code, 'Global Wide Media' as source_name union all select 'gizm' as source_code, 'Gizmodo' as source_name union all select 'uncr' as source_code, 'Uncrate' as source_name union all select 'yaho' as source_code, 'Yahoo' as source_name union all select 'aol' as source_code, 'AOL' as source_name union all select 'stum' as source_code, 'Stumbleupon' as source_name union all select 'idme' as source_code, 'ID Me' as source_name union all select 'swag' as source_code, 'Swagbucks' as source_name union all select 'cool' as source_code, 'Cool Material' as source_name union all select 'fbuy' as source_code, 'Friendbuy' as source_name union all select 'rev3' as source_code, 'Rev3' as source_name union all select 'linu' as source_code, 'Linus' as source_name union all select 'yout' as source_code, 'YouTube' as source_name union all select 'seis' as source_code, 'Seismic' as source_name union all select 'blea' as source_code, 'Bleacher Report' as source_name union all select 'crac' as source_code, 'Crack Podcast' as source_name union all select 'pand' as source_code, 'Pandora' as source_name union all select 'spot' as source_code, 'Spotify' as source_name union all select 'siri' as source_code, 'SiriusXM' as source_name union all select 'acor' as source_code, 'Acorns' as source_name union all select 'rokt' as source_code, 'Rokt' as source_name union all select 'cert' as source_code, 'Certifico' as source_name union all select 'amex' as source_code, 'American Express' as source_name union all select 'mili' as source_code, 'Military.com' as source_name union all select 'blos' as source_code, 'Blossom Media' as source_name union all select 'scor' as source_code, 'Score Stream' as source_name union all select 'ampu' as source_code, 'Ampush' as source_name union all select 'grin' as source_code, 'Grinder' as source_name union all select 'kcrw' as source_code, 'KCRW' as source_name union all select 'fybr' as source_code, 'Fyber' as source_name union all select 'tapj' as source_code, 'Tapjoy' as source_name union all select 'twch' as source_code, 'Twitch' as source_name union all select 'acas' as source_code, 'ACast' as source_name union all select 'alge' as source_code, 'Algebra' as source_name union all select 'allt' as source_code, 'All Things Comedy' as source_name union all select 'apmm' as source_code, 'APM' as source_name union all select 'arto' as source_code, 'Art of Mainliness' as source_name union all select 'audi' as source_code, 'Audible' as source_name union all select 'boom' as source_code, 'Audioboom' as source_name union all select 'bars' as source_code, 'Barstool Sports' as source_name union all select 'pmii' as source_code, 'PMI' as source_name union all select 'cade' as source_code, 'Cadence13' as source_name union all select 'cast' as source_code, 'Cast Plus' as source_name union all select 'cros' as source_code, 'Crossover Media' as source_name union all select 'deat' as source_code, 'Deathsquad' as source_name union all select 'earw' as source_code, 'Earwolf' as source_name union all select 'espn' as source_code, 'ESPN' as source_name union all select 'depo' as source_code, 'ESPN Deportes' as source_name union all select 'fera' as source_code, 'Feral Audio' as source_name union all select 'five' as source_code, 'Five' as source_name union all select 'game' as source_code, 'Gameday Media' as source_name union all select 'gasd' as source_code, 'GaS Digital Network' as source_name union all select 'geek' as source_code, 'Geek History Lesson' as source_name union all select 'gian' as source_code, 'Giant Bomb' as source_name union all select 'giml' as source_code, 'Gimlet' as source_name union all select 'head' as source_code, 'HeadGum' as source_name union all select 'hows' as source_code, 'How Stuff Works' as source_name union all select 'idob' as source_code, 'Idobi Network' as source_name union all select 'jimm' as source_code, 'Jimmy Dore Comedy' as source_name union all select 'lock' as source_code, 'Locked on Podcast Network' as source_name union all select 'loud' as source_code, 'Loud Speakers Network' as source_name union all select 'mach' as source_code, 'Machinima' as source_name union all select 'midr' as source_code, 'Midroll' as source_name union all select 'mlwr' as source_code, 'MLW Radio' as source_name union all select 'napp' as source_code, 'N/A' as source_name union all select 'npra' as source_code, 'NPR' as source_name union all select 'oamm' as source_code, 'OAM' as source_name union all select 'pano' as source_code, 'Panoply' as source_name union all select 'pkaa' as source_code, 'PKA' as source_name union all select 'plac' as source_code, 'Placard Media' as source_name union all select 'plan' as source_code, 'Planet Broadcasting' as source_name union all select 'pmmm' as source_code, 'PMM' as source_name union all select 'poda' as source_code, 'Pod Avenue' as source_name union all select 'podd' as source_code, 'Podcast Detroit' as source_name union all select 'podo' as source_code, 'PodcastOne' as source_name union all select 'podg' as source_code, 'Podglomerate' as source_name union all select 'prem' as source_code, 'Premier' as source_name union all select 'prxx' as source_code, 'PRX' as source_name union all select 'rico' as source_code, 'Ricochet' as source_name union all select 'roos' as source_code, 'Rooster Teeth' as source_name union all select 'runn' as source_code, 'Running Wired' as source_name union all select 'sbna' as source_code, 'SB Nation' as source_name union all select 'scie' as source_code, 'Science Podcasts' as source_name union all select 'slat' as source_code, 'Slate' as source_name union all select 'star' as source_code, 'StarTalk Radio Show' as source_name union all select 'ther' as source_code, 'The Ringer' as source_name union all select 'twit' as source_code, 'TWIT' as source_name union all select 'ufc' as source_code, 'UFC' as source_name union all select 'vspo' as source_code, 'VSporto' as source_name union all select 'west' as source_code, 'Westwood One' as source_name union all select 'whoo' as source_code, 'Whooshkaa' as source_name union all select 'wond' as source_code, 'Wondery' as source_name union all select 'hulu' as source_code, 'Hulu' as source_name union all select 'redd' as source_code, 'Reddit' as source_name union all select 'rame' as source_code, 'Radio America' as source_name union all select 'ssii' as source_code, 'SSI' as source_name union all select 'siri' as source_code, 'SiriusXM' as source_name union all select 'card' as source_code, 'Cardlytics' as source_name union all select 'adob' as source_code, 'Adobe' as source_name"
                },
                "skipped": false,
                "value": "insert into map.mkt_source\nselect\n    lower(source_code) as source_code\n  , source_name\n  , getdate() as dw_load_timestamp\nfrom (\nselect 'face' as source_code, 'Facebook' as source_name union all\nselect 'inst' as source_code, 'Instagram' as source_name union all\nselect 'twit' as source_code, 'Twitter' as source_name union all\nselect 'pint' as source_code, 'Pinterest' as source_name union all\nselect 'snap' as source_code, 'Snapchat' as source_name union all\nselect 'link' as source_code, 'LinkedIn' as source_name union all\nselect 'plus' as source_code, 'Google+' as source_name union all\nselect 'tabo' as source_code, 'Taboola' as source_name union all\nselect 'outb' as source_code, 'Outbrain' as source_name union all\nselect 'revc' as source_code, 'Rev Content' as source_name union all\nselect 'penn' as source_code, 'Penny Saver' as source_name union all\nselect 'madr' as source_code, 'Madrivo' as source_name union all\nselect 'goog' as source_code, 'Google' as source_name union all\nselect 'bing' as source_code, 'Bing' as source_name union all\nselect 'adnt' as source_code, 'Ad.net' as source_name union all\nselect 'acqu' as source_code, 'Acquisition' as source_name union all\nselect 'gdn' as source_code, 'Google Display Network' as source_name union all\nselect 'crit' as source_code, 'Criteo' as source_name union all\nselect 'zumo' as source_code, 'Zumobi' as source_name union all\nselect 'glob' as source_code, 'Global Wide Media' as source_name union all\nselect 'gizm' as source_code, 'Gizmodo' as source_name union all\nselect 'uncr' as source_code, 'Uncrate' as source_name union all\nselect 'yaho' as source_code, 'Yahoo' as source_name union all\nselect 'aol' as source_code, 'AOL' as source_name union all\nselect 'stum' as source_code, 'Stumbleupon' as source_name union all\nselect 'idme' as source_code, 'ID Me' as source_name union all\nselect 'swag' as source_code, 'Swagbucks' as source_name union all\nselect 'cool' as source_code, 'Cool Material' as source_name union all\nselect 'fbuy' as source_code, 'Friendbuy' as source_name union all\nselect 'rev3' as source_code, 'Rev3' as source_name union all\nselect 'linu' as source_code, 'Linus' as source_name union all\nselect 'yout' as source_code, 'YouTube' as source_name union all\nselect 'seis' as source_code, 'Seismic' as source_name union all\nselect 'blea' as source_code, 'Bleacher Report' as source_name union all\nselect 'crac' as source_code, 'Crack Podcast' as source_name union all\nselect 'pand' as source_code, 'Pandora' as source_name union all\nselect 'spot' as source_code, 'Spotify' as source_name union all\nselect 'siri' as source_code, 'SiriusXM' as source_name union all\nselect 'acor' as source_code, 'Acorns' as source_name union all\nselect 'rokt' as source_code, 'Rokt' as source_name union all\nselect 'cert' as source_code, 'Certifico' as source_name union all\nselect 'amex' as source_code, 'American Express' as source_name union all\nselect 'mili' as source_code, 'Military.com' as source_name union all\nselect 'blos' as source_code, 'Blossom Media' as source_name union all\nselect 'scor' as source_code, 'Score Stream' as source_name union all\nselect 'ampu' as source_code, 'Ampush' as source_name union all\nselect 'grin' as source_code, 'Grinder' as source_name union all\nselect 'kcrw' as source_code, 'KCRW' as source_name union all\nselect 'fybr' as source_code, 'Fyber' as source_name union all\nselect 'tapj' as source_code, 'Tapjoy' as source_name union all\nselect 'twch' as source_code, 'Twitch' as source_name union all\nselect 'acas' as source_code, 'ACast' as source_name union all\nselect 'alge' as source_code, 'Algebra' as source_name union all\nselect 'allt' as source_code, 'All Things Comedy' as source_name union all\nselect 'apmm' as source_code, 'APM' as source_name union all\nselect 'arto' as source_code, 'Art of Mainliness' as source_name union all\nselect 'audi' as source_code, 'Audible' as source_name union all\nselect 'boom' as source_code, 'Audioboom' as source_name union all\nselect 'bars' as source_code, 'Barstool Sports' as source_name union all\nselect 'pmii' as source_code, 'PMI' as source_name union all\nselect 'cade' as source_code, 'Cadence13' as source_name union all\nselect 'cast' as source_code, 'Cast Plus' as source_name union all\nselect 'cros' as source_code, 'Crossover Media' as source_name union all\nselect 'deat' as source_code, 'Deathsquad' as source_name union all\nselect 'earw' as source_code, 'Earwolf' as source_name union all\nselect 'espn' as source_code, 'ESPN' as source_name union all\nselect 'depo' as source_code, 'ESPN Deportes' as source_name union all\nselect 'fera' as source_code, 'Feral Audio' as source_name union all\nselect 'five' as source_code, 'Five' as source_name union all\nselect 'game' as source_code, 'Gameday Media' as source_name union all\nselect 'gasd' as source_code, 'GaS Digital Network' as source_name union all\nselect 'geek' as source_code, 'Geek History Lesson' as source_name union all\nselect 'gian' as source_code, 'Giant Bomb' as source_name union all\nselect 'giml' as source_code, 'Gimlet' as source_name union all\nselect 'head' as source_code, 'HeadGum' as source_name union all\nselect 'hows' as source_code, 'How Stuff Works' as source_name union all\nselect 'idob' as source_code, 'Idobi Network' as source_name union all\nselect 'jimm' as source_code, 'Jimmy Dore Comedy' as source_name union all\nselect 'lock' as source_code, 'Locked on Podcast Network' as source_name union all\nselect 'loud' as source_code, 'Loud Speakers Network' as source_name union all\nselect 'mach' as source_code, 'Machinima' as source_name union all\nselect 'midr' as source_code, 'Midroll' as source_name union all\nselect 'mlwr' as source_code, 'MLW Radio' as source_name union all\nselect 'napp' as source_code, 'N/A' as source_name union all\nselect 'npra' as source_code, 'NPR' as source_name union all\nselect 'oamm' as source_code, 'OAM' as source_name union all\nselect 'pano' as source_code, 'Panoply' as source_name union all\nselect 'pkaa' as source_code, 'PKA' as source_name union all\nselect 'plac' as source_code, 'Placard Media' as source_name union all\nselect 'plan' as source_code, 'Planet Broadcasting' as source_name union all\nselect 'pmmm' as source_code, 'PMM' as source_name union all\nselect 'poda' as source_code, 'Pod Avenue' as source_name union all\nselect 'podd' as source_code, 'Podcast Detroit' as source_name union all\nselect 'podo' as source_code, 'PodcastOne' as source_name union all\nselect 'podg' as source_code, 'Podglomerate' as source_name union all\nselect 'prem' as source_code, 'Premier' as source_name union all\nselect 'prxx' as source_code, 'PRX' as source_name union all\nselect 'rico' as source_code, 'Ricochet' as source_name union all\nselect 'roos' as source_code, 'Rooster Teeth' as source_name union all\nselect 'runn' as source_code, 'Running Wired' as source_name union all\nselect 'sbna' as source_code, 'SB Nation' as source_name union all\nselect 'scie' as source_code, 'Science Podcasts' as source_name union all\nselect 'slat' as source_code, 'Slate' as source_name union all\nselect 'star' as source_code, 'StarTalk Radio Show' as source_name union all\nselect 'ther' as source_code, 'The Ringer' as source_name union all\nselect 'twit' as source_code, 'TWIT' as source_name union all\nselect 'ufc' as source_code, 'UFC' as source_name union all\nselect 'vspo' as source_code, 'VSporto' as source_name union all\nselect 'west' as source_code, 'Westwood One' as source_name union all\nselect 'whoo' as source_code, 'Whooshkaa' as source_name union all\nselect 'wond' as source_code, 'Wondery' as source_name union all\nselect 'hulu' as source_code, 'Hulu' as source_name union all\nselect 'redd' as source_code, 'Reddit' as source_name union all\nselect 'rame' as source_code, 'Radio America' as source_name union all\nselect 'ssii' as source_code, 'SSI' as source_name union all\nselect 'siri' as source_code, 'SiriusXM' as source_name union all\nselect 'card' as source_code, 'Cardlytics' as source_name union all\nselect 'adob' as source_code, 'Adobe' as source_name\n)\n;"
            }
        ],
        "load.stg.mbo_pf_paid.sql": [
            {
                "type": "CREATE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- truncate table stg.mbo_pf_paid\n-- select * from stg.mbo_pf_paid limit 100;\n\nCREATE TEMP TABLE dm_delta as\nselect\n  date_trunc('day', getdate()::date  -  interval '30 day')::date as order_created_date,\n  date_trunc('day', getdate())::date as \"current_date\"\n;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [
                    "stg.mbo_pf_paid"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.mbo_pf_paid\nwhere 1=1\n  -- and date_trunc('day', convert_timezone('PST',i.order_created_at))::date >= '2019-04-01'\n  and order_created_at >= (select order_created_date from dm_delta);"
            },
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- [2019-05-10 17:19:06] 1,992,932 rows affected in 751ms\n-- enriched order data / only selected attributes\n\ninsert into stg.mbo_pf_paid\nselect\n      r.order_created_at\n    , r.customer_id\n    , r.order_id\n    , r.revenue_type\n    , sum(r.total_revenue) as total_revenue\n    , sum(r.recurring_revenue) as recurring_revenue\n    , sum(r.onetime_revenue) as onetime_revenue\n    , getdate() as dw_load_timestamp\nfrom (\n    -- BM2 Full service shipped recurring boxes\n    select\n          i.order_created_at\n        , i.customer_id\n        , i.order_id\n        , 'bm2_scheduledcart' as revenue_type\n        , sum(sci.quantity * sci.unit_price)                            as total_revenue\n        , sum(sci.quantity_recurring * sci.unit_price)                  as recurring_revenue\n        , sum((sci.quantity - sci.quantity_recurring) * sci.unit_price) as onetime_revenue\n    from stg.ps_close_scheduled_cart_items sci\n        inner join dmt.f_invoice i\n            ON i.order_attribution_attribution_id = sci.scheduled_cart_id and\n               i.order_attribution_attribution_type = 'scheduledcart'\n        -- only valid customers\n        inner join dmt.rpt_member dc\n          on i.customer_id = dc.customer_id\n    where 1 = 1\n          and i.order_created_at  >= (select order_created_date from dm_delta)\n          and i.invoice_status = 'paid'\n          and i.order_creation_source not in ('msa', 'fulfillment_monitor')\n    group by 1,2,3\n\n    union\n\n    -- BM2 Full service shipped ship_now\n    select\n          i.order_created_at\n        , i.customer_id\n        , i.order_id\n        , 'bm2_standalonecart' as revenue_type\n        , sum(i.amount_true) as total_revenue\n        , 0                  as recurring_revenue\n        , sum(i.amount_true) as onetime_revenue\n    from dmt.f_invoice i\n        -- only valid customers\n        inner join dmt.rpt_member dc\n          on i.customer_id = dc.customer_id\n    where 1=1\n          and i.order_created_at  >= (select order_created_date from dm_delta)\n          and i.order_attribution_attribution_type = 'standalonecart'\n          and i.invoice_status = 'paid'\n          and i.order_creation_source not in ('msa', 'fulfillment_monitor')\n    group by 1,2,3\n\n    union\n\n    -- classic shipped all type of revenue (recurring and ship_now(onetime))\n    select\n          ip.order_created_at\n        , ip.customer_id\n        , ip.order_id\n        , 'bm1' as revenue_type\n        , sum(ip.revenue) as total_revenue\n        , sum(case when ip.revenue_type = 'recurring_revenue' then ip.revenue else 0 end) as recurring_revenue\n        , sum(case when ip.revenue_type = 'onetime_revenue' then ip.revenue  else 0 end) as onetime_revenue\n    from (\n             select\n                   fp.order_created_at\n                 , fp.customer_id\n                 , fp.order_id\n                 , case when (order_creation_reason = 'renewal'\n                               or (customer_subscription_id is not null\n                                    and order_creation_reason != 'on_demand'\n                                    and initial_invoice <> TRUE\n                                  )\n                               )\n                               and lower(class_type) = 'razor'\n                               and lower(type_name) <> 'handle'\n                         then 'recurring_revenue'\n                     else 'onetime_revenue'\n                   end as revenue_type\n                 , sum(price) as revenue\n             from dmt.f_invoice_product fp\n                  inner join dmt.d_product p\n                    on p.product_id = fp.product_id\n                  -- only valid customers\n                  inner join dmt.rpt_member dc\n                    on fp.customer_id = dc.customer_id\n             where 1=1\n                   and fp.order_created_at  >= (select order_created_date from dm_delta)\n                   and fp.order_creation_source not in ('msa', 'fulfillment_monitor')\n                   and (fp.order_attribution_attribution_type not in ('standalonecart', 'scheduledcart') or\n                        fp.order_attribution_attribution_type is null)\n             group by 1, 2, 3, 4\n         ) ip\n    group by 1,2,3\n\n) r\ngroup by 1,2,3,4\n;"
            }
        ],
        "load.dmt.ga_rpt_member.sql": [
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- adobe notes \n-- get customer's mobile_id, os_name , etc. from adobe\n-- null exists because we did not collect prop12 before Aug 2018 ;\n-- web is hardcoded for all browser based reporting suites\n-- as of Feb 2019 platform is always: web\n\nInsert into stg.ga_customer_first_visit_os\nselect\n  customer_id\n, platform\n, os_name\n, mobile_id\n, visit_start_time_gmt\n, plan_purchase_flag\n, analytics\nfrom (\n--select count(1),count(distinct customer_id) from (\n  select\n      customer_id\n    --, platform\n    , first_value(platform) ignore nulls over(\n\n          partition by customer_id\n        order by plan_purchase_flag, visit_start_time_gmt\n        rows between unbounded preceding and unbounded following\n      ) as platform\n\n    , first_value(os_name) ignore nulls over(\n\n          partition by customer_id\n        order by plan_purchase_flag desc, visit_start_time_gmt\n        rows between unbounded preceding and unbounded following\n      ) as os_name\n\n    , first_value(mobile_id) ignore nulls over(\n          partition by customer_id\n        order by plan_purchase_flag desc, visit_start_time_gmt\n        rows between unbounded preceding and unbounded following\n      ) as mobile_id\n\n    , row_number() over(\n          partition by customer_id\n        order by plan_purchase_flag desc, visit_start_time_gmt\n      ) as rnk\n    , visit_start_time_gmt\n    , plan_purchase_flag\n    , analytics\n    -- select count(1)\n    from (\n    \n    select avc.customer_id,av.mobile_id,av.plan_purchase_flag, av.visit_start_time_gmt, av.platform, av.os_name, 'adobe' as analytics\n    from dmt.adobe_visit_summary av\n      inner join stg.adobe_visit_customers avc\n        on av.visit_id = avc.visit_id\n      inner join dmt.d_customer c\n        on av.customer_id = c.customer_id\n  where 1=1\n  and av.dw_load_date_time < '2021-01-17'  \n  UNION \n  select avc.customer_id,av.mobile_id,av.plan_purchase_flag, av.visit_start_time_gmt, av.platform, av.os_name, 'ga'\n    from dmt.ga_visit_summary av\n      inner join stg.ga_visit_customers avc\n        on av.visit_id = avc.visit_id\n      inner join dmt.d_customer c\n        on av.customer_id = c.customer_id\n  where 1=1\n  and av.dw_load_date_time >= '2021-01-17'\n  )\n) where rnk =1\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ga_dmt_rpt_member_delta"
                    ],
                    "select": [
                        "dmt.ga_d_customer_plan_360.customer_id"
                    ],
                    "where": [
                        "dmt.ga_d_customer_plan_360.dw_load_date_time"
                    ]
                },
                "tables": [
                    "extract.ga_dmt_rpt_member_delta",
                    "dmt.ga_d_customer_plan_360"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into extract.ga_dmt_rpt_member_delta\nselect\n  c.customer_id\nFROM dmt.ga_d_customer_plan_360 c\nWHERE  1=1\n  and c.dw_load_date_time >= convert_timezone('PST',getdate())::date  -  interval '30 day'\ngroup by c.customer_id\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "dmt.ga_rpt_member.customer_id",
                        "extract.ga_dmt_rpt_member_delta.customer_id"
                    ]
                },
                "tables": [
                    "dmt.ga_rpt_member"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from dmt.ga_rpt_member\nusing extract.ga_dmt_rpt_member_delta\nwhere dmt.ga_rpt_member.customer_id = extract.ga_dmt_rpt_member_delta.customer_id\n;"
            },
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- [2019-05-07 17:10:57] 4868965 rows affected in 4s 519ms\n\n------ insert into dmt.ga_rpt_member select * from dmt.rpt_member;\n\n---- truncate table dmt.ga_rpt_member;\n\ninsert into dmt.ga_rpt_member\n\nselect\n    dc2.customer_id\n  , dc2.start_date\n  , dc2.end_date\n  --, dc.plan_conversion_source\n  , dc2.migrated_member\n\n  --, case when avc.platform is null then 'web' else avc.platform end as platform -- default to web if platform is unknown\n  , 'web' as platform -- default to web if platform is unknown\n--  , avc.os_name\n  , case when TRIM(BOTH ' ' FROM avc.mobile_id) = '0' then 'desktop' else 'mobile' end as device_type\n\n\n  , dc2.utm_source\n  , dc2.utm_medium\n  , dc2.utm_campaign\n  , dc2.utm_content\n  , dc2.utm_term\n  , InitCap(dc2.status_name) as status_name\n  , dc2.funnel_sku_list\n -- , dc.bundle_name\n -- , dc2.sub_plan_rank\n  , dc2.bm_type\n  , case when dc2.registered_in_shop_name is null\n          then 'N/A'\n          else dc2.registered_in_shop_name\n    end as registered_in_shop_name\n  , dc2.frequency as plan_frequency\n\n  , nvl(dc2.gender, 'Unknown') as gender\n  , nvl(dc2.race_code, 'Unknown') as race_code\n  , nvl(dc2.income_estimated_household,'Unknown') as income_estimated_household\n  , dc2.age_in_two_year_increments as age_in_two_year_increments\n  , nvl(dc2.marital_status_in_the_household,'Unknown') as marital_status_in_the_household\n  , nvl(dc2.presence_of_children,'Unknown') as presence_of_children\n  , nvl(dc2.acxiom_country_of_origin,'Unknown') as country_of_origin\n  , getdate() as dw_load_timestamp\n  , dc2.sub_plan_rank as current_sub_plan_rank\n  , dc2.customer_created_at\n  , dc2.current_plan_start_date\n  , dc2.ltv_tier\n from (\n\n  select\n      dc1.customer_id\n    , dc1.start_date\n    , dc1.current_plan_start_date\n    , dc1.end_date\n    , c.created_at as customer_created_at\n    --, dc1.plan_conversion_source\n    , dc1.migrated_member\n    , left(dc1.utm_source, 32) as utm_source\n    , left(dc1.utm_medium, 64) as utm_medium\n    , left(dc1.utm_campaign, 256) as utm_campaign\n    , left(dc1.utm_content, 256) as utm_content\n    , left(dc1.utm_term, 256) as utm_term\n    , dc1.status_name\n\n    , left(dc1.funnel_sku_list, 256)  as funnel_sku_list\n    --, dc1.bundle_name\n\n    , dc1.sub_plan_rank\n    , ov.value_segment as ltv_tier\n   -- , dc1.web_shop_name\n   -- , ms.shop_name\n\n    , dc1.bm_type\n\n\n    , coalesce(\n        case\n          when dc1.web_shop_name='WWW' then 'US'\n          when (dc1.web_shop_name='NA') then NULL\n          else dc1.web_shop_name\n        end,\n        ms.shop_name,\n        ps.shop_name,\n        ss.shop_name\n      )  as registered_in_shop_name\n    , dc1.frequency\n    , case when mpr.gender is not null then mpr.gender else acx.gender end as gender\n    , acx.race_code\n    , acx.income_estimated_household\n    , case when mpr.age is not null then mpr.age else acx.age_in_two_year_increments end as age_in_two_year_increments\n    , acx.marital_status_in_the_household\n    , acx.presence_of_children\n    , acx.acxiom_country_of_origin\n  from (\n    select\n        dc0.customer_id\n      , date_trunc('day', convert_timezone('PST',dc0.start_date_time))::date as start_date\n      , date_trunc('day', isnull(convert_timezone('PST',\n\n        last_value(dc0.end_date_time) over(\n          partition by dc0.customer_id\n          order by dc0.start_date_time\n          rows between unbounded preceding and unbounded following\n        )\n\n                                 ), '2100-01-01' :: timestamp)):: date as end_date\n      --, dc0.plan_conversion_source\n      --, dc0.cancel_reason\n      , case when (dc0.cancel_reason = 'converted_to_plan') OR dc0.plan_conversion_source in ('batch')\n            then True\n            else False\n        end as migrated_member\n\n      , first_value(dc0.last_utm_source) over(\n        partition by dc0.customer_id\n        order by dc0.start_date_time\n        rows between unbounded preceding and unbounded following\n      )  as utm_source\n      , first_value(dc0.last_utm_medium) over(\n        partition by dc0.customer_id\n        order by dc0.start_date_time\n        rows between unbounded preceding and unbounded following\n      ) as utm_medium\n      , first_value(dc0.last_utm_campaign) over(\n        partition by dc0.customer_id\n        order by dc0.start_date_time\n        rows between unbounded preceding and unbounded following\n      )  as utm_campaign\n      , first_value(dc0.last_utm_content) over(\n        partition by dc0.customer_id\n        order by dc0.start_date_time\n        rows between unbounded preceding and unbounded following\n      )  as utm_content\n      , first_value(dc0.last_utm_term) over(\n        partition by dc0.customer_id\n        order by dc0.start_date_time\n        rows between unbounded preceding and unbounded following\n      )  as utm_term\n\n      , dc0.funnel_sku_list\n      -- , dc0.bundle_name\n\n      -- the most recent value   for bm type , shop , frequency\n      , last_value(dc0.bm_type) over(\n        partition by dc0.customer_id\n        order by dc0.start_date_time\n        rows between unbounded preceding and unbounded following\n      ) as bm_type\n\n      , last_value(dc0.web_shop_name) ignore nulls over(\n        partition by dc0.customer_id\n        order by dc0.start_date_time\n        rows between unbounded preceding and unbounded following\n      ) as web_shop_name\n\n      , last_value(dc0.frequency) over(\n        partition by dc0.customer_id\n        order by dc0.start_date_time\n        rows between unbounded preceding and unbounded following\n      ) as frequency\n      , last_value(dc0.status_name) over(\n        partition by dc0.customer_id\n        order by dc0.start_date_time\n        rows between unbounded preceding and unbounded following\n      ) as status_name\n      , last_value(case when dc0.plan_conversion_source is not null\n                        then p1.lagged_start_date_time\n                        else dc0.start_date_time end) over(\n        partition by dc0.customer_id\n        order by dc0.start_date_time\n        rows between unbounded preceding and unbounded following\n      ) as current_plan_start_date\n\n      , dc0.sub_plan_rank\n    from dmt.ga_d_customer_plan_360 dc0\n      inner join extract.ga_dmt_rpt_member_delta c\n        on dc0.customer_id = c.customer_id\n    left join (select p.bm_type\n                     ,p.customer_subscription_plan_id\n                     ,lag(p.start_date_time,1) over (\n                        partition by p.customer_id\n                        order by p.start_date_time) as lagged_start_date_time\n                from dmt.ga_d_customer_plan_360 p\n    ) p1 on p1.bm_type = dc0.bm_type\n         and p1.customer_subscription_plan_id = dc0.customer_subscription_plan_id\n    where 1=1\n\n) dc1\n  inner join dmt.d_customer c\n    on dc1.customer_id = c.customer_id\n  left outer join stg.test_customers t\n    ON c.customer_id = t.customer_id\n  left outer join (select customer_id, m.value_segment\n                   from stg.optimove_customer_output co\n                    left join stg.optimove_microsegments m\n                        on co.final_microsegment_id = m.microsegment_id ) ov\n    ON ov.customer_id = c.customer_id\n  left outer join map.shop ms\n    on c.registered_in_shop_id = ms.shop_id\n  left outer join (\n      select\n          p.customer_id\n        , p.shop_name\n      from (\n          select\n              p0.customer_id\n           -- , p.id as plan_id\n            , s.shop_name as shop_name\n            , row_number() over (partition by p0.customer_id order by p0.plan_created_at desc) as rnk\n          from stg.ps_plans p0\n            inner join map.shop s\n              on p0.shop_id = s.shop_id\n          where 1=1\n        ) p\n      where p.rnk = 1\n     ) ps\n   on dc1.customer_id = ps.customer_id\n  left outer join (\n      select\n          p.customer_id\n        , p.shop_name\n      from (\n        select\n            p0.customer_id\n          , s.shop_name as shop_name\n          , row_number() over (partition by p0.customer_id order by p0.created_at desc) as rnk\n        from stg.customer_subscriptions p0\n          inner join map.shop s\n            on p0.shop_id = s.shop_id\n        where 1=1\n      ) p\n        where p.rnk = 1\n     ) ss\n   on dc1.customer_id = ss.customer_id\n\n     left outer join (\n             select customer_id,\n            case when gender_input_individual_8688 = 'M' then 'Male'\n                when gender_input_individual_8688 = 'F' then 'Female'\n            else 'Unknown' end gender,\n            case when race_code_low_detail_3101 = 'A' then 'Asian'\n                when race_code_low_detail_3101 = 'B' then 'African American'\n                when race_code_low_detail_3101 = 'H' then 'Hispanic'\n                when race_code_low_detail_3101 = 'W' then 'White/Other'\n            else 'Unknown' end race_code,\n            nvl(state,'N/A') ,\n            case when income_estimated_household_8641 = '1' then 'Less than $15,000'\n                 when income_estimated_household_8641 = '2' then '$15,000 - $19,999'\n                 when income_estimated_household_8641 = '3' then '$20,000 - $29,999'\n                 when income_estimated_household_8641 = '4' then '$30,000 - $39,999'\n                 when income_estimated_household_8641 = '5' then '$40,000 - $49,999'\n                 when income_estimated_household_8641 = '6' then '$50,000 - $74,999'\n                 when income_estimated_household_8641 = '7' then '$75,000 - $99,999'\n                 when income_estimated_household_8641 = '8' then '$100,000 - $124,999'\n                 when income_estimated_household_8641 = '9' then 'Greater than $124,999'\n            else 'Unknown' end income_estimated_household,\n            age_in_two_year_increments_input_individual_8626::int age_in_two_year_increments,\n            case when marital_status_in_the_household_8609 = 'M' then 'Married'\n                when marital_status_in_the_household_8609 = 'S' then 'Single'\n                when marital_status_in_the_household_8609 = 'A' then 'Inferred Married'\n                when marital_status_in_the_household_8609 = 'B' then 'Inferred Single'\n            else 'Unknown' end marital_status_in_the_household   ,\n            case when presence_of_children_8622 = 'Y' then 'Children Present'\n                when presence_of_children_8622 = 'N' then 'No Children Present'\n            else 'Unknown' end presence_of_children,\n            nvl(acxiom_country_of_origin_name,'Unknown') acxiom_country_of_origin\n        from dmt.v_customer_acxiom v\n        left join map.acxiom_country_of_origin co on co.acxiom_country_of_origin_code = country_of_origin_high_detail_3102\n      ) acx\n   on dc1.customer_id = acx.customer_id\n     left outer join  ( select\n                         cu.id as customer_id,\n                         dob.age,\n                         g.gender\n\n\n                         from stg.customers cu\n                         left join (\n                                     select\n                                     customer_id,\n                                     datediff('year',(left(birth_date,4)||'-'||right(birth_date,2)||'-01')::date,getdate()) as age,\n                                     (left(birth_date,4)||'-'||right(birth_date,2)||'-01')::date birth_date,\n                                     row_number() over (partition by customer_id order by customer_answer_created_at desc) as rnk\n                                     from dmt.d_customer_answer\n                                     where (birth_date is not null\n                                     or birth_date != '')\n                                     and len(birth_date) = 6\n                                   ) dob\n                                   on dob.customer_id = cu.id and dob.rnk = 1\n                         left join (select ca.customer_id as customer_id,\n                                    option_name as gender,\n                                    row_number() over (partition by customer_id order by customer_answer_created_at desc) as rnk\n                                    from   dmt.d_customer_answer ca\n                                    where  question_id = 4\n                                     and option_name in ('Male','Female')\n                                    ) g on g.customer_id = cu.id and g.rnk = 1\n                        where dob.age is not null or g.gender is not null\n                       )mpr on mpr.customer_id = dc1.customer_id\n\nwhere 1=1\n    and dc1.sub_plan_rank =1\n    and c.email not ilike '%@dollarshaveclub.%'\n    and t.customer_id is null\n) dc2\n  left outer join stg.ga_customer_first_visit_os avc\n    on dc2.customer_id = avc.customer_id\nwhere 1=1\n\n\n  -- and dc2.utm_term is not null\n;"
            }
        ],
        "load.dmt.rpt_media_aquisition_union.sql": [
            {
                "type": "CREATE",
                "columns": null,
                "tables": [
                    "dm_delta"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "/*\nselect\n    report_date\n  , report_type\n  , count(*) as total_rec\nfrom dmt.rpt_media_aquisition_union\n  group by 1,2\n  order by 1 desc, 2\nlimit 200;\n\n*/\n\nCREATE TEMP TABLE dm_delta AS\nSELECT\n  date_trunc('day', convert_timezone('PST', getdate())::date  -  interval '30 day')::date AS report_date,\n  date_trunc('day', convert_timezone('PST', getdate())::date)::date AS \"current_date\"\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "report_date"
                    ],
                    "select": [
                        "report_date"
                    ]
                },
                "tables": [
                    "dmt.rpt_media_aquisition_union",
                    "dm_delta"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from dmt.rpt_media_aquisition_union\nwhere 1=1\n    and report_date >= (SELECT report_date FROM dm_delta)\n    and report_date <= (SELECT current_date FROM dm_delta)\n;"
            },
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- [2019-05-07 22:32:52] 7140388 rows affected in 624ms\n-- [2019-05-13 14:45:35] 1,502,266 rows affected in 617 ms\n\ninsert into dmt.rpt_media_aquisition_union\nselect\n    m.report_date\n  , 'member_status'::VARCHAR(32) report_type\n  , NULL::BOOLEAN as plan_initial_invoice\n  , NULL::BOOLEAN as initial_invoice\n  , m.platform\n -- , m.os_name -- TODO change to device\n  , m.device_type\n  , m.utm_source\n  , m.utm_medium\n  , m.utm_campaign\n  -- , m.utm_content\n  -- , m.utm_term\n\n  , NULL::VARCHAR(32) as revenue_type\n\n  , m.funnel_sku_list\n\n-- , m.sub_plan_rank\n\n  , m.bm_type\n  , m.registered_in_shop_name -- NULL ???\n  , m.plan_frequency::int\n\n  , m.member_tenure_type\n  , m.reactivated_members\n  , m.new_members\n  , m.active_members\n  , m.cancelled_members\n\n  , NULL::NUMERIC(37,15) as grand_total\n  , NULL::NUMERIC(37,15) as amount_true\n  , NULL::NUMERIC(37,15) as total_line_item_discount\n  , NULL::NUMERIC(37,15) as total_line_item_tax\n  , NULL::NUMERIC(37,15) as base_shipping_tax\n  , NULL::NUMERIC(37,15) as total_cost\n  , NULL::NUMERIC(37,15) as total_shipping_tax\n  , NULL::NUMERIC(37,15) as customers\n  , NULL::NUMERIC(37,15) as orders\n  , NULL::NUMERIC(37,15) as total_rec\n\n  , getdate() as dw_load_timestamp\nfrom dmt.rpt_member_status_details m\nwhere 1=1\n  and m.report_date >= (SELECT report_date FROM dm_delta)\n  and m.report_date <= (SELECT current_date FROM dm_delta)\n;"
            },
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- 13,680,641 rows affected in 12s 583ms\n-- [2019-04-22 13:39:49] 15,365,189 rows affected in 51s 522ms\n\ninsert into dmt.rpt_media_aquisition_union\nselect\n    ma.order_created_date as report_date\n  , 'media_aquisition'::VARCHAR(32) report_type\n  , ma.plan_initial_invoice\n  , ma.initial_invoice\n  , ma.platform\n -- , ma.os_name -- TODO change to device\n  , ma.device_type\n  , ma.utm_source\n  , ma.utm_medium\n  , ma.utm_campaign\n  -- , ma.utm_content\n  -- , ma.utm_term\n\n  , ma.revenue_type\n\n  , ma.funnel_sku_list\n\n-- , NULL::int as sub_plan_rank\n\n  , ma.bm_type\n  , ma.registered_in_shop_name  -- NULL ???\n  , ma.plan_frequency\n\n  , NULL::VARCHAR(64) as member_tenure_type\n  , NULL::int as reactivated_members\n  , NULL::int as new_members\n  , NULL::int as active_members\n  , NULL::int as cancelled_members\n\n  , ma.grand_total\n  , ma.amount_true\n  , ma.total_line_item_discount\n  , ma.total_line_item_tax\n  , ma.base_shipping_tax\n  , ma.total_cost\n  , ma.total_shipping_tax\n  , ma.customers\n  , ma.orders\n  , ma.total_rec\n  , getdate() as dw_load_timestamp\nfrom dmt.rpt_media_aquisition ma\nwhere 1=1\n  and ma.order_created_date >= (SELECT report_date FROM dm_delta)\n  and ma.order_created_date <= (SELECT current_date FROM dm_delta)\n;"
            }
        ],
        "load.dmt.rpt_email_performance_uat.sql": [
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "customer_id",
                        "dispatch_id",
                        "optimove_campaign_id",
                        "camp_id",
                        "campaign_name",
                        "send_time",
                        "campaign_customer_group"
                    ],
                    "where": [
                        "send_time"
                    ]
                },
                "tables": [
                    "dm_delta_7day",
                    "stg.braze_optimove_email_sends"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "create temp table dm_delta_7day as\nselect md5(customer_id||nvl(dispatch_id,'')||nvl(optimove_campaign_id,-999)||nvl(camp_id,'')||nvl(campaign_name,'')||send_time::date||nvl(campaign_customer_group,'')) as pk_hash\nfrom stg.braze_optimove_email_sends s\nwhere 1 = 1\nAND send_time::date >= '<start_date>'::timestamp  - interval '7 day'\ngroup by 1\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "dmt.rpt_email_performance.pk_hash",
                        "dm_delta_7day.pk_hash"
                    ]
                },
                "tables": [
                    "dmt.rpt_email_performance"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from dmt.rpt_email_performance\nusing dm_delta_7day\nwhere dmt.rpt_email_performance.pk_hash = dm_delta_7day.pk_hash\n;"
            },
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "---- select * from dmt.rpt_email_performance s limit 10\n---- select count(*) from dmt.rpt_email_performance s limit 10\n\nINSERT INTO dmt.rpt_email_performance\nSELECT\n\tt1.camp_id,\n\tt1.msg_id,\n\tt1.email_source,\n\tt1.campaign_name,\n\tt1.optimove_campaign_id,\n\tt1.target_group_name,\n\tt1.campaign_customer_group,\n\tt1.customer_id,\n\tCONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.send_time) AS send_time_pst,\n\tCONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.first_open_time) AS first_open_time_pst,\n\tCONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.first_click_time) AS first_click_time_pst,\n\tt1.scheduled_cart_id,\n\tt1.plan_id,\n\tt1.next_bill_date,\n\tt1.shop_name,\n\tt1.product_id,\n\tt1.sku,\n\tt1.add_quantity,\n\tt1.invoice_qty as add_quantity_invoiced,\n\tCONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.add_time) AS add_time_pst,\n\tCONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.order_created_at) AS order_created_at_pst,\n\tt1.price_excluding_discount,\n\tt1.invoice_id,\n\tt1.invoice_status,\n\tCONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.shipment_shipped_at) AS shipment_shipped_at_pst,\n\tt1.price_including_discount,\n\tCONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.scheduled_cart_closed_at) AS scheduled_cart_closed_at_pst,\n\tt1.closed_cart_plan_state,\n\tt1.removed,\n\tt1.open_cart,\n\tt1.churned_suspended,\n\tt1.add_type,\n\tcase when hours_add_from_send <= 72 then true else false end as send72_attrib,\n\tcase when hours_to_open <= 72 AND hours_add_from_click <= 24 then true else false end as click_attrib,\n\tgetdate()::timestamp as dw_load_date_time,\n\tmd5(t1.customer_id||nvl(t1.dispatch_id,'')||nvl(t1.optimove_campaign_id,-9999)||nvl(t1.camp_id,'')||nvl(t1.campaign_name,'')||t1.send_time::date||nvl(t1.campaign_customer_group,'')) as pk_hash,\n\tmin(t1.rnk) as email_rank,\n\tdispatch_id,\n\tsend_id\nFROM\n(\n\t\tSELECT\n\t\t\tc.camp_id,\n\t\t\tc.msg_id,\n\t\t\tc.email_source,\n\t\t\tc.campaign_name,\n\t\t\tc.optimove_campaign_id,\n\t\t\tc.target_group_name,\n\t\t\tc.campaign_customer_group,\n\t\t\tc.customer_id,\n\t\t\tc.send_time,\n\t\t\tc.first_open_time,\n\t\t\tc.first_click_time,\n\t\t\tcie.scheduled_cart_id,\n\t\t\tcie.plan_id,\n\t\t\tCASE WHEN a.scheduled_cart_id IS NOT NULL AND i.invoice_id IS NULL THEN a.plan_bills_at ELSE NULL END AS next_bill_date,\n\t\t\tc.shop_name,\n\t\t\tcie.sku,\n\t\t\tp.product_id,\n\t\t\tcie.quantity AS add_quantity,\n\t\t\tCASE WHEN cie.quantity <= ip.quantity THEN cie.quantity WHEN cie.quantity > ip.quantity THEN ip.quantity END AS invoice_qty,\n\t\t\tcie.add_time,\n\t\t\tpp.price* cie.quantity AS price_excluding_discount,\n\t\t\ti.invoice_id,\n\t\t\ti.order_created_at,\n\t\t\ti.invoice_status,\n\t\t\ti.shipment_shipped_at,\n\t\t\tip.effective_unit_price * (CASE WHEN cie.quantity <= ip.quantity THEN cie.quantity WHEN cie.quantity > ip.quantity THEN ip.quantity END) AS price_including_discount,\n\t\t\tdatediff('hour',c.send_time, cie.add_time) AS hours_add_from_send,\n\t\t\tdatediff('hour',c.first_click_time,cie.add_time) AS hours_add_from_click,\n\t\t\tdatediff('hour',c.first_open_time,c.first_click_time) AS hours_click_from_open,\n\t\t\tcsci.scheduled_cart_closed_at,\n\t\t\tcsci.quantity AS closed_qty,\n\t\t\tcsci.plan_state AS closed_cart_plan_state,\n\t\t\tc.hours_to_open,\n\t\t\tCASE WHEN i.invoice_id IS NOT NULL AND ip.id IS NULL THEN 1 WHEN i.invoice_id IS NULL AND csci.scheduled_cart_closed_at IS NULL AND z.scheduled_cart_id IS NOT NULL THEN 1 ELSE NULL END AS removed,\n\t\t\tCASE WHEN a.scheduled_cart_id IS NOT NULL AND i.invoice_id IS NULL THEN 1 ELSE NULL END AS open_cart,\n\t\t\tCASE WHEN i.invoice_id IS NULL AND csci. scheduled_cart_id IS NOT NULL AND plan_state !='active' THEN 1 ELSE NULL END AS churned_suspended,\n\t\t\t'scheduled_cart' AS add_type,\n\t\t\trow_number() over(partition BY cie.scheduled_cart_id,cie.sku ORDER BY cie.add_time DESC) AS rnk,\n\t\t\tc.dispatch_id,\n\t\t\tc.send_id\n\t\t\tFROM\n\t\t\t(\n\t\t\t\tSELECT\n\t\t\t\t\tse.camp_id,\n\t\t\t\t\tse.msg_id,\n\t\t\t\t\tse.email_source,\n\t\t\t\t\tse.campaign_name,\n\t\t\t\t\tse.customer_id,\n\t\t\t\t\tse.send_time,\n\t\t\t\t\tm.shop_name,\n\t\t\t\t\tse.campaign_customer_group,\n\t\t\t\t\tse.target_group_name,\n\t\t\t\t\tse.optimove_campaign_id,\n\t\t\t\t\tCASE WHEN datediff('hour',se.send_time,se.min_open_time)BETWEEN -1 AND 72 THEN se.min_open_time ELSE NULL END AS first_open_time,\n\t\t\t\t\tdatediff('hour',se.send_time,se.min_open_time) AS hours_to_open,\n\t\t\t\t\tCASE WHEN datediff('hour',se.min_open_time,se.min_click_time)BETWEEN -1 AND 24 THEN se.min_click_time ELSE NULL END AS first_click_time,\n\t\t\t\t\tdatediff('hour',se.send_time,min_click_time) AS hours_to_click_from_send,\n\t\t\t\t\tdatediff('hour',min_open_time,min_click_time) AS hours_to_click_from_open,\n\t\t\t\t\tse.dispatch_id,\n\t\t\t\t\tse.send_id\n\t\t\t\tFROM stg.braze_optimove_email_sends se\n\t\t\t\t--JOIN dm_delta_7day dd ON CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles',se.send_time)  >=  dd.delta_date\n\t\t\t\t--JOIN EXTRACT.rpt_email_performance dd ON dd.customer_id = se.customer_id\n\t\t\t\tLEFT JOIN map.transactional_email_names en ON en.campaign_name = se.campaign_name\n\t\t\t\tJOIN stg.customers c ON c.id = se.customer_id\n\t\t\t\tLEFT JOIN stg.customer_attributes ca ON c.id = ca.customer_id\n\t\t\t\tLEFT JOIN map.shop m ON m.shop_id = ca.registered_in_shop_id\n\t\t\t\tWHERE en.campaign_name is null\n\t\t\t\t--GROUP BY 1,2,3,4,5,6\n\t\t\t\t) c\n\t\t\t\tLEFT JOIN\n\t\t\t\t\t(\n\t\t\t\t\tSELECT ie.scheduled_cart_id,\n\t\t\t\t\t\tc.shop_id,\n\t\t\t\t\t\tc.plan_id,\n\t\t\t\t\t\tm.currency_id,\n\t\t\t\t\t\tc.customer_id,\n\t\t\t\t\t\tie.sku,\n\t\t\t\t\t\tie.quantity,\n\t\t\t\t\t\tie.rails_site_processed_at::timestamp AS add_time\n\t\t\t\t\tFROM stg.ps_change_scheduled_cart_item_events ie\n\t\t\t\t\tJOIN stg.ps_scheduled_carts c ON c.id = ie.scheduled_cart_id\n\t\t\t\t\t--JOIN  EXTRACT.rpt_email_performance dd ON dd.customer_id = c.customer_id\n\t\t\t\t\tJOIN MAP.shop_currency m ON m.shop_id = c.shop_id\n\t\t\t\t\tWHERE event = 'add_scheduled_cart_item'\n\t\t\t\t\t) cie\n\t\t\t\tON cie.customer_id = c.customer_id AND datediff('hour',c.send_time,cie.add_time) BETWEEN -1 AND 96\n\t\t\t\tLEFT JOIN dmt.d_product p ON cie.sku = p.sku\n\t\t\t\tLEFT JOIN stg.product_prices pp ON pp.product_id = p.product_id AND cie.add_time BETWEEN nvl(valid_starting,'1999-01-01') AND nvl(valid_ending,getdate()) AND pp.currency_id = cie.currency_id\n\t\t\t\tLEFT JOIN dmt.f_invoice i ON cie.scheduled_cart_id = i.order_attribution_attribution_id AND order_attribution_attribution_type = 'scheduledcart'\n\t\t\t\tLEFT JOIN stg.erp_invoice_items ip ON ip.invoice_id = i.invoice_id AND ip.product_id = p.product_id AND ip.effective_unit_price > 0\n\t\t\t\tLEFT JOIN stg.ps_close_scheduled_cart_items csci ON csci.scheduled_cart_id = cie.scheduled_cart_id AND csci.product_id = p.product_id\n\t\t\t\tLEFT JOIN\n\t\t\t\t\t(\n\t\t\t\t\tSELECT s.id AS scheduled_cart_id,\n\t\t\t\t\t\t\ts.customer_id,\n\t\t\t\t\t\t\ts.scheduled_cart_closed_at,\n\t\t\t\t\t\t\tp.plan_bills_at,\n\t\t\t\t\t\t\trow_number()over(partition BY s.customer_id\n\t\t\t\t\t\t\tORDER BY s.scheduled_cart_created_at::timestamp DESC) AS rnk\n\t\t\t\t\tFROM stg.ps_scheduled_carts s\n\t\t\t\t\t--JOIN EXTRACT.rpt_email_performance dd ON dd.customer_id = s.customer_id\n\t\t\t\t\tLEFT JOIN stg.ps_plans p ON p.id = s.plan_id\n\t\t\t\t\tWHERE scheduled_cart_closed_at ::TIMESTAMP IS NULL\n\t\t\t\t\t\tAND p.plan_bills_at >= getdate()::DATE\n\t\t\t\t\t\tAND p.plan_state = 'active'\n\t\t\t\t\t) a\n\t\t\t\tON a.scheduled_cart_id = cie.scheduled_cart_id AND a.rnk = 1\n\t\t\t\tLEFT JOIN\n\t\t\t\t\t(\n\t\t\t\t\tSELECT\n\t\t\t\t\t\ts.id AS scheduled_cart_id,\n\t\t\t\t\t\tscheduled_cart_closed_at\n\t\t\t\t\tFROM stg.ps_scheduled_carts s\n\t\t\t\t\t-- JOIN  EXTRACT.rpt_email_performance dd ON dd.customer_id = s.customer_id\n\t\t\t\t\tLEFT JOIN ( SELECT scheduled_cart_id FROM stg.ps_close_scheduled_cart_items GROUP BY 1) sci ON s.id = sci.scheduled_cart_id\n\t\t\t\t\tWHERE s.scheduled_cart_closed_at IS NOT NULL\n\t\t\t\t\t) z\n\t\t\t\tON z.scheduled_cart_id = cie.scheduled_cart_id\n        WHERE ((hours_add_from_send <= 72 ) OR ((c.hours_to_open <= 72 AND hours_add_from_click <= 24)) OR (hours_add_from_send <=72 and lower(c.campaign_customer_group) = 'control'))\n\t\t\t\t\tAND add_time >='2019-03-01'\n\t\t\t\t) t1\nJOIN dm_delta_7day dd\nON md5(t1.customer_id||nvl(t1.dispatch_id,'')||nvl(t1.optimove_campaign_id,-9999)||nvl(t1.camp_id,'')||nvl(t1.campaign_name,'')||t1.send_time::date||nvl(t1.campaign_customer_group,'')) = dd.pk_hash\nGROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,39\n--WHERE t1.rnk = 1\n--limit 10\n\nUNION ALL\n\nSELECT\n\tt1.camp_id,\n\tt1.msg_id,\n\tt1.email_source,\n\tt1.campaign_name,\n\tt1.optimove_campaign_id,\n\tt1.target_group_name,\n\tt1.campaign_customer_group,\n\tt1.customer_id,\n\tCONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.send_time) AS send_time_pst,\n\tCONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.first_open_time) AS first_open_time_pst,\n\tCONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.first_click_time) AS first_click_time_pst,\n\tt1.scheduled_cart_id,\n\tt1.plan_id,\n\tt1.next_bill_date,\n\tt1.shop_name,\n\tt1.product_id,\n\tt1.product_sku,\n\tt1.add_quantity,\n\tt1.invoice_qty,\n\tt1.add_time,\n\tt1.order_created_at,\n\tt1.price_excluding_discount,\n\tt1.invoice_id,\n\tt1.invoice_status,\n\tCONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.shipment_shipped_at) AS shipment_shipped_at_pst,\n\tt1.price_including_discount,\n\tt1.scheduled_cart_closed_at,\n\tt1.closed_cart_plan_state,\n\tt1.removed,\n\tt1.open_cart,\n\tt1.churned_suspended,\n\tt1.add_type,\n\tcase when t1.hours_invoice_from_send <= 72 then true else false end as send72_attrib,\n\tcase when t1.hours_to_open <= 72 AND t1.hours_invoice_from_click <= 24 then true else false end as click_attrib,\n\tgetdate()::timestamp as dw_load_date_time,\n\tmd5(t1.customer_id||nvl(t1.dispatch_id,'')||nvl(t1.optimove_campaign_id,-9999)||nvl(t1.camp_id,'')||nvl(t1.campaign_name,'')||t1.send_time::date||nvl(t1.campaign_customer_group,'')) as pk_hash,\n\tmin(t1.rnk) as email_rank,\n\tdispatch_id,\n\tsend_id\nFROM\n(\n\t\tSELECT\n\t\t\tema.camp_id,\n\t\t\tema.msg_id,\n\t\t\tema.email_source,\n\t\t\tema.campaign_name,\n\t\t\tema.optimove_campaign_id,\n\t\t\tema.campaign_customer_group,\n\t\t\tema.target_group_name,\n\t\t\tema.customer_id,\n\t\t\tema.send_time,\n\t\t\tema.first_open_time,\n\t\t\tema.first_click_time,\n\t\t\tNULL::INTEGER AS scheduled_cart_id,\n\t\t\tNULL::integer as plan_id,\n\t\t\tnull::timestamp as next_bill_date,\n\t\t\tema.shop_name,\n\t\t\ti.product_id,\n\t\t\ti.product_sku,\n\t\t\ti.quantity AS add_quantity,\n\t\t\ti.quantity AS invoice_qty,\n\t\t\tNULL::TIMESTAMP AS add_time,\n\t\t\ti.order_created_at,\n\t\t\ti.quantity*i.unit_price AS price_excluding_discount,\n\t\t\ti.invoice_id,\n\t\t\ti.invoice_status,\n\t\t\ti.shipment_shipped_at,\n\t\t\ti.price AS price_including_discount,\n\t\t\tNULL::TIMESTAMP AS scheduled_cart_closed_at,\n\t\t\tNULL AS closed_cart_plan_state,\n\t\t\tNULL::INTEGER AS removed,\n\t\t\tNULL::INTEGER AS open_cart,\n\t\t\tNULL::INTEGER AS churned_suspended,\n\t\t\t'ship_now' AS add_type,\n\t\t\tdatediff('hour',ema.send_time, i.order_created_at) AS hours_invoice_from_send,\n\t\t\tdatediff('hour',ema.first_click_time, i.order_created_at) AS hours_invoice_from_click,\n\t\t\tdatediff('hour',ema.first_open_time,ema.first_click_time) AS hours_click_from_open,\n\t\t\tema.hours_to_open,\n\t\t\trow_number() over(partition BY i.invoice_id, i.product_id  ORDER BY ema.send_time desc) AS rnk,\n\t\t\tema.dispatch_id,\n\t\t\tema.send_id\n\t\tFROM\n\t\t(\n\t\t\tSELECT\n\t\t\t\tse.camp_id,\n\t\t\t\tse.msg_id,\n\t\t\t\tse.email_source,\n\t\t\t\tse.campaign_name,\n\t\t\t\tse.customer_id,\n\t\t\t\tse.send_time,\n\t\t\t\tm.shop_name,\n\t\t\t\tse.campaign_customer_group,\n\t\t\t\tse.target_group_name,\n\t\t\t\tse.optimove_campaign_id,\n\t\t\t\tCASE WHEN datediff('hour',se.send_time,se.min_open_time) BETWEEN -1 AND 72 THEN se.min_open_time ELSE NULL END AS first_open_time,\n\t\t\t\tdatediff('hour',se.send_time,se.min_open_time) AS hours_to_open,\n\t\t\t\tCASE WHEN datediff('hour',se.min_open_time,se.min_click_time) BETWEEN -1 AND 24 THEN se.min_click_time ELSE NULL END AS first_click_time,\n\t\t\t\tdatediff('hour',se.send_time,min_click_time) AS hours_to_click_from_send,\n\t\t\t\tdatediff('hour',min_open_time,min_click_time) AS hours_to_click_from_open,\n\t\t\t\tse.dispatch_id,\n\t\t\t\tse.send_id\n\t\t\tFROM stg.braze_optimove_email_sends se\n      --join dm_delta_7day dd on CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles',se.send_time)  >=  dd.delta_date\n\t\t\t--JOIN EXTRACT.rpt_email_performance dd ON dd.customer_id = se.customer_id\n\t\t\tJOIN stg.customers c ON c.id = se.customer_id\n\t\t\tleft join map.transactional_email_names en on en.campaign_name = se.campaign_name\n\t\t\tleft join stg.customer_attributes ca on c.id = ca.customer_id\n\t\t\tleft join map.shop m on m.shop_id = ca.registered_in_shop_id\n\t\t\twhere en.campaign_name is null\n\t\t) ema\n\t\tJOIN\n\t\t(\n\t\tSELECT i.invoice_id,\n\t\t\t\ti.customer_id,\n\t\t\t\ti.order_created_at,\n\t\t\t\ti.shipment_shipped_at,\n\t\t\t\ti.shipment_status_code,\n\t\t\t\ti.invoice_status,\n\t\t\t\ti.shop_id,\n\t\t\t\tii.product_id,\n\t\t\t\tii.product_sku,\n\t\t\t\tii.effective_unit_price,\n\t\t\t\tii.quantity,\n\t\t\t\tii.price,\n\t\t\t\tii.unit_price\n\t\tFROM dmt.f_invoice i\n\t\t--JOIN  EXTRACT.rpt_email_performance  dd ON dd.customer_id = i.customer_id\n\t\tLEFT JOIN stg.erp_invoice_items ii ON i.invoice_id = ii.invoice_id\n\t\tJOIN dmt.d_product p ON p.product_id = ii.product_id\n\t\tWHERE i.order_attribution_attribution_type = 'standalonecart'\n\t\tAND effective_unit_price > 0\n\t\t) i\n\t\tON i.customer_id = ema.customer_id AND datediff('hour', ema.send_time, i.order_created_at) BETWEEN -1 AND 96\n    WHERE 1 = 1\n\t\tAND ((hours_invoice_from_send <= 72 ) OR (ema.hours_to_open <= 72 AND hours_invoice_from_click <= 24) OR (hours_invoice_from_send <=72 and lower(ema.campaign_customer_group) = 'control'))\n\t\tAND i.order_created_at >='2019-03-01'\n\t)t1\nJOIN dm_delta_7day dd ON md5(t1.customer_id||nvl(t1.dispatch_id,'')||nvl(t1.optimove_campaign_id,-9999)||nvl(t1.camp_id,'')||nvl(t1.campaign_name,'')||t1.send_time::date||nvl(t1.campaign_customer_group,'')) = dd.pk_hash\nGROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,39\n--WHERE rnk = 1\n;"
            },
            {
                "type": "CREATE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "--268942\n\ncreate temp table dm_delta_closed as\nSelect\nid as scheduled_cart_id\nfrom stg.ps_scheduled_carts\nwhere 1 = 1\nAND scheduled_cart_closed_at >= '<start_date>'::timestamp - interval '3 day'\nand scheduled_cart_closed_at >='2019-03-01'\n;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- select count(*) from dm_delta_closed -- 36526333\n\ndelete from  dmt.rpt_email_performance\nusing dm_delta_closed\nwhere dmt.rpt_email_performance.scheduled_cart_id = dm_delta_closed.scheduled_cart_id\nand add_type = 'scheduled_cart'\n;--114003"
            },
            {
                "skipped": true,
                "value": "INSERT INTO dmt.rpt_email_performance\nSELECT\n    t1.camp_id,\n    t1.msg_id,\n    t1.email_source,\n    t1.campaign_name,\n    t1.optimove_campaign_id,\n    t1.target_group_name,\n    t1.campaign_customer_group,\n    t1.customer_id,\n    CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.send_time) AS send_time_pst,\n    CONVERT_TIMEZONE ('UTC', 'america/los_angeles', t1.first_open_time) AS first_open_time_pst,\n    CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.first_click_time) AS first_click_time_pst,\n    t1.scheduled_cart_id,\n    t1.plan_id,\n    t1.next_bill_date,\n    t1.shop_name,\n    t1.product_id,\n    t1.sku,\n    t1.add_quantity,\n    t1.invoice_qty as add_quantity_invoiced,\n    CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.add_time) AS add_time_pst,\n    CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.order_created_at) AS order_created_at_pst,\n    t1.price_excluding_discount,\n    t1.invoice_id,\n    t1.invoice_status,\n    CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.shipment_shipped_at) AS shipment_shipped_at_pst,\n    t1.price_including_discount,\n    CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', t1.scheduled_cart_closed_at) AS scheduled_cart_closed_at_pst,\n    t1.closed_cart_plan_state,\n    t1.removed,\n    t1.open_cart,\n    t1.churned_suspended,\n    t1.add_type,\n    case when hours_add_from_send <= 72 then true else false end as send72_attrib,\n    case when hours_to_open <= 72 AND hours_add_from_click <= 24 then true else false end as click_attrib,\n    getdate()::timestamp as dw_load_date_time,\n    md5(t1.customer_id||nvl(t1.dispatch_id,'')||nvl(t1.optimove_campaign_id,-9999)||nvl(t1.camp_id,'')||nvl(t1.campaign_name,'')||t1.send_time::date||nvl(t1.campaign_customer_group,'')) as pk_hash,\n    min(t1.rnk) as email_rank,\n\t\tt1.dispatch_id,\n\t\tt1.send_id\nFROM(   SELECT\n            c.camp_id,\n            c.msg_id,\n            c.email_source,\n            c.campaign_name,\n            c.optimove_campaign_id,\n            c.target_group_name,\n            c.campaign_customer_group,\n            c.customer_id,\n            c.send_time,\n            c.first_open_time,\n            c.first_click_time,\n            cie.scheduled_cart_id,\n            cie.plan_id,\n            CASE WHEN a.scheduled_cart_id IS NOT NULL AND i.invoice_id IS NULL THEN a.plan_bills_at ELSE NULL END AS next_bill_date,\n            c.shop_name,\n            cie.sku,\n            p.product_id,\n            cie.quantity AS add_quantity,\n            CASE WHEN cie.quantity <= ip.quantity THEN cie.quantity WHEN cie.quantity > ip.quantity THEN ip.quantity END AS invoice_qty,\n            cie.add_time,\n            (pp.price * cie.quantity) AS price_excluding_discount,\n            i.invoice_id,\n            i.order_created_at,\n            i.invoice_status,\n            i.shipment_shipped_at,\n            ip.effective_unit_price * (CASE WHEN cie.quantity <= ip.quantity THEN cie.quantity WHEN cie.quantity > ip.quantity THEN ip.quantity END) AS price_including_discount,\n            datediff('hour',c.send_time, cie.add_time) AS hours_add_from_send,\n            datediff('hour',c.first_click_time,cie.add_time) AS hours_add_from_click,\n            datediff('hour',c.first_open_time,c.first_click_time) AS hours_click_from_open,\n            csci.scheduled_cart_closed_at,\n            csci.quantity AS closed_qty,\n            csci.plan_state AS closed_cart_plan_state,\n            c.hours_to_open,\n            CASE WHEN i.invoice_id IS NOT NULL AND ip.id IS NULL THEN 1 WHEN i.invoice_id IS NULL AND csci.scheduled_cart_closed_at IS NULL AND z.scheduled_cart_id IS NOT NULL THEN 1 ELSE NULL END AS removed,\n            CASE WHEN a.scheduled_cart_id IS NOT NULL AND i.invoice_id IS NULL THEN 1 ELSE NULL END AS open_cart,\n            CASE WHEN i.invoice_id IS NULL AND csci. scheduled_cart_id IS NOT NULL AND plan_state !='active' THEN 1 ELSE NULL END AS churned_suspended,\n            'scheduled_cart' AS add_type,\n            row_number() over(partition BY cie.scheduled_cart_id,cie.sku ORDER BY cie.add_time DESC) AS rnk,\n\t\t\t\t\t\tc.dispatch_id,\n\t\t\t\t\t\tc.send_id\n        FROM (  SELECT\n                    se.camp_id,\n                    se.msg_id,\n                    se.email_source,\n                    se.campaign_name,\n                    se.customer_id,\n                    se.send_time,\n                    m.shop_name,\n                    se.campaign_customer_group,\n                    se.target_group_name,\n                    se.optimove_campaign_id,\n\t\t\t\t\t\t\t\t\t\tCASE WHEN datediff('hour',se.send_time,se.min_open_time) BETWEEN -1 AND 72 THEN se.min_open_time ELSE NULL END AS first_open_time,\n                    datediff('hour',se.send_time,se.min_open_time) AS hours_to_open,\n\t\t\t\t\t\t\t\t\t\tCASE WHEN datediff('hour',se.min_open_time,se.min_click_time)BETWEEN -1 AND 24 THEN se.min_click_time ELSE NULL END AS first_click_time,\n                    datediff('hour',se.send_time,min_click_time) AS hours_to_click_from_send,\n                    datediff('hour',min_open_time,min_click_time) AS hours_to_click_from_open,\n\t\t\t\t\t\t\t\t\t\tse.dispatch_id,\n\t\t\t\t\t\t\t\t\t\tse.send_id\n\t\t\t\t\t\t\t\tFROM stg.braze_optimove_email_sends se\n\t\t\t\t\t\t\t\tleft join map.transactional_email_names en on en.campaign_name = se.campaign_name\n\t\t\t\t\t\t\t\tJOIN stg.customers c ON c.id = se.customer_id\n\t\t\t\t\t\t\t\tleft join stg.customer_attributes ca on c.id = ca.customer_id\n\t\t\t\t\t\t\t\tleft join map.shop m on m.shop_id = ca.registered_in_shop_id\n                where en.campaign_name is null\n\t\t\t\t\t\t\t\t--GROUP BY 1,2,3,4,5,6\n                ) c\n            LEFT JOIN\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\tSELECT ie.scheduled_cart_id,\n\t\t\t\t\t\t\t\t\tc.shop_id,\n\t\t\t\t\t\t\t\t\tc.plan_id,\n\t\t\t\t\t\t\t\t\tm.currency_id,\n\t\t\t\t\t\t\t\t\tc.customer_id,\n\t\t\t\t\t\t\t\t\tie.sku,\n\t\t\t\t\t\t\t\t\tie.quantity,\n\t\t\t\t\t\t\t\t\tie.rails_site_processed_at::timestamp AS add_time\n\t\t\t\t\t\t\tFROM stg.ps_change_scheduled_cart_item_events ie\n\t\t\t\t\t\t\tJOIN stg.ps_scheduled_carts c ON c.id = ie.scheduled_cart_id\n\t\t\t\t\t\t\tJOIN MAP.shop_currency m ON m.shop_id = c.shop_id\n\t\t\t\t\t\t\tJOIN dm_delta_closed dd on dd.scheduled_cart_id = c.id\n\t\t\t\t\t\t\tWHERE event = 'add_scheduled_cart_item'\n\t\t\t\t\t\t\t) cie\n            ON cie.customer_id = c.customer_id AND datediff('hour',c.send_time,cie.add_time) BETWEEN -1 AND 96\n            LEFT JOIN dmt.d_product p ON cie.sku = p.sku\n            LEFT JOIN stg.product_prices pp ON pp.product_id = p.product_id AND cie.add_time BETWEEN nvl(valid_starting,'1999-01-01') AND nvl(valid_ending,getdate()) AND pp.currency_id = cie.currency_id\n            LEFT JOIN dmt.f_invoice i ON cie.scheduled_cart_id = i.order_attribution_attribution_id AND order_attribution_attribution_type = 'scheduledcart'\n            LEFT JOIN stg.erp_invoice_items ip ON ip.invoice_id = i.invoice_id AND ip.product_id = p.product_id AND ip.effective_unit_price > 0\n            LEFT JOIN stg.ps_close_scheduled_cart_items csci ON csci.scheduled_cart_id = cie.scheduled_cart_id AND csci.product_id = p.product_id\n            LEFT JOIN\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\tSELECT s.id AS scheduled_cart_id,\n\t\t\t\t\t\t\t\t\ts.customer_id,\n\t\t\t\t\t\t\t\t\ts.scheduled_cart_closed_at,\n\t\t\t\t\t\t\t\t\tp.plan_bills_at,\n\t\t\t\t\t\t\t\t\trow_number()over(partition BY s.customer_id ORDER BY s.scheduled_cart_created_at::timestamp DESC) AS rnk\n\t\t\t\t\t\t\tFROM stg.ps_scheduled_carts s\n\t\t\t\t\t\t\tLEFT JOIN stg.ps_plans p ON p.id = s.plan_id\n\t\t\t\t\t\t\tjoin dm_delta_closed dd on dd.scheduled_cart_id = s.id\n\t\t\t\t\t\t\tWHERE scheduled_cart_closed_at ::TIMESTAMP IS NULL\n\t\t\t\t\t\t\t\tAND p.plan_bills_at >= getdate()::DATE\n\t\t\t\t\t\t\t\tAND p.plan_state = 'active'\n\t\t\t\t\t\t\t) a\n            ON a.scheduled_cart_id = cie.scheduled_cart_id AND a.rnk = 1\n            LEFT JOIN\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\tSELECT s.id AS scheduled_cart_id,\n\t\t\t\t\t\t\t\t\t\tscheduled_cart_closed_at\n\t\t\t\t\t\t\t\tFROM stg.ps_scheduled_carts s\n\t\t\t\t\t\t\t\tjoin dm_delta_closed dd on dd.scheduled_cart_id = s.id\n\t\t\t\t\t\t\t\tLEFT JOIN ( SELECT scheduled_cart_id FROM stg.ps_close_scheduled_cart_items GROUP BY 1) sci ON s.id = sci.scheduled_cart_id\n\t\t\t\t\t\t\t\tWHERE s.scheduled_cart_closed_at IS NOT NULL\n\t\t\t\t\t\t\t) z\n            ON z.scheduled_cart_id = cie.scheduled_cart_id\n        WHERE ((hours_add_from_send <= 72 ) OR ((c.hours_to_open <= 72 AND hours_add_from_click <= 24)) OR (hours_add_from_send <=72 and lower(c.campaign_customer_group) = 'control'))\n\t\t\t\tAND add_time >='2019-03-01'\n\t\t\t\t) t1\nGROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,39\n; --114003"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "dmt.rpt_email_performance.campaign_name",
                        "map.transactional_email_names.campaign_name"
                    ]
                },
                "tables": [
                    "dmt.rpt_email_performance"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM dmt.rpt_email_performance\nusing map.transactional_email_names\nwhere dmt.rpt_email_performance.campaign_name = map.transactional_email_names.campaign_name\n;"
            }
        ]
    },
    "dm-int-redshift-extract": {
        "load.tmp.tmp_dm_test_extract.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "tmp.tmp_dm_test_extract.id",
                        "extract.tmp_dm_test_extract.id"
                    ]
                },
                "tables": [
                    "tmp.tmp_dm_test_extract"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM tmp.tmp_dm_test_extract\nUSING extract.tmp_dm_test_extract\n  WHERE tmp.tmp_dm_test_extract.id = extract.tmp_dm_test_extract.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "tmp_dm_test_extract"
                    ],
                    "select": [
                        "id",
                        "random_no",
                        "campaign_name",
                        "email_address",
                        "created_at"
                    ]
                },
                "tables": [
                    "tmp.tmp_dm_test_extract",
                    "extract.tmp_dm_test_extract"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO tmp.tmp_dm_test_extract\n  SELECT\n    id,\n    random_no,\n    campaign_name,\n    email_address,\n    created_at\n  FROM extract.tmp_dm_test_extract\n;"
            }
        ],
        "extract.tmp.tmp_dm_test_extract.sql": [],
        "extract.databricks.tmp_dm_test_extract.sql": []
    },
    "dm-halo-prep": {
        "spark.halo_prep.brain4_add_credit.sql": [],
        "spark.halo_prep.ccpa_compliance.sql": [],
        "spark.halo_prep.remove_from_subscription.sql": [],
        "spark.halo_prep.wait_list_signup.sql": [],
        "spark.halo_prep.quantity_change_subscription.sql": [],
        "spark.halo_prep.survey_question_set_answered.sql": [],
        "spark.halo_prep.product_impression.sql": [],
        "spark.halo_prep.brain4_pq_toggle.sql": [],
        "spark.halo_prep.add_to_subscription.sql": [],
        "spark.halo_prep.user_info.sql": [],
        "spark.halo_prep.subscription_set_impression.sql": [],
        "spark.halo_prep.product_set_impression.sql": [],
        "spark.halo_prep.remove_from_cart.sql": [],
        "spark.halo_prep.quantity_change_cart.sql": [],
        "spark.halo_prep.brain4_refund_order.sql": [],
        "spark.halo_prep.survey_question_set_impression.sql": [],
        "spark.halo_prep.neighborhood_goods_signup.sql": [],
        "spark.halo_prep.add_to_cart.sql": [],
        "spark.halo_prep.purchase.sql": [],
        "spark.halo_prep.experiment_set_assignments.sql": []
    },
    "dm-erp-transform": {
        "transform.spectrum.erp_shipments.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "erp_shipments_test"
                    ],
                    "select": [
                        "id",
                        "shipping_address_id",
                        "order_id",
                        "invoice_id",
                        "customer_id",
                        "tracking_number",
                        "price",
                        "tax",
                        "created_at"
                    ],
                    "where": [
                        "kafka_timestamp"
                    ]
                },
                "tables": [
                    "extract.erp_shipments_test",
                    "spectrum.erp_shipments"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into extract.erp_shipments_test\nselect\n     id\n\t,shipping_address_id\n\t,order_id\n\t,invoice_id\n\t,customer_id\n\t,tracking_number\n\t,price\n\t,tax\n\t,created_at::timestamp\n\t,updated_at::timestamp\n\t,status\n\t,provider_status\n\t,provider_method\n\t,total_weight\n\t,packaging_weight\n\t,contents_weight\n\t,delivered_at::timestamp\n\t,fulfillment_provider_id\n\t,fulfillment_provider_name\n\t,inventory_location_id\n\t,order_fulfillment_id\n\t,shipped_at::timestamp\n\t,shipment_cost\n\t,handling_cost\n\t,kafka_timestamp::timestamp as dsc_processed_at\nfrom spectrum.erp_shipments\nwhere 1=1\n    and kafka_timestamp >= '<start_date>'::timestamp -  interval '1 hour'\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.erp_shipments_test.id",
                        "extract.erp_shipments_test.id"
                    ]
                },
                "tables": [
                    "stg.erp_shipments_test"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.erp_shipments_test\nusing extract.erp_shipments_test\nwhere stg.erp_shipments_test.id = extract.erp_shipments_test.id\n;"
            },
            {
                "skipped": true,
                "value": "insert into stg.erp_shipments_test\nselect\n     s.id\n\t,s.shipping_address_id\n\t,s.order_id\n\t,s.invoice_id\n\t,s.customer_id\n\t,s.tracking_number\n\t,s.price\n\t,s.tax\n\t,s.created_at\n\t,s.updated_at\n\t,s.status\n\t,s.provider_status\n\t,s.provider_method\n\t,s.total_weight\n\t,s.packaging_weight\n\t,s.contents_weight\n\t,s.delivered_at\n\t,s.fulfillment_provider_id\n\t,s.fulfillment_provider_name\n\t,s.inventory_location_id\n\t,s.order_fulfillment_id\n\t,s.shipped_at\n\t,s.shipment_cost\n\t,s.handling_cost\n\t,s.dsc_processed_at\nfrom (\n    select\n     \tid\n\t,shipping_address_id\n\t,order_id\n\t,invoice_id\n\t,customer_id\n\t,tracking_number\n\t,price\n\t,tax\n\t,created_at\n\t,updated_at\n\t,status\n\t,provider_status\n\t,provider_method\n\t,total_weight\n\t,packaging_weight\n\t,contents_weight\n\t,delivered_at\n\t,fulfillment_provider_id\n\t,fulfillment_provider_name\n\t,inventory_location_id\n\t,order_fulfillment_id\n\t,shipped_at\n\t,shipment_cost\n\t,handling_cost\n\t,dsc_processed_at\n    --,row_number() over (partition by id order by q.kafka_timestamp desc) as rnk\n    ,row_number() over (partition by id order by dsc_processed_at desc) as rnk\n    from extract.erp_shipments_test\n) s\nwhere 1=1\n    and rnk = 1\n;"
            }
        ],
        "transform.spectrum.erp_customer_credit_attributions.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "erp_customer_credit_attributions_test"
                    ],
                    "select": [
                        "id",
                        "customer_id",
                        "attribution_type",
                        "reason_type",
                        "shop_name",
                        "shop_code",
                        "amount",
                        "credit_type",
                        "currency_code",
                        "created_at"
                    ],
                    "where": [
                        "kafka_timestamp"
                    ]
                },
                "tables": [
                    "extract.erp_customer_credit_attributions_test",
                    "spectrum.erp_customer_credit_attributions"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into extract.erp_customer_credit_attributions_test\nselect\n     id\n\t,customer_id\n\t,attribution_type\n\t,reason_type\n\t,shop_name\n\t,shop_code\n\t,amount\n\t,credit_type\n\t,currency_code\n\t,created_at::timestamp\n\t,source_type\n\t,debit_type\n\t,kafka_timestamp::timestamp as dsc_processed_at\n\t,customer_credit_id\nfrom spectrum.erp_customer_credit_attributions\nwhere 1=1\n    and kafka_timestamp >= '<start_date>'::timestamp -  interval '1 hour'\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.erp_customer_credit_attributions_test.id",
                        "extract.erp_customer_credit_attributions_test.id"
                    ]
                },
                "tables": [
                    "stg.erp_customer_credit_attributions_test"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.erp_customer_credit_attributions_test\nusing extract.erp_customer_credit_attributions_test\nwhere stg.erp_customer_credit_attributions_test.id = extract.erp_customer_credit_attributions_test.id\n;"
            },
            {
                "skipped": true,
                "value": "insert into stg.erp_customer_credit_attributions_test\nselect\n     id\n\t,customer_id\n\t,attribution_type\n\t,reason_type\n\t,shop_name\n\t,shop_code\n\t,amount\n\t,credit_type\n\t,currency_code\n\t,created_at\n\t,source_type\n\t,debit_type\n\t,dsc_processed_at\n\t,customer_credit_id\nfrom (\n    select\n     id\n\t,customer_id\n\t,attribution_type\n\t,reason_type\n\t,shop_name\n\t,shop_code\n\t,amount\n\t,credit_type\n\t,currency_code\n\t,created_at\n\t,source_type\n\t,debit_type\n\t,dsc_processed_at\n\t,customer_credit_id\n    --,row_number() over (partition by id order by q.kafka_timestamp desc) as rnk\n    ,row_number() over (partition by id order by dsc_processed_at desc) as rnk\n    from extract.erp_customer_credit_attributions_test\n) i\nwhere 1=1\n    and rnk = 1\n;"
            }
        ],
        "transform.spectrum.erp_customer_credits.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "erp_customer_credits"
                    ],
                    "select": [
                        "customer_id",
                        "shop_name",
                        "shop_code",
                        "amount",
                        "credit_type",
                        "currency_code",
                        "created_at"
                    ],
                    "where": [
                        "kafka_timestamp"
                    ]
                },
                "tables": [
                    "extract.erp_customer_credits",
                    "spectrum.erp_customer_credits"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into extract.erp_customer_credits\nselect\n     customer_id\n\t,shop_name\n\t,shop_code\n\t,amount\n\t,credit_type\n\t,currency_code\n\t,created_at::timestamp\n\t,source_type\n\t,debit_type\n\t,kafka_timestamp::timestamp as dsc_processed_at\n\t,id\nfrom spectrum.erp_customer_credits\nwhere 1=1\n    and kafka_timestamp >= '<start_date>'::timestamp -  interval '1 hour'\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.erp_customer_credits.id",
                        "extract.erp_customer_credits.id"
                    ]
                },
                "tables": [
                    "stg.erp_customer_credits"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.erp_customer_credits\nusing extract.erp_customer_credits\nwhere stg.erp_customer_credits.id = extract.erp_customer_credits.id\n;"
            },
            {
                "skipped": true,
                "value": "insert into stg.erp_customer_credits\nselect\n     customer_id\n\t,shop_name\n\t,shop_code\n\t,amount\n\t,credit_type\n\t,currency_code\n\t,created_at\n\t,source_type\n\t,debit_type\n\t,dsc_processed_at\n\t,id\nfrom (\n    select\n     customer_id\n\t,shop_name\n\t,shop_code\n\t,amount\n\t,credit_type\n\t,currency_code\n\t,created_at\n\t,source_type\n\t,debit_type\n\t,dsc_processed_at\n\t,id\n    --,row_number() over (partition by id order by q.kafka_timestamp desc) as rnk\n    ,row_number() over (partition by id order by dsc_processed_at desc) as rnk\n    from extract.erp_customer_credits\n) i\nwhere 1=1\n    and rnk = 1\n;"
            }
        ],
        "transform.spectrum.erp_invoices.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "erp_invoices_test"
                    ],
                    "select": [
                        "id",
                        "sub_total",
                        "total_shipping",
                        "profit",
                        "profit_margin",
                        "total_line_item_shipping_discount",
                        "total_discount",
                        "base_shipping_discount",
                        "base_shipping",
                        "status",
                        "total_tax",
                        "total_line_item_shipping_tax",
                        "total_line_item_shipping",
                        "base_discount",
                        "base_tax",
                        "total_shipping_discount",
                        "grand_total",
                        "total_line_item_discount",
                        "total_line_item_tax",
                        "created_at"
                    ]
                },
                "tables": [
                    "extract.erp_invoices_test",
                    "spectrum.erp_invoices"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into extract.erp_invoices_test\nselect\n     id\n\t,sub_total\n\t,total_shipping\n\t,profit\n\t,profit_margin\n\t,total_line_item_shipping_discount\n\t,total_discount\n\t,base_shipping_discount\n\t,base_shipping\n\t,status\n\t,total_tax\n\t,total_line_item_shipping_tax\n\t,total_line_item_shipping\n\t,base_discount\n\t,base_tax\n\t,total_shipping_discount\n\t,grand_total\n\t,total_line_item_discount\n\t,total_line_item_tax\n\t,created_at::timestamp\n\t,base_shipping_tax\n\t,total_cost\n\t,total_shipping_tax\n\t,balance\n\t,customer_id\n\t,customer_created_at::timestamp\n\t,test_customer\n\t,customer_type\n\t,customer_first_name\n\t,customer_last_name\n\t,customer_gender\n\t,customer_email\n\t,order_id\n\t,order_created_at::timestamp\n\t,order_base_shipping_charges\n\t,order_creation_reason\n\t,order_creation_source\n\t,order_currency_code\n\t,order_discount\n\t,order_ignore_shipping_charges\n\t,order_is_on_the_house\n\t,order_shipping_charges\n\t,shop_id\n\t,order_sub_total\n\t,order_tax\n\t,order_total\n\t,order_total_shipping_charges\n\t,tax_rate_id\n\t,tax_rate_country\n\t,tax_rate_state_province\n\t,tax_rate_county\n\t,tax_rate_post_code\n\t,tax_rate\n\t,shipping_address_id\n\t,shipping_address_country\n\t,shipping_address_state_province\n\t,btrim(shipping_address_post_code) as shipping_address_post_code\n\t,cost_calculation_completed\n\t,billing_address_id\n\t,billing_address_country\n\t,billing_address_state_province\n\t,billing_address_post_code\n\t,kafka_timestamp::timestamp as dsc_processed_at\n\t,order_attribution_id\n\t,order_attribution_attribution_id\n\t,order_attribution_attribution_type\n\t,order_attribution_created_at::timestamp\n\t,order_attribution_updated_at::timestamp\nfrom spectrum.erp_invoices\nwhere 1=1\n\t--and (<partitions>)\n    and kafka_timestamp >= '<start_date>'::timestamp -  interval '1 hour'\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.erp_invoices_test.id",
                        "extract.erp_invoices_test.id"
                    ]
                },
                "tables": [
                    "stg.erp_invoices_test"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.erp_invoices_test\nusing extract.erp_invoices_test\nwhere stg.erp_invoices_test.id = extract.erp_invoices_test.id\n;"
            },
            {
                "skipped": true,
                "value": "insert into stg.erp_invoices_test\nselect\n     i.id\n\t,i.sub_total\n\t,i.total_shipping\n\t,i.profit\n\t,i.profit_margin\n\t,i.total_line_item_shipping_discount\n\t,i.total_discount\n\t,i.base_shipping_discount\n\t,i.base_shipping\n\t,i.status\n\t,i.total_tax\n\t,i.total_line_item_shipping_tax\n\t,i.total_line_item_shipping\n\t,i.base_discount\n\t,i.base_tax\n\t,i.total_shipping_discount\n\t,i.grand_total\n\t,i.total_line_item_discount\n\t,i.total_line_item_tax\n\t,i.created_at\n\t,i.base_shipping_tax\n\t,i.total_cost\n\t,i.total_shipping_tax\n\t,i.balance\n\t,i.customer_id\n\t,i.customer_created_at\n\t,i.test_customer\n\t,i.customer_type\n\t,i.customer_first_name\n\t,i.customer_last_name\n\t,i.customer_gender\n\t,i.customer_email\n\t,i.order_id\n\t,i.order_created_at\n\t,i.order_base_shipping_charges\n\t,i.order_creation_reason\n\t,i.order_creation_source\n\t,i.order_currency_code\n\t,i.order_discount\n\t,i.order_ignore_shipping_charges\n\t,i.order_is_on_the_house\n\t,i.order_shipping_charges\n\t,i.shop_id\n\t,i.order_sub_total\n\t,i.order_tax\n\t,i.order_total\n\t,i.order_total_shipping_charges\n\t,i.tax_rate_id\n\t,i.tax_rate_country\n\t,i.tax_rate_state_province\n\t,i.tax_rate_county\n\t,i.tax_rate_post_code\n\t,i.tax_rate\n\t,i.shipping_address_id\n\t,i.shipping_address_country\n\t,i.shipping_address_state_province\n\t,i.shipping_address_post_code\n\t,i.cost_calculation_completed\n\t,i.billing_address_id\n\t,i.billing_address_country\n\t,i.billing_address_state_province\n\t,i.billing_address_post_code\n\t,i.dsc_processed_at\n\t,i.order_attribution_id\n\t,i.order_attribution_attribution_id\n\t,i.order_attribution_attribution_type\n\t,i.order_attribution_created_at\n\t,i.order_attribution_updated_at\nfrom (\n    select\n     id\n\t,sub_total\n\t,total_shipping\n\t,profit\n\t,profit_margin\n\t,total_line_item_shipping_discount\n\t,total_discount\n\t,base_shipping_discount\n\t,base_shipping\n\t,status\n\t,total_tax\n\t,total_line_item_shipping_tax\n\t,total_line_item_shipping\n\t,base_discount\n\t,base_tax\n\t,total_shipping_discount\n\t,grand_total\n\t,total_line_item_discount\n\t,total_line_item_tax\n\t,created_at\n\t,base_shipping_tax\n\t,total_cost\n\t,total_shipping_tax\n\t,balance\n\t,customer_id\n\t,customer_created_at\n\t,test_customer\n\t,customer_type\n\t,customer_first_name\n\t,customer_last_name\n\t,customer_gender\n\t,customer_email\n\t,order_id\n\t,order_created_at\n\t,order_base_shipping_charges\n\t,order_creation_reason\n\t,order_creation_source\n\t,order_currency_code\n\t,order_discount\n\t,order_ignore_shipping_charges\n\t,order_is_on_the_house\n\t,order_shipping_charges\n\t,shop_id\n\t,order_sub_total\n\t,order_tax\n\t,order_total\n\t,order_total_shipping_charges\n\t,tax_rate_id\n\t,tax_rate_country\n\t,tax_rate_state_province\n\t,tax_rate_county\n\t,tax_rate_post_code\n\t,tax_rate\n\t,shipping_address_id\n\t,shipping_address_country\n\t,shipping_address_state_province\n\t,shipping_address_post_code\n\t,cost_calculation_completed\n\t,billing_address_id\n\t,billing_address_country\n\t,billing_address_state_province\n\t,billing_address_post_code\n\t,dsc_processed_at\n\t,order_attribution_id\n\t,order_attribution_attribution_id\n\t,order_attribution_attribution_type\n\t,order_attribution_created_at\n\t,order_attribution_updated_at\n    --,row_number() over (partition by id order by q.kafka_timestamp desc) as rnk\n    ,row_number() over (partition by id order by dsc_processed_at desc) as rnk\n    from extract.erp_invoices_test\n) i\nwhere 1=1\n    and rnk = 1\n;"
            }
        ],
        "transform.spectrum.erp_order_products.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "erp_order_products"
                    ],
                    "select": [
                        "id",
                        "order_id",
                        "invoice_id",
                        "customer_id",
                        "discount",
                        "effective_unit_price",
                        "inclusion_reason",
                        "item_type",
                        "parent_order_product_id",
                        "product_id",
                        "quantity",
                        "tax",
                        "unit_price",
                        "product_name",
                        "product_nature",
                        "sku",
                        "taxable",
                        "product_type",
                        "bundle_id",
                        "bundle_product_id",
                        "bundle_maximum_quantity",
                        "price_contribution",
                        "source_id",
                        "source_type",
                        "kafka_timestamp"
                    ],
                    "where": [
                        "kafka_timestamp"
                    ]
                },
                "tables": [
                    "extract.erp_order_products",
                    "spectrum.erp_order_products"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into extract.erp_order_products\nselect\n     id\n\t,order_id\n\t,invoice_id\n\t,customer_id\n\t,discount\n\t,effective_unit_price\n\t,inclusion_reason\n\t,item_type\n\t,parent_order_product_id\n\t,product_id\n\t,quantity\n\t,tax\n\t,unit_price\n\t,product_name\n\t,product_nature\n\t,sku\n\t,taxable\n\t,product_type\n\t,bundle_id\n\t,bundle_product_id\n\t,bundle_maximum_quantity::INT\n\t,price_contribution\n\t,source_id\n\t,source_type\n\t,kafka_timestamp::timestamp as dsc_processed_at\nfrom spectrum.erp_order_products\nwhere 1=1\n    and kafka_timestamp >= '<start_date>'::timestamp -  interval '1 hour'\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.erp_order_products.id",
                        "extract.erp_order_products.id"
                    ]
                },
                "tables": [
                    "stg.erp_order_products"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.erp_order_products\nusing extract.erp_order_products\nwhere stg.erp_order_products.id = extract.erp_order_products.id\n;"
            },
            {
                "skipped": true,
                "value": "insert into stg.erp_order_products\nselect\n     id\n\t,order_id\n\t,invoice_id\n\t,customer_id\n\t,discount\n\t,effective_unit_price\n\t,inclusion_reason\n\t,item_type\n\t,parent_order_product_id\n\t,product_id\n\t,quantity\n\t,tax\n\t,unit_price\n\t,product_name\n\t,product_nature\n\t,sku\n\t,taxable\n\t,product_type\n\t,bundle_id\n\t,bundle_product_id\n\t,bundle_maximum_quantity\n\t,price_contribution\n\t,source_id\n\t,source_type\n\t,dsc_processed_at\nfrom (\n    select\n     id\n\t,order_id\n\t,invoice_id\n\t,customer_id\n\t,discount\n\t,effective_unit_price\n\t,inclusion_reason\n\t,item_type\n\t,parent_order_product_id\n\t,product_id\n\t,quantity\n\t,tax\n\t,unit_price\n\t,product_name\n\t,product_nature\n\t,sku\n\t,taxable\n\t,product_type\n\t,bundle_id\n\t,bundle_product_id\n\t,bundle_maximum_quantity\n\t,price_contribution\n\t,source_id\n\t,source_type\n\t,dsc_processed_at\n    --,row_number() over (partition by id order by q.kafka_timestamp desc) as rnk\n    ,row_number() over (partition by id order by dsc_processed_at desc) as rnk\n    from extract.erp_order_products\n) i\nwhere 1=1\n    and rnk = 1\n;"
            }
        ],
        "transform.spectrum.erp_payments.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "erp_payments"
                    ],
                    "select": [
                        "id",
                        "invoice_id",
                        "order_id",
                        "customer_id",
                        "amount",
                        "processed_at_date_time"
                    ],
                    "where": [
                        "kafka_timestamp"
                    ]
                },
                "tables": [
                    "extract.erp_payments",
                    "spectrum.erp_payments"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into extract.erp_payments\nselect\n     id\n\t,invoice_id\n\t,order_id\n\t,customer_id\n\t,amount\n\t,processed_at_date_time::timestamp\n\t,refunded_amount\n\t,status\n\t,transaction_fee\n\t,payment_gateway_id\n\t,payment_gateway_name\n\t,payment_method_id\n\t,credit_card_type\n\t,payment_method_status\n\t,settlement_date::timestamp\n\t,is_duplicate::boolean\n\t,kafka_timestamp::timestamp as dsc_processed_at\nfrom spectrum.erp_payments\nwhere 1=1\n    and kafka_timestamp >= '<start_date>'::timestamp -  interval '1 hour'\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.erp_payments.id",
                        "extract.erp_payments.id"
                    ]
                },
                "tables": [
                    "stg.erp_payments"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.erp_payments\nusing extract.erp_payments\nwhere stg.erp_payments.id = extract.erp_payments.id\n;"
            },
            {
                "skipped": true,
                "value": "insert into stg.erp_payments\nselect\n     id\n\t,invoice_id\n\t,order_id\n\t,customer_id\n\t,amount\n\t,processed_at_date_time\n\t,refunded_amount\n\t,status\n\t,transaction_fee\n\t,payment_gateway_id\n\t,payment_gateway_name\n\t,payment_method_id\n\t,credit_card_type\n\t,payment_method_status\n\t,settlement_date\n\t,is_duplicate\n\t,dsc_processed_at\nfrom (\n    select\n    id\n\t,invoice_id\n\t,order_id\n\t,customer_id\n\t,amount\n\t,processed_at_date_time\n\t,refunded_amount\n\t,status\n\t,transaction_fee\n\t,payment_gateway_id\n\t,payment_gateway_name\n\t,payment_method_id\n\t,credit_card_type\n\t,payment_method_status\n\t,settlement_date\n\t,is_duplicate\n\t,dsc_processed_at\n    --,row_number() over (partition by id order by q.kafka_timestamp desc) as rnk\n    ,row_number() over (partition by id order by dsc_processed_at desc) as rnk\n    from extract.erp_payments\n) p\nwhere 1=1\n    and rnk = 1\n;"
            }
        ],
        "transform.spectrum.erp_invoice_items.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "erp_invoice_items_test"
                    ],
                    "select": [
                        "id",
                        "invoice_id",
                        "customer_id",
                        "order_id",
                        "order_product_id",
                        "coupon_instance_id",
                        "effective_unit_price",
                        "price",
                        "quantity",
                        "shipping",
                        "shipping_discount",
                        "shipping_tax",
                        "tax",
                        "total_cost",
                        "unit_cost",
                        "discount",
                        "unit_price",
                        "product_id",
                        "product_sku",
                        "bundle_breakdown_id",
                        "discount_distribution",
                        "price_contribution",
                        "shipping_contribution",
                        "shipping_discount_distribution",
                        "top_level_invoice_item_id",
                        "top_level_invoice_item_sku",
                        "kafka_timestamp"
                    ],
                    "where": [
                        "kafka_timestamp"
                    ]
                },
                "tables": [
                    "extract.erp_invoice_items_test",
                    "spectrum.erp_invoice_items"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into extract.erp_invoice_items_test\nselect\n     id\n\t,invoice_id\n\t,customer_id\n\t,order_id\n\t,order_product_id\n\t,coupon_instance_id::INT\n\t,effective_unit_price\n\t,price\n\t,quantity\n\t,shipping\n\t,shipping_discount\n\t,shipping_tax\n\t,tax\n\t,total_cost\n\t,unit_cost\n\t,discount\n\t,unit_price\n\t,product_id\n\t,product_sku\n\t,bundle_breakdown_id\n\t,discount_distribution\n\t,price_contribution\n\t,shipping_contribution\n\t,shipping_discount_distribution\n\t,top_level_invoice_item_id\n\t,top_level_invoice_item_sku\n\t,kafka_timestamp::timestamp as dsc_processed_at\nfrom spectrum.erp_invoice_items\nwhere 1=1\n    and kafka_timestamp >= '<start_date>'::timestamp -  interval '1 hour'\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.erp_invoice_items_test.id",
                        "extract.erp_invoice_items_test.id"
                    ]
                },
                "tables": [
                    "stg.erp_invoice_items_test"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.erp_invoice_items_test\nusing extract.erp_invoice_items_test\nwhere stg.erp_invoice_items_test.id = extract.erp_invoice_items_test.id\n;"
            },
            {
                "skipped": true,
                "value": "insert into stg.erp_invoice_items_test\nselect\n     id\n\t,invoice_id\n\t,customer_id\n\t,order_id\n\t,order_product_id\n\t,coupon_instance_id\n\t,effective_unit_price\n\t,price\n\t,quantity\n\t,shipping\n\t,shipping_discount\n\t,shipping_tax\n\t,tax\n\t,total_cost\n\t,unit_cost\n\t,discount\n\t,unit_price\n\t,product_id\n\t,product_sku\n\t,bundle_breakdown_id\n\t,discount_distribution\n\t,price_contribution\n\t,shipping_contribution\n\t,shipping_discount_distribution\n\t,top_level_invoice_item_id\n\t,top_level_invoice_item_sku\n\t,dsc_processed_at\nfrom (\n    select\n    id\n\t,invoice_id\n\t,customer_id\n\t,order_id\n\t,order_product_id\n\t,coupon_instance_id\n\t,effective_unit_price\n\t,price\n\t,quantity\n\t,shipping\n\t,shipping_discount\n\t,shipping_tax\n\t,tax\n\t,total_cost\n\t,unit_cost\n\t,discount\n\t,unit_price\n\t,product_id\n\t,product_sku\n\t,bundle_breakdown_id\n\t,discount_distribution\n\t,price_contribution\n\t,shipping_contribution\n\t,shipping_discount_distribution\n\t,top_level_invoice_item_id\n\t,top_level_invoice_item_sku\n\t,dsc_processed_at\n    --,row_number() over (partition by id order by q.kafka_timestamp desc) as rnk\n    ,row_number() over (partition by id order by dsc_processed_at desc) as rnk\n    from extract.erp_invoice_items_test\n) ii\nwhere 1=1\n    and rnk = 1\n;"
            }
        ]
    },
    "dm-tmp-transform-prod": {
        "transform.tmp.sds_order_items_level.sql": [
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "bn.bundle_product_id",
                        "dupes.transaction_invoice_product_id"
                    ]
                },
                "tables": [
                    "tmp.sds_order_items_level"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "CREATE TABLE tmp.sds_order_items_level\n\nDISTKEY (invoice_id)\nSORTKEY (customer_id, invoice_id)\n\nAS\n\nselect\nfip1.customer_id,\no.obfuscated_id,\no.customer_subscription_plan_id,\no.primary_shipment_uuid,\nfip1.shop_id,\no.shipment_uuid,\nfip1.invoice_id,\nfip1.order_id,\nfip1.order_created_at,\ndate(fip1.order_created_at) as \"order_created_date\",\ndate_trunc('month',fip1.order_created_at) as \"order_created_month\",\nfip1.shipment_created_at,\ndate(fip1.shipment_created_at) as \"shipment_created_date\",\ndate_trunc('month',fip1.shipment_created_at) as \"shipment_created_month\",\nfip1.shipment_shipped_at,\ndate(fip1.shipment_shipped_at) as \"shipment_shipped_date\",\ndate_trunc('month',fip1.shipment_shipped_at) as \"shipment_shipped_month\",\ncase\n\twhen bn.bundle_product_id is not null then 'Bundle SKU'\n\twhen dupes.transaction_invoice_product_id is not null then 'Bundle SKU'\n\t--mapped as 'Bundle SKU' under further notice\n\telse 'Individual SKU'\n\tend as \"bundle_flag\",\nfip1.product_id as \"ecomm_product_id\",\n--will be Individual SKUs + Bundle SKUs (sku with transaction where price > 0)\nfip1.product_sku as \"ecomm_product_sku\",\ncase\n\twhen fip1.nature = 0 and fip1.price > 0 then 'True Phyiscal SKU'\n\twhen fip2.product_id is not null then 'True Physical SKU'\n\twhen phys.physical_product_id is not null then 'Mapped Physical SKU'\n\telse 'Other'\n\tend as \"physical_sku_mapping_flag\",\n-- identify whether it is the true physical sku (as shown in original order in f_invoice_product; joining top_level_invoice_item_id to invoice_product_id)\n-- 'Mapped Physical SKU' is leveraging 'phys' query below = most common physical sku by shop by month\ncase\n\twhen fip1.nature = 0 and fip1.price > 0 then fip1.product_id\n\telse nvl(fip2.product_id,phys.physical_product_id)\n\tend as \"physical_product_id\",\ncase\n\twhen fip1.nature = 0 and fip1.price > 0 then fip1.product_sku\n\telse nvl(fip2.product_sku,phys.physical_sku)\n\tend as \"physical_product_sku\",\nfip1.invoice_status,\nsum(fip1.unit_price * fip1.quantity) as \"product_gross_revenue\",\nsum(fip1.price) as \"product_net_revenue\",\nsum(fip1.quantity) as \"product_quantity\",\nsum(csci1.quantity_recurring) as \"product_quantity_recurring\",\nsum(fip1.quantity)-sum(csci1.quantity_recurring) as \"product_quantity_onetime\",\nsum(fip1.quantity * fip1.unit_price) - sum(fip1.price) as \"product_discount\",\nsum(fip1.price)*(1.00*sum(fi1.total_line_item_tax)/sum(fi1.amount_true)) as \"product_tax\"\nfrom\n--below are #1 not the lower case L's\ndmt.f_invoice_product fip1\nleft join tmp.sds_order_level o\n\ton o.order_id = fip1.order_id\n\tand o.shop_id = fip1.shop_id\nleft join\n\t(select\n\tv.currency_id,\n\tv.bundle_product_id,\n\tv.bundle_sku\n\tfrom\n\tdmt.d_bundle_discounted_value v\n\tgroup by 1,2,3\n\torder by 2 asc, 1 asc) bn\n\t\ton bn.bundle_product_id = fip1.product_id\n\t\tand bn.currency_id = fip1.currency_id\nleft join\n\t(select\n\ti.shop_id,\n\ti.order_id,\n\ti.total_line_item_tax,\n\ti.amount_true\n\tfrom\n\tdmt.f_invoice i\n\tgroup by 1,2,3,4) fi1\n\t\ton fi1.order_id = fip1.order_id\n\t\tand fi1.shop_id = fip1.shop_id\nleft join\n\t(select\n\tfip1.shop_id,\n\tfip1.order_id,\n\tfip1.shipment_shipped_at,\n\tfip1.invoice_product_id as \"transaction_invoice_product_id\",\n\tfip1.product_sku as \"transaction_sku\",\n\tcount(distinct(fip2.invoice_product_id)) as \"mappings\"\n\tfrom\n\tdmt.f_invoice_product fip1\n\tjoin dmt.f_invoice_product fip2\n\t\ton fip1.invoice_product_id = fip2.top_level_invoice_item_id\n\t\tand fip1.shop_id = fip2.shop_id\n\t\tand fip2.unit_price > 0\n\t\tand fip2.nature = 0\n\twhere fip1.price > 0\n\tgroup by 1,2,3,4,5\n\thaving count(distinct(fip2.invoice_product_id)) > 1) dupes\n\t\ton dupes.shop_id = fip1.shop_id\n\t\tand dupes.order_id = fip1.order_id\n\t\tand dupes.transaction_invoice_product_id = fip1.invoice_product_id\nleft join\n\t(select\n\tc.shop_id,\n\tc.customer_id,\n\tc.plan_id,\n\tc.scheduled_cart_id,\n\tc.product_id,\n\tsum(c.quantity) as \"quantity\",\n\tsum(c.quantity_recurring) as \"quantity_recurring\"\n\tfrom\n\tstg.ps_close_scheduled_cart_items c\n\twhere c.removed is not true\n\t\tand c.scheduled_cart_closed_at is not null\n\t\t--ensuring that removed items do not come through (previously removed had closed cart as NULL despite overall cart being closed)\n\tgroup by 1,2,3,4,5) csci1\n\t\ton csci1.shop_id = fip1.shop_id\n\t\tand csci1.scheduled_cart_id = fip1.order_attribution_attribution_id\n\t\tand fip1.order_attribution_attribution_type = 'scheduledcart'\n\t\t--could have multiple joins without 'scheudledcart' additional criteria\n\t\tand csci1.product_id = fip1.product_id\nleft join dmt.f_invoice_product fip2\n\ton fip1.invoice_product_id = fip2.top_level_invoice_item_id\n\tand fip1.shop_id = fip2.shop_id\n\tand fip2.nature = 0\n\t-- bringing in Physical for fip2\n\tand fip2.unit_price > 0\n\t-- preventing noise from multiple rows with same top_level_invoice_item_id\n\tand dupes.transaction_invoice_product_id is null\n\t-- prevents joining on invoice_product_ids with multiple mappings (\"dupes\"query above)\nleft join\n\t(select\n\tfip1.shop_id,\n\tdate_trunc('month',fip1.shipment_shipped_at) as \"shipment_shipped_month\",\n\tfip1.product_id as \"composite_product_id\",\n\tfip1.product_sku as \"composite_sku\",\n\tfip2.product_id as \"physical_product_id\",\n\tfip2.product_sku as \"physical_sku\",\n\trow_number () over (partition by fip1.product_sku, date_trunc('month',fip1.shipment_shipped_at), fip1.shop_id order by sum(fip1.quantity) desc) as \"sku_rank\",\n\t--sku rank for composite skus (can filter for sku_rank = 1 for most common physical sku - ex: 'BFIB-SAMPLE-CURRENT' has physical skus ending in \"-1\" and \"-2\")\n\tsum(fip1.quantity) as \"quantity\"\n\tfrom\n\tdmt.f_invoice_product fip1\n\t\tjoin dmt.f_invoice_product fip2\n\t\t\ton fip1.invoice_product_id = fip2.top_level_invoice_item_id\n\t\t\tand fip2.nature = 0\n\t\t\tand fip2.unit_price > 0\n\t\t--can add filter fip1.nature != 0 to see all composite skus --> might exclude random skus that only have physical skus (potentially 01C skus)\n\tgroup by 1,2,3,4,5,6) phys\n\ton phys.shop_id = fip1.shop_id\n\t\tand phys.composite_product_id = fip1.product_id\n\t\tand phys.shipment_shipped_month = date_trunc('month',fip1.shipment_shipped_at)\n\t\tand phys.sku_rank = 1\n\t\tand dupes.transaction_invoice_product_id is null\nwhere fip1.price > 0\n\tand fip1.shipment_created_at >= '1/1/2019'\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24\norder by fip1.order_id asc\n;"
            }
        ],
        "transform.tmp.hl_sessionid_obfcustid.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "hl_sessionid_obfcustid"
                    ],
                    "select": [
                        "tmp.hl_base_parsed.sessionid",
                        "tmp.hl_base_parsed.obfuscatedcustomerid"
                    ],
                    "join": [
                        "dmt.d_customer.obfuscated_id",
                        "tmp.hl_base_parsed.obfuscatedcustomerid"
                    ],
                    "where": [
                        "tmp.hl_base_parsed.obfuscatedcustomerid"
                    ]
                },
                "tables": [
                    "tmp.hl_sessionid_obfcustid",
                    "tmp.hl_base_parsed",
                    "dmt.d_customer"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into tmp.hl_sessionid_obfcustid\n\nselect distinct hbp.sessionid, hbp.obfuscatedcustomerid\nfrom tmp.hl_base_parsed hbp\njoin dmt.d_customer c on c.obfuscated_id = hbp.obfuscatedcustomerid\nwhere 1=1\nand len(hbp.obfuscatedcustomerid) > 0;"
            }
        ],
        "transform.tmp.sds_order_level.sql": [
            {
                "skipped": true,
                "value": "CREATE TABLE tmp.sds_order_level\n\nDISTKEY (invoice_id)\nSORTKEY (customer_id, invoice_id)\n\nAS\n\nwith shipment_ranks\nas\n\n(select ship.customer_id\n, ship.primary_shipment_uuid\n--, ship.shipment_uuid\n--, ship.invoice_id\n, ship.shipment_shipped_at\n, ship.box_type\n, row_number() over (partition by ship.customer_id order by ship.shipment_shipped_at) as lifetime_shipments\n, row_number() over (partition by ship.customer_id, ship.box_type order by ship.shipment_shipped_at) as lifetime_box_type_shipments\n\nfrom\n(select\n\ti.customer_id\n\t, i.primary_shipment_uuid\n--\t, i.shipment_uuid\n--\t, i.invoice_id\n\t, i.shipment_shipped_at\n\t, mbo.box_type\n\tfrom dmt.f_invoice i\n\tleft join stg.mbo_order_base mbo\n\t\ton mbo.order_id = i.order_id\n\t\tand mbo.customer_id = i.customer_id\n\twhere i.shipment_shipped_at is not null\n\tand i.invoice_status = 'paid'\n\tand (case when i.shipment_uuid is null and i.primary_shipment_uuid is null then 'primary shipment'\n\t\twhen i.shipment_uuid is null and i.primary_shipment_uuid is not null then 'primary shipment'\n\t\twhen i.shipment_uuid is not null and i.primary_shipment_uuid is null then 'primary shipment'\n\t\twhen i.shipment_uuid = i.primary_shipment_uuid then 'primary shipment' else 'merged shipment' end) = 'primary shipment'\n\tgroup by 1,2,3,4) ship\n\t--limit 1000\n\t)\n\n, plan_shipment_ranks\nas\n\n(select\n\tpship.customer_id\n\t, pship.customer_subscription_plan_id\n\t, pship.primary_shipment_uuid\n\t, pship.shipment_shipped_at\n\t, pship.box_type\n\t, row_number() over (partition by pship.customer_id, pship.customer_subscription_plan_id order by pship.shipment_shipped_at) as plan_lifetime_shipments\n\t, row_number() over (partition by pship.customer_id, pship.customer_subscription_plan_id, pship.box_type order by pship.shipment_shipped_at) as plan_lifetime_box_type_shipments\n\nfrom\n(select\n\ti.customer_id\n\t, mbo.customer_subscription_plan_id\n\t, i.primary_shipment_uuid\n--\t, i.shipment_uuid\n--\t, i.invoice_id\n\t, i.shipment_shipped_at\n\t, mbo.box_type\n\tfrom dmt.f_invoice i\n\tleft join stg.mbo_order_base mbo\n\t\ton mbo.order_id = i.order_id\n\t\tand mbo.customer_id = i.customer_id\n\twhere i.shipment_shipped_at is not null\n\tand mbo.customer_subscription_plan_id is not null\n  and i.invoice_status = 'paid'\n \tand (case when i.shipment_uuid is null and i.primary_shipment_uuid is null then 'primary shipment'\n\t\twhen i.shipment_uuid is null and i.primary_shipment_uuid is not null then 'primary shipment'\n\t\twhen i.shipment_uuid is not null and i.primary_shipment_uuid is null then 'primary shipment'\n\t\twhen i.shipment_uuid = i.primary_shipment_uuid then 'primary shipment' else 'merged shipment' end) = 'primary shipment'\n\tgroup by 1,2,3,4,5) pship\n\torder by pship.customer_id, pship.customer_subscription_plan_id, pship.shipment_shipped_at\n\t--limit 1000\n\t)\n\n\n\nselect i.customer_id,\n\t\tc.obfuscated_id,\n\t\tmbo.customer_subscription_plan_id,\n\t\ti.order_id,\n\t\ti.invoice_id,\n\t\ti.shipment_uuid,\n\t\ti.primary_shipment_uuid,\n\t\tcase when i.shipment_uuid is null and i.primary_shipment_uuid is null then 'primary shipment'\n\t\twhen i.shipment_uuid is null and i.primary_shipment_uuid is not null then 'primary shipment'\n\t\twhen i.shipment_uuid is not null and i.primary_shipment_uuid is null then 'primary shipment'\n\t\twhen i.shipment_uuid = i.primary_shipment_uuid then 'primary shipment' else 'merged shipment' end primary_shipment_flag, -- some merged shipments for order_box_types that aren't initial orders --\n\t\ti.shop_id,\n\t\ti.invoice_status,\n\t\ti.invoice_created_at, -- google doc shows as invoice_created_date --\n\t\ti.shipment_created_at, -- google doc shows as shipment_created_date --\n\t\ti.shipment_shipped_at,\n\t\tmbo.box_type order_box_type,\n\t\tps.order_box_type primary_shipment_box_type,\n\t\ti.amount_true,\n\t\ti.sub_total,\n\t\ti.total_shipping,\n\t\tsum(ip.quantity) sum_quantity\n--\t\t,row_number() over (partition by i.customer_id order by i.shipment_shipped_at) as lifetime_orders, -- how do we want to treat cancelled orders and orders that didn't ship? --\n--\t\trow_number() over (partition by i.customer_id, mbo.customer_subscription_plan_id order by i.shipment_shipped_at) as plan_orders,\n--\t\trow_number() over (partition by i.customer_id, primary_shipment_box_type order by i.shipment_shipped_at) as lifetime_orders_box_type,\n--\t\trow_number() over (partition by i.customer_id, mbo.customer_subscription_plan_id, primary_shipment_box_type order by i.shipment_shipped_at) as plan_orders_box_type\n\t\t, sr.lifetime_shipments\n\t\t,sr.lifetime_box_type_shipments\n\t\t, psr.plan_lifetime_shipments\n\t\t, psr.plan_lifetime_box_type_shipments\nfrom dmt.f_invoice i\nleft join dmt.d_customer c\non c.customer_id = i.customer_id\nleft join dmt.f_invoice_product ip\non ip.invoice_id = i.invoice_id\nand ip.price > 0\n-- left join not needed as only ~30 customer_ids drop off if join restricted to an inner join. leaving as left join in case relationship between tables changes in the future --\nleft join stg.mbo_order_base mbo\non mbo.customer_id = i.customer_id\nand mbo.order_id = i.order_id\n-- 1.6M orders with no join using join on customer_id and order_id no difference when joined on only order_id. possibly due to canceled orders not in mbo order base --\nleft join (select distinct i.primary_shipment_uuid,\n\t\t\tmbo.box_type order_box_type,\n\t\t\t-- primary shipment uuid and shipment uuid are largely null when the invoice status is <> paid\n\t\t\tcase when i.shipment_uuid is null and i.primary_shipment_uuid is null then 'primary shipment'\n\t\t\twhen i.shipment_uuid is null and i.primary_shipment_uuid is not null then 'primary shipment'\n\t\t\twhen i.shipment_uuid is not null and i.primary_shipment_uuid is null then 'primary shipment'\n\t\t\twhen i.shipment_uuid = i.primary_shipment_uuid then 'primary shipment' else 'merged shipment' end primary_shipment_flag --some merged shipments for order_box_types that aren't initial orders --\nfrom dmt.f_invoice i\nleft join stg.mbo_order_base mbo\non mbo.customer_id = i.customer_id\nand mbo.order_id = i.order_id\nwhere primary_shipment_flag = 'primary shipment') as ps\non i.primary_shipment_uuid = ps.primary_shipment_uuid\nleft join shipment_ranks sr\n\ton sr.primary_shipment_uuid = i.primary_shipment_uuid\n\tand sr.customer_id = i.customer_id\n\tand sr.shipment_shipped_at = i.shipment_shipped_at\nleft join plan_shipment_ranks psr\n\ton psr.customer_id = i.customer_id\n\tand psr.primary_shipment_uuid = i.primary_shipment_uuid\nwhere 1=1\n--and i.customer_id = 2413819\n--and i.primary_shipment_uuid = '0e35704a-b956-41b3-b363-16fd1c348312'\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18\n\t,sr.lifetime_shipments\n\t, sr.lifetime_box_type_shipments\n\t, psr.plan_lifetime_shipments, psr.plan_lifetime_box_type_shipments\norder by i.customer_id, i.invoice_created_at\n;"
            }
        ],
        "transform.tmp.adra_bill_dates_poc.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "adra_bill_dates_poc"
                    ],
                    "select": [
                        "dmt.d_customer.email",
                        "dmt.d_customer_plan_360.bm_type",
                        "dmt.d_customer_plan_360.start_date_time",
                        "dmt.d_customer_plan_360.end_date_time",
                        "dmt.d_customer_plan_360.status_name",
                        "dmt.d_customer_plan_360.customer_id",
                        "stg.ps_change_plan_attribute_events.plan_id",
                        "stg.ps_change_plan_attribute_events.event",
                        "stg.ps_change_plan_attribute_events.rails_site_processed_at"
                    ],
                    "join": [
                        "dmt.d_customer.customer_id",
                        "dmt.d_customer_plan_360.customer_id",
                        "stg.ps_change_plan_attribute_events.plan_id",
                        "dmt.d_customer_plan_360.customer_subscription_plan_id"
                    ]
                },
                "tables": [
                    "tmp.adra_bill_dates_poc",
                    "dmt.d_customer",
                    "dmt.d_customer_plan_360",
                    "stg.ps_change_plan_attribute_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into tmp.adra_bill_dates_poc\n\nselect c.email\n     , cp.bm_type\n     , cp.start_date_time\n     , cp.end_date_time\n     , cp.status_name\n     , cp.customer_id\n     , cpae.plan_id\n     , cpae.event\n     , cast(cpae.rails_site_processed_at as timestamp) as event_ts\n     , cast(cpae.old_bill_date as timestamp) as old_bill_date\n     , cast(cpae.new_bill_date as timestamp) as new_bill_date\n     , cpae.initiated_by\n     , null as scheduled_cart_closed_at\n     , null as next_bill_date_time\n     , cast(cpae.rails_site_processed_at as timestamp) as timestampy\n\nfrom dmt.d_customer c\njoin dmt.d_customer_plan_360 cp on c.customer_id = cp.customer_id\n\njoin stg.ps_change_plan_attribute_events cpae on cpae.plan_id = cp.customer_subscription_plan_id\n\nwhere 1=1\n--and ((c.first_name = 'Adra' and c.last_name = 'Graves') or c.email like 'adra.graves%')\nand cp.bm_type = 'plan'\nand cpae.event = 'change_plan_bill_date'\n\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "adra_bill_dates_poc"
                    ],
                    "select": [
                        "dmt.d_customer.email",
                        "dmt.d_customer_plan_360.bm_type",
                        "dmt.d_customer_plan_360.start_date_time",
                        "dmt.d_customer_plan_360.end_date_time",
                        "dmt.d_customer_plan_360.status_name",
                        "dmt.d_customer_plan_360.customer_id",
                        "dmt.d_customer_plan_360.customer_subscription_plan_id",
                        "stg.ps_scheduled_carts.scheduled_cart_closed_at"
                    ],
                    "join": [
                        "dmt.d_customer.customer_id",
                        "dmt.d_customer_plan_360.customer_id",
                        "stg.ps_scheduled_carts.plan_id",
                        "dmt.d_customer_plan_360.customer_subscription_plan_id"
                    ]
                },
                "tables": [
                    "tmp.adra_bill_dates_poc",
                    "dmt.d_customer",
                    "dmt.d_customer_plan_360",
                    "stg.ps_scheduled_carts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into tmp.adra_bill_dates_poc\n\nselect c.email\n     , cp.bm_type\n     , cp.start_date_time\n     , cp.end_date_time\n     , cp.status_name\n     , cp.customer_id\n     , cp.customer_subscription_plan_id as plan_id\n     , 'closed scheduled cart' as event\n     , null as event_ts\n     , null as old_bill_date\n     , null as new_bill_date\n     , null as initiated_by\n     , cast(sc.scheduled_cart_closed_at as timestamp) as scheduled_cart_closed_at\n     , null as next_bill_date_time,\ncast(sc.scheduled_cart_closed_at as timestamp) as timestampy\n\nfrom dmt.d_customer c\njoin dmt.d_customer_plan_360 cp on c.customer_id = cp.customer_id\n\njoin stg.ps_scheduled_carts sc on sc.plan_id = cp.customer_subscription_plan_id\n\nwhere 1=1\n--and ((c.first_name = 'Adra' and c.last_name = 'Graves') or c.email like 'adra.graves%')\nand cp.bm_type = 'plan'\nand sc.scheduled_cart_closed_at is not null\n\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "adra_bill_dates_poc"
                    ],
                    "select": [
                        "dmt.d_customer.email",
                        "dmt.d_customer_plan_360.bm_type",
                        "dmt.d_customer_plan_360.start_date_time",
                        "dmt.d_customer_plan_360.end_date_time",
                        "dmt.d_customer_plan_360.status_name",
                        "dmt.d_customer_plan_360.customer_id",
                        "dmt.d_customer_plan_360.customer_subscription_plan_id",
                        "dmt.d_customer_plan_360.next_bill_date_time"
                    ],
                    "join": [
                        "dmt.d_customer.customer_id",
                        "dmt.d_customer_plan_360.customer_id"
                    ]
                },
                "tables": [
                    "tmp.adra_bill_dates_poc",
                    "dmt.d_customer",
                    "dmt.d_customer_plan_360"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into tmp.adra_bill_dates_poc\n\nselect c.email\n     , cp.bm_type\n     , cp.start_date_time\n     , cp.end_date_time\n     , cp.status_name\n     , cp.customer_id\n     , cp.customer_subscription_plan_id as plan_id\n     , 'current next bill date' as event\n     , null as event_ts, null as old_bill_date\n     , null as new_bill_date, null as initiated_by\n     , null as scheduled_cart_closed_at\n     , cp.next_bill_date_time\n     , cp.next_bill_date_time as timestampy\n\nfrom dmt.d_customer c\njoin dmt.d_customer_plan_360 cp on c.customer_id = cp.customer_id\n\nwhere 1=1\n--and ((c.first_name = 'Adra' and c.last_name = 'Graves') or c.email like 'adra.graves%')\nand cp.bm_type = 'plan'\n\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "adra_bill_dates_poc"
                    ],
                    "select": [
                        "dmt.d_customer.email",
                        "dmt.d_customer_plan_360.bm_type",
                        "dmt.d_customer_plan_360.start_date_time",
                        "dmt.d_customer_plan_360.end_date_time",
                        "dmt.d_customer_plan_360.status_name",
                        "dmt.d_customer_plan_360.customer_id",
                        "stg.ps_change_plan_attribute_events.plan_id",
                        "stg.ps_change_plan_attribute_events.event",
                        "stg.ps_change_plan_attribute_events.rails_site_processed_at"
                    ],
                    "join": [
                        "dmt.d_customer.customer_id",
                        "dmt.d_customer_plan_360.customer_id",
                        "stg.ps_change_plan_attribute_events.plan_id",
                        "dmt.d_customer_plan_360.customer_subscription_plan_id"
                    ]
                },
                "tables": [
                    "tmp.adra_bill_dates_poc",
                    "dmt.d_customer",
                    "dmt.d_customer_plan_360",
                    "stg.ps_change_plan_attribute_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into tmp.adra_bill_dates_poc\n\nselect c.email\n       , cp.bm_type\n       , cp.start_date_time\n       , cp.end_date_time\n       , cp.status_name\n       , cp.customer_id\n       , cpae.plan_id\n       , cpae.event\n       , cast(cpae.rails_site_processed_at as timestamp) as event_ts\n       , null as old_bill_date\n       , null as new_bill_date\n       , cpae.initiated_by\n       , null as scheduled_cart_closed_at\n       , null as next_bill_date_time\n       , cast(cpae.rails_site_processed_at as timestamp) as timestampy\n       , cpae.old_frequency\n       , cpae.new_frequency\n\nfrom dmt.d_customer c\njoin dmt.d_customer_plan_360 cp on c.customer_id = cp.customer_id\n\njoin stg.ps_change_plan_attribute_events cpae on cpae.plan_id = cp.customer_subscription_plan_id\n\nwhere 1=1\n--and ((c.first_name = 'Adra' and c.last_name = 'Graves') or c.email like 'adra.graves%')\nand cp.bm_type = 'plan'\nand cpae.event = 'change_plan_frequency';"
            }
        ],
        "transform.tmp.tenure_ltv_decile_new_cohorts.sql": [
            {
                "skipped": true,
                "value": "create table tmp.tenure_ltv_decile_new_cohorts\n\ndistkey (customer_id)\nsortkey (customer_id, cohort_month)\n\nas\n\n(select\nntile (10)\nover (\npartition by cohort_month,tenure_month_group\norder by cuml_revenue desc\n) decile_value_tier,\ncuml_order,\ncuml_revenue,\ncustomer_id,\n tenure_month_group,\n cohort_month,\nbm_type,\nstatus_name,\nfunnel_sku_list,\nfirst_order_sku_list,\nfirst_utm_source,\nfirst_utm_medium,\nlanding_url_without_params,\nfrequency,\noriginal_frequency\nfrom\n(\nselect max(cuml_order) cuml_order,\nmax(cuml_revenue) cuml_revenue,\ncustomer_id,\n tenure_month_group,\n cohort_month,\nbm_type,\nstatus_name,\nfunnel_sku_list,\nfirst_order_sku_list,\nfirst_utm_source,\nfirst_utm_medium,\nlanding_url_without_params,\nfrequency,\noriginal_frequency\nfrom\n(\nselect  a.customer_id,\n tenure_month_group,\n tenure_months,\ncohort_month,\nbm_type,\nstatus_name,\nfunnel_sku_list,\nfirst_order_sku_list,\nfirst_utm_source,\nfirst_utm_medium,\nlanding_url_without_params,\nfrequency,\noriginal_frequency,\nmonth_end_date ,\namount_true,\ncount (i.invoice_id) over (partition by a.customer_id order by month_end_date,tenure_month_group  rows unbounded preceding) as cuml_order,\nsum(amount_true) over (partition by a.customer_id order by month_end_date,tenure_month_group  rows unbounded preceding) as cuml_revenue\nfrom\n(\nselect distinct\ndate_trunc('month',start_date_time ) cohort_month,\nmonth_end_date,\ncase when round (months_between( month_end_date ,start_date_time))>=0\nand round (months_between( month_end_date ,start_date_time)) <=3 then '0-3'\n when round (months_between( month_end_date ,start_date_time))>=4\nand round (months_between( month_end_date ,start_date_time)) <=6 then '4-6'\nwhen round (months_between( month_end_date,start_date_time))>=7\nand round (months_between( month_end_date ,start_date_time)) <=9 then '7-9'\n when round (months_between( month_end_date  ,start_date_time))>=10\nand round (months_between( month_end_date  ,start_date_time)) <=12 then '10-12'\n when round (months_between( month_end_date  ,start_date_time))>=13\nand round (months_between( month_end_date ,start_date_time)) <=15 then '13-15'\nelse '15+' end tenure_month_group\n,\nround (months_between( nvl(month_end_date ,getdate()) ,start_date_time)) tenure_months,\nc.customer_id customer_id,\nfunnel_sku_list,\nfirst_order_sku_list,\nfirst_utm_source,\nfirst_utm_medium,\nlanding_url_without_params,\nstart_date_time,\nc.bm_type,\nfrequency,\nplan_conversion_source,\nc.status_name,\noriginal_frequency,\nend_date_time\nfrom dmt.d_customer_plan_360 c\njoin dmt.d_date d\non d.date between start_date_time and  nvl(end_date_time ,getdate())\nwhere\n plan_conversion_source is null\nand c.bm_type='plan'\nand shop_id=1\nand sub_plan_rank=1\nand start_date_time>='2018-06-01'\n) a\nleft outer join dmt.f_invoice i\non concat( extract (month from invoice_created_at ),extract (year from invoice_created_at ))=concat( extract (month from month_end_date ),extract (year from month_end_date ))\nand a.customer_id=i.customer_id\nand shop_id=1\nand shipment_shipped_at is not null\nand invoice_created_at >='2018-06-01') tmp\ngroup by\ncustomer_id,\n tenure_month_group,\n cohort_month,\nbm_type,\nstatus_name,\nfunnel_sku_list,\nfirst_order_sku_list,\nfirst_utm_source,\nfirst_utm_medium,\nlanding_url_without_params,\nfrequency,\noriginal_frequency\n) tmp\n);"
            }
        ],
        "transform.tmp.visitor_url_table_multicore_test.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "date_time"
                    ]
                },
                "tables": [
                    "tmp.visitor_url_table_multicore_test"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from tmp.visitor_url_table_multicore_test where date_time >= dateadd('day', -3, current_date);"
            },
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "----- DATE CHANGE!\n\ninsert into tmp.visitor_url_table_multicore_test\n\n    SELECT zz.visit_start_time_gmt\n         , zz.visit_num\n         , zz.visid_concat\n         ,zz.mcvisid\n         , zz.user_agent\n         , zz.ip\n         , zz.init_ref_domain\n         ,zz.init_referrer\n         , zz.init_landing_url\n         , zz.url\n         , zz.g_url\n         ,zz.evar11\n         , zz.referring_url\n         , zz.date_time\n         , zz.date_time_gmt\n         ,zz.evar23\n         , zz.evar40\n         , zz.mobile_id\n         , zz.os_name\n         , zz.post_evar57\n         ,zz.mvvar1\n         , zz.multicore_test_bucket_assignment\n         , multicore_test_bucket_assignment_visit_level\n         ,zz.cont_url_incr\n         , zz.visit_page_num\n         , zz.paypal_test_bucket_assignment\n         , zz.paypal_test_bucket_assignment_visit_level\n         , zz.cta_test_bucket_assignment\n         , zz.cta_test_bucket_assignment_visit_level\n   \t     , zz.default_frequency_test_bucket_assignment\n   \t     , zz.default_frequency_test_bucket_assignment_visit_level\n   \t   , zz.multicore_with_edit_test_bucket_assignment\n   \t   , zz.multicore_with_edit_test_bucket_assignment_visit_level\n   \t   ,  zz.collection_details_headline_test_bucket_assignment\n   \t   , zz.collection_details_headline_test_bucket_assignment_visit_level\n   \t   , zz.unbounce_variant\n   \t   , zz.va_closer_id\n   \t   , zz.va_finder_id\n   \t   , zz.first_touch_channel\n   \t   , zz.last_touch_channel\n\n\tFROM\n\n  (\n  \tSELECT z.visit_start_time_gmt, z.visit_num, z.visid_concat, z.mcvisid, z.user_agent, z.ip,\n        \tfirst_value(z.ref_domain) OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat\n                                                ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as init_ref_domain,\n\n        \tfirst_value(z.referrer) OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat\n                                                ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as init_referrer,\n\n        \tfirst_value(z.url) OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat\n                                                ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as init_landing_url,\n\n\t\t\tfirst_value(z.url) IGNORE NULLS OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat, z.cont_url_incr\n                                                      ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as url,\n\n        \tfirst_value(z.g_url) IGNORE NULLS OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat, z.cont_url_incr\n                                                      ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as g_url,\n\n        \tfirst_value(z.evar11) IGNORE NULLS OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat, z.cont_url_incr\n                                                      ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as evar11,\n\n\t\t\tfirst_value(z.unbounce_variant) IGNORE NULLS OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat, z.cont_url_incr\n                                                      ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as unbounce_variant,\n\n            first_value(z.referrer) IGNORE NULLS OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat, z.cont_url_incr\n                                                        ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as referring_url,\n\n        \tfirst_value(z.date_time) IGNORE NULLS OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat, z.cont_url_incr\n                                                        ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as date_time,\n\n        \tfirst_value(z.date_time_gmt) IGNORE NULLS OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat, z.cont_url_incr\n                                   \t                 ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as date_time_gmt,\n\n        \tfirst_value(z.evar23) IGNORE NULLS OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat, z.cont_url_incr\n                                                        ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as evar23,\n\n        \tfirst_value(z.evar40) IGNORE NULLS OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat, z.cont_url_incr\n                                                        ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as evar40,\n\n        \tfirst_value(z.os_name) IGNORE NULLS OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat, z.cont_url_incr\n                                                        ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as os_name,\n\n        \tfirst_value(z.mobile_id) IGNORE NULLS OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat, z.cont_url_incr\n                                                        ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as mobile_id,\n\n\t        first_value(z.post_evar57) IGNORE NULLS OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat, z.cont_url_incr\n                                                        ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as post_evar57,\n\n        \tfirst_value(z.mvvar1) IGNORE NULLS OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat, z.cont_url_incr\n                                                        ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as mvvar1,\n\n            first_value(z.multicore_test_bucket_assignment) IGNORE NULLS OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat, z.cont_url_incr\n                       \t                             ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as multicore_test_bucket_assignment,\n\n            first_value(z.multicore_test_bucket_assignment) IGNORE NULLS OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat\n                                                        ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as multicore_test_bucket_assignment_visit_level,\n\n                 \tfirst_value(z.paypal_test_bucket_assignment) IGNORE NULLS OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat, z.cont_url_incr\n                                                        ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as paypal_test_bucket_assignment,\n\n            first_value(z.paypal_test_bucket_assignment) IGNORE NULLS OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat\n                                                        ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as paypal_test_bucket_assignment_visit_level,\n\n         \tz.cont_url_incr, z.url_incr_flag, z.visit_page_num,\n\n                 \t first_value(z.cta_test_bucket_assignment) IGNORE NULLS OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat, z.cont_url_incr\n                                                        ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as cta_test_bucket_assignment,\n\n\t        first_value(z.cta_test_bucket_assignment) IGNORE NULLS OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat\n                                                        ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as cta_test_bucket_assignment_visit_level,\n\n                 \tfirst_value(z.default_frequency_test_bucket_assignment) IGNORE NULLS OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat, z.cont_url_incr\n                \t                                    ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as default_frequency_test_bucket_assignment,\n\n            first_value(z.default_frequency_test_bucket_assignment) IGNORE NULLS OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat\n                                                        ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as default_frequency_test_bucket_assignment_visit_level,\n\n                 \tfirst_value(z.multicore_with_edit_test_bucket_assignment) IGNORE NULLS OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat, z.cont_url_incr\n                                                        ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as multicore_with_edit_test_bucket_assignment,\n\n            first_value(z.multicore_with_edit_test_bucket_assignment) IGNORE NULLS OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat\n                                                        ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as multicore_with_edit_test_bucket_assignment_visit_level,\n\n                 \tfirst_value(z.collection_details_headline_test_bucket_assignment) IGNORE NULLS OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat, z.cont_url_incr\n                                                        ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as collection_details_headline_test_bucket_assignment,\n\n            first_value(z.collection_details_headline_test_bucket_assignment) IGNORE NULLS OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat\n            \t                                        ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as collection_details_headline_test_bucket_assignment_visit_level,\n\n\t\t\tfirst_value(z.va_closer_id) OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat\n                                                ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as va_closer_id,\n\n\t\t\tfirst_value(z.va_finder_id) OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat\n                                                ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as va_finder_id,\n\n\n\t\t\tfirst_value(z.first_touch_channel) OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat\n                                                ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as first_touch_channel,\n\n\n\t\t\tfirst_value(z.last_touch_channel) OVER (PARTITION BY z.visit_start_time_gmt, z.visit_num, z.visid_concat\n                                                ORDER BY z.visit_page_num ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as last_touch_channel\n\n\n  \tFROM\n\n    \t(\n      \tSELECT y.*,\n         \tsum(y.url_incr_flag) OVER (PARTITION BY y.visid_concat, y.visit_num, y.visit_start_time_gmt\n                                      \tORDER BY y.visit_page_num rows unbounded preceding) as cont_url_incr\n\n          \tFROM\n             \t(\n              \tSELECT x.*,\n                   \tCASE WHEN x.url IS NULL or x.url = x.prior_url THEN 0 ELSE 1\n                   \tEND AS url_incr_flag\n\n          \tFROM\n    \t(\n              \tSELECT s.*,\n\n                       \t  case when s.mvvar1 like 'multiCoreTest:dailyEssentials%' then 'daily essentials'\nwhen s.mvvar1 like 'multiCoreTest:holding%' then 'holding'\nwhen s.mvvar1 like 'multiCoreTest:control%' then 'control'\nwhen s.mvvar1 like 'multiCoreTest:multiCoreSpinnerInterstitial%' then 'multi core spinner'\nwhen s.mvvar1 like 'multiCoreTest:multiCorePackageInterstitial%' then 'multi core package'\nend as multicore_test_bucket_assignment,\n\ncase when s.mvvar1 like '%paypalFullService:challenger%' then 'challenger'\nwhen s.mvvar1 like '%paypalFullService:holding%' then 'holding'\nwhen s.mvvar1 like '%paypalFullService:control%' then 'control'\nend as paypal_test_bucket_assignment,\n\ncase when s.mvvar1 like '%collectionDetailsCtaPlacement:ctaBelowPriceSticky%' then 'ctaBelowPriceSticky'\nwhen s.mvvar1 like '%collectionDetailsCtaPlacement:ctaWithPriceSticky%' then 'ctaWithPriceSticky'\nwhen s.mvvar1 like '%collectionDetailsCtaPlacement:ctaWithPriceInNav%' then 'ctaWithPriceInNav'\nwhen s.mvvar1 like '%collectionDetailsCtaPlacement:holding%' then 'holding'\nwhen s.mvvar1 like '%collectionDetailsCtaPlacement:control%' then 'control'\nend as cta_test_bucket_assignment,\n\ncase when s.mvvar1 like '%planFrequencyDefault:holding%' then 'holding'\nwhen s.mvvar1 like '%planFrequencyDefault:control%' then 'control'\nwhen s.mvvar1 like '%planFrequencyDefault:twoMonthTile%' then 'two month tile'\nend as default_frequency_test_bucket_assignment,\n\ncase when s.mvvar1 like 'multiCoreWithEditTest:holding%' then 'holding'\nwhen s.mvvar1 like 'multiCoreWithEditTest:control%' then 'control'\nwhen s.mvvar1 like 'multiCoreWithEditTest:withNoEdit%' then 'withNoEdit'\nwhen s.mvvar1 like 'multiCoreWithEditTest:withEdit%' then 'withEdit'\nend as multicore_with_edit_test_bucket_assignment,\n\ncase when s.mvvar1 like '%collectionDetailsCombinationHeadline:collectionCombinationName%' then 'collectionCombinationName'\nwhen s.mvvar1 like '%collectionDetailsCombinationHeadline:control%' then 'control'\nwhen s.mvvar1 like '%collectionDetailsCombinationHeadline:holding%' then 'holding'\nwhen s.mvvar1 like '%collectionDetailsCombinationHeadline:dailyEssentialsCombinationName%' then 'dailyEssentialsCombinationName'\nend as collection_details_headline_test_bucket_assignment,\n\n               \tlag(s.url,1) IGNORE NULLS OVER (PARTITION BY s.visid_concat, s.visit_num, s.visit_start_time_gmt\n                                                      ORDER BY s.visit_page_num) as prior_url,\n               \tlead(s.url,1) IGNORE NULLS OVER (PARTITION BY s.visid_concat, s.visit_num, s.visit_start_time_gmt\n                             \t                     ORDER BY s.visit_page_num) as next_url\n               \tFROM\n                  \t(SELECT a.date_time,\n                    \tconvert_timezone('PST8PDT','UTC', a.date_time) as date_time_gmt,\n                    \ta.visit_start_time_gmt,\n                    \ta.evar12 as url,\n                    \ta.page_url as g_url,\n                    \ta.evar11,\n                    \ta.post_visid_high||a.post_visid_low as visid_concat,\n                    \ta.mcvisid, a.visit_num, a.visit_page_num, a.ref_domain,\n                    \ta.referrer, a.ref_type, a.mobile_id, ol.os_name, a.post_campaign as post_evar57,\n                    \ta.evar40, a.transactionid, a.post_evar40, a.post_evar23, a.evar23,\n                    \ta.evar24, a.post_evar24, a.post_prop17, a.page_event, a.user_agent, a.ip,\n\na.va_closer_id,\ncase a.va_closer_id\nwhen 1 then 'Paid Search'\nwhen 2 then 'Email'\nwhen 3 then 'Social Networks Paid'\nwhen 4 then 'Native'\nwhen 5 then 'Offline'\nwhen 6 then 'Audio'\nwhen 7 then 'Organic Social'\nwhen 8 then 'Partner'\nwhen 9 then 'Display'\nwhen 10 then 'Influencer'\nwhen 11 then 'Video'\nwhen 12 then 'Referrals'\nwhen 13 then 'Public Relations'\nwhen 14 then 'Internal'\nwhen 15 then 'Orphaned Sessions'\nwhen 16 then 'Natural Search'\nwhen 17 then 'Undetermined Channel'\nwhen 18 then 'Referring Domains'\nwhen 19 then 'Direct'\nelse '-' end as last_touch_channel,\n\na.va_finder_id,\n\ncase a.va_finder_id\nwhen 1 then 'Paid Search'\nwhen 2 then 'Email'\nwhen 3 then 'Social Networks Paid'\nwhen 4 then 'Native'\nwhen 5 then 'Offline'\nwhen 6 then 'Audio'\nwhen 7 then 'Organic Social'\nwhen 8 then 'Partner'\nwhen 9 then 'Display'\nwhen 10 then 'Influencer'\nwhen 11 then 'Video'\nwhen 12 then 'Referrals'\nwhen 13 then 'Public Relations'\nwhen 14 then 'Internal'\nwhen 15 then 'Orphaned Sessions'\nwhen 16 then 'Natural Search'\nwhen 17 then 'Undetermined Channel'\nwhen 18 then 'Referring Domains'\nwhen 19 then 'Direct'\nelse '-' end as first_touch_channel,\n\n\n                                     \tcase when a.mvvar1 = 'undefined:undefined' then b.mvvar1\n\t\t\t\t\t\t\t\t\t\twhen b.mvvar1 is not null then b.mvvar1\n\t\t\t\t\t\t\t\t\t\t\telse a.mvvar1 end as mvvar1,\n\t\t\t\t\t\t\t\t\t\tuv.evar24 as unbounce_variant\n\n\n                        \tFROM stg.adobe_src_prod a\n                                            \tLEFT JOIN dmt.adobe_os ol on a.os = ol.os_id\n                                            \tleft join tmp.ab_test_assign_events b on a.post_visid_high||a.post_visid_low = b.visid_concat and a.visit_num = b.visit_num and a.visit_start_time_gmt = b.visit_start_time_gmt and a.prop7 = b.prop7\n\t\t\t\t\t\t\t\t\t\t\t\tleft join tmp.unbounce_variants uv on a.post_visid_high||a.post_visid_low = uv.visid_concat and a.visit_num = uv.visit_num and a.visit_start_time_gmt = uv.visit_start_time_gmt and a.prop7 = uv.prop7 and a.evar11 = uv.evar11\n\nwhere 1=1\nand a.username = 'dscnongdprprod'\nand a.user_agent NOT SIMILAR TO '%(bot|crawl|slurp|spider|archiv|spinn|sniff|seo|audit|survey|pingdom|worm|capture|\n(browser|screen)shots|analyz|index|thumb|check|facebook|YandexBot|Twitterbot|a_archiver|\nprerender|Prerender|facebookexternalhit|Bingbot|Googlebot|Baiduspider|360(Spider|User-agent)|semalt|HeadlessChrome|SpeedCurve)%'\nand a.user_server in ('www.dollarshaveclub.com','uk.dollarshaveclub.com','try.dollarshaveclub.com','content.dollarshaveclub.com','ca.dollarshaveclub.com','au.dollarshaveclub.com','help.dollarshaveclub.com','get.dollarshaveclub.com',\n'uk-help.dollarshaveclub.com','ca-help.dollarshaveclub.com','au-help.dollarshaveclub.com','ask.dollarshaveclub.com')\nand a.prop8 = 'WWW'\nand a.date_time >= dateadd('day', -3, current_date) ------------------------------------------------------------------------------------ DATE CHANGE!\n--and a.date_time < '2019-08-25'\n\n\n    \t) s\n    \t) x\n    \t) y\n    \t) z\n  ) zz\n\nwhere zz.url_incr_flag = 1\n\n;"
            }
        ],
        "transform.tmp.scheduled_cart_and_plan_item_chgs.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "sched_cart_item_chg_ts"
                    ]
                },
                "tables": [
                    "tmp.scheduled_cart_and_plan_item_chgs"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from tmp.scheduled_cart_and_plan_item_chgs where sched_cart_item_chg_ts >= dateadd('day', -3, current_date);"
            },
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "---------------------- DATE CHANGE!\n\ninsert into tmp.scheduled_cart_and_plan_item_chgs\n\nselect\np.id as plan_id, p.customer_id,\np.shop_id, cast(p.plan_created_at as timestamp) as plan_created_at,\n\nsc.id as scheduled_cart_id, cast(sc.scheduled_cart_created_at as timestamp) as scheduled_cart_created_at,\n\ncast(csci.rails_site_processed_at as timestamp) as sched_cart_item_chg_ts, csci.event, csci.sku, pr.internal_name, csci.quantity, csci.old_quantity, csci.new_quantity,\n\ncast(cpie.rails_site_processed_at as timestamp) as plan_item_chg_ts, cpie.event as plan_event, cpie.sku as plan_sku, cpie.quantity as plan_qty, cpie.old_quantity as plan_old_qty, cpie.new_quantity as plan_new_qty\n\nfrom stg.ps_plans p\njoin stg.ps_scheduled_carts sc on sc.plan_id = p.id\njoin stg.ps_change_scheduled_cart_item_events csci on csci.scheduled_cart_id = sc.id\njoin dmt.d_product pr on pr.sku = csci.sku\n\nleft join stg.ps_change_plan_item_events cpie on\n   \tcpie.plan_id = p.id\n   \tand cpie.sku = csci.sku\n   \tand cast(cpie.rails_site_processed_at as timestamp) >= dateadd('second', -10, cast(csci.rails_site_processed_at as timestamp))\n   \tand cast(cpie.rails_site_processed_at as timestamp) <= dateadd('second', 10, cast(csci.rails_site_processed_at as timestamp))\n   \tand left(csci.event, position('_' in csci.event)) = left(csci.event, position('_' in cpie.event))\n   \tand (cpie.quantity = csci.quantity or (cpie.old_quantity = csci.old_quantity and cpie.new_quantity = csci.new_quantity))\n\nwhere 1=1\n--and c.first_name = 'Adra'\n--and p.id = 252268\nand cast(csci.rails_site_processed_at as timestamp) >= dateadd('day', -3, current_date) \t\t---- DATE CHANGE!\n;"
            }
        ],
        "transform.tmp.adra_plans_and_order_items_poc.sql": [
            {
                "type": "CREATE",
                "columns": null,
                "tables": [
                    "tmp.adra_plans_and_order_items_poc"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "create table tmp.adra_plans_and_order_items_poc\n\ndistkey (order_id)\nsortkey (order_id, order_created_at)\n\nas\n\nselect c.obfuscated_id as obfuscated_customer_id, c.customer_id,\n\ncase when ax.customer_id is not null then 'acxiom match' else 'no acxiom data' end as acxiom_match, ax.age_in_two_year_increments_input_individual_8626, ax.gender_input_individual_8688,\n\n\nc.email, c.created_at as acct_created_at, ccc.customer_banned_at,\n\ncp.shop_id as plan_sub_shop_id, cp.bm_type, cp.customer_subscription_plan_id, cp.sub_plan_rank, cp.prev_type, cp.plan_conversion_source,\ncp.start_date_time, convert_timezone('UTC','PST8PDT', cp.start_date_time) as start_date_time_pst, cp.migrated_sub_start_date, convert_timezone('UTC','PST8PDT', cp.migrated_sub_start_date) as migrated_sub_start_date_time_pst, cp.end_date_time, convert_timezone('UTC','PST8PDT', cp.end_date_time) as end_date_time_pst,\n--floor(datediff(h,nvl(cp.migrated_sub_start_date, cp.start_date_time),cp.end_date_time)/24) as days_active,\ncp.churn_type, cp.cancel_reason, cp.funnel_sku_list, cp.funnel_sku_qty, cp.first_order_product_qty, cp.status_name, cp.frequency as current_plan_frequency, cp.next_bill_date_time as current_next_plan_bill_date,\n\ncp.original_frequency,\n\ncase when ibd.event = 'change_plan_bill_date' then ibd.old_bill_date else ibd.timestampy end as original_first_restock_box_date,\n\nfi.order_id, fi.order_created_at, fi.shipment_shipped_at, fi.shipment_status_name, fi.order_is_on_the_house,\n\nfi.order_sub_total, fi.amount_true, fi.order_total, fi.shipment_cost, fi.shipment_handling_cost, fi.invoice_status, fi.order_attribution_attribution_type, fi.order_creation_reason, fi.order_creation_source, fi.order_creation_reason_name, fi.plan_initial_invoice,\nrow_number() over (partition by cp.customer_id, fi.order_id) as order_dedupe_flag,\n\npmt.pmt_status as order_pmt_status, pmt.refunded_amount as order_refunded_amount, pmt.credit_card_type, pmt.payment_processed_at_ts,\n\noi.product_sku,\n\nrow_number() over (partition by oi.customer_id, oi.order_id, oi.product_sku) as order_sku_dedupe_flag,\n\n\noi.internal_name,\noi.class,\noi.class_type,\noi.type,\noi.nature, oi.quantity, oi.price, oi.unit_price, oi.effective_unit_price, oi.tax, oi.total_cost, oi.unit_cost, oi.cost_v2, oi.cost_v3, oi.cost_v4, --oi.parent_price, oi.parent_effective_unit_price, oi.parent_unit_price,\n\n/**coalesce(ia.plan_quantity, iav.plan_quantity) as plan_quantity, coalesce(ia.one_time_quantity, iav.one_time_quantity) as one_time_quantity,\ncase when coalesce(csci.quantity, csciv.quantity) - coalesce(csci.quantity_recurring, csciv.quantity_recurring) > 0 then coalesce(csci.quantity, csciv.quantity) - coalesce(csci.quantity_recurring, csciv.quantity_recurring) end as db_one_time_qty,\ncoalesce(csci.quantity, csciv.quantity) as db_ttl_onetime_and_recurring, coalesce(csci.quantity_recurring, csciv.quantity_recurring) as quantity_recurring,\ncase when coalesce(pias.sku, piasv.sku) is not null then 1 else 0 end as sku_in_plan_at_signup_flag, case when coalesce(pias.sku, piasv.sku) is not null then oi.quantity - coalesce(pias.initial_plan_qty, piasv.initial_plan_qty) end as qty_chg_for_sku_in_plan_at_signup,\n\ncase when coalesce(pias.sku, piasv.sku) is not null then coalesce(pias.initial_plan_qty, piasv.initial_plan_qty) else 0 end as initial_plan_qty,**/\n\niav.plan_quantity as plan_quantity, iav.one_time_quantity as one_time_quantity,\ncase when csciv.quantity - csciv.quantity_recurring > 0 then csciv.quantity - csciv.quantity_recurring end as db_one_time_qty,\ncsciv.quantity as db_ttl_onetime_and_recurring, csciv.quantity_recurring as quantity_recurring,\ncase when piasv.sku is not null then 1 else 0 end as sku_in_plan_at_signup_flag, case when piasv.sku is not null then oi.quantity - piasv.initial_plan_qty end as qty_chg_for_sku_in_plan_at_signup,\n\ncase when piasv.sku is not null then piasv.initial_plan_qty else 0 end as initial_plan_qty,\n\ncp.landing_url_without_params as landing_url_without_params, cp.first_utm_source as first_utm_source, cp.first_utm_medium as first_utm_medium, cp.ab_test_assignment as ab_test_assignment,\ncp.last_utm_medium as last_utm_medium, cp.last_utm_source as last_utm_source,\n\n--ss.first_ab_test_assignment as ab_test_assignment_ss, ss.init_url_excl_params as landing_url_without_params, ss.init_url_source as first_utm_source_ss, ss.init_url_medium as first_utm_medium_ss,\n--ss.utm_medium as last_utm_medium_ss, ss.utm_source as last_utm_source_ss,\nmca.prior_url as adobe_mc_table_prior_url, mca.two_prior as adobe_mc_table_two_prior_url, --cs.funnel as customer_sources_funnel,\n--ss.min_add_ons_page_ts, ss.init_referrer\navs.referring_url,\n\nhpa.url_without_params as halo_signup_add_to_plan_event_url, hpa.kafka_key as halo_signup_add_to_plan_event_kafka_key,\n\nhpaa.url_without_params as halo_signup_plan_impression_event_url, hpaa.kafka_key as halo_signup_plan_impression_event_kafka_key\n\nfrom dmt.d_customer_plan_360 cp\njoin dmt.d_customer c on cp.customer_id = c.customer_id\nleft join dmt.v_customer_acxiom ax on ax.customer_id = cp.customer_id\n\nleft join dmt.d_customer_360 ccc on ccc.customer_id = cp.customer_id\n\n--left join stg.customer_sources cs on cs.source = 'start_plan' and cs.customer_id = cp.customer_id and cs.plan_id = cp.customer_subscription_plan_id and cp.bm_type = 'plan'\n\n--left join stg.ps_plans p on cp.customer_subscription_plan_id = p.id and cp.bm_type = 'plan'\n/** left join (select plan_id, old_frequency\n       \tfrom (\n             \tselect  ce.plan_id\n                     \t,old_frequency\n                     \t,row_number() over (partition by plan_id order by ce.dsc_processed_at) as rank\n             \tfrom stg.ps_change_plan_attribute_events ce\n             \twhere event = 'change_plan_frequency') s\n             \twhere s.rank = 1) f on f.plan_id = cp.customer_subscription_plan_id and cp.bm_type = 'plan' **/\n\nleft join dmt.f_invoice fi on fi.customer_id = cp.customer_id and fi.order_created_at >= dateadd('minute', -1, cp.start_date_time) and (fi.order_created_at < dateadd('minute',1, cp.end_date_time) or cp.end_date_time is null) and fi.order_created_at >= '2018-01-01'\n\n--left join stg.erp_payments ep on fi.order_id = ep.order_id and fi.invoice_id = ep.invoice_id\n\nleft join (select ep.order_id, ep.invoice_id, ep.status as pmt_status, ep.credit_card_type, ep.refunded_amount, ep.processed_at_date_time as payment_processed_at_ts\nfrom stg.erp_payments ep\njoin\n(select ep.order_id, max(ep.id) as max_id\nfrom stg.erp_payments ep\n--where ep.order_id = 130715452\ngroup by 1) m on m.order_id = ep.order_id and m.max_id = ep.id) pmt on pmt.order_id = fi.order_id and pmt.invoice_id = fi.invoice_id\n\n--left join dmt.f_invoice_product fip on fip.order_id = fi.order_id\n\n\nleft join (\n\nselect fip.order_id, fip.customer_id, fip.product_sku, pr.internal_name, pr.class, pr.class_type, pr.type, fip.nature, fip.quantity, fip.price, fip.unit_price, fip.effective_unit_price, fip.tax, fip.total_cost, fip.unit_cost,\nsc.cost as cost_v2, scc.cost as cost_v3, scf.cost as cost_v4--,\n--fipp.price as parent_price, fipp.effective_unit_price as parent_effective_unit_price, fipp.unit_price as parent_unit_price, fip.top_level_invoice_item_sku\nfrom dmt.f_invoice_product fip\njoin dmt.d_product pr on fip.product_id = pr.product_id\nleft join tmp.skus_and_costs_v2 sc on sc.product_id = fip.product_id\nleft join tmp.skus_and_costs_v3 scc on scc.product_sku_root = left(fip.product_sku, len(fip.product_sku) - len(split_part(fip.product_sku, '-', (len(fip.product_sku) - len(translate(fip.product_sku,'-','')) + 1))))\nleft join tmp.skus_and_costs_v4 scf on left(scf.physical_sku, len(scf.physical_sku) - len(split_part(scf.physical_sku, '-', (len(scf.physical_sku) - len(translate(scf.physical_sku,'-','')) + 1)))) = left(fip.product_sku, len(fip.product_sku) - len(split_part(fip.product_sku, '-', (len(fip.product_sku) - len(translate(fip.product_sku,'-','')) + 1)))) and date_trunc('month', fip.shipment_created_at) = scf.monthy\n--left join dmt.f_invoice_product fipp on fipp.order_id = fip.order_id and fipp.product_sku = fip.top_level_invoice_item_sku and fipp.price > 0\nwhere pr.class <> 'Other'\n\n) oi on oi.order_id = fi.order_id\n\n--join dmt.d_product pr on fip.product_id = pr.product_id and pr.class <> 'Other'\n\n--left join stg.customer_cohort_members ccm on ccm.customer_id = c.customer_id and ccm.customer_cohort_id = '104'\n\nleft join dmt.adobe_visit_summary avs on avs.post_visid_high = cp.post_visid_high and avs.post_visid_low = cp.post_visid_low and avs.visit_num = cp.visit_num and avs.visit_start_time_gmt_epoch = cp.visit_start_time_gmt_epoch\n\n--left join tmp.test_agg_session ss on ss.evar23 = c.obfuscated_id and ss.min_complete_page_ts <= dateadd('minute', 5, cp.start_date_time) and ss.min_complete_page_ts >= dateadd('minute', -1, cp.start_date_time)\n\nleft join tmp.visit_level_getstartedcomplete_page_metadata mca on mca.post_visid_high = cp.post_visid_high and mca.post_visid_low = cp.post_visid_low and mca.visit_num = cp.visit_num and mca.visit_start_time_gmt = cp.visit_start_time_gmt_epoch\n\nleft join tmp.hl_prepurchase_actions hpa on hpa.obfuscated_order_id = cp.obfuscated_order_id and hpa.event_rank_desc = 1 and hpa.event_name = 'addToSubscription'\n\nleft join tmp.hl_prepurchase_actions hpaa on hpaa.obfuscated_order_id = cp.obfuscated_order_id and hpaa.event_rank_desc = 1 and hpaa.event_name = 'subscriptionSetImpression'\n\n/**left join (select fipp.order_id, fipp.product_sku, fipp.price, fipp.effective_unit_price, fipp.unit_price\nfrom dmt.f_invoice_product fipp\njoin dmt.d_customer c on fipp.customer_id = c.customer_id\nwhere c.first_name = 'Adra'\nand fipp.price > 0) fipp on fipp.order_id = fip.order_id and fipp.product_sku = fip.top_level_invoice_item_sku\n--left join tmp.parent_and_child_product_associations pac on pac.product_id = fip.product_id**/\n\n--left join dmt.f_invoice_product fipp on fipp.order_id = fip.order_id and fipp.product_sku = fip.top_level_invoice_item_sku and fipp.price > 0\n\n--left join tmp.skus_and_costs_v2 sc on sc.product_id = fip.product_id\n\n--left join tmp.plan_items_at_signup pias on pias.plan_id = cp.customer_subscription_plan_id and cp.bm_type = 'plan' and pias.sku = oi.top_level_invoice_item_sku -- trying to match physical sku\n\nleft join tmp.plan_items_at_signup piasv on piasv.plan_id = cp.customer_subscription_plan_id and cp.bm_type = 'plan' and piasv.sku = oi.product_sku -- match on virtual sku\n\n-- trying to match physical sku\n\n/**left join (\n\nselect cmb.customer_id, cmb.plan_id, cmb.scheduled_cart_id, cmb.sku, cmb.internal_name,\n\nsum(case when cmb.plan_event like 'change_%' then (cmb.plan_new_qty - cmb.plan_old_qty)\nwhen cmb.plan_event like 'add_%' then cmb.plan_qty\nwhen cmb.plan_event like 'remove_%' then -1*cmb.plan_qty end) as plan_quantity,\n\nsum(case when cmb.event like 'change_%' and cmb.plan_event is null then (cmb.new_quantity - cmb.old_quantity)\nwhen cmb.event like 'add_%' and cmb.plan_event is null then cmb.quantity\nwhen cmb.event like 'remove_%' and cmb.plan_event is null then -1*cmb.quantity end) as one_time_quantity\n\nfrom tmp.scheduled_cart_and_plan_item_chgs cmb\n\ngroup by 1,2,3,4,5\n\n) ia on ia.plan_id = cp.customer_subscription_plan_id and cp.bm_type = 'plan' and ia.customer_id = cp.customer_id and ia.scheduled_cart_id = fi.order_attribution_attribution_id and ia.sku = oi.top_level_invoice_item_sku **/\n\n--- adding left join on virtual sku\n\nleft join (\n\nselect cmb.customer_id, cmb.plan_id, cmb.scheduled_cart_id, cmb.sku, cmb.internal_name,\n\nsum(case when cmb.plan_event like 'change_%' then (cmb.plan_new_qty - cmb.plan_old_qty)\nwhen cmb.plan_event like 'add_%' then cmb.plan_qty\nwhen cmb.plan_event like 'remove_%' then -1*cmb.plan_qty end) as plan_quantity,\n\nsum(case when cmb.event like 'change_%' and cmb.plan_event is null then (cmb.new_quantity - cmb.old_quantity)\nwhen cmb.event like 'add_%' and cmb.plan_event is null then cmb.quantity\nwhen cmb.event like 'remove_%' and cmb.plan_event is null then -1*cmb.quantity end) as one_time_quantity\n\nfrom tmp.scheduled_cart_and_plan_item_chgs cmb\n\ngroup by 1,2,3,4,5\n\n) iav on iav.plan_id = cp.customer_subscription_plan_id and cp.bm_type = 'plan' and iav.customer_id = cp.customer_id and iav.scheduled_cart_id = fi.order_attribution_attribution_id and iav.sku = oi.product_sku\n\n-- match on physical sku\n-- left join stg.ps_close_scheduled_cart_items csci on csci.plan_id = cp.customer_subscription_plan_id and cp.bm_type = 'plan' and csci.scheduled_cart_id = fi.order_attribution_attribution_id and csci.product_sku = oi.top_level_invoice_item_sku\n\n-- match on virtual sku\nleft join stg.ps_close_scheduled_cart_items csciv on csciv.plan_id = cp.customer_subscription_plan_id and cp.bm_type = 'plan' and csciv.scheduled_cart_id = fi.order_attribution_attribution_id and csciv.product_sku = oi.product_sku\n\n\n left join (\n select bd.*, row_number() over (partition by bd.customer_id, bd.plan_id order by bd.timestampy) as ranky\nfrom tmp.adra_bill_dates_poc bd\n--where bd.email like 'adra.graves%'\n ) ibd on ibd.plan_id = cp.customer_subscription_plan_id and ibd.customer_id = cp.customer_id and ibd.ranky = 1\n\n\nwhere 1=1\n  and fi.order_created_at >= '2019-01-01' -- Added by Mallik to bring customer order data from year 2019 onwards\n--and c.first_name = 'Adra' ------------------------- testing filter\n--or c.customer_id = 11440006\n--and cp.start_date_time >= '2018-05-01'\n--and cp.start_date_time < '2018-09-27'\n--and cp.bm_type = 'plan'\n--and cp.plan_conversion_source is null\n\n\norder by c.created_at, fi.order_created_at, oi.product_sku;"
            }
        ],
        "transform.tmp.visit_level_max_ab_test_assignments.sql": [
            {
                "skipped": true,
                "value": "insert into tmp.visit_level_max_ab_test_assignments\n\n    select distinct ab.visid_concat\n                  , ab.visit_num\n                  , ab.visit_start_time_gmt\n                  , ab.mvvar1\n                  , ab.post_visid_high\n                  , ab.post_visid_low\n                  , ab.count_of_ab_tests_assigned\n    from tmp.ab_test_assign_events ab\n\njoin\n\n    (select ab.post_visid_high, ab.post_visid_low, ab.visit_num, ab.visit_start_time_gmt, max(ab.count_of_ab_tests_assigned) as max_test_count\n        from tmp.ab_test_assign_events ab\n--where ab.post_visid_high = 1773754313052489219 and ab.post_visid_low = 353576253348727901\n        group by 1,2,3,4) s on  s.post_visid_high = ab.post_visid_high\n        and s.post_visid_low = ab.post_visid_low\n        and s.visit_num = ab.visit_num\n        and ab.visit_start_time_gmt = s.visit_start_time_gmt\n        and ab.count_of_ab_tests_assigned = s.max_test_count;"
            }
        ],
        "transform.tmp.ltv_decile_all_members.sql": [
            {
                "skipped": true,
                "value": "create table tmp.ltv_decile_all_members\n\ndistkey (customer_id)\nsortkey (customer_id, cohort_month,month_end_date)\n\nas\n\n(select\nntile (10)\nover (\npartition by cohort_month,tenure_month_group,true_plan_rank\norder by customer_gm desc\n) decile_value_tier,\ncuml_order,\ncuml_revenue,\n(cuml_revenue-cuml_cost) as customer_gm,\ncustomer_id,\n tenure_month_group,\n tenure_months,\nmonth_end_date,\n cohort_month,\nbm_type,\ntrue_plan_rank,\nfunnel_sku_list,\nfirst_utm_source,\nfirst_utm_medium,\nlanding_url_without_params,\noriginal_frequency\nfrom\n(\nselect max(cuml_order) cuml_order,\nmax(cuml_revenue) cuml_revenue,\nmax(cuml_customer_cogs) cuml_cost,\ncustomer_id,\ntrue_plan_rank,\n tenure_month_group,\n tenure_months,\nmonth_end_date,\n cohort_month,\nbm_type,\nfunnel_sku_list,\nfirst_utm_source,\nfirst_utm_medium,\nlanding_url_without_params,\noriginal_frequency\nfrom\n(\nselect  a.customer_id,\n tenure_month_group,\n tenure_months,\n true_plan_rank,\n bm_type,\ncohort_month,\nfunnel_sku_list,\nfirst_utm_source,\nfirst_utm_medium,\nlanding_url_without_params,\noriginal_frequency,\nmonth_end_date ,\namount_true,\ncount (i.primary_shipment_uuid) over (partition by a.customer_id,true_plan_rank order by month_end_date,tenure_month_group,true_plan_rank  rows unbounded preceding) as cuml_order,\nsum(amount_true) over (partition by a.customer_id ,true_plan_rank order by month_end_date,tenure_month_group,true_plan_rank  rows unbounded preceding) as cuml_revenue,\nsum(order_cogs) over(partition by a.customer_id ,true_plan_rank order by month_end_date,tenure_month_group,true_plan_rank  rows unbounded preceding)as cuml_customer_cogs\nfrom\n(\nselect distinct\ndate_trunc('month',start_date_time ) cohort_month,\nmonth_end_date,\ntrue_plan_rank,\nbm_type,\ncase when round (months_between( month_end_date ,start_date_time))>=0\nand round (months_between( month_end_date ,start_date_time)) <=3 then '0-3'\n when round (months_between( month_end_date ,start_date_time))>=4\nand round (months_between( month_end_date ,start_date_time)) <=6 then '4-6'\nwhen round (months_between( month_end_date,start_date_time))>=7\nand round (months_between( month_end_date ,start_date_time)) <=9 then '7-9'\n when round (months_between( month_end_date  ,start_date_time))>=10\nand round (months_between( month_end_date  ,start_date_time)) <=12 then '10-12'\n when round (months_between( month_end_date  ,start_date_time))>=13\nand round (months_between( month_end_date ,start_date_time)) <=15 then '13-15'\nwhen round (months_between( month_end_date  ,start_date_time))>=16\nand round (months_between( month_end_date ,start_date_time)) <=18 then '16-18'\nwhen round (months_between( month_end_date  ,start_date_time))>=19\nand round (months_between( month_end_date ,start_date_time)) <=24 then '19-24'\nwhen round (months_between( month_end_date  ,start_date_time))>=25\nand round (months_between( month_end_date ,start_date_time)) <=36 then '25-36'\nwhen round (months_between( month_end_date  ,start_date_time))>=36\nand round (months_between( month_end_date ,start_date_time)) <=48 then '36-48'\nelse '49+' end tenure_month_group\n,\nround (months_between( nvl(month_end_date ,getdate()) ,start_date_time)) tenure_months,\nc.customer_id customer_id,\nfunnel_sku_list,\noriginal_frequency,\nfirst_utm_source,\nfirst_utm_medium,\nlanding_url_without_params,\nstart_date_time,\ncase when migrated_plan_status_bucketed is not null then date_trunc('day', migrated_plan_end_date_time)\n    else date_trunc('day', c.end_date_time)\n    end  true_end_date_time\nfrom tmp.sds_plan_level c\njoin dmt.d_date d\non d.date between trunc(start_date_time) and nvl(case when migrated_plan_status_bucketed is not null\nthen date_trunc('day', migrated_plan_end_date_time)\n    else date_trunc('day', c.end_date_time)\n    end,getdate() )\nand plan_conversion_source is null\nwhere\nshop_id=1\nand start_date_time>='2017-01-01'\n) a\nleft outer join tmp.sds_order_level i\non  a.customer_id=i.customer_id\nand concat( extract (month from shipment_created_at ),extract (year from shipment_created_at ))=concat( extract (month from month_end_date ),extract (year from month_end_date ))\nleft outer join tmp.cogs_order_us cg\non cg.order_id=i.order_id\nand i.shop_id=1\nand i.shipment_shipped_at is not null\nand i.invoice_status='paid'\nand i.invoice_created_at >='2017-01-01') tmp\ngroup by\ncustomer_id,\n tenure_month_group,\n tenure_months,\n cohort_month,\nmonth_end_date,\n true_plan_rank,\nbm_type,\nfunnel_sku_list,\nfirst_utm_source,\nfirst_utm_medium,\nlanding_url_without_params,\noriginal_frequency\n) tmp\n);"
            }
        ],
        "transform.tmp.sds_customer_level.sql": [
            {
                "type": "CREATE",
                "columns": null,
                "tables": [
                    "tmp.sds_customer_level"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "CREATE TABLE tmp.sds_customer_level\n\nDISTKEY (customer_id)\nSORTKEY (employee_email_flag, banned_customer_flag, customer_original_business_model, customer_original_poe)\n\nAS\n\nWITH min_order_dates AS\n(\n    SELECT DISTINCT o.customer_id\n           , MIN(o.invoice_created_at) AS first_invoice_date\n    FROM tmp.sds_order_level o\n    INNER JOIN dmt.f_invoice i\n        ON i.customer_id = o.customer_id\n        AND i.invoice_id = o.invoice_id\n    WHERE 1=1\n        AND o.invoice_status = 'paid'\n        AND (i.order_creation_source <> 'msa' and i.order_creation_source <> 'fulfillment_monitor')\n    GROUP BY 1\n),\n\n-- get latest order for all customers\nmax_order_dates AS\n(\n    SELECT DISTINCT o.customer_id\n           , MAX(o.invoice_created_at) AS latest_invoice_date\n    FROM tmp.sds_order_level o\n    INNER JOIN dmt.f_invoice i\n        ON i.customer_id = o.customer_id\n        AND i.invoice_id = o.invoice_id\n    WHERE 1=1\n        AND o.invoice_status = 'paid'\n        AND (i.order_creation_source <> 'msa' and i.order_creation_source <> 'fulfillment_monitor')\n    GROUP BY 1\n),\n\n-- select customer, order box type, and invoice date filtered for the first order record\nfirst_time_orders AS\n(\n    SELECT DISTINCT o.customer_id\n           , o.order_box_type\n           , o.invoice_created_at\n    FROM tmp.sds_order_level o\n    INNER JOIN min_order_dates m\n        ON o.customer_id = m.customer_id\n        AND o.invoice_created_at = m.first_invoice_date\n),\n\n-- select customer, order box type, and invoice date filtered for the last order record\nlatest_orders AS\n(\n    SELECT DISTINCT o.customer_id\n           , o.order_box_type\n           , o.invoice_created_at\n    FROM tmp.sds_order_level o\n    INNER JOIN max_order_dates m\n        ON o.customer_id = m.customer_id\n        AND o.invoice_created_at = m.latest_invoice_date\n),\n\n--current and original plan data\ncurrent_and_original_plan_data AS\n(\n\tSELECT a.customer_id\n\t, a.customer_subscription_plan_id as current_plan_id\n\t, a.sub_plan_rank as current_plan_rank -- not migration agnostic\n\t, c.customer_subscription_plan_id as original_plan_id\n\t, CASE \n\t\tWHEN a.plan_conversion_source IS NOT NULL THEN a.migrated_sub_start_date\n\t\tELSE a.start_date_time\n\tEND as current_plan_start_date_time\n\t, c.start_date_time as original_plan_start_date_time\n\t, a.end_date_Time current_plan_end_date_time --null if active\n\tFROM dmt.d_customer_plan_360 a\n\tJOIN (\n\t\t\tSELECT customer_id, max(start_date_Time) max_start_date_time\n\t\t\tFROM dmt.d_customer_plan_360\n\t\t\tGROUP BY 1) b\n\t\tON a.start_date_time = b.max_start_date_time\n\t\tAND a.customer_id = b.customer_id\n\tJOIN dmt.d_customer_plan_360 c\n\t\tON a.customer_id = c.customer_id\n\t\tAND c.sub_plan_rank = 1\n),\n\nfirst_member_type AS\n(\n    SELECT a.*\n           , CASE WHEN (DATE(c.original_plan_start_date_time) IS NULL OR DATE(c.original_plan_start_date_time) > DATE(a.invoice_created_at))\n--                AND (a.order_box_type IS NULL OR a.order_box_type = 'unknown' OR a.order_box_type = 'on_demand_out_of_plan')\n            THEN 'on_demand'\n              WHEN (DATE(c.original_plan_start_date_time) IS NOT NULL AND DATE(c.original_plan_start_date_time) <= DATE(a.invoice_created_at))\n--                AND a.order_box_type IS NOT NULL\n            THEN 'subscriber' END AS member_type\n    FROM first_time_orders a\n    LEFT JOIN current_and_original_plan_data c\n    ON a.customer_id = c.customer_id\n),\n\ncurrent_member_type AS\n(\n    SELECT b.*\n\t, CASE\n\t\tWHEN b.order_box_type IN ('plan_initial', 'on_demand_in_plan', 'recurring', 'plan_funnel') THEN 'subscriber'\n\t\t--WHEN d.original_plan_id is null then 'on_demand'\n\t\t--WHEN d.current_plan_end_date_time is null then 'subscriber'\n\t\tELSE 'on_demand'\n\tEND AS member_type\n    FROM latest_orders b\n\tLEFT JOIN current_and_original_plan_data c\n\tON c.customer_id = b.customer_id\n)\n\nSELECT\n--transform date fields to date, week, month\nc360.customer_id\n, c360.obfuscated_id\n, c360.customer_created_at\n, c.email\n-- FLAG whether the email is a DSC employee email\n, CASE\n\tWHEN c.email LIKE '%@dollarshaveclub%' THEN 'DSC Employee'\n\tELSE 'Non-Employee'\n\tEND AS Employee_Email_Flag\n-- Flag whether the customer is banned by member engagement\n, CASE\n\tWHEN c360.customer_banned_at IS null THEN 'Permitted'\n\tELSE 'Banned'\n\tEND AS Banned_Customer_Flag\n, c360.customer_banned_at\n-- first ever plan/sub start date...for SHELL this will be null\n, p360.start_date_time AS customer_original_start_date_time\n, date_trunc('day', p360.start_date_time) AS customer_original_start_date_day\n, date_trunc('week', p360.start_date_time) AS customer_original_start_date_week\n, date_trunc('month', p360.start_date_time) AS customer_original_start_date_month\n-- original business type\n, CASE\n\tWHEN p360.bm_type = 'sub' then 'Classic'\n\tWHEN p360.bm_type = 'plan' then 'Full Service'\n\tELSE p360.bm_type\n\tEND AS customer_original_business_model\n, p360.funnel_sku_list\n-- POE MAPPING\n, CASE\n\tWHEN p360.start_date_time IS null THEN null\n-- ALIGNS WITH FP&A\n\tWHEN p360.start_date_time IS NOT null\n\t\tAND p360.bm_type = 'sub' then 'Classic'\n\tWHEN p360.start_date_time::date <= '2018-07-10'\n\t\tAND p360.funnel_sku_list LIKE '%BN2-EX-SB3%'\n\t\tTHEN 'Shave Core'\n\tWHEN (poe.funnel_sku_list_logic LIKE 'Ultimate%') THEN poe.funnel_sku_list_logic\n\tWHEN ((p360.analytics = 'adobe' \n\t\t\tAND pma.prior_url LIKE '%.dollarshaveclub.com/get-started/review'\n\t\t\tAND pma.complete_page_ts_pst >= '2019-08-28')\n\t\tOR (p360.analytics = 'ga'\n\t\t\tAND pmga.prior_url = '/get-started/review'\n\t\t\tAND pmga.complete_page_ts_pst >= '2019-08-28'))\n\t\tTHEN 'Questionnaire Funnel'\n\tWHEN poe.funnel_sku_list IS NOT null\n\t\tTHEN poe.funnel_sku_list_logic\n\tWHEN p360.funnel_sku_list IS null THEN 'Other'\n\tELSE 'Requires Mapping'\n\tEND AS customer_original_poe\n, p360.original_frequency\n-- Customer was every migrated flag\n, CASE\n\tWHEN c360.plan_conversion_source IS NOT null THEN 'Migrated'\n\tELSE 'Not Migrated'\n\tEND AS Customer_Migrated_Flag\n, c360.plan_conversion_source AS customer_plan_conversion_source\n-- flag for forced flat conslidation cohorts\n, CASE\n\tWHEN cfc.cohort_name IS NOT null THEN 'Force_Consolidated'\n\tELSE 'Not Consolidated'\n\tEND AS Forced_Consolidation_Flag\n,cfc.rough_consolidated_date\n,cfc.cohort_name AS Forced_Consolidation_Cohort_Name\n, CASE WHEN c360.customer_created_at > '2018-01-01' THEN\n\tCASE WHEN fto.customer_id is null then 'shell' ELSE fmt.member_type END END AS initial_member_type\n, CASE WHEN c360.customer_created_at > '2018-01-01' THEN\n\tCASE WHEN fto.customer_id is null then 'shell' ELSE cmt.member_type END END as current_member_type\nFROM dmt.d_customer_360 c360\nLEFT JOIN dmt.d_customer c\n\tON c.customer_id = c360.customer_id\nLEFT JOIN dmt.d_customer_plan_360 p360\n\tON p360.customer_id = c360.customer_id\n\t\tAND p360.sub_plan_rank = 1\nLEFT JOIN tmp.sep_oct_dec_2019_consolidated_flats_cohorts cfc\n\tON cfc.customer_id = c360.customer_id\n\tAND cfc.cohort_name <> 'ConsFlatsControlCohort'\nLEFT JOIN tmp.francesca_poe_mapping poe\n\tON poe.funnel_sku_list = p360.funnel_sku_list\n-- the following join duplicates about ~160 customers\nLEFT JOIN tmp.visit_level_getstartedcomplete_page_metadata pma\n\tON pma.post_visid_high = p360.post_visid_high\n\tAND pma.post_visid_low = p360.post_visid_low\n\tAND pma.visit_num = p360.visit_num\n\tAND pma.visit_start_time_gmt = p360.visit_start_time_gmt_epoch\n\tAND p360.analytics = 'adobe'\nLEFT JOIN dmt.ga_visit_level_getstartedcomplete_page_metadata pmga\n\tON p360.visit_id = pmga.visit_id\n\tand p360.analytics = 'ga'\n-- join for customer member_types\nLEFT JOIN first_member_type fmt\n    ON c.customer_id = fmt.customer_id\nLEFT JOIN current_member_type cmt\n    ON c.customer_id = cmt.customer_id\nLEFT JOIN first_time_orders fto\non fto.customer_id = c360.customer_id\nLEFT JOIN latest_orders lo\non lo.customer_id = c360.customer_id\nWHERE 1=1\n;"
            }
        ],
        "transform.tmp.test_agg_session.sql": [
            {
                "skipped": true,
                "value": "create table tmp.test_agg_session\n\n\ndistkey (visid_concat)\nsortkey (visit_start_ts_gmt)\n\nas\n\nselect x.*,\n\n       case when x.init_url_medium like '%cpc%' then 'Paid Search'\n            when x.init_url_medium like '%ema%' then 'Email'\n            when (x.init_url_medium like '%snp%' or (x.init_url_medium like '%social%' and x.init_url_medium like '%network%' and x.init_url_medium like '%paid%')) then 'Social Networks Paid'\n            when x.init_url_medium like '%nat%' or x.init_url_medium like '%syn%' then 'Native'\n            when (x.init_url_medium like '%pri%' or x.init_url_medium like '%ooh%' or x.init_url_medium like '%drm%' or x.init_url_medium like '%ins%' or x.init_url_medium like '%otv%' or x.init_url_medium like '%wom%') then 'Offline'\n            when x.init_url_medium like '%pod%' or x.init_url_medium like '%rad%' or x.init_url_medium like '%str%' then 'Audio'\n            when x.init_url_medium like '%soc%' then 'Organic Social'\n            when x.init_url_medium like '%inc%' or x.init_url_medium like '%aff%' or x.init_url_medium like '%par%' or x.init_url_medium like '%app%' or x.init_url_medium like '%mar%' then 'Partner'\n            when x.init_url_medium like '%dis%' then 'Display'\n            when (x.init_url_medium like '%inf%' or x.init_url_source like '%seis%' or x.init_url_source like '%veri%' or x.init_url_source like '%fame%') then 'Influencer'\n            when (x.init_url_medium like '%olv%' or x.init_url_medium like '%atv%' or x.init_url_medium like '%vid%') then 'Video'\n            when x.init_url_medium like '%ref%' then 'Referrals'\n            when x.init_url_medium like '%pur%' then 'Public Relations'\n            when (x.init_url_medium like '%mob%' or x.init_url_medium like '%mem%' or x.init_url_medium like '%mel%') then 'Internal'\n\n            when x.init_referrer like '%dollarshaveclub%' then 'Orphaned Sessions'\n            when x.init_referrer similar to '%(google|bing|yahoo)%' then 'Natural Search'\n            when x.init_url_medium is not null then 'Undetermined Channel'\n            when x.init_referrer is not null then 'Referring Domains'\n            when x.init_referrer is null then 'Direct'\n\n           else null\n            end as channel\n\nfrom\n\n(\nselect s.visid_concat, s.visit_num, s.visit_start_time_gmt, s.mcvisid, split_part(s.post_evar57,':',2) as utm_source, split_part(s.post_evar57,':',3) as utm_medium,--s.utm_source, s.utm_medium,\n\ns.post_evar57, first_ab_test_assignment, s.multicore_test_bucket_assignment_visit_level, s.default_frequency_test_bucket_assignment_visit_level, s.mobile_id, s.os_name,\ns.init_landing_url, split_part(s.init_landing_url, '?', 1) as init_url_excl_params, s.init_url_medium, s.init_url_source, s.init_url_unbounce_variant, s.init_referrer, s.init_ref_domain, s.visit_entry_type, s.evar23, s.evar40,\ns.va_finder_id, s.first_touch_channel, s.va_closer_id, s.last_touch_channel,\n\nmin(s.date_time_gmt) as visit_start_ts_gmt,\nmin(s.date_time) as visit_start_ts,\nmax(s.date_time_gmt) as visit_end_ts_gmt,\nmax(s.date_time) as visit_end_ts,\n\nmin(case when s.evar11 like '%login%' then s.date_time_gmt end) as min_visit_login_ts,\nmin(case when s.evar11 like '%https://www.dollarshaveclub.com/get-started/plan/daily-essentials%' then s.date_time_gmt end) as min_daily_essentials_page_ts,\nmin(case when s.evar11 like '%https://www.dollarshaveclub.com/get-started/plan/options%' then s.date_time_gmt end) as min_options_page_ts,\nmin(case when s.evar11 like '%https://www.dollarshaveclub.com/get-started/plan/shave%' then s.date_time_gmt end) as min_shave_core_page_ts,\n\nmin(case when s.evar11 like '%https://www.dollarshaveclub.com/get-started/add-ons%' then s.date_time_gmt end) as min_add_ons_page_ts,\n\nmin(case when s.evar11 like '%https://www.dollarshaveclub.com/get-started/plan/shower%'\nor s.evar11 like '%https://www.dollarshaveclub.com/get-started/plan/oral-care%'\nor s.evar11 like '%https://www.dollarshaveclub.com/get-started/plan/shave%'\nor s.evar11 like '%https://www.dollarshaveclub.com/get-started/plan/shower,oral-care%'\nor s.evar11 like '%https://www.dollarshaveclub.com/get-started/plan/shave,oral-care%'\nor s.evar11 like '%https://www.dollarshaveclub.com/get-started/plan/shave,shower%'\nor s.evar11 like '%https://www.dollarshaveclub.com/get-started/plan/shave,shower,oral-care%'\nthen s.date_time_gmt end) as min_multicore_page_ts,\n\nmin(case when s.evar11 like '%https://www.dollarshaveclub.com/get-started/plan/shower%'\nor s.evar11 like '%https://www.dollarshaveclub.com/get-started/plan/oral-care%'\nor s.evar11 like '%https://www.dollarshaveclub.com/get-started/plan/shave%'\nor s.evar11 like '%https://www.dollarshaveclub.com/get-started/plan/shower,oral-care%'\nor s.evar11 like '%https://www.dollarshaveclub.com/get-started/plan/shave,oral-care%'\nor s.evar11 like '%https://www.dollarshaveclub.com/get-started/plan/shave,shower%'\nor s.evar11 like '%https://www.dollarshaveclub.com/get-started/plan/shave,shower,oral-care%'\nor s.evar11 like 'https://try.dollarshaveclub.com/build-your-starter-set%'\nor s.evar11 like 'https://try.dollarshaveclub.com/ultimate-shave/%'\nor s.evar11 like 'https://try.dollarshaveclub.com/the-daily-essentials/%'\nor s.evar11 like 'https://try.dollarshaveclub.com/daily-essentials/%'\nor s.evar11 like 'https://try.dollarshaveclub.com/ultimate-shave-series-2/%'\nor s.evar11 like '%https://www.dollarshaveclub.com/get-started/plan/daily-essentials%'\nor s.evar11 like '%https://www.dollarshaveclub.com/get-started/plan/ultimate-shave-starter-set%'\nthen s.date_time_gmt end) as min_product_plan_detail_page_ts,\n\nmin(case when s.evar11 like '%https://www.dollarshaveclub.com/get-started/join%' then s.date_time_gmt end) as min_join_page_ts,\nmin(case when s.evar11 like '%https://www.dollarshaveclub.com/get-started/checkout%' then s.date_time_gmt end) as min_checkout_page_ts,\nmin(case when s.evar11 like '%https://www.dollarshaveclub.com/get-started/complete%' or s.evar11 like 'https://www.dollarshaveclub.com/upgrade/congratulations%' then s.date_time_gmt end) as min_complete_page_ts,\n\nmin(case when s.evar11 like '%https://www.dollarshaveclub.com/get-started/plan-frequency%' then s.date_time_gmt end) as min_frequency_edit_page_ts,\nmin(case when s.evar11 like '%https://www.dollarshaveclub.com/get-started/%' and s.evar11 like '%/edit' then s.date_time_gmt end) as min_plan_item_edit_page_ts,\n\ncount(1) as est_pv_count,\n\nsum(case when\n   s.evar11 like '%https://www.dollarshaveclub.com/get-started/plan/shower%'\nor s.evar11 like '%https://www.dollarshaveclub.com/get-started/plan/oral-care%'\nor s.evar11 like '%https://www.dollarshaveclub.com/get-started/plan/shave%'\nor s.evar11 like '%https://www.dollarshaveclub.com/get-started/plan/shower,oral-care%'\nor s.evar11 like '%https://www.dollarshaveclub.com/get-started/plan/shave,oral-care%'\nor s.evar11 like '%https://www.dollarshaveclub.com/get-started/plan/shave,shower%'\nor s.evar11 like '%https://www.dollarshaveclub.com/get-started/plan/shave,shower,oral-care%'\nthen 1 else 0 end) as multicore_pageviews\n\nfrom\n\n(select\n\nm.visid_concat, m.visit_num, m.visit_start_time_gmt, m.mcvisid, --split_part(m.post_evar57,':',2) as utm_source, split_part(m.post_evar57,':',3) as utm_medium,\n\nlast_value(m.post_evar57) over (partition by m.visid_concat, m.visit_num, m.visit_start_time_gmt order by m.date_time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as post_evar57,\n\nfirst_value(m.mvvar1) IGNORE NULLS over (partition by m.visid_concat, m.visit_num, m.visit_start_time_gmt order by m.date_time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as first_ab_test_assignment,\n\nfirst_value(m.unbounce_variant) over (partition by m.visid_concat, m.visit_num, m.visit_start_time_gmt order by m.date_time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as init_url_unbounce_variant,\n\nfirst_value(m.va_finder_id) over (partition by m.visid_concat, m.visit_num, m.visit_start_time_gmt order by m.date_time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as va_finder_id,\nfirst_value(m.first_touch_channel) over (partition by m.visid_concat, m.visit_num, m.visit_start_time_gmt order by m.date_time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as first_touch_channel,\nfirst_value(m.va_closer_id) over (partition by m.visid_concat, m.visit_num, m.visit_start_time_gmt order by m.date_time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as va_closer_id,\nfirst_value(m.last_touch_channel) over (partition by m.visid_concat, m.visit_num, m.visit_start_time_gmt order by m.date_time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as last_touch_channel,\n\n\nm.multicore_test_bucket_assignment_visit_level, m.default_frequency_test_bucket_assignment_visit_level,\nfirst_value(m.mobile_id) over (partition by m.visid_concat, m.visit_num, m.visit_start_time_gmt order by m.date_time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as mobile_id,\nfirst_value(m.os_name) over (partition by m.visid_concat, m.visit_num, m.visit_start_time_gmt order by m.date_time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as os_name,\nm.init_landing_url,\n--first_value(m.evar11) over (partition by m.visid_concat, m.visit_num, m.visit_start_time_gmt order by m.date_time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as init_url_excl_params,\n\ncase when position('utm_medium=' in m.init_landing_url) > 0 then split_part(substring(m.init_landing_url, position('utm_medium=' in m.init_landing_url) + 11, 10),'&',1) end as init_url_medium,\ncase when position('utm_source=' in m.init_landing_url) > 0 then split_part(substring(m.init_landing_url, position('utm_source=' in m.init_landing_url) + 11, 10),'&',1) end as init_url_source,\n\nm.init_referrer, m.init_ref_domain,\n\ncase when m.init_landing_url = 'https://www.dollarshaveclub.com/' then 'home page entry'\nwhen m.init_landing_url like 'https://www.dollarshaveclub.com/get-started/plan/shave?minimal%'\nor m.init_landing_url like 'https://www.dollarshaveclub.com/get-started/plan/daily-essentials?minimal%'\nor m.init_landing_url like 'https://www.dollarshaveclub.com/get-started/plan/daily-essentials?utm_%'\nor m.init_landing_url like 'https://www.dollarshaveclub.com/get-started/plan/options?minimal%'\nor m.init_landing_url like 'https://www.dollarshaveclub.com/get-started/plan/oral-care?utm_%'\nor m.init_landing_url like 'https://www.dollarshaveclub.com/get-started/plan/shave?utm_%'\nor m.init_landing_url like 'https://www.dollarshaveclub.com/get-started/plan/shave,shower,oral-care?utm_%'\nor m.init_landing_url like 'https://www.dollarshaveclub.com/get-started/plan/shower?utm_%'\nor m.init_landing_url like 'https://try.dollarshaveclub.com/build-your-starter-set%'\nor m.init_landing_url like 'https://try.dollarshaveclub.com/ultimate-shave/%'\nor m.init_landing_url like 'https://try.dollarshaveclub.com/the-daily-essentials/%'\nor m.init_landing_url like 'https://www.dollarshaveclub.com/get-started/plan/shave,oral-care?utm%'\nor m.init_landing_url like 'https://www.dollarshaveclub.com/get-started/plan/shower,oral-care?utm%'\nor m.init_landing_url like 'https://www.dollarshaveclub.com/get-started/plan/shave,shower?utm%'\n\nthen 'full service paid'\nwhen m.init_landing_url like 'https://try.dollarshaveclub.com%' or m.init_referrer like 'https://try.dollarshaveclub.com%' then 'try. entry'\nwhen m.init_landing_url like 'https://content.dollarshaveclub.com%' then 'content. referral'\nwhen m.init_landing_url like 'https://help.dollarshaveclub.com%' or m.init_landing_url like 'https://ask.dollarshaveclub.com%' then 'help. referral'\nelse 'other'\nend as visit_entry_type,\n\nm.date_time_gmt, m.date_time, m.evar11,\n\nfirst_value(case when len(m.evar23) > 11 then m.evar23 end) IGNORE NULLS over (partition by m.visid_concat, m.visit_num, m.visit_start_time_gmt order by m.date_time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as evar23,\nfirst_value(m.evar40) IGNORE NULLS over (partition by m.visid_concat, m.visit_num, m.visit_start_time_gmt order by m.date_time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as evar40\n\nfrom tmp.visitor_url_table_multicore_test m\n\n--where m.date_time_gmt >= '2019-01-07'\n--and m.date_time_gmt < '2019-01-08'\n\n) s\n\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26) x\n\n--limit 100\n;"
            }
        ],
        "transform.tmp.daily_active_subs_and_frequency_poc.sql": [
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "d.date",
                        "c.customer_id",
                        "c.email",
                        "cp.bm_type",
                        "cp.customer_subscription_plan_id"
                    ]
                },
                "tables": [
                    "tmp.daily_active_subs_and_frequency_poc"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "create table tmp.daily_active_subs_and_frequency_poc\n\ndistkey(customer_id)\nsortkey(customer_id, customer_subscription_plan_id)\n\nas\n\nselect d.date, c.customer_id, c.email, cp.bm_type, cp.customer_subscription_plan_id, --cp.start_date_time, cp.end_date_time,\n\n/**case\n\twhen cp.bm_type = 'plan' and cpf.new_frequency is not null then cpf.new_frequency\n\twhen cp.bm_type = 'plan' and cpf.new_frequency is null then cp.original_frequency\n\twhen cp.bm_type = 'sub' and scf.new_frequency is not null then scf.new_frequency\n\twhen cp.bm_type = 'sub' and scf.new_frequency is null and cof.old_frequency is not null then cof.old_frequency\n\twhen cp.bm_type = 'sub' and scf.new_frequency is null and cof.old_frequency is null then cp.frequency end as historical_frequency_v1, **/\n\ncase\n\twhen cp.bm_type = 'plan' then nvl(cpf.new_frequency, cp.original_frequency)\n\twhen cp.bm_type = 'sub' then nvl(scf.new_frequency, cof.old_frequency, cp.frequency)\n\tend as historical_frequency\n\t/**,\n\ncpf.new_frequency as plan_new_frequency, scf.new_frequency as sub_new_frequency, cof.old_frequency as sub_old_frequency, cp.original_frequency, cp.frequency**/\n\nfrom dmt.d_customer_plan_360 cp\njoin dmt.d_customer c on cp.customer_id = c.customer_id\n\njoin dmt.d_date d on d.date >= date_trunc('day',cp.start_date_time) and d.date < coalesce(date_trunc('day',cp.end_date_time), current_date) and d.date >= '2017-01-01' and d.date < current_date\n\nleft join (select s.customer_id, s.sub_id, s.old_frequency\n       \tfrom (\n             \tselect  cl.customer_id\n\t\t\t\t\t\t,cl.entity_id as sub_id\n                     \t,cl.data3 as old_frequency\n                     \t,row_number() over (partition by cl.customer_id, cl.entity_id order by cl.created_at) as rank\n             \tfrom spectrum.dsc_customer_logs cl) s\n             \twhere s.rank = 1) cof on cof.customer_id = cp.customer_id and cof.sub_id = cp.customer_subscription_plan_id and cp.bm_type = 'sub'\n\nleft join\n\n(select cp.bm_type, cp.customer_subscription_plan_id, cpae.plan_id, cpae.event,\ncast(cpae.rails_site_processed_at as timestamp) as rails_site_processed_at, cpae.old_frequency, cpae.new_frequency,\nlag(cast(cpae.rails_site_processed_at as timestamp)) over (partition by cpae.plan_id order by cast(cpae.rails_site_processed_at as timestamp)) as prior_chg_date,\nlead(cast(cpae.rails_site_processed_at as timestamp)) over (partition by cpae.plan_id order by cast(cpae.rails_site_processed_at as timestamp)) as next_chg_date\nfrom dmt.d_customer_plan_360 cp\njoin stg.ps_change_plan_attribute_events cpae on cpae.plan_id = cp.customer_subscription_plan_id and cp.bm_type = 'plan' and cpae.event = 'change_plan_frequency'\n) cpf on cpf.customer_subscription_plan_id = cp.customer_subscription_plan_id and cp.bm_type = 'plan' and d.date >= date_trunc('day',cpf.rails_site_processed_at) and d.date < coalesce(date_trunc('day',cpf.next_chg_date), current_date)\n\nleft join\n\n(select cl.customer_id, cl.entity_id as sub_id, cl.created_at, cl.data3 as old_frequency, cl.data2 as new_frequency, lead(cl.created_at) over (partition by customer_id order by created_at) as next_chg_date\nfrom spectrum.dsc_customer_logs cl\n\n) scf on scf.customer_id = cp.customer_id and cp.bm_type = 'sub' and cp.customer_subscription_plan_id = scf.sub_id and d.date >= date_trunc('day', scf.created_at) and d.date < coalesce(date_trunc('day',scf.next_chg_date), current_date)\n\nwhere 1=1\nand d.date >= '2018-05-01' -- Added by Mallik to bring data starting from May 2018\n--and (c.first_name = 'Adra' and c.last_name = 'Graves')\n--and c.customer_id in (13066357, 13634411, 11906715, 2730901, 4785415, 6282911, 7498291, 11768806)\n\norder by 2,1\n ;"
            }
        ],
        "transform.tmp.cogs_order_us.sql": [
            {
                "skipped": true,
                "value": "create table tmp.cogs_order_us\n\ndistkey(order_id)\nsortkey(order_id)\n\nAs\n\n(with prod_related as\n(with monthly_costs as \n(select\nj.sku,\nj.shop_name,\nj.warehouse_sku,\ncase\n\twhen trim(' ' from j.warehouse_sku) = 'CA' then 'Torrance'\n\twhen trim(' ' from j.warehouse_sku) = 'KY' then 'Grove City'\n\twhen trim(' ' from j.warehouse_sku) = 'AU' then 'AU'\n\twhen trim(' ' from j.warehouse_sku) = 'MT' then 'CA'\n\twhen trim(' ' from j.warehouse_sku) = 'NE' then 'UK'\n\telse 'Other'\n\tend as \"warehouse_shop_combo\",\nj.snapshot_date,\navg(j.unit_cost_per_item)/10000 as \"prod_cost_monthly\"\nfrom\nspectrum.jde_monthly_cogs_f4105 j\nwhere j.unit_cost_per_item > 0 \ngroup by 1,2,3,4,5),\ncurrent_costs as\n(select\ncase\n\twhen trim(' ' from j.comcu) = 'CA' then 'US'\n\twhen trim(' ' from j.comcu) = 'KY' then 'US'\n\twhen trim(' ' from j.comcu) = 'AU' then 'AU'\n\twhen trim(' ' from j.comcu) = 'MT' then 'CA'\n\twhen trim(' ' from j.comcu) = 'NE' then 'UK'\n\telse 'Other'\n\tend as \"shop_name\",\ncase\n\twhen trim(' ' from j.comcu) = 'CA' then 'Torrance'\n\twhen trim(' ' from j.comcu) = 'KY' then 'Grove City'\n\twhen trim(' ' from j.comcu) = 'AU' then 'AU'\n\twhen trim(' ' from j.comcu) = 'MT' then 'CA'\n\twhen trim(' ' from j.comcu) = 'NE' then 'UK'\n\telse 'Other'\n\tend as \"warehouse_shop_combo\",\ntrim(' ' from j.comcu) as \"warehouse_sku\",\nj.coaitm as \"sku\",\navg(j.councs) as \"prod_cost_current\"\nfrom\nspectrum.jde_item_cost_file_f4105 j\n-- above is being updated; previous table provided by Mallik is apparently not being updated (stg.jde_item_cost_file_f4105)\nwhere j.coledg = '02'\n    and j.colotn = ''\n    and j.councs > 0\n\t--and (trim(' ' from j.comcu) similar to '(CA|KY)')\ngroup by 1,2,3,4\norder by 4 asc),\nhistoricals as\n(select\nh.sku,\nh.name,\nh.shipped_month,\nh.monthly_cost\nfrom\ntmp.historical_costs_skus_US_04012020 h)\nselect\norder_id,\ncoalesce(sum(product_cost),0) as \"product_cost\",\ncoalesce(sum(collateral_cost),0) as \"collateral_cost\",\ncoalesce(sum(packaging_cost),0) as \"packaging_cost\" \nfrom\n(select\nfip.order_id,\np.sku,\np.name,\ncase\n\twhen p.sku similar to '(PKG-EN|PKG-BOX|PKG-WRAP|PHX-|PKG-OME|FLT-TRAY|PKG-NG)%'\n\t\tthen sum(nvl(nvl(mc.prod_cost_monthly,h.monthly_cost),cc.prod_cost_current)*fip.quantity) \n\tend as \"packaging_cost\",\ncase\n\twhen p.sku similar to '(PKG-MG|PKG-SLV|FLT-BAND|PKG-PC|PKG-SNT)%'\n\t\tthen sum(nvl(nvl(mc.prod_cost_monthly,h.monthly_cost),cc.prod_cost_current)*fip.quantity) \n\tend as \"collateral_cost\",\ncase\n\twhen p.sku not similar to '(PKG-EN|PKG-BOX|PKG-WRAP|PHX-|PKG-OME|FLT-TRAY|PKG-NG|PKG-MG|PKG-SLV|FLT-BAND|PKG-PC)%'\n\t\tthen sum(nvl(nvl(mc.prod_cost_monthly,h.monthly_cost),cc.prod_cost_current)*fip.quantity) \n\tend as \"product_cost\"\nfrom dmt.f_invoice_product fip\njoin dmt.d_product p\n\ton p.product_id = fip.product_id\nleft join monthly_costs mc\n\ton mc.sku = p.sku\n\tand mc.warehouse_shop_combo = \n\t\tcase \n\t\t\twhen fip.warehouse_name in ('Torrance','Grove City')\n\t\t\t\tthen fip.warehouse_name \n\t\t\twhen fip.shop_name != 'US' then fip.shop_name\n\t\t\telse 'Grove City'\n\t\t\tend\n\tand date_trunc('month',dateadd('day',0,mc.snapshot_date)) = date_trunc('month',dateadd('day',0,fip.shipment_shipped_at))\nleft join current_costs cc\n\ton cc.sku = fip.product_sku\n\tand cc.warehouse_shop_combo = \n\t\tcase \n\t\t\twhen fip.warehouse_name in ('Torrance','Grove City')\n\t\t\t\tthen fip.warehouse_name \n\t\t\twhen fip.shop_name != 'US' then fip.shop_name\n\t\t\telse 'Grove City'\n\t\t\tend\nleft join historicals h\n\ton h.sku = fip.product_sku\n\tand fip.shop_id = 1\n\tand h.shipped_month = date_trunc('month',fip.shipment_shipped_at)\nwhere \n    fip.shipment_shipped_at is not null\n    and fip.shop_id = 1\n\t--and fip.customer_id = '11670632'\n\t--customer id example above\ngroup by 1,2,3)\ngroup by 1\norder by 1 asc),\nother_costs as\n(with prim_ship as\n(select\no.primary_shipment_uuid,\ncount(distinct(o.order_id)) as \"orders\"\nfrom\ntmp.sds_order_level o\nwhere o.shop_id = '1'\ngroup by 1\nhaving count(distinct(o.order_id)) > 1)\nselect\ni.order_id,\nps.primary_shipment_uuid,\ni.shipment_cost as \"og_ship_cost\",\ni.shipment_total_weight as \"og_ship_weight\",\ni.shipment_shipped_at,\ni.shipment_provider_method,\nleft(i.shipment_tracking_number,3) as \"left_3_tracking\",\ncase\n\twhen ps.primary_shipment_uuid is not null then 'Yes'\n\telse 'No'\n\tend as \"merged_shipment_flag\",\ncase\n\twhen left(i.shipment_tracking_number,3) = '511' \n\t\tthen 'Flat'\n\twhen i.shipment_provider_method = 'USPS Flats'\n\t\tthen 'Flat'\n\telse 'Non-Flat'\n\tend as \"box_pkg_type\",\ncase\n\twhen ps.primary_shipment_uuid is not null\n\t\tand nvl(i.shipment_cost,0) = 0\n\t\tand nvl(i.shipment_total_weight,0) = 0\n\t\tthen (0)\n\telse avg(a.fulfillment_cost)\n\tend as \"fulfillment_cost\",\ncase\n\twhen ps.primary_shipment_uuid is not null\n\t\tand nvl(i.shipment_cost,0) = 0\n\t\tand nvl(i.shipment_total_weight,0) = 0\n\t\tthen (0)\n\telse avg(a.box_pkg_collateral)\n\tend as \"box_pkg_collateral_cost\",\nsum(i.amount_true)*avg(a.cc_fees_rate) as \"cc_cost\",\nsum(\n\tcase\n\t\twhen i.shipment_provider_method = 'USPS Flats' then a.shipment_cost\n\t\telse i.shipment_cost\n\t\tend)  as \"shipment_cost\",\ncase\n\twhen ps.primary_shipment_uuid is not null\n\t\tand nvl(i.shipment_cost,0) = 0\n\t\tand nvl(i.shipment_total_weight,0) = 0\n\t\tthen (0)\n\telse avg(a.sc_indirects)\n\tend as \"supply_chain_indirects\",\nsum(i.shipment_total_weight) as \"shipment_total_weight\"\nfrom\ndmt.f_invoice i\nleft join prim_ship ps\n\ton ps.primary_shipment_uuid = i.primary_shipment_uuid\nleft join tmp.ref_cogs_assumptions_us a\n\ton (i.shipment_shipped_at >= a.start_date\n\t\tand i.shipment_shipped_at < a.end_date)\n\t\tand a.box_pgk_type =\n\t\t\t(case\n\t\t\t\twhen (left(i.shipment_tracking_number,3) = '511' \n\t\t\t\t\tor i.shipment_provider_method = 'USPS Flats') \n\t\t\t\t\tthen 'Flat'\n\t\t\t\telse 'Non-Flat'\n\t\t\t\tend)\nwhere i.shop_name = 'US'\n\tand i.shipment_shipped_at is not null\n\tand i.invoice_status = 'paid'\ngroup by 1,2,3,4,5,6,7,8,9)\nselect\np.order_id,\nso.primary_shipment_uuid,\no.box_pkg_type,\nso.shipment_shipped_at,\np.product_cost,\n(o.fulfillment_cost + p.collateral_cost) as \"fulfillment_cost\",\n(o.box_pkg_collateral_cost + p.packaging_cost) as \"packaging_cost\",\no.cc_cost,\no.shipment_cost,\no.supply_chain_indirects,\n(sum(p.product_cost)\n+sum(p.collateral_cost)\n+sum(p.packaging_cost)\n+sum(o.fulfillment_cost)\n+sum(o.box_pkg_collateral_cost)\n+sum(o.cc_cost)\n+sum(o.shipment_cost)\n+sum(o.supply_chain_indirects)) as \"order_COGs\"\nfrom prod_related p\nleft join other_costs o\n\ton o.order_id = p.order_id\nleft join tmp.sds_order_level so\n\ton so.order_id = p.order_id\ngroup by 1,2,3,4,5,6,7,8,9,10\n);"
            }
        ],
        "transform.tmp.unbounce_variants.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "date_time"
                    ]
                },
                "tables": [
                    "tmp.unbounce_variants"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from tmp.unbounce_variants where date_time >= dateadd('day', -3, current_date);\t\t---- DATE CHANGE!"
            },
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "--drop table  tmp.unbounce_variants;\n--create table tmp.unbounce_variants\n\n--distkey (visid_concat)\n--sortkey (visid_concat)\n\n--as\ninsert into tmp.unbounce_variants\n\n    select a.post_visid_high||a.post_visid_low as visid_concat\n         , a.visit_num\n         , a.visit_start_time_gmt\n         , a.prop7\n         , a.date_time\n         , a.evar11\n         , a.evar24\n    from stg.adobe_src_prod a\nwhere 1=1\n    and a.username = 'dscnongdprprod'\n    and a.user_agent NOT SIMILAR TO '%(bot|crawl|slurp|spider|archiv|spinn|sniff|seo|audit|survey|pingdom|worm|capture|\n(browser|screen)shots|analyz|index|thumb|check|facebook|YandexBot|Twitterbot|a_archiver|\nprerender|Prerender|facebookexternalhit|Bingbot|Googlebot|Baiduspider|360(Spider|User-agent)|semalt|HeadlessChrome|SpeedCurve)%'\n    and a.user_server in ('try.dollarshaveclub.com','get.dollarshaveclub.com')\n    and a.prop8 = 'WWW'\n    and a.date_time >= dateadd('day', -3, current_date)\t\t\t---- DATE CHANGE!\n    and a.evar24 is not null\n    ;"
            }
        ],
        "transform.tmp.hl_prepurchase_actions.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "kafka_timestamp"
                    ]
                },
                "tables": [
                    "tmp.hl_prepurchase_actions"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from tmp.hl_prepurchase_actions where kafka_timestamp >= dateadd('day', -3, current_date);"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "hl_prepurchase_actions"
                    ],
                    "select": [
                        "u.*"
                    ],
                    "order_by": [
                        "u.timestampy"
                    ]
                },
                "tables": [
                    "tmp.hl_prepurchase_actions"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into tmp.hl_prepurchase_actions\n\nselect u.*,\nrow_number() over (partition by u.sessionid, u.event_name, u.cont_url_incr order by u.timestampy) as event_url_rank_asc,\n--row_number() over (partition by u.sessionid, u.event_name, u.cont_url_incr_backwards order by timestampy),\n\nrow_number() over (partition by u.sessionid, u.event_name order by u.timestampy desc) as event_rank_desc\n\nfrom\n\n(select t.*,\n\nsum(t.continuous_url_flag) over (partition by t.sessionid order by t.timestampy rows unbounded preceding) as cont_url_incr,\n\nsum(t.continuous_url_flag_backwards) over (partition by t.sessionid order by t.timestampy rows between current row and unbounded following) as cont_url_incr_backwards\n\nfrom\n\n(select s.*,\n\ncase when s.url_without_params = s.prior_url_without_params then 0 else 1 end as continuous_url_flag,\n\ncase when s.url_without_params = s.next_url_without_params then 0 else 1 end as continuous_url_flag_backwards\n\n\nfrom\n\n(select 'sessionid' as matchtype, hp.*,\n\nhpp.url_without_params as purchase_url_without_params, hpp.obfuscated_order_id, hpp.obfuscated_customer_id, hpp.kafka_key as purchase_kafka_key, hpp.kafka_timestamp as purchase_kafka_timestamp, hpp.timestampy as purchase_timestampy,\n\nlag(hp.url_without_params) over (partition by hp.sessionid order by hp.timestampy) as prior_url_without_params,\n\nlead(hp.url_without_params) over (partition by hp.sessionid order by hp.timestampy) as next_url_without_params\n\n\n\nfrom tmp.hl_base_parsed hp\n\njoin tmp.hl_purchases_poc hpp on hp.sessionid = hpp.sessionid and hp.timestampy < hpp.timestampy and hp.ts_to_datestamp >= dateadd('hour', -24, hpp.ts_to_datestamp)\n\n\nwhere 1=1\nand hp.event_name in ('addToCart','addToSubscription','productImpression','productSetImpression','subscriptionSetImpression','experimentSetAssignments')\n--and hp.sessionid = 'cmbm1hes565'\n) s ) t ) u\n\n\nwhere u.kafka_timestamp >= dateadd('day', -3, current_date)\n\n;"
            }
        ],
        "transform.tmp.hl_sessionid_mcvisid.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "hl_sessionid_mcvisid"
                    ],
                    "select": [
                        "tmp.hl_base_parsed.sessionid",
                        "tmp.hl_base_parsed.mcvisid"
                    ],
                    "where": [
                        "tmp.hl_base_parsed.mcvisid"
                    ]
                },
                "tables": [
                    "tmp.hl_sessionid_mcvisid",
                    "tmp.hl_base_parsed"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into tmp.hl_sessionid_mcvisid\n\nselect distinct hbp.sessionid, hbp.mcvisid\nfrom tmp.hl_base_parsed hbp\nwhere 1=1\nand len(hbp.mcvisid) > 0;"
            }
        ],
        "transform.tmp.sds_plan_level.sql": [
            {
                "skipped": true,
                "value": "CREATE TABLE tmp.sds_plan_level\n\nDISTKEY(customer_subscription_plan_id)\nSORTKEY (bm_type, cancel_reasons_bucketed, first_touch_channel, last_touch_channel, plan_poe, landing_page_bucketed)\n\nAS\n\nWITH migration_agnostic_sub_plan_ranks\nAS\n\n(SELECT rplans.customer_id\n, rplans.customer_subscription_plan_id\n, rplans.bm_type\n, row_number() OVER (PARTITION BY rplans.customer_id ORDER BY rplans.start_date_time) AS true_sub_plan_rank\n\nFROM (SELECT cp3.customer_id\n\t\t, cp3.bm_type\n\t\t, cp3.customer_subscription_plan_id\n\t\t, cp3.start_date_time\n\tFROM dmt.d_customer_plan_360 cp3\n\tWHERE cp3.plan_conversion_source IS null\n\tGROUP BY 1,2,3,4) rplans\nORDER BY rplans.customer_id, rplans.start_date_time\n--LIMIT 1000\n)\n\n\nSELECT\ncp.customer_id\n, cp.obfuscated_customer_id\n, cp.customer_subscription_plan_id\n, cp.bm_type\n, cp.start_date_time\n, date_trunc('day', cp.start_date_time) AS start_date_day\n, date_trunc('week', cp.start_date_time) AS start_date_week\n, date_trunc('month', cp.start_date_time) AS start_date_month\n, cp.migrated_sub_start_date\n, cp.end_date_time\n, cp2.end_date_time AS migrated_plan_end_date_time\n, cp2.status_name as migrated_plan_status\n, CASE\n\tWHEN LOWER(cp2.status_name) = 's timeout' THEN 'S Timeout'\n\tWHEN LOWER(cp2.status_name) = 'inactive' THEN 'Inactive'\n\tWHEN LOWER(cp2.status_name) = 'active' THEN 'Active'\n\tWHEN LOWER(cp2.status_name) = 'suspended' THEN 'Suspended'\n\tWHEN LOWER(cp2.status_name) = 'cancelled' THEN 'Inactive'\n\tWHEN cp2.status_name IS null then null\n\tELSE 'Other'\n\tEND AS migrated_plan_status_bucketed\n, CASE\n\tWHEN cp.cancel_reason LIKE 'Price is too high' THEN 'Price is too high'\n\tWHEN cp.cancel_reason LIKE 'Disliked the razor' THEN 'Disliked the razor'\n\tWHEN cp.cancel_reason LIKE 'Deliveries are too frequent' THEN 'Deliveries are too frequent'\n\tWHEN cp.cancel_reason LIKE 'Too hard to manage my plan' THEN 'Too hard to manage plan'\n\tWHEN cp.cancel_reason LIKE 'Shipping issues' THEN 'Shipping issues'\n\tWHEN cp.cancel_reason LIKE 'Disliked the non-razor products (ex: shampoo)' THEN 'Disliked the non-razor products'\n\tWHEN cp.cancel_reason LIKE '%taking a break from shaving' THEN 'Taking a Break from Shaving'\n\tWHEN cp.cancel_reason LIKE '%m receiving too many blades' THEN 'Receiving Too Many Blades'\n\tWHEN cp.cancel_reason LIKE 'My first month trial is ending' THEN 'First Month Trial is Ending'\n\tWHEN cp.cancel_reason LIKE 'Dissatisfied with the razor handle' THEN 'Dissatisfied with the razor handle'\n\tWHEN cp.cancel_reason LIKE 'Dissatisfied with customer service' THEN 'Dissatisfied with customer service'\n\tWHEN cp.cancel_reason LIKE 'converted_to_plan' THEN 'Migrated to Full Service'\n\tWHEN cp.cancel_reason LIKE 'Purchasing Dollar Shave Club products in-store%' THEN 'Purchasing Dollar Shave Club products in-store'\n\tWHEN cp.cancel_reason LIKE 'Stopped shaving / shaving infrequently' THEN cp.cancel_reason\n\tWHEN cp.cancel_reason LIKE '%without a subscription%' THEN cp.cancel_reason\n\tWHEN cp.cancel_reason IS null THEN null\n\tELSE 'Other'\n\tEND AS \"cancel_reasons_bucketed\"\n, cp.churn_type\n, cp2.churn_type AS migrated_plan_churn_type\n, cp2.cancel_reason as migrated_plan_cancel_reason\n, CASE\n\tWHEN LOWER(cp.status_name) = 's timeout' THEN 'S Timeout'\n\tWHEN LOWER(cp.status_name) = 'inactive' THEN 'Inactive'\n\tWHEN LOWER(cp.status_name) = 'active' THEN 'Active'\n\tWHEN LOWER(cp.status_name) = 'suspended' THEN 'Suspended'\n\tWHEN LOWER(cp.status_name) = 'cancelled' THEN 'Inactive'\n\tELSE 'Other'\n\tEND AS plan_status_bucketed\n, cp.status_name AS plan_status\n, cp.sub_plan_rank\n--, mar.true_sub_plan_rank\n, CASE\n\tWHEN cp.plan_conversion_source IS NOT null then (cp.sub_plan_rank - 1)\n\tELSE mar.true_sub_plan_rank\n\tEND AS true_plan_rank\n, cp.shop_id\n, cp.plan_conversion_source\n, CASE\n\tWHEN cp.sub_plan_rank = 1\n\t\tAND cp.plan_conversion_source IS null THEN 'New Acquisition'\n\tWHEN cp.sub_plan_rank > 1\n\t\tAND cp.plan_conversion_source IS null THEN 'Reactivation'\n\tWHEN cp.sub_plan_rank > 1\n\t\tAND cp.plan_conversion_source IS NOT null THEN 'Migration'\n\tELSE 'Other/Unknown'\n\tEND AS \"customer_plan_stage\"\n, cp.funnel_sku_list\n-- POE LOGIC\n, CASE\n\tWHEN cp.start_date_time IS null THEN null\n\tWHEN cp.start_date_time IS not null\n\t\tAND cp.bm_type = 'sub' then 'Classic'\n\tWHEN cp.start_date_time::date <= '2018-07-10'\n\t\tAND cp.funnel_sku_list LIKE '%BN2-EX-SB3%'\n\t\tTHEN 'Shave Core'\n\tWHEN (poe.funnel_sku_list_logic LIKE 'Ultimate%') THEN poe.funnel_sku_list_logic\n\tWHEN ((cp.analytics = 'adobe' \n\t\t\tAND pma.prior_url LIKE '%.dollarshaveclub.com/get-started/review'\n\t\t\tAND pma.complete_page_ts_pst >= '2019-08-28')\n\t\tOR (cp.analytics = 'ga'\n\t\t\tAND pmga.prior_url = '/get-started/review'\n\t\t\tAND pmga.complete_page_ts_pst >= '2019-08-28'))\n\t\tTHEN 'Questionnaire Funnel'\n\tWHEN ((cp.analytics = 'adobe' \n\t\t\tAND pma.prior_url = 'https://www.dollarshaveclub.com/upgrade/review'\n\t\t\tAND pma.complete_page_ts_pst >= '2019-04-05'\n\t\t\tAND cp.sub_plan_rank > 1)\n\t\t OR (cp.analytics = 'ga' \n\t\t\tAND pmga.prior_url = '/upgrade/review'\n\t\t\tAND pmga.complete_page_ts_pst >= '2019-04-05'\n\t\t\tAND cp.sub_plan_rank > 1))\n\t\tTHEN 'Full Size Reactivation Funnel'\n\tWHEN poe.funnel_sku_list IS NOT null\n\t\tTHEN poe.funnel_sku_list_logic\n\tWHEN cp.funnel_sku_list IS null THEN 'Unknown'\n\tELSE 'Requires Mapping'\n\tEND AS \"plan_poe\"\n, cp.landing_url_without_params\n, CASE\n\tWHEN cp.analytics IS null THEN 'No Web Match'\n\tWHEN lp.landing_url_without_params IS NOT null THEN lp.lp_logic\n\tELSE 'Requires Mapping'\n\tEND AS landing_page_bucketed\n, cp.first_utm_medium\n, cp.first_utm_source\n, cp.first_utm_campaign\n, cp.first_utm_term\n, cp.first_utm_content\n--first touch channel\n, CASE\n\tWHEN cp.analytics IS null THEN 'No Web Match' -- originally 'No Adobe Match'\n\tWHEN cp.analytics = 'ga' THEN\n\t\tCASE\n\t\t\tWHEN cp.first_utm_medium = '(none)' then 'Direct'\n\t\t\tWHEN cp.first_utm_medium = 'organic' THEN 'Organic Search'\n\t\t\tWHEN cp.first_utm_medium = 'referral'\n\t\t\t\tAND (LOWER(cp.first_utm_source) LIKE '%facebook%'\n\t\t\t\tOR LOWER(cp.first_utm_source) LIKE '%instagram%'\n\t\t\t\tOR LOWER(cp.first_utm_source) LIKE '%youtube%') THEN 'Organic Social'\n\t\t\tWHEN cp.first_utm_medium = 'referral'\n\t\t\t\tAND cp.first_utm_source <> 'fbuy' THEN 'Referring Domains'\n\t\t\tWHEN cp.first_utm_medium = '(not set)' THEN 'Missing Medium UTM'\n\t\t\tWHEN cp.first_utm_medium IS null THEN\n\t\t\t\tCASE\n\t\t\t\t\tWHEN cp.first_utm_medium IS null \n\t\t\t\t\t\tAND (cp.first_utm_source IS NOT null\n\t\t\t\t\t\tOR cp.first_utm_campaign IS NOT null\n\t\t\t\t\t\tOR cp.first_utm_term IS NOT null\n\t\t\t\t\t\tOR cp.first_utm_content IS NOT null) THEN 'Missing Medium UTM'\n\t\t\t\t\tWHEN (cp.first_utm_medium IS null\n\t\t\t\t\t\tAND cp.first_utm_source IS null\n\t\t\t\t\t\tAND cp.first_utm_campaign IS null\n\t\t\t\t\t\tAND cp.first_utm_term IS null\n\t\t\t\t\t\tAND cp.first_utm_content IS null) THEN 'Direct'\n\t\t\t\t\tELSE 'Error'\n\t\t\t\tEND\n\t\t\tWHEN cp.first_utm_source IS null\n\t\t\t\tAND (cp.first_utm_medium IS NOT null) THEN 'Missing Source UTM'\n\t\t\tWHEN mcf.mrkt_chan is null then 'Requires Mapping'\n\t\t\tELSE mcf.mrkt_chan\n\t\tEND\n\tWHEN cp.analytics = 'adobe' THEN \n\t\tCASE\n\t\t\tWHEN cp.first_utm_medium IS null THEN\n\t\t\t\tCASE\n\t\t\t\t\tWHEN LOWER(gvs.referring_url) LIKE '%dollarshaveclub%' THEN 'Orphaned Sessions'\n\t\t\t\t\tWHEN LOWER(gvs.referring_url) LIKE '%google%'\n            \t  \t\tOR LOWER(gvs.referring_url) LIKE '%bing%'\n              \t \t\tOR LOWER(gvs.referring_url) LIKE '%yahoo%' THEN 'Organic Search'\n\t\t\t\t\tWHEN gvs.referring_url IS NOT null then 'Referring Domains'\n\t\t\t\t\tWHEN cp.first_utm_medium IS null\n\t\t\t\t\t\tAND (cp.first_utm_source IS NOT null\n\t\t\t\t\t\tOR cp.first_utm_campaign IS NOT null\n\t\t\t\t\t\tOR cp.first_utm_term IS NOT null\n\t\t\t\t\t\tOR cp.first_utm_content IS NOT null) THEN 'Missing Medium UTM'\n\t\t\t\t\tWHEN (cp.first_utm_medium IS null\n\t\t\t\t\t\tAND cp.first_utm_source IS null\n\t\t\t\t\t\tAND cp.first_utm_campaign IS null\n\t\t\t\t\t\tAND cp.first_utm_term IS null\n\t\t\t\t\t\tAND cp.first_utm_content IS null) THEN 'Direct'\n\t\t\t\t\tELSE 'Error'\n\t\t\t\t\tEND\n\t\t\tWHEN cp.first_utm_source IS null\n\t\t\tAND cp.first_utm_medium IS NOT null THEN 'Missing Source UTM'\n\t\t\tWHEN mcf.mrkt_chan IS NOT null THEN mcf.mrkt_chan\n\t\t\tELSE 'Requires Mapping'\n\t\tEND\nEND AS first_touch_channel\n, cp.last_utm_medium\n, cp.last_utm_source\n, cp.last_utm_campaign\n, cp.last_utm_term\n, cp.last_utm_content\n--, build in last touch channel\n, CASE\n\tWHEN cp.analytics IS null THEN 'No Web Match' -- originally 'No Adobe Match'\n\tWHEN cp.analytics = 'ga' THEN\n\t\tCASE\n\t\t\tWHEN cp.last_utm_medium = '(none)' then 'Direct'\n\t\t\tWHEN cp.last_utm_medium = 'organic' THEN 'Organic Search'\n\t\t\tWHEN cp.last_utm_medium = 'referral'\n\t\t\t\tAND (LOWER(cp.last_utm_source) LIKE '%facebook%'\n\t\t\t\tOR LOWER(cp.last_utm_source) LIKE '%instagram%'\n\t\t\t\tOR LOWER(cp.last_utm_source) LIKE '%youtube%') THEN 'Organic Social'\n\t\t\tWHEN cp.last_utm_medium = 'referral' \n\t\t\t\tAND cp.last_utm_source <> 'fbuy' THEN 'Referring Domains'\n\t\t\tWHEN cp.last_utm_medium = '(not set)' THEN 'Missing Medium UTM'\n\t\t\tWHEN cp.last_utm_medium IS null THEN\n\t\t\t\tCASE\n\t\t\t\t\tWHEN cp.last_utm_medium IS null \n\t\t\t\t\t\tAND (cp.last_utm_source IS NOT null\n\t\t\t\t\t\tOR cp.last_utm_campaign IS NOT null\n\t\t\t\t\t\tOR cp.last_utm_term IS NOT null\n\t\t\t\t\t\tOR cp.last_utm_content IS NOT null) THEN 'Missing Medium UTM'\n\t\t\t\t\tWHEN (cp.last_utm_medium IS null\n\t\t\t\t\t\tAND cp.last_utm_source IS null\n\t\t\t\t\t\tAND cp.last_utm_campaign IS null\n\t\t\t\t\t\tAND cp.last_utm_term IS null\n\t\t\t\t\t\tAND cp.last_utm_content IS null) THEN 'Direct'\n\t\t\t\t\tELSE 'Error'\n\t\t\t\tEND\n\t\t\tWHEN cp.last_utm_source IS null\n\t\t\t\tAND cp.last_utm_medium IS NOT null THEN 'Missing Source UTM'\n\t\t\tWHEN mcl.mrkt_chan is null then 'Requires Mapping'\n\t\t\tELSE mcl.mrkt_chan\n\t\tEND\n\tWHEN cp.analytics = 'adobe' THEN \n\t\tCASE\n\t\t\tWHEN cp.last_utm_medium IS null THEN\n\t\t\t\tCASE\n\t\t\t\t\tWHEN LOWER(gvs.referring_url) LIKE '%dollarshaveclub%' THEN 'Orphaned Sessions'\n\t\t\t\t\tWHEN LOWER(gvs.referring_url) LIKE '%google%'\n            \t  \t\tOR LOWER(gvs.referring_url) LIKE '%bing%'\n              \t \t\tOR LOWER(gvs.referring_url) LIKE '%yahoo%' THEN 'Organic Search'\n\t\t\t\t\tWHEN gvs.referring_url IS NOT null then 'Referring Domains'\n\t\t\t\t\tWHEN cp.last_utm_medium IS null\n\t\t\t\t\t\tAND (cp.last_utm_source IS NOT null\n\t\t\t\t\t\tOR cp.last_utm_campaign IS NOT null\n\t\t\t\t\t\tOR cp.last_utm_term IS NOT null\n\t\t\t\t\t\tOR cp.last_utm_content IS NOT null) THEN 'Missing Medium UTM'\n\t\t\t\t\tWHEN (cp.last_utm_medium IS null\n\t\t\t\t\t\tAND cp.last_utm_source IS null\n\t\t\t\t\t\tAND cp.last_utm_campaign IS null\n\t\t\t\t\t\tAND cp.last_utm_term IS null\n\t\t\t\t\t\tAND cp.last_utm_content IS null) THEN 'Direct'\n\t\t\t\t\tELSE 'Error'\n\t\t\t\t\tEND\n\t\t\tWHEN cp.last_utm_source IS null\n\t\t\tAND (cp.last_utm_medium IS NOT null) THEN 'Missing Source UTM'\n\t\t\tWHEN mcl.mrkt_chan is null then 'Requires Mapping'\n\t\t\tELSE mcl.mrkt_chan\n\t\tEND\nEND AS last_touch_channel\n, cp.analytics as web_match\n, gvs.visit_id\n, gvs.mcvisid\n, gvs.referring_url\n, CASE\n\tWHEN cp.analytics = 'adobe' THEN pma.prior_url \n\tWHEN cp.analytics = 'ga' then pmga.prior_url\nEND AS funnel_checkout_url\n, cp.original_frequency\n, cp.next_bill_date_time\n, cp.order_id -- first order_id of plan\n, cp.obfuscated_order_id -- first obf_order_id of plan\n\nFROM dmt.d_customer_plan_360 cp\n\nLEFT JOIN dmt.ga_visit_summary gvs  -- gvs has been merged with the original adobe_visit_summary table on 3/1/2021\n\tON cp.post_visid_high = gvs.post_visid_high\n\tAND cp.post_visid_low = gvs.post_visid_low\n\tAND cp.visit_num = gvs.visit_num\n\tAND cp.visit_start_time_gmt_epoch = gvs.visit_start_time_gmt_epoch\n\t-- this join is required for Adobe...3/1/2021 forward thist able can be joined to GVS on visit_id\nLEFT JOIN tmp.visit_level_getstartedcomplete_page_metadata pma -- Adobe-specific quiz identification table\n\tON cp.post_visid_high = pma.post_visid_high\n\tAND cp.post_visid_low = pma.post_visid_low\n\tAND cp.visit_num = pma.visit_num\n\tAND cp.visit_start_time_gmt_epoch = pma.visit_start_time_gmt\n\tAND cp.analytics = 'adobe'\nLEFT JOIN dmt.ga_visit_level_getstartedcomplete_page_metadata pmga\n\tON cp.visit_id = pmga.visit_id\n\tand cp.analytics = 'ga'\nLEFT JOIN tmp.francesca_mrkt_chan_mapping mcf\n\tON cp.first_utm_medium = mcf.utm_medium\n\tAND cp.first_utm_source = mcf.utm_source\nLEFT JOIN tmp.francesca_mrkt_chan_mapping mcl --Relevant for Adobe\n\tON cp.last_utm_medium = mcl.utm_medium\n\tAND cp.last_utm_source = mcl.utm_source\nLEFT JOIN tmp.francesca_poe_mapping poe\n\tON cp.funnel_sku_list = poe.funnel_sku_list\nLEFT JOIN tmp.francesca_landing_page_mapping lp\n\tON cp.landing_url_without_params = lp.landing_url_without_params\nLEFT JOIN dmt.d_customer_plan_360 cp2\n\tON cp.customer_subscription_plan_id = cp2.prev_id\n\tAND cp.bm_type = cp2.prev_type\n\tAND cp2.plan_conversion_source IS NOT null\nLEFT JOIN migration_agnostic_sub_plan_ranks mar\n\tON mar.customer_id = cp.customer_id\n\tAND mar.bm_type = cp.bm_type\n\tAND mar.customer_subscription_plan_id = cp.customer_subscription_plan_id\nJOIN dmt.d_customer c\n\tON c.customer_id = cp.customer_id\nORDER BY cp.customer_id, cp.sub_plan_rank\n;"
            }
        ],
        "transform.tmp.visit_level_getstartedcomplete_page_metadata.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "complete_page_ts_pst"
                    ]
                },
                "tables": [
                    "tmp.visit_level_getstartedcomplete_page_metadata"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from tmp.visit_level_getstartedcomplete_page_metadata where complete_page_ts_pst >= '2019-01-01' ;"
            },
            {
                "skipped": true,
                "value": "insert into tmp.visit_level_getstartedcomplete_page_metadata\nselect \nv.visid as visid_concat\n, v.visit_start_time_gmt\n, v.visit_num, v.mcvisid\n, v.evar23\n, v.evar11 as url\n, v.page_view_count\n, v.purchase_event_count\n, v.purchase_counter_count\n, v.min_ts as complete_page_ts_pst\n, convert_timezone('PST8PDT','UTC', v.min_ts) complete_page_ts_gmt\n, v.prior_url\n, v.two_prior\n, v.post_visid_high\n, v.post_visid_low\nfrom\n(\nselect \n\tu.*,--u.visid_concat, u.visit_start_time_gmt, u.visit_num, u.mcvisid,\n\tlag(u.evar11,1) OVER (PARTITION BY u.visid, u.visit_num, u.visit_start_time_gmt ORDER BY u.max_ts) as prior_url,\n\tlag(u.evar11,2) OVER (PARTITION BY u.visid, u.visit_num, u.visit_start_time_gmt ORDER BY u.max_ts) as two_prior\n\tfrom\n\t(\n\t\tselect \n\t\tmt.post_visid_high||mt.post_visid_low visid\n\t\t, mt.post_visid_high\n\t\t, mt.post_visid_low\n\t\t, mt.visit_start_time_gmt\n\t\t, mt.visit_num\n\t\t, mt.mcvisid\n\t\t, mt.evar11\n\t\t, mx.evar23\n\t\t, mx.page_view_count\n\t\t, mx.purchase_event_count\n\t\t, mx.purchase_counter_count\n\t\t, min(mt.date_time) as min_ts\n\t\t, max(mt.date_time) as max_ts\n\t\tfrom stg.adobe_src_prod mt\n\t\tjoin (\n\t\t\tselect \n\t\t\t\tmt.post_visid_high||mt.post_visid_low visid\n\t\t\t\t, mt.post_visid_high\n\t\t\t\t, mt.post_visid_low\n\t\t\t\t, mt.visit_start_time_gmt\n\t\t\t\t, mt.visit_num\n\t\t\t\t, mt.mcvisid\n\t\t\t\t, mt.evar11\n\t\t\t\t, max(mt.evar23) as evar23\n\t\t\t\t, sum(case when mt.post_page_event = 0 then 1 else 0 end) as page_view_count\n\t\t\t\t, sum(case when mt.page_event_var2 = 'purchase' then 1 else 0 end) as purchase_event_count\n\t\t\t\t,sum(case when mt.page_event_var2 = 'purchase-counter' then 1 else 0 end) as purchase_counter_count\n\t\t\t\t, min(mt.date_time) as min_ts\n\t\t\tfrom stg.adobe_src_prod mt\n\t\t\twhere 1=1\n\t\t\t--and mt.username = 'dscnongdprprod'\n\t\t\tand mt.user_agent NOT SIMILAR TO '%(bot|crawl|slurp|spider|archiv|spinn|sniff|seo|audit|survey|pingdom|worm|capture|\n\t\t\t--(browser|screen)shots|analyz|index|thumb|check|facebook|YandexBot|Twitterbot|a_archiver|\n\t\t\t--prerender|Prerender|facebookexternalhit|Bingbot|Googlebot|Baiduspider|360(Spider|User-agent)|semalt|HeadlessChrome|SpeedCurve)%'\n\t\t\tand mt.user_server in ('www.dollarshaveclub.com','uk.dollarshaveclub.com','try.dollarshaveclub.com','content.dollarshaveclub.com','ca.dollarshaveclub.com','au.dollarshaveclub.com','help.dollarshaveclub.com','get.dollarshaveclub.com',\n\t\t\t'uk-help.dollarshaveclub.com','ca-help.dollarshaveclub.com','au-help.dollarshaveclub.com','ask.dollarshaveclub.com','www.dollarspaceclub.com','aus.dollarshaveclub.com','can.dollarshaveclub.com')\n\t\t\t--and mt.prop8 = 'WWW'\n\t\t\tand mt.exclude_hit = 0\n\t\t\tand mt.evar11 in ('https://www.dollarshaveclub.com/get-started/complete','https://www.dollarshaveclub.com/upgrade/congratulations' ,'https://au.dollarshaveclub.com/get-started/complete','https://uk.dollarshaveclub.com/get-started/complete', 'https://ca.dollarshaveclub.com/get-started/complete')\n\t\t\t--and mt.mcvisid = '48697380825361218943866465508748081184'\n\t\t\tand mt.date_time >= '2019-01-01'\n\t\t\tgroup by 1,2,3,4,5,6,7\n\t\t\t) mx \n\t\ton mx.post_visid_high = mt.post_visid_high \n\t\t\tand mx.post_visid_low = mt.post_visid_low \n\t\t\tand mx.visit_num = mt.visit_num \n\t\t\tand mx.visit_start_time_gmt = mt.visit_start_time_gmt \n\t\t\tand mt.date_time <= mx.min_ts\n\t\twhere 1=1\n\t\tand mt.date_time >= '2019-01-01'\n\t\tand mt.evar11 in (select distinct url from tmp.funnel_urls)\n\t\t--and (mt.post_visid_high||mt.post_visid_low) = '15811169074159280523237989975357532962'\n\t\t--and mt.mcvisid='48697380825361218943866465508748081184'\n\t\tgroup by 1,2,3,4,5,6,7,8,9,10,11\n\t) u \n) v\nwhere v.evar11 in ('https://www.dollarshaveclub.com/get-started/complete','https://www.dollarshaveclub.com/upgrade/congratulations', 'https://au.dollarshaveclub.com/get-started/complete','https://uk.dollarshaveclub.com/get-started/complete', 'https://ca.dollarshaveclub.com/get-started/complete')\n;"
            }
        ],
        "transform.tmp.hl_ab_test_assignments_by_sessionid.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "kafka_date"
                    ]
                },
                "tables": [
                    "tmp.hl_ab_test_assignments_by_sessionid"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from tmp.hl_ab_test_assignments_by_sessionid where kafka_date >= dateadd('day', -3, current_date); --- DATE CHANGE!"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "hl_ab_test_assignments_by_sessionid"
                    ],
                    "select": [
                        "spectrum.hl_experiment_set_assignments.kafka_date",
                        "spectrum.hl_experiment_set_assignments.session_id",
                        "spectrum.hl_experiment_set_assignments.item_name",
                        "spectrum.hl_experiment_set_assignments.item_variant"
                    ]
                },
                "tables": [
                    "tmp.hl_ab_test_assignments_by_sessionid",
                    "spectrum.hl_experiment_set_assignments"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into tmp.hl_ab_test_assignments_by_sessionid\n\nselect esa.kafka_date, esa.session_id, esa.item_name, esa.item_variant, count(1) as county\nfrom spectrum.hl_experiment_set_assignments esa\n\n--where esa.user_agent like 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/7%'\n--and esa.request_ip =  '76.81.55.2'\nwhere esa.kafka_date >= dateadd('day', -3, current_date) ------------------------------------------------------------------------------------ DATE CHANGE!\n\ngroup by 1,2,3,4\n;"
            }
        ],
        "transform.tmp.daily_active_subs_poc.sql": [
            {
                "type": "CREATE",
                "columns": null,
                "tables": [
                    "tmp.adra_customer_recurring_items"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "create table tmp.adra_customer_recurring_items\n\ndistkey(customer_id)\nsortkey(customer_id, plan_id, product_sku)\n\nas\n\n-- all items ever in cart\nselect distinct sci.customer_id, sci.plan_id, sci.product_sku\nfrom stg.ps_plan_items sci\n\n;"
            },
            {
                "skipped": true,
                "value": "create table tmp.daily_active_subs_recurring_items_poc\n\ndistkey(customer_id)\nsortkey(customer_id, plan_id, product_sku)\n\nas\n\nselect mm.date, mm.customer_id, mm.plan_id, mm.product_sku, mm.plan_qty\n\nfrom\n\n(\nselect s.*, cie.item_change_date, cie.sku, cie.plan_quantity, cie.prior_sku_chg_date, cie.next_sku_chg_date, s.plan_item_qty + nvl(cie.running_sum_plan_qty,0) as plan_qty--, cie.* --s.plan_item_qty + nvl(cie.plan_quantity,0) as plan_qty, s.sched_cart_qty + nvl(cie.one_time_quantity,0) as sched_cart_qty, cie.*\n\nfrom\n\n(select d.date, cbi.*, nvl(pi.quantity,0) as plan_item_qty\nfrom tmp.adra_customer_recurring_items cbi\n\njoin dmt.d_customer_plan_360 cp on cbi.customer_id = cp.customer_id and cbi.plan_id = cp.customer_subscription_plan_id and cp.bm_type = 'plan'\n\njoin dmt.d_date d on d.date >= date_trunc('day',cp.start_date_time) and d.date < coalesce(date_trunc('day',cp.end_date_time), current_date + 1) and d.date >= '2018-04-01' --and d.date < current_date\n\n--left join stg.ps_scheduled_cart_items sci on sci.customer_id = cbi.customer_id and sci.plan_id = cbi.plan_id and sci.product_sku = cbi.product_sku and sci.removed is not true and sci.scheduled_cart_closed_at is null\nleft join stg.ps_plan_items pi on pi.customer_id = cbi.customer_id and pi.plan_id = cbi.plan_id and pi.product_sku = cbi.product_sku and pi.removed is not true\n\nwhere 1=1\n--and cbi.customer_id = 11101913\n--and cbi.product_sku = 'ESB-6Z-CURRENT'\norder by date, product_sku\n) s\n\nleft join\n\n(select bic.*,\n\nlag(bic.item_change_date) over (partition by bic.customer_id, bic.plan_id, bic.sku order by bic.item_change_date) as prior_sku_chg_date,\nlead(bic.item_change_date) over (partition by bic.customer_id, bic.plan_id, bic.sku order by bic.item_change_date) as next_sku_chg_date,\n\nsum(bic.plan_quantity) over (partition by bic.customer_id, bic.plan_id, bic.sku  order by bic.item_change_date DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as running_sum_plan_qty\n\nfrom\n\n(select p.customer_id, cpie.plan_id, date_trunc('day', cast(cpie.rails_site_processed_at as timestamp)) as item_change_date, cpie.sku,\n\nsum(case when cpie.event like 'change_%' then (cpie.old_quantity - cpie.new_quantity)\nwhen cpie.event like 'add_%' then -1*cpie.quantity\nwhen cpie.event like 'remove_%' then cpie.quantity\nelse 0\nend) as plan_quantity\n\nfrom stg.ps_change_plan_item_events cpie\njoin stg.ps_plans p on cpie.plan_id = p.id\n--where p.customer_id = 11101913\ngroup by 1,2,3,4) bic\norder by sku, item_change_date\n\n) cie on cie.customer_id = s.customer_id and cie.plan_id = s.plan_id and cie.sku = s.product_sku and s.date < date_trunc('day', cie.item_change_date) and (s.date >= date_trunc('day',cie.prior_sku_chg_date) or cie.prior_sku_chg_date is null)\n\n) mm\n\nwhere mm.plan_qty > 0\nand mm.date >= '2020-01-01' -- Added by Mallik to bring data starting from Jan 2020\n;"
            }
        ],
        "transform.tmp.adra_restock_box_shipment_rank.sql": [
            {
                "type": "CREATE",
                "columns": null,
                "tables": [
                    "tmp.adra_restock_box_shipment_rank"
                ],
                "subqueries": {
                    "s": "select ao.customer_id, ao.customer_subscription_plan_id, ao.bm_type, ao.order_id, ao.shipment_shipped_at, count(1) from tmp.adra_plans_and_order_items_poc ao where ao.shipment_shipped_at is not null and ao.order_attribution_attribution_type = 'scheduledcart' group by 1, 2, 3, 4, 5"
                },
                "skipped": false,
                "value": "create table tmp.adra_restock_box_shipment_rank\n\ndistkey (order_id)\nsortkey (order_id, shipment_shipped_at)\n\nas\n\nselect s.customer_id, s.customer_subscription_plan_id, s.bm_type, s.order_id, s.shipment_shipped_at, row_number() over (partition by s.customer_subscription_plan_id, s.bm_type order by s.shipment_shipped_at) as plan_shipment_rank\nfrom\n \n(select ao.customer_id, ao.customer_subscription_plan_id, ao.bm_type, ao.order_id, ao.shipment_shipped_at, count(1)\nfrom tmp.adra_plans_and_order_items_poc ao\nwhere ao.shipment_shipped_at is not null\nand ao.order_attribution_attribution_type = 'scheduledcart'\ngroup by 1,2,3,4,5\n) s\n;"
            }
        ],
        "transform.tmp.adra_plan_order_rank.sql": [
            {
                "skipped": true,
                "value": "create table tmp.adra_plan_order_rank\n\ndistkey (order_id)\nsortkey (order_id, order_created_at)\n\nas\n\n    select s.customer_id\n         , s.customer_subscription_plan_id\n         , s.bm_type\n         , s.order_id\n         , s.order_created_at\n         , row_number() over (partition by s.customer_subscription_plan_id, s.bm_type order by s.order_created_at) as plan_order_shipment_rank\n    from\n\n    (select ao.customer_id, ao.customer_subscription_plan_id, ao.bm_type, ao.order_id, ao.order_created_at, count(1)\n    from tmp.adra_plans_and_order_items_poc ao\n--where ao.shipment_shipped_at is not null\n--and ao.order_attribution_attribution_type = 'scheduledcart'\n    group by 1,2,3,4,5) s;"
            }
        ],
        "transform.tmp.adra_plan_box_shipment_rank.sql": [
            {
                "skipped": true,
                "value": "create table tmp.adra_plan_box_shipment_rank\n\ndistkey (order_id)\nsortkey (order_id, shipment_shipped_at)\n\nas\n\nselect s.customer_id, s.customer_subscription_plan_id, s.bm_type, s.order_id, s.order_created_at, s.shipment_shipped_at, row_number() over (partition by s.customer_subscription_plan_id, s.bm_type order by s.order_created_at) as plan_order_shipment_rank\nfrom\n\n(select ao.customer_id, ao.customer_subscription_plan_id, ao.bm_type, ao.order_id, ao.shipment_shipped_at, ao.order_created_at, count(1)\nfrom tmp.adra_plans_and_order_items_poc ao\nwhere ao.shipment_shipped_at is not null\n--and ao.order_attribution_attribution_type = 'scheduledcart'\nand ao.bm_type = 'plan'\nand ao.plan_conversion_source is null\ngroup by 1,2,3,4,5,6\n) s\n\n;"
            }
        ],
        "transform.tmp.cohort_104.sql": [
            {
                "type": "DELETE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- table with just cohort 104 for exclusion from reporting\n\ndelete from tmp.cohort_104 where created_at >= dateadd('day', -3, current_date);"
            },
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "------ DATE CHANGE! -- update to dateadd current date -3\n\ninsert into tmp.cohort_104\n\nselect ccm.created_at, ccm.customer_cohort_id, ccm.customer_id\nfrom stg.customer_cohort_members ccm\nwhere ccm.customer_cohort_id = '104'\nand ccm.created_at >= dateadd('day', -3, current_date) --------- DATE CHANGE!\n;"
            }
        ],
        "transform.tmp.ab_test_assign_events.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ab_test_assign_events"
                    ],
                    "select": [
                        "stg.adobe_src_prod.post_visid_high",
                        "stg.adobe_src_prod.post_visid_low",
                        "stg.adobe_src_prod.visit_num",
                        "stg.adobe_src_prod.visit_start_time_gmt",
                        "stg.adobe_src_prod.prop7",
                        "stg.adobe_src_prod.mvvar1"
                    ]
                },
                "tables": [
                    "tmp.ab_test_assign_events",
                    "stg.adobe_src_prod"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into tmp.ab_test_assign_events\n\n    select a.post_visid_high||a.post_visid_low as visid_concat\n         , a.visit_num\n         , a.visit_start_time_gmt\n         , a.prop7\n         , a.mvvar1\n         , a.post_visid_high\n         , a.post_visid_low\n         , len(a.mvvar1) - len(translate(a.mvvar1, ',', '')) + 1 as count_of_ab_tests_assigned\n    from stg.adobe_src_prod a\n        where 1=1\n--and a.username = 'dscnongdprprod'\n        and a.user_agent NOT SIMILAR TO '%(bot|crawl|slurp|spider|archiv|spinn|sniff|seo|audit|survey|pingdom|worm|capture|\n          (browser|screen)shots|analyz|index|thumb|check|facebook|YandexBot|Twitterbot|a_archiver|\n           prerender|Prerender|facebookexternalhit|Bingbot|Googlebot|Baiduspider|360(Spider|User-agent)|semalt|HeadlessChrome|SpeedCurve)%'\n        and a.user_server in ('www.dollarshaveclub.com','uk.dollarshaveclub.com','try.dollarshaveclub.com','content.dollarshaveclub.com','ca.dollarshaveclub.com','au.dollarshaveclub.com','help.dollarshaveclub.com','get.dollarshaveclub.com',\n         'uk-help.dollarshaveclub.com','ca-help.dollarshaveclub.com','au-help.dollarshaveclub.com','ask.dollarshaveclub.com')\n--and a.prop8 = 'WWW'\n        and a.date_time >= '2018-08-17'\n        and a.page_event_var2 = 'abTests'\n--and a.mvvar1 <> 'undefined:undefined'\n\n;"
            }
        ],
        "transform.tmp.box_configuration.sql": [
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "customer_id"
                    ],
                    "order_by": [
                        "customer_id"
                    ]
                },
                "tables": [
                    "tmp.box_configuration_name"
                ],
                "subqueries": {
                    "group by": "select ip.customer_id, ip.order_id, ip.invoice_id, p.name from dmt.f_invoice_product as ip join dmt.d_product p on p.product_id = ip.product_id where ip.price > 0 and ip.invoice_status = 'paid' and date (ip.shipment_shipped_at) >= '2019-01-01' group by 1, 2, 3, 4 order by 4"
                },
                "skipped": false,
                "value": "create table tmp.box_configuration_name \ndistkey(customer_id)\nsortkey(customer_id,order_id)\nas (\nselect customer_id,\n       order_id,\n       invoice_id,\n       listagg(name, ' | ')\n       within group (order by customer_id, order_id, invoice_id, name desc) box_config_name   \nfrom (select ip.customer_id,\n        ip.order_id,\n        ip.invoice_id,\n        p.name\n    from dmt.f_invoice_product as ip\n    join dmt.d_product p\n    on p.product_id = ip.product_id\n    where ip.price > 0\n    and ip.invoice_status = 'paid'\n    and date(ip.shipment_shipped_at) >= '2019-01-01'\n    group by 1,2,3,4\n    order by 4)\ngroup by 1,2,3)\n;"
            },
            {
                "type": "CREATE",
                "columns": null,
                "tables": [
                    "tmp.box_configuration"
                ],
                "subqueries": {
                    "a": "select ip.customer_id, ip.order_id, ip.invoice_id, ip.product_sku from dmt.f_invoice_product as ip where ip.price > 0 and ip.invoice_status = 'paid' and date (ip.shipment_shipped_at) >= '2019-01-01' group by 1, 2, 3, 4 order by 4"
                },
                "skipped": false,
                "value": "create table tmp.box_configuration \ndistkey(customer_id)\nsortkey(customer_id,order_id)\nas (\nselect bcn.customer_id,\n       bcn.order_id,\n       bcn.invoice_id,\n       bcn.box_config_name,\n       listagg(product_sku, ' | ')\n       within group (order by a.customer_id, a.order_id, a.invoice_id, a.product_sku desc) box_config_sku  \nfrom (select ip.customer_id,\n        ip.order_id,\n        ip.invoice_id,\n        ip.product_sku\n    from dmt.f_invoice_product as ip\n    where ip.price > 0\n    and ip.invoice_status = 'paid'\n    and date(ip.shipment_shipped_at) >= '2019-01-01'\n    group by 1,2,3,4\n    order by 4) a \njoin tmp.box_configuration_name bcn\non bcn.customer_id = a.customer_id\nand bcn.order_id = a.order_id\nand bcn.invoice_id = a.invoice_id\ngroup by 1,2,3,4)\n;"
            }
        ],
        "transform.tmp.plan_items_at_signup.sql": [
            {
                "skipped": true,
                "value": "create table tmp.plan_items_at_signup\n\ndistkey (plan_id)\nsortkey (plan_id)\n\nas\n\n\nselect pi.*\n\nfrom\n\n(\n select ss.plan_id, ss.plan_created_at, ss.internal_name, ss.sku, sum(ss.quantity) as initial_plan_qty\n\n from\n\n    (select\n        c.customer_id\n        ,p.id as plan_id\n        , p.plan_created_at\n        , 'current_items' as source\n        ,pi.product_sku as sku\n        , dp.internal_name\n        , pi.quantity\n\n    from stg.ps_plans p\njoin dmt.d_customer c on p.customer_id = c.customer_id\njoin stg.ps_plan_items pi on pi.plan_id = p.id and pi.removed is null\nleft join dmt.d_product dp on dp.sku = pi.product_sku\n\nwhere 1=1\n--and c.first_name = 'Adra' ------------- testing filter\n--or c.customer_id = 11440006\n\nunion\n\n    select\n        c.customer_id\n        ,p.id as plan_id\n        , p.plan_created_at\n        , 'plan item changes' as source\n        ,cpie.sku\n        , dp.internal_name\n        ,sum(case when cpie.event like 'change_%' then -1*(cpie.new_quantity - cpie.old_quantity)\n                  when cpie.event like 'add_%' then -1*cpie.quantity\n                  when cpie.event like 'remove_%' then cpie.quantity end) as quantity\n\n    from stg.ps_plans p\njoin dmt.d_customer c on p.customer_id = c.customer_id\njoin stg.ps_change_plan_item_events cpie on cpie.plan_id = p.id\nleft join dmt.d_product dp on dp.sku = cpie.sku\n\nwhere 1=1\n--and c.first_name = 'Adra' ---------- testing filter\n--or c.customer_id = 11440006\n\n\ngroup by 1,2,3,4,5,6) ss\n\ngroup by 1,2,3,4\n\n\n\n) pi\n\nwhere pi.initial_plan_qty > 0;"
            }
        ],
        "transform.tmp.hl_distinct_survey_questions.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "hl_distinct_survey_questions"
                    ],
                    "select": [
                        "question_text"
                    ]
                },
                "tables": [
                    "tmp.hl_distinct_survey_questions",
                    "spectrum.hl_survey_question_set_impression"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into tmp.hl_distinct_survey_questions\nselect distinct question_id, question_text\nfrom spectrum.hl_survey_question_set_impression;"
            }
        ],
        "transform.tmp.hl_base_parsed.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "kafka_timestamp"
                    ]
                },
                "tables": [
                    "tmp.hl_base_parsed"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from tmp.hl_base_parsed where kafka_timestamp >= dateadd('day', -3, current_date) -------- DATE CHANGE!\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "hl_base_parsed"
                    ],
                    "select": [
                        "hb.event_meta"
                    ]
                },
                "tables": [
                    "tmp.hl_base_parsed"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into tmp.hl_base_parsed\n\nselect\njson_extract_path_text(translate(hb.event_meta, '''','\"'), 'timestamp', true) as timestampy,\n\nhb.event_name,\n\n--split_part(split_part(hb.event_data, '{''data'':{''eventName'':''', 2), ''',''data'':{''', 1) as event_name,\n\njson_extract_path_text(translate(hb.event_meta, '''','\"'), 'url', true) as url,\n\nsplit_part(json_extract_path_text(translate(hb.event_meta, '''','\"'), 'url', true), '?', 1) as url_without_params,\n\njson_extract_path_text(translate(hb.event_meta, '''','\"'), 'userAgent', true) as userAgent,\n\njson_extract_path_text(translate(hb.event_meta, '''','\"'), 'requestIp', true) as requestIp,\n\njson_extract_path_text(translate(hb.event_meta, '''','\"'), 'sessionId', true) as sessionId,\n\njson_extract_path_text(translate(hb.event_meta, '''','\"'), 'identifiers', 'adobe', 'mcvisid', true) as mcvisid,\n\njson_extract_path_text(translate(hb.event_meta, '''','\"'), 'obfuscatedCustomerId', true) as obfuscatedCustomerId,\n\nhb.event_meta, hb.kafka_key, hb.kafka_timestamp, hb.event_data,\ntimestamp 'epoch' + cast(nullif(trim(json_extract_path_text(translate(hb.event_meta, '''','\"'), 'timestamp', true)), '') as bigint)/1000 * interval '1 second' as ts_to_datestamp\n\nfrom spectrum.hl_halo_root hb\n\nwhere kafka_timestamp >= dateadd('day', -3, current_date)  --------------- DATE CHANGE!\n AND len(hb.event_data) < 32768\n \n;"
            }
        ],
        "transform.tmp.hl_purchases_poc.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "kafka_timestamp"
                    ]
                },
                "tables": [
                    "tmp.hl_purchases_poc"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from tmp.hl_purchases_poc where kafka_timestamp >= dateadd('day', -3, current_date); ------------- DATE CHANGE!"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "hl_purchases_poc"
                    ],
                    "select": [
                        "tmp.hl_base_parsed.timestampy",
                        "tmp.hl_base_parsed.ts_to_datestamp",
                        "tmp.hl_base_parsed.event_name",
                        "tmp.hl_base_parsed.url",
                        "tmp.hl_base_parsed.url_without_params",
                        "tmp.hl_base_parsed.useragent",
                        "tmp.hl_base_parsed.requestip",
                        "tmp.hl_base_parsed.sessionid",
                        "tmp.hl_base_parsed.mcvisid",
                        "tmp.hl_base_parsed.obfuscatedcustomerid",
                        "tmp.hl_base_parsed.kafka_meta",
                        "tmp.hl_base_parsed.kafka_key",
                        "tmp.hl_base_parsed.kafka_timestamp",
                        "tmp.hl_base_parsed.kafka_data",
                        "spectrum.hl_purchase.obfuscated_order_id",
                        "spectrum.hl_purchase.obfuscated_customer_id",
                        "spectrum.hl_purchase.ledger_displayed_subtotal"
                    ],
                    "join": [
                        "tmp.hl_base_parsed.kafka_key",
                        "spectrum.hl_purchase.kafka_key",
                        "spectrum.hl_purchase.line_item_position",
                        "spectrum.hl_purchase.product_bundled_skus_position"
                    ],
                    "where": [
                        "tmp.hl_base_parsed.event_name",
                        "spectrum.hl_purchase.kafka_date"
                    ]
                },
                "tables": [
                    "tmp.hl_purchases_poc",
                    "tmp.hl_base_parsed",
                    "spectrum.hl_purchase"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into tmp.hl_purchases_poc\n\nselect hbp.timestampy\t\n, hbp.ts_to_datestamp\n, hbp.event_name\t\n, hbp.url\t\n, hbp.url_without_params\t\n, hbp.useragent\t\n, hbp.requestip\t\n, hbp.sessionid\t\n, hbp.mcvisid\t\n, hbp.obfuscatedcustomerid\t\n, hbp.kafka_meta\t\n, hbp.kafka_key\t\n, hbp.kafka_timestamp\t\n, hbp.kafka_data\t\n, hp.obfuscated_order_id, hp.obfuscated_customer_id, hp.ledger_displayed_subtotal\nfrom tmp.hl_base_parsed hbp\njoin spectrum.hl_purchase hp on hbp.kafka_key = hp.kafka_key and nvl(hp.line_item_position,0) = 0 and nvl(hp.product_bundled_skus_position,0) = 0\n\nwhere hbp.event_name = 'purchase'\n\nand hp.kafka_date >= dateadd('day', -3, current_date)\nand hbp.kafka_timestamp >= dateadd('day', -3, current_date) ; -------------- DATE CHANGE!"
            }
        ]
    },
    "dm-esp-extract": {
        "load.stg.cheetah_send_events.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.cheetah_send_events.msg_id",
                        "extract.cheetah_send_events.msg_id"
                    ]
                },
                "tables": [
                    "stg.cheetah_send_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.cheetah_send_events\nUSING extract.cheetah_send_events\nWHERE stg.cheetah_send_events.msg_id = extract.cheetah_send_events.msg_id\n\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "cheetah_send_events"
                    ],
                    "select": [
                        "pk_id",
                        "msg_id",
                        "send_time",
                        "camp_id",
                        "campaign_name",
                        "email_address",
                        "shop_code",
                        "customer_id",
                        "created_at",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.cheetah_send_events",
                    "extract.cheetah_send_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.cheetah_send_events\n     SELECT\n          pk_id,\n          msg_id,\n          send_time,\n          camp_id,\n          campaign_name,\n          email_address,\n          shop_code,\n          customer_id,\n          created_at,\n          dsc_processed_at\n     FROM extract.cheetah_send_events\n;"
            }
        ],
        "extract.dsc_prod.customer_cohort_members.sql": [],
        "load.stg.dsc_prod_plan_items.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.dsc_prod_plan_items.id",
                        "extract.dsc_prod_plan_items.id"
                    ]
                },
                "tables": [
                    "stg.dsc_prod_plan_items"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.dsc_prod_plan_items\nUSING extract.dsc_prod_plan_items\n  WHERE stg.dsc_prod_plan_items.id = extract.dsc_prod_plan_items.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "dsc_prod_plan_items"
                    ],
                    "select": [
                        "id",
                        "product_id",
                        "plan_id",
                        "quantity",
                        "created_at",
                        "updated_at",
                        "obfuscated_id",
                        "snooze_until",
                        "dsc_processed_at",
                        "deleted_at"
                    ]
                },
                "tables": [
                    "stg.dsc_prod_plan_items",
                    "extract.dsc_prod_plan_items"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.dsc_prod_plan_items\n  SELECT\n    id \n    ,product_id \n    ,plan_id    \n    ,quantity \n    ,created_at \n    ,updated_at \n    ,obfuscated_id \n    ,snooze_until\n    ,dsc_processed_at \n    ,deleted_at \n    ,uuid \n  FROM extract.dsc_prod_plan_items\n;"
            }
        ],
        "extract.dsc_prod.marketing_email_links.sql": [],
        "extract.cheetah.open_events.sql": [],
        "load.stg.marketing_transactional_email_instances.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.marketing_transactional_email_instances.id",
                        "extract.marketing_transactional_email_instances.id"
                    ]
                },
                "tables": [
                    "stg.marketing_transactional_email_instances"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.marketing_transactional_email_instances\nUSING extract.marketing_transactional_email_instances\n  WHERE stg.marketing_transactional_email_instances.id = extract.marketing_transactional_email_instances.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "marketing_transactional_email_instances"
                    ],
                    "select": [
                        "id",
                        "customer_id",
                        "transactional_email_variation_id",
                        "emails_instance_id",
                        "obfuscated_id",
                        "status",
                        "created_at",
                        "updated_at",
                        "email_template_id",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.marketing_transactional_email_instances",
                    "extract.marketing_transactional_email_instances"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.marketing_transactional_email_instances\nSELECT\n       id\n     , customer_id\n     , transactional_email_variation_id\n     , emails_instance_id\n     , obfuscated_id\n     , status\n     , created_at\n     , updated_at\n     , email_template_id\n     , dsc_processed_at\nFROM extract.marketing_transactional_email_instances\n;"
            }
        ],
        "load.stg.marketing_transactional_email_open_events.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.marketing_transactional_email_open_events.id",
                        "extract.marketing_transactional_email_open_events.id"
                    ]
                },
                "tables": [
                    "stg.marketing_transactional_email_open_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.marketing_transactional_email_open_events\nUSING extract.marketing_transactional_email_open_events\n  WHERE stg.marketing_transactional_email_open_events.id = extract.marketing_transactional_email_open_events.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "marketing_transactional_email_open_events"
                    ],
                    "select": [
                        "id",
                        "transactional_email_open_id",
                        "user_agent",
                        "browser",
                        "browser_version",
                        "created_at",
                        "updated_at",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.marketing_transactional_email_open_events",
                    "extract.marketing_transactional_email_open_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.marketing_transactional_email_open_events\n  SELECT\n      id ,\n      transactional_email_open_id ,\n      user_agent ,\n      browser ,\n      browser_version ,\n      created_at ,\n      updated_at ,\n      dsc_processed_at\n  FROM extract.marketing_transactional_email_open_events\n;"
            }
        ],
        "load.stg.marketing_transactional_email_click_events.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.marketing_transactional_email_click_events.id",
                        "extract.marketing_transactional_email_click_events.id"
                    ]
                },
                "tables": [
                    "stg.marketing_transactional_email_click_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.marketing_transactional_email_click_events\nUSING extract.marketing_transactional_email_click_events\n  WHERE stg.marketing_transactional_email_click_events.id = extract.marketing_transactional_email_click_events.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "marketing_transactional_email_click_events"
                    ],
                    "select": [
                        "id",
                        "transactional_email_click_id",
                        "user_agent",
                        "browser",
                        "browser_version",
                        "created_at",
                        "updated_at",
                        "email_link_id",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.marketing_transactional_email_click_events",
                    "extract.marketing_transactional_email_click_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.marketing_transactional_email_click_events\n  SELECT\n    id ,\n    transactional_email_click_id ,\n    user_agent ,\n    browser ,\n    browser_version ,\n    created_at ,\n    updated_at ,\n    email_link_id ,\n    dsc_processed_at\n  FROM extract.marketing_transactional_email_click_events\n;"
            }
        ],
        "load.stg.ps_create_and_activate_plan.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.ps_create_and_activate_plan.plan_id",
                        "extract.ps_create_and_activate_plan.plan_id"
                    ]
                },
                "tables": [
                    "stg.ps_create_and_activate_plan"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.ps_create_and_activate_plan\nUSING extract.ps_create_and_activate_plan\n  WHERE stg.ps_create_and_activate_plan.plan_id = extract.ps_create_and_activate_plan.plan_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ps_create_and_activate_plan"
                    ],
                    "select": [
                        "plan_id",
                        "created_at",
                        "activated_at",
                        "rails_site_processed_at",
                        "original_order_id",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.ps_create_and_activate_plan",
                    "extract.ps_create_and_activate_plan"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.ps_create_and_activate_plan\n  SELECT\n\tplan_id\n\t,created_at\n\t,activated_at\n\t,rails_site_processed_at\n\t,original_order_id\n\t,dsc_processed_at\n  FROM extract.ps_create_and_activate_plan\n;"
            }
        ],
        "extract.dsc_prod.preorder_state_histories.sql": [],
        "extract.dsc_prod.customer_subscription_product_frequency_histories.sql": [],
        "load.stg.marketing_campaign_email_click_events.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.marketing_campaign_email_click_events.id",
                        "extract.marketing_campaign_email_click_events.id"
                    ]
                },
                "tables": [
                    "stg.marketing_campaign_email_click_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.marketing_campaign_email_click_events\nUSING extract.marketing_campaign_email_click_events\n  WHERE stg.marketing_campaign_email_click_events.id = extract.marketing_campaign_email_click_events.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "marketing_campaign_email_click_events"
                    ],
                    "select": [
                        "id",
                        "campaign_email_click_id",
                        "created_at",
                        "updated_at",
                        "user_agent",
                        "browser",
                        "browser_version",
                        "email_link_id",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.marketing_campaign_email_click_events",
                    "extract.marketing_campaign_email_click_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.marketing_campaign_email_click_events\n  SELECT\n       id\n     , campaign_email_click_id\n     , created_at\n     , updated_at\n     , user_agent\n     , browser\n     , browser_version\n     , email_link_id\n     , dsc_processed_at\n  FROM extract.marketing_campaign_email_click_events\n;"
            }
        ],
        "load.stg.customer_phone_numbers.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.customer_phone_numbers.id",
                        "extract.customer_phone_numbers.id"
                    ]
                },
                "tables": [
                    "stg.customer_phone_numbers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.customer_phone_numbers\nUSING extract.customer_phone_numbers\nWHERE stg.customer_phone_numbers.id = extract.customer_phone_numbers.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_phone_numbers"
                    ],
                    "select": [
                        "*"
                    ]
                },
                "tables": [
                    "stg.customer_phone_numbers",
                    "extract.customer_phone_numbers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.customer_phone_numbers\n  SELECT *\n  FROM extract.customer_phone_numbers\n;"
            }
        ],
        "load.stg.marketing_transactional_unit_instances.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.marketing_transactional_unit_instances.id",
                        "extract.marketing_transactional_unit_instances.id"
                    ]
                },
                "tables": [
                    "stg.marketing_transactional_unit_instances"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.marketing_transactional_unit_instances\nUSING extract.marketing_transactional_unit_instances\n  WHERE stg.marketing_transactional_unit_instances.id = extract.marketing_transactional_unit_instances.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "marketing_transactional_unit_instances"
                    ],
                    "select": [
                        "id",
                        "marketing_unit_id",
                        "transactional_email_instance_id",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.marketing_transactional_unit_instances",
                    "extract.marketing_transactional_unit_instances"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.marketing_transactional_unit_instances\n  SELECT\n    id ,\n    marketing_unit_id ,\n    transactional_email_instance_id ,\n    dsc_processed_at\n  FROM extract.marketing_transactional_unit_instances\n;"
            }
        ],
        "extract.cheetah.box_manager_topic.sql": [],
        "load.stg.cheetah_bounce_events.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.cheetah_bounce_events.pk_id",
                        "extract.cheetah_bounce_events.pk_id"
                    ]
                },
                "tables": [
                    "stg.cheetah_bounce_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.cheetah_bounce_events\nusing extract.cheetah_bounce_events\nwhere stg.cheetah_bounce_events.pk_id = extract.cheetah_bounce_events.pk_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "cheetah_bounce_events"
                    ],
                    "select": [
                        "pk_id",
                        "msg_id",
                        "bounce_time",
                        "campaign_id",
                        "campaign_name",
                        "category_id",
                        "category_name",
                        "email_address",
                        "status_id",
                        "shop_code",
                        "customer_id",
                        "created_at",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.cheetah_bounce_events",
                    "extract.cheetah_bounce_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.cheetah_bounce_events\nselect\n    pk_id\n  , msg_id\n  , bounce_time\n  , campaign_id\n  , campaign_name\n  , category_id\n  , category_name\n  , email_address\n  , status_id\n  , shop_code\n  , customer_id\n  , created_at\n  , dsc_processed_at\nfrom extract.cheetah_bounce_events\n;"
            }
        ],
        "load.stg.referrals.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.referrals.id",
                        "extract.referrals.id"
                    ]
                },
                "tables": [
                    "stg.referrals"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.referrals\nusing extract.referrals\nwhere stg.referrals.id = extract.referrals.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "referrals"
                    ],
                    "select": [
                        "id",
                        "referred_customer_id",
                        "referring_customer_id",
                        "status",
                        "customer_credit_id",
                        "amount",
                        "created_at",
                        "updated_at",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.referrals",
                    "extract.referrals"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.referrals\nselect\n\t  id\n\t, referred_customer_id\n\t, referring_customer_id\n\t, status\n\t, customer_credit_id\n\t, amount\n\t, created_at\n\t, updated_at\n\t, dsc_processed_at\nfrom extract.referrals\n;"
            }
        ],
        "extract.dsc_prod.customer_cohorts.sql": [],
        "load.stg.marketing_email_links.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.marketing_email_links.id",
                        "extract.marketing_email_links.id"
                    ]
                },
                "tables": [
                    "stg.marketing_email_links"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.marketing_email_links\nusing extract.marketing_email_links\nwhere stg.marketing_email_links.id = extract.marketing_email_links.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "cheetah_click_events"
                    ],
                    "select": [
                        "id",
                        "url",
                        "tag",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.cheetah_click_events",
                    "extract.marketing_email_links"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.cheetah_click_events\nSELECT\n    id ,\n    url ,\n    tag ,\n    dsc_processed_at\nfrom extract.marketing_email_links\n;"
            }
        ],
        "load.stg.cheetah_box_manager_topic.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.cheetah_box_manager_topic.customer_id",
                        "extract.cheetah_box_manager_topic.customer_id",
                        "stg.cheetah_box_manager_topic.shop_code",
                        "extract.cheetah_box_manager_topic.shop_code"
                    ]
                },
                "tables": [
                    "stg.cheetah_box_manager_topic"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.cheetah_box_manager_topic\nusing extract.cheetah_box_manager_topic\nwhere stg.cheetah_box_manager_topic.customer_id = extract.cheetah_box_manager_topic.customer_id\n     and stg.cheetah_box_manager_topic.shop_code = extract.cheetah_box_manager_topic.shop_code\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "cheetah_box_manager_topic"
                    ],
                    "select": [
                        "customer_id",
                        "first_name",
                        "last_name",
                        "email_address",
                        "next_box_contents",
                        "locale",
                        "subscription_status",
                        "next_bill_date",
                        "wallet_balance",
                        "shop_code",
                        "shop_name",
                        "shipping_address_line_1",
                        "shipping_address_line_2",
                        "shipping_address_city",
                        "shipping_address_state",
                        "shipping_address_zip_code",
                        "shipping_address_country",
                        "payment_method_type",
                        "payment_method_credit_card_type",
                        "payment_method_credit_card_mask_number",
                        "payment_method_credit_card_expiration_month",
                        "payment_method_credit_card_expiration_year",
                        "encoded_at"
                    ]
                },
                "tables": [
                    "stg.cheetah_box_manager_topic",
                    "extract.cheetah_box_manager_topic"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.cheetah_box_manager_topic\nselect\n       customer_id\n     , first_name\n     , last_name\n     , email_address\n     , next_box_contents\n     , locale\n     , subscription_status\n     , next_bill_date\n     , wallet_balance\n     , shop_code\n     , shop_name\n     , shipping_address_line_1\n     , shipping_address_line_2\n     , shipping_address_city\n     , shipping_address_state\n     , shipping_address_zip_code\n     , shipping_address_country\n     , payment_method_type\n     , payment_method_credit_card_type\n     , payment_method_credit_card_mask_number\n     , payment_method_credit_card_expiration_month\n     , payment_method_credit_card_expiration_year\n     , encoded_at\nfrom extract.cheetah_box_manager_topic\n;"
            }
        ],
        "extract.dsc_prod.marketing_transactional_email_groups.sql": [],
        "extract.dsc_prod.marketing_campaign_email_variation_events.sql": [],
        "load.stg.ps_create_physical_gift_events.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.ps_create_physical_gift_events.order_id",
                        "extract.ps_create_physical_gift_events.order_id"
                    ]
                },
                "tables": [
                    "stg.ps_create_physical_gift_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.ps_create_physical_gift_events\nUSING extract.ps_create_physical_gift_events\n  WHERE stg.ps_create_physical_gift_events.order_id = extract.ps_create_physical_gift_events.order_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ps_create_physical_gift_events"
                    ],
                    "select": [
                        "order_id",
                        "gifter_customer_id",
                        "giftee_email_address",
                        "email_delivery_date"
                    ]
                },
                "tables": [
                    "stg.ps_create_physical_gift_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.ps_create_physical_gift_events\n  SELECT\n\t   order_id :: INT\n   , gifter_customer_id :: INT\n   , giftee_email_address\n   , email_delivery_date :: TIMESTAMP -- converted from varchar(255)\n   , dsc_processed_at\n  FROM extract.ps_create_physical_gift_events\n;"
            }
        ],
        "load.stg.marketing_transactional_email_clicks.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.marketing_transactional_email_clicks.id",
                        "extract.marketing_transactional_email_clicks.id"
                    ]
                },
                "tables": [
                    "stg.marketing_transactional_email_clicks"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.marketing_transactional_email_clicks\nUSING extract.marketing_transactional_email_clicks\n  WHERE stg.marketing_transactional_email_clicks.id = extract.marketing_transactional_email_clicks.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "marketing_transactional_email_clicks"
                    ],
                    "select": [
                        "id",
                        "transactional_email_instance_id",
                        "user_agent",
                        "browser",
                        "browser_version",
                        "ip_address",
                        "created_at",
                        "updated_at",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.marketing_transactional_email_clicks",
                    "extract.marketing_transactional_email_clicks"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.marketing_transactional_email_clicks\n  SELECT\n    id ,\n    transactional_email_instance_id ,\n    user_agent ,\n    browser ,\n    browser_version ,\n    ip_address ,\n    created_at ,\n    updated_at ,\n    dsc_processed_at\n  FROM extract.marketing_transactional_email_clicks\n;"
            }
        ],
        "load.stg.preorder_state_histories.sql": [
            {
                "skipped": true,
                "value": "delete from dm.stg.preorder_state_histories\nusing dm.extract.preorder_state_histories\nwhere dm.stg.preorder_state_histories.id = dm.extract.preorder_state_histories.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "preorder_state_histories"
                    ],
                    "select": [
                        "id",
                        "preorder_id",
                        "from_state",
                        "to_state",
                        "created_at",
                        "updated_at",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "dm.stg.preorder_state_histories",
                    "dm.extract.preorder_state_histories"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into dm.stg.preorder_state_histories\nselect\n\tid\n\t, preorder_id\n\t, from_state\n\t, to_state\n\t, created_at\n\t, updated_at\n\t, dsc_processed_at\nfrom dm.extract.preorder_state_histories\n;"
            }
        ],
        "extract.dsc_prod.marketing_transactional_email_instances.sql": [],
        "load.stg.marketing_campaign_email_opens.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.marketing_campaign_email_opens.id",
                        "extract.marketing_campaign_email_opens.id"
                    ]
                },
                "tables": [
                    "stg.marketing_campaign_email_opens"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.marketing_campaign_email_opens\nUSING extract.marketing_campaign_email_opens\n  WHERE stg.marketing_campaign_email_opens.id = extract.marketing_campaign_email_opens.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "marketing_campaign_email_opens"
                    ],
                    "select": [
                        "id",
                        "user_agent",
                        "browser",
                        "browser_version",
                        "ip_address",
                        "created_at",
                        "updated_at",
                        "campaign_email_instance_id",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.marketing_campaign_email_opens",
                    "extract.marketing_campaign_email_opens"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.marketing_campaign_email_opens\nSELECT\n        id\n      , user_agent\n      , browser\n      , browser_version\n      , ip_address\n      , created_at\n      , updated_at\n      , campaign_email_instance_id\n      , dsc_processed_at\n  FROM extract.marketing_campaign_email_opens\n;"
            }
        ],
        "extract.cheetah.semi_login_token.sql": [],
        "extract.dsc_prod.marketing_campaign_email_open_events.sql": [],
        "load.stg.customer_subscription_product_frequency_histories.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.customer_subscription_product_frequency_histories.id",
                        "extract.customer_subscription_product_frequency_histories.id"
                    ]
                },
                "tables": [
                    "stg.customer_subscription_product_frequency_histories"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.customer_subscription_product_frequency_histories\nusing extract.customer_subscription_product_frequency_histories\nwhere stg.customer_subscription_product_frequency_histories.id = extract.customer_subscription_product_frequency_histories.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_subscription_product_frequency_histories"
                    ],
                    "select": [
                        "id",
                        "customer_subscription_id",
                        "old_frequency",
                        "new_frequency",
                        "created_at",
                        "updated_at",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.customer_subscription_product_frequency_histories",
                    "extract.customer_subscription_product_frequency_histories"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.customer_subscription_product_frequency_histories\nselect\n    id\n  , customer_subscription_id\n  , old_frequency\n  , new_frequency\n  , created_at\n  , updated_at\n  , dsc_processed_at\nfrom extract.customer_subscription_product_frequency_histories\n;"
            }
        ],
        "extract.dsc_prod.preorders.sql": [],
        "load.stg.customer_cohort_members.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.customer_cohort_members.customer_id",
                        "extract.customer_cohort_members.customer_id",
                        "stg.customer_cohort_members.customer_cohort_id",
                        "extract.customer_cohort_members.customer_cohort_id"
                    ]
                },
                "tables": [
                    "stg.customer_cohort_members"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.customer_cohort_members\nUSING extract.customer_cohort_members\n  WHERE stg.customer_cohort_members.customer_id = extract.customer_cohort_members.customer_id\n    AND stg.customer_cohort_members.customer_cohort_id = extract.customer_cohort_members.customer_cohort_id\n;"
            },
            {
                "skipped": true,
                "value": "INSERT INTO stg.customer_cohort_members\n\nSELECT\n    id\n  , customer_cohort_id\n  , customer_id\n  , created_at\n  , updated_at\n  , dsc_processed_at\n\nFROM\n(\nSELECT\n    id :: INTEGER as id\n  , customer_cohort_id :: INTEGER as customer_cohort_id\n\t, customer_id :: INTEGER as customer_id\n\t, created_at :: TIMESTAMP as created_at\n\t, updated_at :: TIMESTAMP as updated_at\n\t, dsc_processed_at :: TIMESTAMP as dsc_processed_at\n\t, row_number() OVER (PARTITION BY customer_id,customer_cohort_id ORDER BY updated_at DESC) AS rnk\nFROM\nextract.customer_cohort_members\n)\nWHERE rnk = 1\n\n;"
            }
        ],
        "extract.dsc_prod.marketing_transactional_email_opens.sql": [],
        "load.stg.ps_change_snooze_events.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.ps_change_snooze_events.plan_item_id",
                        "extract.ps_change_snooze_events.plan_item_id",
                        "stg.ps_change_snooze_events.event",
                        "extract.ps_change_snooze_events.event",
                        "stg.ps_change_snooze_events.rails_site_processed_at",
                        "extract.ps_change_snooze_events.rails_site_processed_at"
                    ]
                },
                "tables": [
                    "stg.ps_change_snooze_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.ps_change_snooze_events\nUSING extract.ps_change_snooze_events\n    WHERE stg.ps_change_snooze_events.plan_item_id = extract.ps_change_snooze_events.plan_item_id\n      AND stg.ps_change_snooze_events.event = extract.ps_change_snooze_events.event\n      AND stg.ps_change_snooze_events.rails_site_processed_at = extract.ps_change_snooze_events.rails_site_processed_at\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ps_change_snooze_events"
                    ],
                    "select": [
                        "event",
                        "plan_id",
                        "plan_item_id",
                        "scheduled_cart_id",
                        "sku",
                        "quantity",
                        "old_snooze_until_date"
                    ]
                },
                "tables": [
                    "stg.ps_change_snooze_events",
                    "extract.ps_change_snooze_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.ps_change_snooze_events\n  SELECT\n    event\n  , plan_id\n  , plan_item_id\n  , scheduled_cart_id\n  , sku\n  , quantity\n  , old_snooze_until_date :: TIMESTAMP\n  , new_snooze_until_date :: TIMESTAMP\n  , rails_site_processed_at :: TIMESTAMP\n  , dsc_processed_at\n  FROM extract.ps_change_snooze_events\n;"
            }
        ],
        "load.stg.cheetah_semi_login_token.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.cheetah_semi_login_token.customer_id",
                        "extract.cheetah_semi_login_token.customer_id"
                    ]
                },
                "tables": [
                    "stg.cheetah_semi_login_token"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.cheetah_semi_login_token\nusing extract.cheetah_semi_login_token\nwhere stg.cheetah_semi_login_token.customer_id = extract.cheetah_semi_login_token.customer_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "cheetah_semi_login_token"
                    ],
                    "select": [
                        "customer_id",
                        "obfuscated_id",
                        "token",
                        "encoded_at"
                    ]
                },
                "tables": [
                    "stg.cheetah_semi_login_token",
                    "extract.cheetah_semi_login_token"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.cheetah_semi_login_token\nselect\n\tcustomer_id ,\n\tobfuscated_id ,\n\ttoken ,\n\tencoded_at :: TIMESTAMP\nfrom extract.cheetah_semi_login_token\n;"
            }
        ],
        "load.stg.marketing_transactional_emails.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.marketing_transactional_emails.id",
                        "extract.marketing_transactional_emails.id"
                    ]
                },
                "tables": [
                    "stg.marketing_transactional_emails"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.marketing_transactional_emails\nUSING extract.marketing_transactional_emails\n  WHERE stg.marketing_transactional_emails.id = extract.marketing_transactional_emails.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "marketing_transactional_emails"
                    ],
                    "select": [
                        "id",
                        "name",
                        "description",
                        "transactional_email_group_id",
                        "transactional_email_trigger_id",
                        "status",
                        "hidden_at",
                        "created_at",
                        "updated_at",
                        "is_semi_login_disabled",
                        "requires_active_subscriber",
                        "requires_active_payment_method",
                        "au_shop_enabled",
                        "www_shop_enabled",
                        "ca_shop_enabled",
                        "uk_shop_enabled",
                        "dsc_processed_at",
                        "exclude_bm2_customers"
                    ]
                },
                "tables": [
                    "stg.marketing_transactional_emails",
                    "extract.marketing_transactional_emails"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.marketing_transactional_emails\n  SELECT\n        id ,\n        name,\n        description,\n        transactional_email_group_id ,\n        transactional_email_trigger_id ,\n        status ,\n        hidden_at ,\n        created_at,\n        updated_at ,\n        is_semi_login_disabled ,\n        requires_active_subscriber ,\n        requires_active_payment_method,\n        au_shop_enabled ,\n        www_shop_enabled ,\n        ca_shop_enabled ,\n        uk_shop_enabled ,\n        dsc_processed_at ,\n        exclude_bm2_customers\n  FROM extract.marketing_transactional_emails\n;"
            }
        ],
        "load.stg.marketing_campaign_email_groups.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.marketing_campaign_email_groups.id",
                        "extract.marketing_campaign_email_groups.id"
                    ]
                },
                "tables": [
                    "stg.marketing_campaign_email_groups"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.marketing_campaign_email_groups\nUSING extract.marketing_campaign_email_groups\n  WHERE stg.marketing_campaign_email_groups.id = extract.marketing_campaign_email_groups.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "marketing_campaign_email_groups"
                    ],
                    "select": [
                        "id",
                        "name",
                        "description",
                        "created_at",
                        "updated_at",
                        "category",
                        "hidden_at",
                        "melody_workflow_id",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.marketing_campaign_email_groups",
                    "extract.marketing_campaign_email_groups"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.marketing_campaign_email_groups\n  SELECT\n      id ,\n      name,\n      description,\n      created_at ,\n      updated_at ,\n      category ,\n      hidden_at ,\n      melody_workflow_id ,\n      dsc_processed_at\n  FROM extract.marketing_campaign_email_groups\n;"
            }
        ],
        "load.stg.cheetah_click_events.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.cheetah_click_events.click_id",
                        "extract.cheetah_click_events.click_id",
                        "stg.cheetah_click_events.msg_id",
                        "extract.cheetah_click_events.msg_id"
                    ]
                },
                "tables": [
                    "stg.cheetah_click_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.cheetah_click_events\nUSING extract.cheetah_click_events\nWHERE stg.cheetah_click_events.click_id = extract.cheetah_click_events.click_id\n      AND stg.cheetah_click_events.msg_id = extract.cheetah_click_events.msg_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "cheetah_click_events"
                    ],
                    "select": [
                        "pk_id",
                        "click_id",
                        "click_time",
                        "msg_id",
                        "link_id",
                        "link_name",
                        "campaign_id",
                        "campaign_name",
                        "ip_address",
                        "email_address",
                        "raw_user_agent",
                        "hardware_family",
                        "platform_name",
                        "platform_version",
                        "browser_name",
                        "browser_vendor",
                        "browser_version",
                        "is_mobile_flag",
                        "release_year",
                        "lat_long",
                        "country",
                        "state_province",
                        "city",
                        "zip",
                        "device_type",
                        "shop_code",
                        "customer_id",
                        "created_at",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.cheetah_click_events",
                    "extract.cheetah_click_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.cheetah_click_events\n     SELECT\n          pk_id,\n          click_id,\n          click_time,\n          msg_id,\n          link_id,\n          link_name,\n          campaign_id,\n          campaign_name,\n          ip_address,\n          email_address,\n          raw_user_agent,\n          hardware_family,\n          platform_name,\n          platform_version,\n          browser_name,\n          browser_vendor,\n          browser_version,\n          is_mobile_flag,\n          release_year,\n          lat_long,\n          country,\n          state_province,\n          city,\n          zip,\n          device_type,\n          shop_code,\n          customer_id,\n          created_at,\n          dsc_processed_at\n     FROM extract.cheetah_click_events\n;"
            }
        ],
        "extract.plan_stream.create_and_activate_plan.sql": [],
        "load.stg.customer_primary_addresses.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.customer_primary_addresses.id",
                        "extract.customer_primary_addresses.id"
                    ]
                },
                "tables": [
                    "stg.customer_primary_addresses"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.customer_primary_addresses\nUSING extract.customer_primary_addresses\nWHERE stg.customer_primary_addresses.id = extract.customer_primary_addresses.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_primary_addresses"
                    ],
                    "select": [
                        "id",
                        "customer_id",
                        "address_id",
                        "address_type",
                        "shop_id",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.customer_primary_addresses",
                    "extract.customer_primary_addresses"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.customer_primary_addresses\n  SELECT\n    id\n  , customer_id\n  , address_id\n  , address_type\n  , shop_id\n  , dsc_processed_at\n  FROM extract.customer_primary_addresses\n;"
            }
        ],
        "extract.dsc_prod.marketing_campaign_email_groups.sql": [],
        "extract.dsc_prod.marketing_campaign_emails.sql": [],
        "extract.dsc_prod.marketing_campaign_email_variations.sql": [],
        "extract.dsc_prod.referrals.sql": [],
        "load.stg.marketing_transactional_email_opens.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.marketing_transactional_email_opens.id",
                        "extract.marketing_transactional_email_opens.id"
                    ]
                },
                "tables": [
                    "stg.marketing_transactional_email_opens"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.marketing_transactional_email_opens\nUSING extract.marketing_transactional_email_opens\n  WHERE stg.marketing_transactional_email_opens.id = extract.marketing_transactional_email_opens.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "marketing_transactional_email_opens"
                    ],
                    "select": [
                        "id",
                        "transactional_email_instance_id",
                        "user_agent",
                        "browser",
                        "browser_version",
                        "ip_address",
                        "created_at",
                        "updated_at",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.marketing_transactional_email_opens",
                    "extract.marketing_transactional_email_opens"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.marketing_transactional_email_opens\n  SELECT\n       id\n     , transactional_email_instance_id\n     , user_agent\n     , browser\n     , browser_version\n     , ip_address\n     , created_at\n     , updated_at\n     , dsc_processed_at\n  FROM extract.marketing_transactional_email_opens\n;"
            }
        ],
        "load.stg.cheetah_open_events.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.cheetah_open_events.click_id",
                        "extract.cheetah_open_events.click_id",
                        "stg.cheetah_open_events.msg_id",
                        "extract.cheetah_open_events.msg_id"
                    ]
                },
                "tables": [
                    "stg.cheetah_open_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.cheetah_open_events\nUSING extract.cheetah_open_events\nWHERE stg.cheetah_open_events.click_id = extract.cheetah_open_events.click_id\n      AND stg.cheetah_open_events.msg_id = extract.cheetah_open_events.msg_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "cheetah_open_events"
                    ],
                    "select": [
                        "pk_id",
                        "click_id",
                        "click_time",
                        "msg_id",
                        "link_id",
                        "link_name",
                        "campaign_id",
                        "campaign_name",
                        "ip_address",
                        "email_address",
                        "raw_user_agent",
                        "hardware_family",
                        "platform_name",
                        "platform_version",
                        "browser_name",
                        "browser_vendor",
                        "browser_version",
                        "is_mobile_flag",
                        "release_year",
                        "lat_long",
                        "country",
                        "state_province",
                        "city",
                        "zip",
                        "device_type",
                        "shop_code",
                        "customer_id",
                        "created_at",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.cheetah_open_events",
                    "extract.cheetah_open_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.cheetah_open_events\n    SELECT\n        pk_id,\n        click_id,\n        click_time,\n        msg_id,\n        link_id,\n        link_name,\n        campaign_id,\n        campaign_name,\n        ip_address,\n        email_address,\n        left(raw_user_agent, 2048),\n        hardware_family,\n        platform_name,\n        platform_version,\n        browser_name,\n        browser_vendor,\n        browser_version,\n        is_mobile_flag,\n        release_year,\n        lat_long,\n        country,\n        state_province,\n        city,\n        zip,\n        device_type,\n        shop_code,\n        customer_id,\n        created_at,\n        dsc_processed_at\n    FROM extract.cheetah_open_events\n;"
            }
        ],
        "extract.dsc_prod.customer_shop_attributes.sql": [],
        "load.stg.customer_cohorts.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.customer_cohorts.id",
                        "extract.customer_cohorts.id"
                    ]
                },
                "tables": [
                    "stg.customer_cohorts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.customer_cohorts\nUSING extract.customer_cohorts\n  WHERE stg.customer_cohorts.id = extract.customer_cohorts.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_cohorts"
                    ],
                    "select": [
                        "created_at"
                    ]
                },
                "tables": [
                    "stg.customer_cohorts",
                    "extract.customer_cohorts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.customer_cohorts\nSELECT\n    id :: INTEGER as id\n  , name :: VARCHAR(128) as name\n  , description :: VARCHAR(256) as description\n  , created_at :: TIMESTAMP as created_at\n  , updated_at :: TIMESTAMP as updated_at\n  , cohort_type :: INTEGER as cohort_type\n  , icon :: VARCHAR(32) as icon\n  , color :: VARCHAR(16) as color\n  , code :: VARCHAR(128) as code\n  , dsc_processed_at :: TIMESTAMP as dsc_processed_at\n\nFROM extract.customer_cohorts\n;"
            }
        ],
        "extract.plan_stream.close_scheduled_cart_items.sql": [],
        "extract.dsc_prod.plans.sql": [],
        "extract.cheetah.send_events.sql": [],
        "extract.cheetah.opt_out_segment.sql": [],
        "extract.dsc_prod.marketing_campaign_email_click_events.sql": [],
        "extract.cheetah.sms_send_events.sql": [],
        "extract.dsc_prod.marketing_transactional_email_open_events.sql": [],
        "load.stg.marketing_campaign_email_variations.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.marketing_campaign_email_variations.id",
                        "extract.marketing_campaign_email_variations.id"
                    ]
                },
                "tables": [
                    "stg.marketing_campaign_email_variations"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.marketing_campaign_email_variations\nUSING extract.marketing_campaign_email_variations\n  WHERE stg.marketing_campaign_email_variations.id = extract.marketing_campaign_email_variations.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "marketing_campaign_email_variations"
                    ],
                    "select": [
                        "id",
                        "name",
                        "description",
                        "campaign_email_id",
                        "status",
                        "schedule",
                        "email_template_id",
                        "from_name",
                        "from_email",
                        "email_subject",
                        "created_at",
                        "updated_at",
                        "segment_percentage",
                        "send_at_date_time",
                        "html_preview_updated_at",
                        "is_batching_enabled",
                        "hidden_at",
                        "html_preview",
                        "do_not_send",
                        "html_minification_mode",
                        "using_template_subject_line",
                        "email_template_priority_engine",
                        "communication_channel",
                        "push_alert",
                        "push_badge",
                        "push_sound",
                        "push_silent",
                        "push_custom_fields",
                        "push_open",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.marketing_campaign_email_variations",
                    "extract.marketing_campaign_email_variations"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.marketing_campaign_email_variations\n  SELECT\n      id ,\n      name ,\n      description,  \n      campaign_email_id,\n      status ,\n      schedule, \n      email_template_id ,\n      from_name, \n      from_email, \n      email_subject, \n      created_at ,\n      updated_at ,\n      segment_percentage ,\n      send_at_date_time ,\n      html_preview_updated_at ,\n      is_batching_enabled ,\n      hidden_at ,\n      html_preview ,\n      do_not_send ,\n      html_minification_mode ,\n      using_template_subject_line ,\n      email_template_priority_engine ,\n      communication_channel ,\n      push_alert ,\n      push_badge, \n      push_sound, \n      push_silent ,\n      push_custom_fields, \n      push_open,\n      dsc_processed_at\n  FROM extract.marketing_campaign_email_variations\n;"
            }
        ],
        "extract.dsc_prod.marketing_transactional_email_click_events.sql": [],
        "extract.dsc_prod.customer_phone_numbers.sql": [],
        "extract.cheetah.click_events.sql": [],
        "load.stg.ps_close_scheduled_cart_items.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.ps_close_scheduled_cart_items.id",
                        "extract.ps_close_scheduled_cart_items.id"
                    ]
                },
                "tables": [
                    "stg.ps_close_scheduled_cart_items"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.ps_close_scheduled_cart_items\nUSING extract.ps_close_scheduled_cart_items\n  WHERE stg.ps_close_scheduled_cart_items.id = extract.ps_close_scheduled_cart_items.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ps_close_scheduled_cart_items"
                    ],
                    "select": [
                        "id",
                        "scheduled_cart_id",
                        "plan_id",
                        "shop_id",
                        "customer_id",
                        "scheduled_cart_created_at",
                        "scheduled_cart_updated_at",
                        "scheduled_cart_closed_at",
                        "quantity",
                        "quantity_recurring",
                        "base_unit_price",
                        "unit_price",
                        "total_discount",
                        "total_price",
                        "product_size",
                        "product_id",
                        "product_nature",
                        "product_sku",
                        "product_taxable",
                        "product_type",
                        "product_bundle_id",
                        "rails_site_processed_at",
                        "deleted_at",
                        "removed",
                        "dsc_processed_at",
                        "plan_state"
                    ],
                    "where": [
                        "deleted_at"
                    ]
                },
                "tables": [
                    "stg.ps_close_scheduled_cart_items",
                    "extract.ps_close_scheduled_cart_items"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.ps_close_scheduled_cart_items\n  SELECT\n     id\n   , scheduled_cart_id\n   , plan_id\n   , shop_id\n   , customer_id\n   , scheduled_cart_created_at\n   , scheduled_cart_updated_at\n   , scheduled_cart_closed_at\n   , quantity\n   , quantity_recurring\n   , base_unit_price\n   , unit_price\n   , total_discount\n   , total_price\n   , product_size\n   , product_id\n   , product_nature\n   , product_sku\n   , product_taxable\n   , product_type\n   , product_bundle_id\n   , rails_site_processed_at\n   , (case when deleted_at is not null then 'true' else removed end)::BOOLEAN\n   , dsc_processed_at\n   , plan_state\n   , deleted_at\n  FROM extract.ps_close_scheduled_cart_items\n  where deleted_at is null\n;"
            }
        ],
        "load.stg.marketing_campaign_email_instances.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.marketing_campaign_email_instances.id",
                        "extract.marketing_campaign_email_instances.id"
                    ]
                },
                "tables": [
                    "stg.marketing_campaign_email_instances"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.marketing_campaign_email_instances\nUSING extract.marketing_campaign_email_instances\n  WHERE stg.marketing_campaign_email_instances.id = extract.marketing_campaign_email_instances.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "marketing_campaign_email_instances"
                    ],
                    "select": [
                        "campaign_email_event_id",
                        "customer_id",
                        "status",
                        "email_service_provider_message_id",
                        "created_at",
                        "updated_at",
                        "obfuscated_id",
                        "status_message",
                        "emails_instance_id",
                        "campaign_email_variation_event_id",
                        "email_template_id",
                        "id",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.marketing_campaign_email_instances",
                    "extract.marketing_campaign_email_instances"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.marketing_campaign_email_instances\n  SELECT\n       campaign_email_event_id\n     , customer_id\n     , status\n     , left(email_service_provider_message_id, 64)\n     , created_at\n     , updated_at\n     , obfuscated_id\n     , left(status_message, 64)\n     , emails_instance_id\n     , campaign_email_variation_event_id\n     , email_template_id\n     , id\n     , dsc_processed_at\n  FROM extract.marketing_campaign_email_instances\n;"
            }
        ],
        "load.stg.dsc_prod_plans.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.dsc_prod_plans.id",
                        "extract.dsc_prod_plans.id"
                    ]
                },
                "tables": [
                    "stg.dsc_prod_plans"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.dsc_prod_plans\nUSING extract.dsc_prod_plans\n  WHERE stg.dsc_prod_plans.id = extract.dsc_prod_plans.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "dsc_prod_plans"
                    ],
                    "select": [
                        "id",
                        "customer_id",
                        "shop_id",
                        "frequency",
                        "state",
                        "activated_at",
                        "bills_at",
                        "created_at",
                        "updated_at",
                        "ended_at",
                        "obfuscated_id",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.dsc_prod_plans",
                    "extract.dsc_prod_plans"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.dsc_prod_plans\n  SELECT\n    id,\n    customer_id,\n    shop_id,\n    frequency,\n    state,\n    activated_at,\n    bills_at,\n    created_at,\n    updated_at,\n    ended_at,\n    obfuscated_id,\n    dsc_processed_at\n  FROM extract.dsc_prod_plans\n;"
            }
        ],
        "extract.cheetah.customer_products_segment.sql": [],
        "extract.dsc_prod.marketing_transactional_unit_instances.sql": [],
        "load.stg.marketing_campaign_emails.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.marketing_campaign_emails.id",
                        "extract.marketing_campaign_emails.id"
                    ]
                },
                "tables": [
                    "stg.marketing_campaign_emails"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.marketing_campaign_emails\nUSING extract.marketing_campaign_emails\n  WHERE stg.marketing_campaign_emails.id = extract.marketing_campaign_emails.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "marketing_campaign_emails"
                    ],
                    "select": [
                        "id",
                        "name",
                        "description",
                        "campaign_email_group_id",
                        "created_at",
                        "updated_at"
                    ]
                },
                "tables": [
                    "stg.marketing_campaign_emails",
                    "extract.marketing_campaign_emails"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.marketing_campaign_emails\n  SELECT\n      id\n     , name\n     , description\n     , campaign_email_group_id\n     , created_at\n     , updated_at\n     , type\n     , status\n     , schedule\n     , recurring\n     , send_at_date_time\n     , is_high_volume\n     , hidden_at\n     , schedule_starts_at\n     , is_semi_login_disabled\n     , requires_active_subscriber\n     , extra_horse_power\n     , use_sherlock\n     , prewarm_customers\n     , schedule_ends_at\n     , requires_active_payment_method\n     , shop_id\n     , pregenerate_coupons\n     , dsc_processed_at\n  FROM extract.marketing_campaign_emails\n;"
            }
        ],
        "extract.cheetah.bounce_events.sql": [],
        "load.stg.cheetah_crm_attributes_segment.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.cheetah_crm_attributes_segment.customer_id",
                        "extract.cheetah_crm_attributes_segment.customer_id",
                        "stg.cheetah_crm_attributes_segment.shop_code",
                        "extract.cheetah_crm_attributes_segment.shop_code"
                    ]
                },
                "tables": [
                    "stg.cheetah_crm_attributes_segment"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.cheetah_crm_attributes_segment\nusing extract.cheetah_crm_attributes_segment\nwhere stg.cheetah_crm_attributes_segment.customer_id = extract.cheetah_crm_attributes_segment.customer_id\n     and stg.cheetah_crm_attributes_segment.shop_code = extract.cheetah_crm_attributes_segment.shop_code\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "cheetah_crm_attributes_segment"
                    ],
                    "select": [
                        "customer_id",
                        "last_used_android_app",
                        "last_used_ios_app",
                        "customer_subscription_frequency",
                        "customer_subscription_start_date_time",
                        "wallet_balance",
                        "initial_customer_subscription_plan",
                        "number_of_boxes",
                        "customer_subscription_status",
                        "customer_subscription_end_date_time",
                        "customer_type",
                        "initial_start_date_time",
                        "next_bill_date_time",
                        "customer_subscription_bill_cycle_reference_date_time",
                        "customer_subscription_plan",
                        "first_order_date",
                        "shell_account",
                        "shipping_state",
                        "last_added_to_cart_date",
                        "last_pause_date",
                        "ever_on_four_x",
                        "ever_on_exec",
                        "ever_on_twin",
                        "changed_plan_in_past",
                        "changed_frequency_in_past",
                        "last_marketing_email_open_date",
                        "last_transactional_email_open_date",
                        "has_unpaid_invoice",
                        "shop_code",
                        "original_content_opt_out",
                        "unsubscribed",
                        "processed_at",
                        "plan_activated_date",
                        "plan_frequency",
                        "plan_shipping_state",
                        "plan_next_bill_date_time",
                        "plan_status",
                        "number_of_plan_boxes",
                        "last_box_shipped_date",
                        "last_box_delivered_date",
                        "subscription_payment_failure_date",
                        "gift_subscriptions_purchased",
                        "gift_cards_purchased",
                        "last_gift_card_date",
                        "subscription_frequency_switches",
                        "last_subscription_frequency_switch_date",
                        "subscription_reactivations",
                        "current_plan_pricing_tier",
                        "quantity_to_next_plan_pricing_tier",
                        "scheduled_cart_quantity",
                        "push_notifications_enabled",
                        "sms_number",
                        "sms_number_transactional_opt_in",
                        "sms_number_marketing_opt_in",
                        "last_gift_subscription_date",
                        "migration_source"
                    ]
                },
                "tables": [
                    "stg.cheetah_crm_attributes_segment",
                    "extract.cheetah_crm_attributes_segment"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.cheetah_crm_attributes_segment\nselect\n       customer_id\n     , last_used_android_app\n     , last_used_ios_app\n     , customer_subscription_frequency\n     , customer_subscription_start_date_time\n     , wallet_balance\n     , initial_customer_subscription_plan\n     , number_of_boxes\n     , customer_subscription_status\n     , customer_subscription_end_date_time\n     , customer_type\n     , initial_start_date_time\n     , next_bill_date_time\n     , customer_subscription_bill_cycle_reference_date_time\n     , customer_subscription_plan\n     , first_order_date\n     , shell_account\n     , shipping_state\n     , last_added_to_cart_date\n     , last_pause_date\n     , ever_on_four_x\n     , ever_on_exec\n     , ever_on_twin\n     , changed_plan_in_past\n     , changed_frequency_in_past\n     , last_marketing_email_open_date\n     , last_transactional_email_open_date\n     , has_unpaid_invoice\n     , shop_code\n     , original_content_opt_out\n     , unsubscribed\n     , processed_at\n     , plan_activated_date\n     , plan_frequency\n     , plan_shipping_state\n     , plan_next_bill_date_time\n     , plan_status\n     , number_of_plan_boxes\n     , last_box_shipped_date\n     , last_box_delivered_date\n     , subscription_payment_failure_date\n     , gift_subscriptions_purchased\n     , gift_cards_purchased\n     , last_gift_card_date\n     , subscription_frequency_switches\n     , last_subscription_frequency_switch_date\n     , subscription_reactivations\n     , current_plan_pricing_tier\n     , quantity_to_next_plan_pricing_tier\n     , scheduled_cart_quantity\n     , push_notifications_enabled\n     , sms_number\n     , sms_number_transactional_opt_in\n     , sms_number_marketing_opt_in\n     , last_gift_subscription_date\n     , migration_source\nfrom extract.cheetah_crm_attributes_segment\n;"
            }
        ],
        "load.stg.dsc_prod_scheduled_cart_items.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.dsc_prod_scheduled_cart_items.id",
                        "extract.dsc_prod_scheduled_cart_items.id"
                    ]
                },
                "tables": [
                    "stg.dsc_prod_scheduled_cart_items"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.dsc_prod_scheduled_cart_items\nUSING extract.dsc_prod_scheduled_cart_items\n  WHERE stg.dsc_prod_scheduled_cart_items.id = extract.dsc_prod_scheduled_cart_items.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "dsc_prod_scheduled_cart_items"
                    ],
                    "select": [
                        "id",
                        "scheduled_cart_id",
                        "product_id",
                        "quantity",
                        "created_at",
                        "updated_at",
                        "obfuscated_id",
                        "dsc_processed_at",
                        "deleted_at"
                    ]
                },
                "tables": [
                    "stg.dsc_prod_scheduled_cart_items",
                    "extract.dsc_prod_scheduled_cart_items"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.dsc_prod_scheduled_cart_items\n  SELECT\n    id,\n    scheduled_cart_id,\n    product_id,\n    quantity,\n    created_at,\n    updated_at,\n    obfuscated_id,\n    dsc_processed_at,\n    deleted_at,\n\t  uuid,\n\t  cart_id\n  FROM extract.dsc_prod_scheduled_cart_items\n;"
            }
        ],
        "load.stg.marketing_campaign_email_open_events.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.marketing_campaign_email_open_events.id",
                        "extract.marketing_campaign_email_open_events.id"
                    ]
                },
                "tables": [
                    "stg.marketing_campaign_email_open_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.marketing_campaign_email_open_events\nUSING extract.marketing_campaign_email_open_events\n  WHERE stg.marketing_campaign_email_open_events.id = extract.marketing_campaign_email_open_events.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "marketing_campaign_email_open_events"
                    ],
                    "select": [
                        "id",
                        "campaign_email_open_id",
                        "created_at",
                        "updated_at",
                        "user_agent",
                        "browser",
                        "browser_version",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.marketing_campaign_email_open_events",
                    "extract.marketing_campaign_email_open_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.marketing_campaign_email_open_events\n  SELECT\n       id\n     , campaign_email_open_id\n     , created_at\n     , updated_at\n     , user_agent\n     , browser\n     , browser_version\n     , dsc_processed_at\n  FROM extract.marketing_campaign_email_open_events\n;"
            }
        ],
        "extract.plan_stream.change_snooze_events.sql": [],
        "load.stg.replenishment_dates.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.replenishment_dates.customer_id",
                        "extract.replenishment_dates.customer_id"
                    ]
                },
                "tables": [
                    "stg.replenishment_dates"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.replenishment_dates\nusing extract.replenishment_dates\nwhere stg.replenishment_dates.customer_id = extract.replenishment_dates.customer_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "replenishment_dates"
                    ],
                    "select": [
                        "customer_id",
                        "esb",
                        "lather",
                        "dew",
                        "mps",
                        "srm",
                        "prep_scrub",
                        "ps_oil",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.replenishment_dates",
                    "extract.replenishment_dates"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.replenishment_dates\nSELECT\n\tcustomer_id,\n\tesb ,\n\tlather ,\n\tdew ,\n\tmps ,\n\tsrm ,\n\tprep_scrub ,\n\tps_oil ,\n\tdsc_processed_at\nFROM extract.replenishment_dates\n;"
            }
        ],
        "extract.dsc_prod.marketing_transactional_emails.sql": [],
        "load.stg.cheetah_opt_out_segment.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.cheetah_opt_out_segment.customer_id",
                        "extract.cheetah_opt_out_segment.customer_id",
                        "stg.cheetah_opt_out_segment.shop_code",
                        "extract.cheetah_opt_out_segment.shop_code"
                    ]
                },
                "tables": [
                    "stg.cheetah_opt_out_segment"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.cheetah_opt_out_segment\nusing extract.cheetah_opt_out_segment\nwhere stg.cheetah_opt_out_segment.customer_id = extract.cheetah_opt_out_segment.customer_id\n  and stg.cheetah_opt_out_segment.shop_code = extract.cheetah_opt_out_segment.shop_code\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "cheetah_opt_out_segment"
                    ],
                    "select": [
                        "customer_id",
                        "shop_code",
                        "processed_at"
                    ]
                },
                "tables": [
                    "stg.cheetah_opt_out_segment",
                    "extract.cheetah_opt_out_segment"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.cheetah_opt_out_segment\nselect\n     customer_id\n   , shop_code\n   , processed_at\nfrom extract.cheetah_opt_out_segment\n;"
            }
        ],
        "extract.dsc_prod.marketing_transactional_email_clicks.sql": [],
        "load.stg.marketing_campaign_email_variation_events.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.marketing_campaign_email_variation_events.id",
                        "extract.marketing_campaign_email_variation_events.id"
                    ]
                },
                "tables": [
                    "stg.marketing_campaign_email_variation_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.marketing_campaign_email_variation_events\nUSING extract.marketing_campaign_email_variation_events\n  WHERE stg.marketing_campaign_email_variation_events.id = extract.marketing_campaign_email_variation_events.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "marketing_campaign_email_variation_events"
                    ],
                    "select": [
                        "id",
                        "campaign_email_variation_id",
                        "status",
                        "campaign_email_event_id",
                        "raw_sql_query",
                        "list_count",
                        "created_at",
                        "updated_at",
                        "trigger_date_time",
                        "send_emails_at_date_time",
                        "is_preview",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.marketing_campaign_email_variation_events",
                    "extract.marketing_campaign_email_variation_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.marketing_campaign_email_variation_events\n  SELECT\n      id ,\n      campaign_email_variation_id ,\n      status ,\n      campaign_email_event_id ,\n      raw_sql_query ,\n      list_count ,\n      created_at ,\n      updated_at ,\n      trigger_date_time ,\n      send_emails_at_date_time ,\n      is_preview ,\n      dsc_processed_at\n  FROM extract.marketing_campaign_email_variation_events\n;"
            }
        ],
        "load.stg.preorders.sql": [
            {
                "skipped": true,
                "value": "delete from dm.stg.preorders\nusing dm.extract.preorders\nwhere dm.stg.preorders.id = dm.extract.preorders.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "preorders"
                    ],
                    "select": [
                        "id",
                        "customer_id",
                        "shop_id",
                        "obfuscated_id",
                        "state",
                        "cart_items",
                        "campaign_name",
                        "created_at",
                        "updated_at",
                        "has_default_shipping_address",
                        "has_default_payment_method",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "dm.stg.preorders",
                    "dm.extract.preorders"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into dm.stg.preorders\nselect\n\tid\n\t, customer_id\n\t, shop_id\n\t, obfuscated_id\n\t, state\n\t, cart_items\n\t, campaign_name\n\t, created_at\n\t, updated_at\n\t, has_default_shipping_address\n\t, has_default_payment_method\n\t, dsc_processed_at\nfrom dm.extract.preorders\n;"
            }
        ],
        "load.stg.marketing_transactional_email_groups.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.marketing_transactional_email_groups.id",
                        "extract.marketing_transactional_email_groups.id"
                    ]
                },
                "tables": [
                    "stg.marketing_transactional_email_groups"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.marketing_transactional_email_groups\nUSING extract.marketing_transactional_email_groups\n  WHERE stg.marketing_transactional_email_groups.id = extract.marketing_transactional_email_groups.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "marketing_transactional_email_groups"
                    ],
                    "select": [
                        "id",
                        "name",
                        "description",
                        "hidden_at",
                        "created_at",
                        "updated_at",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.marketing_transactional_email_groups",
                    "extract.marketing_transactional_email_groups"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.marketing_transactional_email_groups\n  SELECT\n      id ,\n      name,\n      description,\n      hidden_at ,\n      created_at ,\n      updated_at ,\n      dsc_processed_at\n  FROM extract.marketing_transactional_email_groups\n;"
            }
        ],
        "extract.dsc_prod.marketing_campaign_email_instances.sql": [],
        "load.stg.cheetah_sms_send_events.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.cheetah_sms_send_events.pk_id",
                        "extract.cheetah_sms_send_events.pk_id"
                    ]
                },
                "tables": [
                    "stg.cheetah_sms_send_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.cheetah_sms_send_events\nusing extract.cheetah_sms_send_events\nwhere stg.cheetah_sms_send_events.pk_id = extract.cheetah_sms_send_events.pk_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "cheetah_send_events"
                    ],
                    "select": [
                        "pk_id",
                        "msg_id",
                        "send_time",
                        "camp_id",
                        "camp_name",
                        "p_customer_id",
                        "p_shop_code"
                    ]
                },
                "tables": [
                    "stg.cheetah_send_events",
                    "extract.cheetah_sms_send_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.cheetah_send_events\nselect\n     pk_id\n   , msg_id\n   , send_time\n   , camp_id\n   , camp_name\n   , p_customer_id\n   , p_shop_code\nfrom extract.cheetah_sms_send_events\n;"
            }
        ],
        "extract.dsc_prod.scheduled_cart_items.sql": [],
        "extract.plan_stream.svs_response_events.sql": [],
        "extract.cheetah.crm_attributes_segment.sql": [],
        "load.stg.marketing_transactional_email_variations.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.marketing_transactional_email_variations.id",
                        "extract.marketing_transactional_email_variations.id"
                    ]
                },
                "tables": [
                    "stg.marketing_transactional_email_variations"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.marketing_transactional_email_variations\nUSING extract.marketing_transactional_email_variations\n  WHERE stg.marketing_transactional_email_variations.id = extract.marketing_transactional_email_variations.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "marketing_transactional_email_variations"
                    ],
                    "select": [
                        "id",
                        "name",
                        "description",
                        "transactional_email_id",
                        "email_template_id",
                        "from_name",
                        "from_email",
                        "email_subject",
                        "html_preview",
                        "html_preview_updated_at",
                        "status",
                        "hidden_at",
                        "created_at",
                        "updated_at",
                        "segment_percentage",
                        "do_not_send",
                        "html_minification_mode",
                        "using_template_subject_line",
                        "email_template_priority_engine",
                        "communication_channel",
                        "push_alert",
                        "push_badge",
                        "push_sound",
                        "push_silent",
                        "push_custom_fields",
                        "push_open",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.marketing_transactional_email_variations",
                    "extract.marketing_transactional_email_variations"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.marketing_transactional_email_variations\n  SELECT\n      id ,\n      name,\n      description,\n      transactional_email_id ,\n      email_template_id ,\n      from_name,\n      from_email,\n      email_subject,\n      html_preview,\n      html_preview_updated_at ,\n      status ,\n      hidden_at,\n      created_at ,\n      updated_at ,\n      segment_percentage ,\n      do_not_send ,\n      html_minification_mode ,\n      using_template_subject_line ,\n      email_template_priority_engine ,\n      communication_channel,\n      push_alert,\n      push_badge ,\n      push_sound ,\n      push_silent ,\n      push_custom_fields,\n      push_open,\n      dsc_processed_at\n  FROM extract.marketing_transactional_email_variations\n;"
            }
        ],
        "extract.optimove.replenishment_dates.sql": [],
        "extract.dsc_prod.plan_items.sql": [],
        "extract.dsc_prod.shipments.sql": [],
        "extract.dsc_prod.marketing_campaign_unsubscribes.sql": [],
        "load.stg.ps_svs_response_events.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.ps_svs_response_events.id",
                        "extract.ps_svs_response_events.id"
                    ]
                },
                "tables": [
                    "stg.ps_svs_response_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.ps_svs_response_events\nUSING extract.ps_svs_response_events\n  WHERE stg.ps_svs_response_events.id = extract.ps_svs_response_events.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ps_svs_response_events"
                    ],
                    "select": [
                        "id",
                        "approved_amount"
                    ]
                },
                "tables": [
                    "stg.ps_svs_response_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.ps_svs_response_events\n  SELECT\n     id\n   , approved_amount :: numeric(18,2) -- need to check this\n   , created_at :: TIMESTAMP -- converted from varchar(255)\n   , card_number\n   , pin_number\n   , customer_id\n   , method_name\n   , svs_return_code\n   , dsc_processed_at\n  FROM extract.ps_svs_response_events\n;"
            }
        ],
        "load.stg.marketing_campaign_email_clicks.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.marketing_campaign_email_clicks.id",
                        "extract.marketing_campaign_email_clicks.id"
                    ]
                },
                "tables": [
                    "stg.marketing_campaign_email_clicks"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.marketing_campaign_email_clicks\nUSING extract.marketing_campaign_email_clicks\n  WHERE stg.marketing_campaign_email_clicks.id = extract.marketing_campaign_email_clicks.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "marketing_campaign_email_clicks"
                    ],
                    "select": [
                        "id",
                        "user_agent",
                        "browser",
                        "browser_version",
                        "ip_address",
                        "created_at",
                        "updated_at",
                        "campaign_email_instance_id",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.marketing_campaign_email_clicks",
                    "extract.marketing_campaign_email_clicks"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.marketing_campaign_email_clicks\n  SELECT\n      id ,\n      user_agent ,\n      browser,\n      browser_version,\n      ip_address,\n      created_at ,\n      updated_at ,\n      campaign_email_instance_id ,\n      dsc_processed_at\n  FROM extract.marketing_campaign_email_clicks\n;"
            }
        ],
        "load.stg.customer_shop_attributes.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.customer_shop_attributes.id",
                        "extract.customer_shop_attributes.id"
                    ]
                },
                "tables": [
                    "stg.customer_shop_attributes"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.customer_shop_attributes\nUSING extract.customer_shop_attributes\nWHERE stg.customer_shop_attributes.id = extract.customer_shop_attributes.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_shop_attributes"
                    ],
                    "select": [
                        "id",
                        "shop_id",
                        "customer_id",
                        "wallet_balance",
                        "created_at",
                        "updated_at",
                        "marketing_opt_in_preference",
                        "uses_plan_system",
                        "dsc_processed_at",
                        "eligible_for_pq"
                    ]
                },
                "tables": [
                    "stg.customer_shop_attributes",
                    "extract.customer_shop_attributes"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.customer_shop_attributes\n  SELECT\n    id\n\t, shop_id\n\t, customer_id\n\t, wallet_balance\n\t, created_at\n\t, updated_at\n\t, marketing_opt_in_preference\n\t, uses_plan_system\n\t, dsc_processed_at\n\t, eligible_for_pq\n\nFROM extract.customer_shop_attributes\n;"
            }
        ],
        "load.stg.cheetah_customer_products_segment.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.cheetah_customer_products_segment.customer_id",
                        "extract.cheetah_customer_products_segment.customer_id",
                        "stg.cheetah_customer_products_segment.shop_code",
                        "extract.cheetah_customer_products_segment.shop_code",
                        "stg.cheetah_customer_products_segment.product_id",
                        "extract.cheetah_customer_products_segment.product_id",
                        "stg.cheetah_customer_products_segment.sku",
                        "extract.cheetah_customer_products_segment.sku"
                    ]
                },
                "tables": [
                    "stg.cheetah_customer_products_segment"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.cheetah_customer_products_segment\nusing extract.cheetah_customer_products_segment\nwhere stg.cheetah_customer_products_segment.customer_id = extract.cheetah_customer_products_segment.customer_id\n     and stg.cheetah_customer_products_segment.shop_code = extract.cheetah_customer_products_segment.shop_code\n     and stg.cheetah_customer_products_segment.product_id = extract.cheetah_customer_products_segment.product_id\n     and stg.cheetah_customer_products_segment.sku = extract.cheetah_customer_products_segment.sku\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "cheetah_customer_products_segment"
                    ],
                    "select": [
                        "customer_id",
                        "product_id",
                        "sku",
                        "shop_code",
                        "box_manager_ranking",
                        "processed_at"
                    ]
                },
                "tables": [
                    "stg.cheetah_customer_products_segment",
                    "extract.cheetah_customer_products_segment"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.cheetah_customer_products_segment\nselect\n         customer_id\n       , product_id\n       , sku\n       , shop_code\n       , box_manager_ranking\n       , processed_at\nfrom extract.cheetah_customer_products_segment\n;"
            }
        ],
        "load.stg.marketing_campaign_unsubscribes.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "marketing_campaign_unsubscribes"
                    ],
                    "select": [
                        "id",
                        "customer_id",
                        "snapshotted_campaign_email_group_id",
                        "campaign_email_id",
                        "campaign_email_instance_id",
                        "created_at",
                        "updated_at",
                        "synced_to_madrivo",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.marketing_campaign_unsubscribes",
                    "extract.marketing_campaign_unsubscribes"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.marketing_campaign_unsubscribes\n  SELECT\n\t\t\tid\n\t\t,\tcustomer_id\n\t  ,\tsnapshotted_campaign_email_group_id\n\t\t,\tcampaign_email_id\n\t\t,\tcampaign_email_instance_id\n\t\t,\tcreated_at\n\t\t,\tupdated_at\n\t\t,\tsynced_to_madrivo\n\t\t,\tdsc_processed_at\n  FROM extract.marketing_campaign_unsubscribes\n;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- UPSERT matching records // defaulting deleted_at_source = 0\n\nDELETE FROM stg.marketing_campaign_unsubscribes_upsert\nUSING extract.marketing_campaign_unsubscribes\nWHERE stg.marketing_campaign_unsubscribes_upsert.customer_id = extract.marketing_campaign_unsubscribes.customer_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "marketing_campaign_unsubscribes_upsert"
                    ],
                    "select": [
                        "id",
                        "customer_id",
                        "snapshotted_campaign_email_group_id",
                        "campaign_email_id",
                        "campaign_email_instance_id",
                        "created_at",
                        "updated_at",
                        "synced_to_madrivo",
                        "dsc_processed_at"
                    ]
                },
                "tables": [
                    "stg.marketing_campaign_unsubscribes_upsert",
                    "extract.marketing_campaign_unsubscribes"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.marketing_campaign_unsubscribes_upsert\n  SELECT\n\t\t\tid\n\t\t,\tcustomer_id\n\t  ,\tsnapshotted_campaign_email_group_id\n\t\t,\tcampaign_email_id\n\t\t,\tcampaign_email_instance_id\n\t\t,\tcreated_at\n\t\t,\tupdated_at\n\t\t,\tsynced_to_madrivo\n\t\t, 0 AS deleted_at_source\n\t\t, NULL as dm_deletion_ts\n\t\t, getdate() as dw_load_date_time\n\t\t,\tdsc_processed_at\n  FROM extract.marketing_campaign_unsubscribes\n;"
            }
        ],
        "extract.dsc_prod.marketing_campaign_email_opens.sql": [],
        "extract.dsc_prod.marketing_campaign_email_clicks.sql": [],
        "extract.plan_stream.create_physical_gift_events.sql": [],
        "extract.dsc_prod.customer_primary_addresses.sql": [],
        "extract.dsc_prod.marketing_transactional_email_variations.sql": [],
        "load.stg.dsc_prod_shipments.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.dsc_prod_shipments.id",
                        "extract.dsc_prod_shipments.id"
                    ]
                },
                "tables": [
                    "stg.dsc_prod_shipments"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.dsc_prod_shipments\nUSING extract.dsc_prod_shipments\n  WHERE stg.dsc_prod_shipments.id = extract.dsc_prod_shipments.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "dsc_prod_shipments"
                    ],
                    "select": [
                        "id",
                        "shipping_address_id",
                        "order_id",
                        "tracking_number",
                        "price",
                        "tax",
                        "created_at",
                        "updated_at",
                        "status",
                        "provider_status"
                    ]
                },
                "tables": [
                    "stg.dsc_prod_shipments",
                    "extract.dsc_prod_shipments"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.dsc_prod_shipments\n  SELECT\n    id\n  , shipping_address_id\n  , order_id\n  , tracking_number\n  , price\n  , tax\n  , created_at\n  , updated_at\n  , status\n  , provider_status\n  , method\n  , provider_method\n  , total_weight\n  , packaging_weight\n  , contents_weight\n  , delivered_at\n  , fulfillment_provider_id\n  , inventory_location_id\n  , order_fulfillment_id\n  , contents_volume\n  , shipped_at\n  , shipment_cost\n  , handling_cost\n  , obfuscated_id\n  , dsc_processed_at\n  FROM extract.dsc_prod_shipments\n;"
            }
        ]
    },
    "dm-optouts": {
        "load.stg.friendbuy_opt_outs_au_ca.sql": [
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- not deleting any existing opt_outs, since a customer can potentially opt_out multiple times\n\ninsert into stg.customer_opt_outs\nselect\n    b.customer_id\n  , 'AU_CA' as shop_code\n  , trim(a.email, '\"') as email\n  , a.opt_out_timestamp\n  , trim(a.ip_address, '\"') as ip_address\n  , getdate() as dw_load_date_time\nfrom extract.friendbuy_opt_outs a\n left join dmt.d_customer_360 b\non trim(a.email, '\"') = b.email ;"
            }
        ],
        "load.stg.friendbuy_opt_outs_us.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.campaign_optouts.email",
                        "extract.friendbuy_optouts.email",
                        "stg.campaign_optouts.opt_out_timestamp",
                        "extract.friendbuy_optouts.opt_out_timestamp"
                    ]
                },
                "tables": [
                    "stg.campaign_optouts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.campaign_optouts\nusing extract.friendbuy_optouts\nwhere stg.campaign_optouts.email = trim(extract.friendbuy_optouts.email, '\"')\n  and stg.campaign_optouts.opt_out_timestamp = extract.friendbuy_optouts.opt_out_timestamp :: timestamp\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "campaign_optouts"
                    ],
                    "select": [
                        "dmt.d_customer.customer_id",
                        "extract.friendbuy_optouts.email",
                        "extract.friendbuy_optouts.opt_out_timestamp"
                    ],
                    "join": [
                        "extract.friendbuy_optouts.email",
                        "dmt.d_customer.email"
                    ]
                },
                "tables": [
                    "stg.campaign_optouts",
                    "extract.friendbuy_optouts",
                    "dmt.d_customer"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.campaign_optouts\nselect\n    b.customer_id\n  , 'US' as shop_code\n  , trim(a.email, '\"') as email\n  , a.opt_out_timestamp :: timestamp\n  , trim(a.ip_address, '\"') as ip_address\n  , getdate() as dw_load_date_time\n\nfrom extract.friendbuy_optouts a\n  left join dmt.d_customer b\n    on trim(a.email, '\"') = b.email ;"
            }
        ],
        "load.stg.optimove_opt_outs.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "campaign_optouts"
                    ],
                    "select": [
                        "extract.optimove_optouts.customer_id",
                        "dmt.d_customer.registered_in_shop_id",
                        "extract.optimove_optouts.email",
                        "extract.optimove_optouts.opt_out_timestamp"
                    ],
                    "join": [
                        "extract.optimove_optouts.email",
                        "stg.campaign_optouts.email",
                        "extract.optimove_optouts.opt_out_timestamp",
                        "stg.campaign_optouts.opt_out_timestamp",
                        "extract.optimove_optouts.customer_id",
                        "dmt.d_customer.customer_id"
                    ],
                    "where": [
                        "stg.campaign_optouts.email"
                    ]
                },
                "tables": [
                    "stg.campaign_optouts",
                    "extract.optimove_optouts",
                    "dmt.d_customer"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.campaign_optouts\nSELECT\n    a.customer_id,\n    CASE\n       WHEN c.registered_in_shop_id = 1 THEN 'US'\n       WHEN c.registered_in_shop_id = 2 THEN 'AU'\n       WHEN c.registered_in_shop_id = 3 THEN 'OTHER'\n       WHEN c.registered_in_shop_id = 4 THEN 'CA'\n       WHEN c.registered_in_shop_id = 5 THEN 'UK'\n       ELSE 'NA'\n    END AS shop_code,\n    a.email as email,\n    a.opt_out_timestamp as opt_out_timestamp,\n    NULL as ip_address,\n    getdate() as dw_load_date_time\nFROM extract.optimove_optouts a\n  LEFT JOIN\n        stg.campaign_optouts b\n        ON a.email = b.email\n        AND a.opt_out_timestamp = b.opt_out_timestamp\n  LEFT JOIN\n        dmt.d_customer c\n        ON a.customer_id = c.customer_id\n  WHERE b.email IS NULL ;"
            }
        ],
        "export.stg.campaign_optouts.sql": [],
        "load.stg.friendbuy_opt_outs_uk.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.campaign_optouts.email",
                        "extract.friendbuy_optouts.email",
                        "stg.campaign_optouts.opt_out_timestamp",
                        "extract.friendbuy_optouts.opt_out_timestamp"
                    ]
                },
                "tables": [
                    "stg.campaign_optouts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.campaign_optouts\nusing extract.friendbuy_optouts\nwhere stg.campaign_optouts.email = trim(extract.friendbuy_optouts.email, '\"')\n  and stg.campaign_optouts.opt_out_timestamp = extract.friendbuy_optouts.opt_out_timestamp :: timestamp\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "campaign_optouts"
                    ],
                    "select": [
                        "dmt.d_customer.customer_id",
                        "extract.friendbuy_optouts.email",
                        "extract.friendbuy_optouts.opt_out_timestamp"
                    ],
                    "join": [
                        "extract.friendbuy_optouts.email",
                        "dmt.d_customer.email"
                    ]
                },
                "tables": [
                    "stg.campaign_optouts",
                    "extract.friendbuy_optouts",
                    "dmt.d_customer"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.campaign_optouts\nselect\n    b.customer_id\n  , 'UK' as shop_code\n  , trim(a.email, '\"') as email\n  , a.opt_out_timestamp :: timestamp\n  , trim(a.ip_address, '\"') as ip_address\n  , getdate() as dw_load_date_time\n\nfrom extract.friendbuy_optouts a\n  left join dmt.d_customer b\n    on trim(a.email, '\"') = b.email ;"
            }
        ],
        "load.stg.campaign_optouts_braze.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "event_type_users_messages_email_unsubscribe_export_to_upstream"
                    ],
                    "select": [
                        "a.id",
                        "a.external_user_id",
                        "a.email_address",
                        "a.opt_out_timestamp",
                        "a.campaign_id",
                        "a.campaign_name",
                        "external_user_id",
                        "email_address"
                    ],
                    "where": [
                        "campaign_name",
                        "stg.campaign_optouts.email"
                    ],
                    "join": [
                        "a.external_user_id",
                        "dmt.d_customer.customer_uuid",
                        "a.email_address",
                        "stg.campaign_optouts.email",
                        "a.opt_out_timestamp",
                        "stg.campaign_optouts.opt_out_timestamp"
                    ]
                },
                "tables": [
                    "stg.event_type_users_messages_email_unsubscribe_export_to_upstream",
                    "braze_spectrum.event_type_users_messages_email_unsubscribe",
                    "dmt.d_customer",
                    "stg.campaign_optouts"
                ],
                "subqueries": {
                    "a": "select distinct id, external_user_id, email_address, (TIMESTAMP 'epoch' + time * INTERVAL '1 Second') :: TIMESTAMP AS opt_out_timestamp, date, campaign_id, campaign_name from braze_spectrum.event_type_users_messages_email_unsubscribe where campaign_name not ilike '%ocnewsletter%' and campaign_name not ilike '%oc%newsletter%' and campaign_name not ilike '%ocnl%'"
                },
                "skipped": false,
                "value": "INSERT INTO stg.event_type_users_messages_email_unsubscribe_export_to_upstream   \n  SELECT\n    a.id, a.external_user_id, a.email_address,a.opt_out_timestamp\n       , \"date\",a.campaign_id,a.campaign_name, getdate() as dw_loaddatetime \nFROM (select distinct id, external_user_id, email_address, (TIMESTAMP 'epoch' + time  * INTERVAL '1 Second') :: TIMESTAMP AS  opt_out_timestamp\n       , \"date\",campaign_id,campaign_name \n             from braze_spectrum.event_type_users_messages_email_unsubscribe\n          where campaign_name not ilike '%ocnewsletter%'\n\t\t\tand campaign_name not ilike '%oc%newsletter%'\n\t\t\tand campaign_name not ilike '%ocnl%'        \n             ) a\n  INNER JOIN\n        dmt.d_customer c\n        ON a.external_user_id = c.customer_uuid\n  LEFT JOIN\n        stg.campaign_optouts b\n        ON a.email_address = b.email\n        AND a.opt_out_timestamp = b.opt_out_timestamp\n  WHERE b.email IS NULL ;"
            },
            {
                "skipped": true,
                "value": "INSERT INTO stg.campaign_optouts  \nSELECT\n    c.customer_id,\n    CASE\n       WHEN c.registered_in_shop_id = 1 THEN 'US'\n       WHEN c.registered_in_shop_id = 2 THEN 'AU'\n       WHEN c.registered_in_shop_id = 3 THEN 'OTHER'\n       WHEN c.registered_in_shop_id = 4 THEN 'CA'\n       WHEN c.registered_in_shop_id = 5 THEN 'UK'\n       ELSE 'NA'\n    END AS shop_code,\n    a.email_address as email,\n    a.opt_out_timestamp AS  opt_out_timestamp,\n    NULL as ip_address,\n    getdate() as dw_load_date_time\nFROM (select distinct id, external_user_id, email_address, (TIMESTAMP 'epoch' + time  * INTERVAL '1 Second') :: TIMESTAMP AS  opt_out_timestamp\n       , \"date\",campaign_id,campaign_name\n             from braze_spectrum.event_type_users_messages_email_unsubscribe\n          where campaign_name not ilike '%ocnewsletter%'\n\t\t\tand campaign_name not ilike '%oc%newsletter%'\n\t\t\tand campaign_name not ilike '%ocnl%'        \n             ) a\n  INNER JOIN\n        dmt.d_customer c\n        ON a.external_user_id = c.customer_uuid\n  LEFT JOIN\n        stg.campaign_optouts b\n        ON a.email_address = b.email\n        AND a.opt_out_timestamp = b.opt_out_timestamp\n  WHERE b.email IS NULL ;"
            }
        ],
        "load.stg.acquisition_optouts.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "acquisition_optouts"
                    ],
                    "select": [
                        "email_md5",
                        "opt_out_timestamp",
                        "ip_address",
                        "campaign",
                        "mailer",
                        "submailer"
                    ]
                },
                "tables": [
                    "stg.acquisition_optouts",
                    "extract.acquisition_optouts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.acquisition_optouts\nselect\n     email_md5\n\t , opt_out_timestamp\n\t , ip_address\n\t , campaign\n\t , mailer\n\t , submailer\nfrom extract.acquisition_optouts\n;"
            }
        ]
    },
    "dm-acxiom-import-s3": {
        "load.stg.customer_acxiom_output_test.sql": [],
        "load.stg.customer_acxiom_output.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.customer_acxiom_output.customer_id",
                        "extract.customer_acxiom_output.customer_id"
                    ]
                },
                "tables": [
                    "stg.customer_acxiom_output"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.customer_acxiom_output\nusing extract.customer_acxiom_output\nwhere stg.customer_acxiom_output.customer_id = extract.customer_acxiom_output.customer_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_acxiom_output"
                    ],
                    "select": [
                        "t.customer_id",
                        "t.first_name",
                        "t.last_name",
                        "t.billing_street_address_line_1",
                        "t.billing_street_address_line_2",
                        "t.billing_city",
                        "t.billing_state",
                        "t.billing_zip_code",
                        "t.street_address_line_1"
                    ]
                },
                "tables": [
                    "stg.customer_acxiom_output"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.customer_acxiom_output\nselect\n      t.customer_id\n    , t.first_name\n    , t.last_name\n\n    , t.billing_street_address_line_1\n    , t.billing_street_address_line_2\n    , t.billing_city\n    , t.billing_state\n    , t.billing_zip_code\n\n    , t.street_address_line_1   -- shipping_street_address_line_1\n    , t.street_address_line_2   -- shipping_street_address_line_2\n    , t.city                    -- shipping_city\n    , t.state                   -- shipping_state\n    , t.zip_code                -- shipping_zip_code\n\n    , t.email\n\n    , t.ibe2019_2019\n    , t.ibe2021_2021\n    , t.ibe2022_2022\n    , t.ibe2032_2032\n    , t.ibe2067_2067\n    , t.ibe2200_2200\n    , t.ibe2300_2300\n    , t.ibe2351_2351\n    -- , t.ibe2403_2403  -- removed in May 2018\n    , t.ibe6136_6136\n    , t.ibe6137_6137\n    , t.ibe6139_6139\n    , t.ibe6141_6141\n    , t.ibe6142_6142\n    , t.ibe6201_6201\n    , t.ibe6281_6281\n    , t.ibe6313_6313\n    , t.ibe6314_6314\n    , t.ibe6330_6330\n    , t.ibe6331_6331\n    , t.ibe6380_6380\n    , t.ibe6425_6425\n    , t.ibe6484_6484\n    , t.ibe6537_6537\n    , t.ibe6538_6538\n    , t.ibe6556_6556\n    , t.ibe6579_6579\n    , t.ibe6604_6604\n    , t.ibe6605_6605\n    , t.ibe6610_6610\n    , t.ibe6703_6703\n    , t.ibe6793_6793\n    , t.ibe6805_6805\n    , t.ibe6819_6819\n    , t.ibe7469_7469\n    , t.ibe7471_7471\n    , t.ibe7719_7719\n    , t.ibe7720_7720\n    , t.ibe7726_7726\n    , t.ibe7732_7732\n    , t.ibe7739_7739\n    , t.ibe7744_7744\n    , t.ibe7745_7745\n    , t.ibe7748_7748\n    , t.ibe7750_7750\n    , t.ibe7751_7751\n    , t.ibe7752_7752\n    , t.ibe7753_7753\n    , t.ibe7758_7758\n    , t.ibe7765_7765\n    , t.ibe7769_7769\n    , t.ibe7771_7771\n    , t.ibe7772_7772\n    , t.ibe7777_7777\n    , t.ibe7779_7779\n    , t.ibe7796_7796\n    , t.ibe7801_7801\n    , t.ibe7803_7803\n    , t.ibe7804_7804\n    , t.ibe7809_7809\n    , t.ibe7824_7824\n    , t.ibe7827_7827\n    , t.ibe7831_7831\n    , t.ibe7841_7841\n    , t.ibe7844_7844\n    , t.ibe7848_7848\n    , t.ibe7849_7849\n    , t.ibe8082_8082\n    , t.ibe8177_8177\n    , t.ibe8257_8257\n    , t.ibe8272_8272\n    , t.ibe8276_8276\n    , t.ibe8278_8278\n    , t.ibe8279_8279\n    , t.ibe8321_8321\n    , t.ibe8440_8440\n    , t.ibe8487_8487\n    , t.ibe8531_8531\n    , t.ibe8581_8581\n    , t.ibe8591_8591\n    , t.ibe8602_8602\n    , t.ibe8604_8604\n    , t.ibe8607_8607\n    , t.ibe8608_8608\n    , t.ibe8609_8609\n    , t.ibe8614_8614\n    , t.ibe8615_8615\n    , t.ibe8616_8616\n    , t.ibe8619_8619\n    , t.ibe8620_8620\n    , t.ibe8622_8622\n    , t.ibe8626_8626\n    , t.ibe8628_8628\n    , t.ibe8629_8629\n    , t.ibe8630_8630\n    , t.ibe8637_8637\n    , t.ibe8639_8639\n    , t.ibe8640_8640\n    , t.ibe8641_8641\n    , t.ibe8648_8648\n    , t.ibe8652_8652\n    , t.ibe8653_8653\n    , t.ibe8654_8654\n    , t.ibe8666_8666\n    , t.ibe8670_8670\n    , t.ibe8671_8671\n    , t.ibe8680_8680\n    , t.ibe8688_8688\n    , t.ibe8692_8692\n    , t.ibe8693_8693\n    , t.ibe8701_8701\n    , t.ibe8808_8808\n    , t.ibe8815_8815\n    , t.ibe8816_8816\n    , t.ibe8836_8836\n    , t.ibe8850_8850\n    , t.ibe9040_9040\n    , t.ibe9100_9100\n    , t.ibe9152_9152\n    , t.ibe9509_9509\n    , t.ibe9514_9514\n    , t.ibe9557_9557\n    , t.ibe9780_9780\n    , t.ibe7602_children_number_in_household_premier_complete_children\n    , t.ibe7602_children_number_in_household_premier_complete_precision_level\n    , t.ibe7622_children_presence_in_household_premier_complete_children\n    , t.ibe7622_children_presence_in_household_premier_complete_precision_level\n    , t.ibe8600_ibe_premier_adultagerangesonezero_males_18_to_24\n    , t.ibe8600_ibe_premier_adultagerangesonezero_females_18_to_24\n    , t.ibe8600_ibe_premier_adultagerangesonezero_unknown_gender_18_to_24\n    , t.ibe8600_ibe_premier_adultagerangesonezero_males_25_to_34\n    , t.ibe8600_ibe_premier_adultagerangesonezero_females_25_to_34\n    , t.ibe8600_ibe_premier_adultagerangesonezero_unknown_gender_25_to_34\n    , t.ibe8600_ibe_premier_adultagerangesonezero_males_35_to_44\n    , t.ibe8600_ibe_premier_adultagerangesonezero_females_35_to_44\n    , t.ibe8600_ibe_premier_adultagerangesonezero_unknown_gender_35_to_44\n    , t.ibe8600_ibe_premier_adultagerangesonezero_males_45_to_54\n    , t.ibe8600_ibe_premier_adultagerangesonezero_females_45_to_54\n    , t.ibe8600_ibe_premier_adultagerangesonezero_unknown_gender_45_to_54\n    , t.ibe8600_ibe_premier_adultagerangesonezero_males_55_to_64\n    , t.ibe8600_ibe_premier_adultagerangesonezero_females_55_to_64\n    , t.ibe8600_ibe_premier_adultagerangesonezero_unknown_gender_55_to_64\n    , t.ibe8600_ibe_premier_adultagerangesonezero_males_65_to_74\n    , t.ibe8600_ibe_premier_adultagerangesonezero_females_65_to_74\n    , t.ibe8600_ibe_premier_adultagerangesonezero_unknown_gender_65_to_74\n    , t.ibe8600_ibe_premier_adultagerangesonezero_males_75_plus\n    , t.ibe8600_ibe_premier_adultagerangesonezero_females_75_plus\n    , t.ibe8600_ibe_premier_adultagerangesonezero_unknown_gender_75_plus\n    , t.ibe8601_ibe_premier_childrensagerangesonezero_age_00_to_02_male\n    , t.ibe8601_ibe_premier_childrensagerangesonezero_age_00_to_02_female\n    , t.ibe8601_ibe_premier_childrensagerangesonezero_age_00_to_02_unknown_gender\n    , t.ibe8601_ibe_premier_childrensagerangesonezero_age_03_to_05_male\n    , t.ibe8601_ibe_premier_childrensagerangesonezero_age_03_to_05_female\n    , t.ibe8601_ibe_premier_childrensagerangesonezero_age_03_to_05_unknown_gender\n    , t.ibe8601_ibe_premier_childrensagerangesonezero_age_06_to_10_male\n    , t.ibe8601_ibe_premier_childrensagerangesonezero_age_06_to_10_female\n    , t.ibe8601_ibe_premier_childrensagerangesonezero_age_06_to_10_unknown_gender\n    , t.ibe8601_ibe_premier_childrensagerangesonezero_age_11_to_15_male\n    , t.ibe8601_ibe_premier_childrensagerangesonezero_age_11_to_15_female\n    , t.ibe8601_ibe_premier_childrensagerangesonezero_age_11_to_15_unknown_gender\n    , t.ibe8601_ibe_premier_childrensagerangesonezero_age_16_to_17_male\n    , t.ibe8601_ibe_premier_childrensagerangesonezero_age_16_to_17_female\n    , t.ibe8601_ibe_premier_childrensagerangesonezero_age_16_to_17_unknown_gender\n    , t.ibe8603_ibe_premier_childrensagerangesoneyear_age_lt_1\n    , t.ibe8603_ibe_premier_childrensagerangesoneyear_age_eq_1\n    , t.ibe8603_ibe_premier_childrensagerangesoneyear_age_eq_2\n    , t.ibe8603_ibe_premier_childrensagerangesoneyear_age_eq_3\n    , t.ibe8603_ibe_premier_childrensagerangesoneyear_age_eq_4\n    , t.ibe8603_ibe_premier_childrensagerangesoneyear_age_eq_5\n    , t.ibe8603_ibe_premier_childrensagerangesoneyear_age_eq_6\n    , t.ibe8603_ibe_premier_childrensagerangesoneyear_age_eq_7\n    , t.ibe8603_ibe_premier_childrensagerangesoneyear_age_eq_8\n    , t.ibe8603_ibe_premier_childrensagerangesoneyear_age_eq_9\n    , t.ibe8603_ibe_premier_childrensagerangesoneyear_age_eq_10\n    , t.ibe8603_ibe_premier_childrensagerangesoneyear_age_eq_11\n    , t.ibe8603_ibe_premier_childrensagerangesoneyear_age_eq_12\n    , t.ibe8603_ibe_premier_childrensagerangesoneyear_age_eq_13\n    , t.ibe8603_ibe_premier_childrensagerangesoneyear_age_eq_14\n    , t.ibe8603_ibe_premier_childrensagerangesoneyear_age_eq_15\n    , t.ibe8603_ibe_premier_childrensagerangesoneyear_age_eq_16\n    , t.ibe8603_ibe_premier_childrensagerangesoneyear_age_eq_17\n    , t.ibe8603_ibe_premier_childrensagerangesoneyear_age_eq_18\n    , t.ibe8621_ibe_premier_creditcardindicatoronezero_bank_card_holder\n    , t.ibe8621_ibe_premier_creditcardindicatoronezero_gas_department_retail_card_holder\n    , t.ibe8621_ibe_premier_creditcardindicatoronezero_travel_and_entertainment_card_holder\n    , t.ibe8621_ibe_premier_creditcardindicatoronezero_credit_card_holder_unknown_type\n    , t.ibe8621_ibe_premier_creditcardindicatoronezero_premium_card_holder\n    , t.ibe8621_ibe_premier_creditcardindicatoronezero_upscale_department_store_card_holder\n    , t.ibe8623_ibe_premier_dateofbirthccyymm00_year\n    , t.ibe8623_ibe_premier_dateofbirthccyymm00_month\n    , t.ibe8623_ibe_premier_dateofbirthccyymm00_day\n    , t.ibe9153_ibe_premier_retailpurchasecategories_standard_retail_membership_warehouse\n    , t.ibe9153_ibe_premier_retailpurchasecategories_standard_retail_catalog_showroom_retail_buyers\n    , t.ibe9153_ibe_premier_retailpurchasecategories_standard_retail_main_street_retail\n    , t.ibe9153_ibe_premier_retailpurchasecategories_standard_retail_high_volume_low_end_department_store_buyers\n    , t.ibe9153_ibe_premier_retailpurchasecategories_standard_retail_standard_retail\n    , t.ibe9153_ibe_premier_retailpurchasecategories_standard_specialty_sporting_goods\n    , t.ibe9153_ibe_premier_retailpurchasecategories_standard_specialty_specialty_apparel\n    , t.ibe9153_ibe_premier_retailpurchasecategories_standard_specialty_specialty\n    , t.ibe9153_ibe_premier_retailpurchasecategories_standard_specialty_computer_electronics_buyers\n    , t.ibe9153_ibe_premier_retailpurchasecategories_standard_specialty_furniture_buyers\n    , t.ibe9153_ibe_premier_retailpurchasecategories_standard_specialty_home_office_supply_purchases\n    , t.ibe9153_ibe_premier_retailpurchasecategories_standard_specialty_home_improvement\n    , t.ibe9153_ibe_premier_retailpurchasecategories_upscale_retail_high_end_retail_buyers_upscale_retail\n    , t.ibe9153_ibe_premier_retailpurchasecategories_upscale_specialty_travel_personal_services\n    , t.ibe9153_ibe_premier_retailpurchasecategories_bank_financial_services_banking\n    , t.ibe9153_ibe_premier_retailpurchasecategories_finance_company_financial_services_install_credit\n    , t.ibe9153_ibe_premier_retailpurchasecategories_oil_company_oil_company\n    , t.ibe9153_ibe_premier_retailpurchasecategories_miscellaneous_financial_services_insurance\n    , t.ibe9153_ibe_premier_retailpurchasecategories_miscellaneous_tv_mail_order_purchases\n    , t.ibe9153_ibe_premier_retailpurchasecategories_miscellaneous_grocery\n    , t.ibe9153_ibe_premier_retailpurchasecategories_miscellaneous_miscellaneous\n    , t.ibe3101_3101 -- added in May 2018\n    , t.ibe3102_3102 -- added in May 2018\n    , getdate() as dw_load_date_time\nfrom (\n  select\n    row_number() over(partition by customer_id order by customer_id) rnk\n  , *\n  from extract.customer_acxiom_output\n) t\nwhere 1=1\n  and t.rnk = 1\n;"
            }
        ]
    },
    "dm-staq-import": {
        "load.tmp.mkt_daily_acquisition_details.sql": [
            {
                "type": "DELETE",
                "columns": null,
                "tables": [
                    "tmp.mkt_daily_acquisition_details"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM tmp.mkt_daily_acquisition_details;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "mkt_daily_acquisition_details"
                    ],
                    "select": [
                        "dmt.d_customer_plan_360.start_date_time",
                        "dmt.d_customer_plan_360.bm_type",
                        "dmt.d_customer_plan_360.last_utm_medium",
                        "dmt.d_customer_plan_360.last_utm_source",
                        "dmt.d_customer_plan_360.last_utm_campaign",
                        "landing_url_without_params",
                        "dmt.d_customer_plan_360.sub_plan_rank",
                        "dmt.d_customer_plan_360.plan_conversion_source",
                        "map.shop.shop_name",
                        "start_date_time",
                        "end_date_time"
                    ],
                    "join": [
                        "dmt.d_customer_360.customer_id",
                        "dmt.d_customer_plan_360.customer_id",
                        "map.shop.shop_id",
                        "dmt.d_customer_plan_360.shop_id",
                        "stg.test_customers.customer_id"
                    ]
                },
                "tables": [
                    "tmp.mkt_daily_acquisition_details",
                    "dmt.d_customer_plan_360",
                    "dmt.d_customer_360",
                    "map.shop",
                    "stg.test_customers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO tmp.mkt_daily_acquisition_details\n\nSELECT\n\tDATE(convert_timezone('utc','america/los_angeles', d_customer_plan_360.start_date_time) ) AS start_date_pst_date,\n\td_customer_plan_360.bm_type  AS bm_type,\n\td_customer_plan_360.last_utm_medium  AS last_utm_medium,\n\td_customer_plan_360.last_utm_source  AS last_utm_source,\n\td_customer_plan_360.last_utm_campaign  AS last_utm_campaign,\n\tlanding_url_without_params as landing_url,\n\td_customer_plan_360.sub_plan_rank  AS sub_plan_rank,\n\td_customer_plan_360.plan_conversion_source  AS plan_conversion_source,\n\tm.shop_name\n\t,sum(case when sub_plan_rank = 1 and d_customer_plan_360.plan_conversion_source is null then 1 else 0 end ) as new_members\n    ,sum(case when sub_plan_rank != 1 and d_customer_plan_360.plan_conversion_source is null then 1 else 0 end ) as reactivations\n    ,sum(case when sub_plan_rank = 1 and (floor(datediff('h',start_date_time, end_date_time)/24) < 30 or end_date_time is null) then 1 else 0 end) as cpa30_new_members\n    ,sum(case when sub_plan_rank != 1 and d_customer_plan_360.plan_conversion_source is null\n         and (floor(datediff('h',start_date_time, end_date_time)/24) < 30 or end_date_time is null) then 1 else 0 end)\n         AS cpa_30_reactivations\n\nFROM dmt.d_customer_plan_360  AS d_customer_plan_360\nLEFT JOIN dmt.d_customer_360  AS d_customer_360 ON d_customer_360.customer_id=d_customer_plan_360.customer_id\nLEFT JOIN map.shop m on m.shop_id = d_customer_plan_360.shop_id\nLEFT JOIN stg.test_customers  AS test_customers ON d_customer_plan_360.customer_id=test_customers.customer_id\n\nWHERE --(d_customer_plan_360.shop_id  = 1)\n((((convert_timezone('utc','america/los_angeles', d_customer_plan_360.start_date_time) ) >= ((TIMESTAMP '2019-01-01'))\nAND (convert_timezone('utc','america/los_angeles', d_customer_plan_360.start_date_time) ) < ((DATEADD(day,0, DATE_TRUNC('day',GETDATE()) ))))))\nAND (((case when d_customer_360.email LIKE '%@dollarshaveclub.%' then '@dollarshaveclub.com' else 'N/A' end) NOT LIKE 'qa+%@dollarshaveclub.com' OR (case when d_customer_360.email LIKE '%@dollarshaveclub.%' then '@dollarshaveclub.com' else 'N/A' end) IS NULL))\nAND (d_customer_360.customer_banned_at  IS NULL) AND (test_customers.customer_id  IS NULL)\nGROUP BY 1,2,3,4,5,6,7,8,9\nORDER BY 1\n;"
            }
        ],
        "load.stg.mkt_partner_deal_history.sql": [
            {
                "type": "DELETE",
                "columns": null,
                "tables": [
                    "stg.mkt_partner_deal_history"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.mkt_partner_deal_history;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "mkt_partner_deal_history",
                        "marketing_vendor_name",
                        "medium"
                    ],
                    "select": [
                        "marketing_vendor_name",
                        "medium"
                    ]
                },
                "tables": [
                    "stg.mkt_partner_deal_history",
                    "extract.mkt_partner_deal_history"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.mkt_partner_deal_history(\n  marketing_vendor_name\n  , medium\n  , source\n  , campaign\n  , country\n  , deal_type\n  , amount\n  , percentage\n  , duration\n  , duration_unit\n  , start_date\n  , end_date\n)\n\nSELECT\n  marketing_vendor_name\n  , medium\n  , source\n  , campaign\n  , country\n  , deal_type\n  , CAST(REPLACE(amount, ',', '') AS FLOAT4) AS amount\n  , CAST(REPLACE(percentage, ',', '') AS FLOAT4) AS percentage\n  , CAST(duration AS INT) AS duration\n  , duration_unit\n  , start_date\n  , end_date\nFROM extract.mkt_partner_deal_history\n;"
            }
        ],
        "load.stg.mkt_influencer_spending.sql": [
            {
                "type": "DELETE",
                "columns": null,
                "tables": [
                    "stg.mkt_influencer_spending"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.mkt_influencer_spending;"
            },
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- select * from stg.mkt_influencer_spending;\n-- select * from extract.mkt_influencer_spending;\n\nINSERT INTO stg.mkt_influencer_spending(\n    report_date\n    , utm_medium\n    , utm_source\n    , utm_campaign\n    , utm_content\n    , utm_term\n    , spending\n    , raw_medium\n    , raw_source\n    , url_with_params\n)\nWITH normalized AS (\n    SELECT\n        report_date\n        , REGEXP_SUBSTR ( url_with_params, 'utm_medium=[^&$]*', 1, 1) AS utm_medium\n        , REGEXP_SUBSTR ( url_with_params, 'utm_source=[^&$]*', 1, 1) AS utm_source\n        , REGEXP_SUBSTR ( url_with_params, 'utm_campaign=[^&$]*', 1, 1) AS utm_campaign\n        , REGEXP_SUBSTR ( url_with_params, 'utm_content=[^&$]*', 1, 1) AS utm_content\n        , REGEXP_SUBSTR ( url_with_params, 'utm_term=[^&$]*', 1, 1) AS utm_term\n        , REPLACE(spending, ',', '') AS spending\n        , medium\n        , source\n        , url_with_params\n    FROM extract.mkt_influencer_spending \n    WHERE 1=1\n      AND report_date IS NOT NULL\n),\ntransformed AS (\n  SELECT\n      report_date\n      , CASE WHEN utm_medium ='' THEN NULL ELSE REPLACE(utm_medium, 'utm_medium=', '') END AS utm_medium\n      , CASE WHEN utm_source ='' THEN NULL ELSE REPLACE(utm_source, 'utm_source=', '') END AS utm_source\n      , CASE WHEN utm_campaign ='' THEN NULL ELSE REPLACE(utm_campaign, 'utm_campaign=', '') END AS utm_campaign\n      , CASE WHEN utm_content ='' THEN NULL ELSE REPLACE(utm_content, 'utm_content=', '') END AS utm_content\n      , CASE WHEN utm_term ='' THEN NULL ELSE REPLACE(utm_term, 'utm_term=', '') END AS utm_term\n      , CAST(spending AS FLOAT4) AS spending\n      , medium AS raw_medium\n      , source AS raw_source\n      , url_with_params\n  FROM normalized\n)\nSELECT       \n    report_date\n    , utm_medium\n    , utm_source\n    , utm_campaign\n    , utm_content\n    , utm_term\n    , spending\n    , raw_medium\n    , raw_source\n    , url_with_params\nFROM transformed\nGROUP BY\n    report_date\n    , utm_medium\n    , utm_source\n    , utm_campaign\n    , utm_content\n    , utm_term\n    , spending\n    , raw_medium\n    , raw_source\n    , url_with_params\n;"
            }
        ],
        "transform.tmp.dq_STAQ_daily_spend.sql": [
            {
                "type": "DELETE",
                "columns": null,
                "tables": [
                    "tmp.dq_STAQ_daily_spend"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM tmp.dq_STAQ_daily_spend;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "dq_STAQ_daily_spend"
                    ]
                },
                "tables": [
                    "tmp.dq_STAQ_daily_spend"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO tmp.dq_STAQ_daily_spend\nselect\n   ------------------ SPEND RECIEVED FROM STAQ --------------------\n   'spend' as spend_type,\n   'staq_raw' as deal_type,\n   s.report_date,\n   s.utm_medium,\n   s.utm_source,\n   s.utm_campaign,\n  null as utm_content,\n  null as utm_term,\n   s.marketing_vendor_name,\n   s.landing_url as landing_url_without_params,\n   s.country,\n   max(nvl(s.spend,0)) as amount, --To avoid double counting taking the MAX amount when joined against customer 360 table when campaign info is null in staq raw//\n   --sum(nvl(s.spend,0)) as amount,\n   sum(nvl(p.new_members,0)) as new_members,\n   sum(nvl(p.reactivations,0)) as reactivations\n\n   from (select report_date,\n               utm_medium,\n               utm_source,\n               utm_campaign,\n               country,\n               marketing_vendor_name,\n               split_part(landing_url,'?',1) as landing_url,\n               sum(spend) as spend\n         from stg.mkt_staq_raw\n         group by 1,2,3,4,5,6,7) s\n   left join (select medium,source,country from stg.mkt_partner_deal_history group by 1,2,3) h on h.source = s.utm_source and h.medium = s.utm_medium and s.country = h.country\n    ---- changed the customer 360 plan logic to pick from the acqusitions stg table//\n   left join (select start_date_pst_date\n                     , last_utm_medium\n                     , last_utm_source\n                     , last_utm_campaign\n                     , landing_url\n                     , shop_name\n                     , SUM(new_members) as new_members\n                     , SUM(reactivations) as reactivations FROM tmp.mkt_daily_acquisition_details\n                     GROUP BY 1,2,3,4,5,6\n              ) p on p.start_date_pst_date = s.report_date\n                                  and p.last_utm_medium = s.utm_medium\n                                  and p.last_utm_source = s.utm_source\n                                  and (p.last_utm_campaign = s.utm_campaign or s.utm_campaign is null)\n                                  and p.landing_url = s.landing_url\n                                  and p.shop_name = s.country\n    group  by 1,2,3,4,5,6,7,8,9,10,11\n\n  ;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "dq_STAQ_daily_spend"
                    ]
                },
                "tables": [
                    "tmp.dq_STAQ_daily_spend"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO tmp.dq_STAQ_daily_spend\n--------------------------------------STAQ RAW UNASSIGNED LANDING URL----------------------------------\n------- Staging acqusitions table to pick new members and reactivations------\n  select             'spend' as spend_type\n                     ,'staq_raw' as deal_type\n                     , start_date_pst_date as start_date_time_pst\n                     , last_utm_medium as utm_medium\n                     , last_utm_source as utm_source\n                     , last_utm_campaign as utm_campaign\n                     , null as utm_content\n                     , null as utm_term\n                     , staq.marketing_vendor_name as marketing_vendor_name\n                     , case when lu.landing_url is null and staq.utm_medium is not null then 'unassigned' else p.landing_url end as landing_url\n                     , p.shop_name as country\n                     , 0 as amount\n                     ,SUM(new_members) as new_members\n                     ,SUM(reactivations) as reactivations\n               FROM tmp.mkt_daily_acquisition_details p\n              left join (select utm_medium,\n                               utm_source,\n                               utm_campaign,\n                               country,\n                               split_part(landing_url,'?',1)as landing_url\n                        from stg.mkt_staq_raw\n                        group by 1,2,3,4,5) lu on p.last_utm_medium = lu.utm_medium\n                                              and p.last_utm_source = lu.utm_source\n                                              and (p.last_utm_campaign = lu.utm_campaign or lu.utm_campaign is null)\n                                              and p.landing_url = lu.landing_url\n                                              and p.shop_name = lu.country\n              left join (select utm_medium,\n                               utm_source,\n                               utm_campaign,\n                               marketing_vendor_name,\n                               country\n                        from stg.mkt_staq_raw\n                        group by 1,2,3,4,5) staq on p.last_utm_medium = staq.utm_medium\n                                              and p.last_utm_source = staq.utm_source\n                                              and (p.last_utm_campaign = staq.utm_campaign or staq.utm_campaign is null)\n                                              and p.shop_name = staq.country\n              where last_utm_medium is not null\n              and lu.landing_url is null\n              and staq.utm_medium is not null\n              and  start_date_pst_date >='2019-01-01'\n              --and CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', start_date_time)::date  ='2019-06-21'\n\n              group by 1,2,3,4,5,6,7,8,9,10,11,12\n\n  ;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "dq_STAQ_daily_spend"
                    ]
                },
                "tables": [
                    "tmp.dq_STAQ_daily_spend"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO tmp.dq_STAQ_daily_spend\n  ---------------------PERCENTAGE FEES FOR STATIC/NULL CAMPAIGN -------------------------\n\n  select\n  'fee' as spend_type,\n  'percentage' as deal_type,\n  report_date,\n  utm_medium ,\n  utm_source ,\n  utm_campaign,\n  null as content,\n  null as term,\n  s.marketing_vendor_name,\n  landing_url as landing_url_without_params,\n  country,\n  sum(s.spend*(percentage /100)) as amount,\n  0 as new_members,\n  0 as reactivations\n\n\n  from (select report_date,\n               utm_medium,\n               utm_source,\n               utm_campaign,\n               country,\n               marketing_vendor_name,\n               split_part(landing_url,'?',1) as landing_url,\n               sum(spend) as spend\n         from stg.mkt_staq_raw\n         group by 1,2,3,4,5,6,7) s\n  join  (select medium, source, campaign,percentage, start_date, end_date\n         from stg.mkt_partner_deal_history\n         where deal_type = 'fee' and percentage is not null\n         group by 1,2,3,4,5,6) h on s.report_date >= start_date\n                             and s.report_date <= nvl(end_date,getdate())::date\n                             and s.utm_medium = h.medium\n                             and (s.utm_source = h.source or h.source is null)\n                             and (s.utm_campaign like h.campaign\n                             or h.campaign is null)\n  where (campaign not like '%' or campaign is null)\n  group by 1,2,3,4,5,6,7,8,9,10,11\n\n\n  ;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "dq_STAQ_daily_spend"
                    ]
                },
                "tables": [
                    "tmp.dq_STAQ_daily_spend"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO tmp.dq_STAQ_daily_spend\n\n  ------ percentage fees for like campaign ---\n  select\n  'fee' as spend_type,\n  'percentage' as deal_type,\n  report_date,\n  utm_medium ,\n  utm_source ,\n  utm_campaign,\n  null as content,\n  null as term,\n  s.marketing_vendor_name,\n  landing_url as landing_url_without_params,\n  country,\n  sum(s.spend*(percentage /100)) as amount,\n  0 as new_members,\n  0 as reactivations\n\n\n  from (select report_date,\n               utm_medium,\n               utm_source,\n               utm_campaign,\n               country,\n               marketing_vendor_name,\n               split_part(landing_url,'?',1) as landing_url,\n               sum(spend) as spend\n         from stg.mkt_staq_raw\n         group by 1,2,3,4,5,6,7) s\n  join  (select medium, source, campaign,'%\\\\' + replace(campaign, '%', '') + '%' as campjoin,percentage, start_date, end_date\n         from stg.mkt_partner_deal_history\n         where deal_type = 'fee' and percentage is not null\n         and campaign is not null\n         group by 1,2,3,4,5,6,7) h on s.report_date >= start_date\n                             and s.report_date <= nvl(end_date,getdate())::date\n                             and s.utm_medium = h.medium\n                             and (s.utm_source = h.source or h.source is null)\n                             and (s.utm_campaign like h.campaign)\n\n  group by 1,2,3,4,5,6,7,8,9,10,11\n\n  ;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "dq_STAQ_daily_spend"
                    ]
                },
                "tables": [
                    "tmp.dq_STAQ_daily_spend"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO tmp.dq_STAQ_daily_spend\n\n-------------------------------FIXED DURATION FIXED AMOUNT FEE----------------------------\n  select\n  'fee' as spend_type,\n  'fixed_duration' as deal_type,\n  t1.date,\n  t1.utm_medium, --changed to pick source and medium from partner deal history instead of customer 360,\n  t1.utm_source,\n  t1.utm_campaign,\n  null as content,\n  null as term,\n  t1.marketing_vendor_name,\n  t2.landing_url_without_params,\n  t1.country,\n  sum(t1.amount_per_campaign_landing_url) as amount,\n  0 as new_members,\n  0 as reactivations\n\n  from\n  -------------- CALCULATE FIXED FEE BY DAY/NUMBER OF CAMPAIGN/LANDING URL COMBOS -------------------\n  (select dl.date,\n         dl.marketing_vendor_name,\n         dl.utm_medium,\n         dl.utm_source,\n         dl.utm_campaign,\n         dl.country,\n         dl.amount/(case when dl.utm_campaign is not null and c2.no_of_campaigns is not null then c2.no_of_campaigns\n                                  when dl.utm_campaign is null and c.no_of_campaigns is not null then c.no_of_campaigns\n                                  when dl.utm_campaign is null and c3.no_of_campaigns is not null then c3.no_of_campaigns\n                             else 1 end) as amount_per_campaign_landing_url\n  from\n  ------------ DELTA QUERY TO FIND CERTAIN VENDORS ------------------\n  --- Using new stg view stg.mkt_pdh_fixed_fee_view for the deal history deal_type='fee' and amount is not null -------\n  ( SELECT report_date as date, marketing_vendor_name,\n         utm_medium,\n         utm_source,\n         utm_campaign,\n         country,\n         duration,\n         duration_unit,\n         start_date,\n         end_date,SUM(fixed_fee_per_day) AS amount FROM stg.mkt_pdh_fixed_fee_view\n         GROUP BY 1,2,3,4,5,6,7,8,9,10) dl\n         -------------- FIND NUMBER OF CAMPAIGN/LANDING URLS BY MEDIUM/SOURCE----------------\n  left join (select report_date,\n               utm_medium,\n               utm_source,\n               country,\n               count(distinct utm_campaign||split_part(landing_url,'?',1)) as no_of_campaigns\n        from stg.mkt_staq_raw\n        where utm_medium is not null\n        and utm_source is not null\n        group by 1,2,3,4) c on c.report_date = dl.date\n                          and dl.utm_medium = c.utm_medium\n                          and dl.utm_source = c.utm_source\n                          and dl.country = c.country\n         -------------- FIND NUMBER OF LANDING URLS BY MEDIUM/SOURCE/CAMPAIGN----------------\n  left join (select report_date,\n               utm_medium,\n               utm_source,\n               utm_campaign,\n               country,\n               count(distinct split_part(landing_url,'?',1)) as no_of_campaigns\n        from stg.mkt_staq_raw\n        where utm_medium is not null\n        and utm_source is not null\n        and utm_campaign is not null\n        group by 1,2,3,4,5) c2 on c2.report_date = dl.date\n                          and dl.utm_medium = c2.utm_medium\n                          and dl.utm_source = c2.utm_source\n                          and dl.utm_campaign = c2.utm_campaign\n                          and dl.country = c2.country\n  left join (select CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', start_date_time)::date as report_date,\n               s.last_utm_medium as utm_medium,\n               s.last_utm_source as utm_source,\n               dh.campaign as utm_campaign,\n               m.shop_name as country,\n               count(distinct split_part(s.landing_url_without_params,'?',1)) as no_of_campaigns\n        from dmt.d_customer_plan_360 s\n        join map.shop m on m.shop_id = s.shop_id\n        join (select medium, source,campaign\n              from stg.mkt_partner_deal_history d\n              left join (select utm_medium,utm_source\n                          from stg.mkt_staq_raw\n                          group by 1,2) s on s.utm_medium = d.medium\n                                          and s.utm_source = d.source\n              where d.deal_type = 'fee'\n              and amount is not null\n              and medium is not null\n              and s.utm_medium is null\n              group by 1,2,3)dh on dh.medium = s.last_utm_medium\n                                       and dh.source = s.last_utm_source\n                                       and dh.campaign is null\n\n        group by 1,2,3,4,5) c3 on c3.report_date = dl.date\n                          and dl.utm_medium = c3.utm_medium\n                          and dl.utm_source = c3.utm_source\n                          and dl.country = c3.country\n  ) t1\n        ------------- PULL SOURCE/MEDIUM/CAMPAIGN DATA TO ASSOCIATE WITH FEES--------------\n  left join(\n              select report_date,\n              utm_medium,\n              utm_source,\n              utm_campaign,\n              split_part(landing_url,'?',1) as landing_url_without_params,\n              country\n              from stg.mkt_staq_raw\n              group by 1,2,3,4,5,6\n\n              union all\n\n              select\n              CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', p.start_date_time)::date  as report_date,\n              last_utm_medium,\n              last_utm_source,\n              null as utm_campaign,\n              landing_url_without_params,\n              m.shop_name\n\n              from dmt.d_customer_plan_360 p\n              join map.shop m on m.shop_id = p.shop_id\n              join (select medium,\n                           source\n                    from stg.mkt_partner_deal_history h\n                    left join (select utm_medium,utm_source\n                          from stg.mkt_staq_raw\n                          group by 1,2) s on s.utm_medium = h.medium\n                                          and s.utm_source = h.source\n                    where s.utm_medium is null\n                    and deal_type = 'fee'\n                    and amount is not null\n                    group by 1,2) t1 on t1.medium =  p.last_utm_medium\n                                     and t1.source = p.last_utm_source\n               group by 1,2,3,4,5,6\n          )t2 on t1.date = t2.report_date\n              and t1.utm_medium = t2.utm_medium\n              and t1.utm_source = t2.utm_source\n              and (t1.utm_campaign = t2.utm_campaign or t1.utm_campaign is null)\n              and t1.country = t2.country\n\n  group by 1,2,3,4,5,6,7,8,9,10,11\n\n  ;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "dq_STAQ_daily_spend"
                    ]
                },
                "tables": [
                    "tmp.dq_STAQ_daily_spend"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO tmp.dq_STAQ_daily_spend\n\n   -------------- FIXED DURATION CREDIT WITH STAQ RAW DATA FOR STATIC/NULL CAMPAIGNS-----------------\n  select\n  'credit' as spend_type,\n  'fixed_duration' as deal_type,\n  t1.date,\n  t1.utm_medium, --changed to pick source and medium from partner deal history instead of customer 360,\n  t1.utm_source,\n  t1.utm_campaign,\n  null as content,\n  null as term,\n  t1.marketing_vendor_name,\n  t2.landing_url_without_params,\n  t1.country,\n  sum(t1.amount_per_campaign_landing_url)*-1 as amount,\n  0 as new_members,\n  0 as reactivations\n\n  from\n  -------------- CALCULATE FIXED FEE BY DAY/NUMBER OF CAMPAIGN/LANDING URL COMBOS -------------------\n  (select dl.date,\n         dl.marketing_vendor_name,\n         dl.utm_medium,\n         dl.utm_source,\n         dl.utm_campaign,\n         dl.country,\n         dl.amount/(case when dl.utm_campaign  is not null and c2.no_of_campaigns is not null\n                                      then c2.no_of_campaigns\n                                  when dl.utm_campaign is null and c.no_of_campaigns is not null\n                                      then c.no_of_campaigns\n                                  when dl.utm_campaign is null and c3.no_of_campaigns is not null\n                                      then c3.no_of_campaigns\n                               else 1 end) as amount_per_campaign_landing_url\n  from\n  ------------ DELTA QUERY TO FIND CERTAIN VENDORS ------------------\n   --- Using new stg view stg.mkt_pdh_fixed_fee_view for the deal history deal_type='credit' and amount is not null -------\n  ( SELECT report_date as date, marketing_vendor_name,\n         utm_medium,\n         utm_source,\n         utm_campaign,\n         country,\n         duration,\n         duration_unit,\n         start_date,\n         end_date,SUM(fixed_credit_per_day ) AS amount FROM stg.mkt_pdh_fixed_credit_view\n         GROUP BY 1,2,3,4,5,6,7,8,9,10 ) dl\n         -------------- FIND NUMBER OF CAMPAIGN/LANDING URLS BY MEDIUM/SOURCE----------------\n  left join (select s.report_date,\n               s.utm_medium,\n               s.utm_source,\n               s.country,\n               count(distinct s.utm_campaign||split_part(s.landing_url,'?',1)) as no_of_campaigns\n        from stg.mkt_staq_raw s\n        where utm_medium is not null\n        and utm_source is not null\n        group by 1,2,3,4) c on c.report_date = dl.date\n                          and dl.utm_medium = c.utm_medium\n                          and dl.utm_source = c.utm_source\n                          and dl.country = c.country\n         -------------- FIND NUMBER OF LANDING URLS BY MEDIUM/SOURCE/CAMPAIGN----------------\n  left join (select s.report_date,\n               s.utm_medium,\n               s.utm_source,\n               s.utm_campaign,\n               s.country,\n               count(distinct split_part(s.landing_url,'?',1)) as no_of_campaigns\n        from stg.mkt_staq_raw s\n        where utm_medium is not null\n        and utm_source is not null\n        and utm_campaign is not null\n        group by 1,2,3,4,5) c2 on c2.report_date = dl.date\n                          and dl.utm_medium = c2.utm_medium\n                          and dl.utm_source = c2.utm_source\n                          and dl.utm_campaign = c2.utm_campaign\n                          and dl.country = c2.country\n        -------------- FIND NUMBER OF LANDING URLS BY MEDIUM/SOURCE for INTERNAL----------------\n  left join (select CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', start_date_time)::date as report_date,\n               s.last_utm_medium as utm_medium,\n               s.last_utm_source as utm_source,\n               dh.campaign as utm_campaign,\n               m.shop_name as country,\n               count(distinct split_part(s.landing_url_without_params,'?',1)) as no_of_campaigns\n        from dmt.d_customer_plan_360 s\n        join map.shop m on m.shop_id = s.shop_id\n        join (select medium, source,campaign\n              from stg.mkt_partner_deal_history d\n              left join (select utm_medium,utm_source\n                          from stg.mkt_staq_raw\n                          group by 1,2) s on s.utm_medium = d.medium\n                                          and s.utm_source = d.source\n              where d.deal_type = 'credit'\n              and s.utm_medium is null\n              group by 1,2,3)dh on dh.medium = s.last_utm_medium\n                                       and dh.source = s.last_utm_source\n                                       and dh.campaign is null\n\n        group by 1,2,3,4,5) c3 on c3.report_date = dl.date\n                          and dl.utm_medium = c3.utm_medium\n                          and dl.utm_source = c3.utm_source\n                          and dl.country = c3.country\n\n\n                          ) t1\n        ------------- PULL SOURCE/MEDIUM/CAMPAIGN DATA TO ASSOCIATE WITH FEES--------------\n  left join(\n              select report_date,\n              utm_medium,\n              utm_source,\n              utm_campaign,\n              country,\n              split_part(landing_url,'?',1) as landing_url_without_params\n              from stg.mkt_staq_raw\n              group by 1,2,3,4,5,6\n\n              union all\n\n              select\n              CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', p.start_date_time)::date  as report_date,\n              last_utm_medium,\n              last_utm_source,\n              null as utm_campaign,\n              m.shop_name,\n              landing_url_without_params\n\n              from dmt.d_customer_plan_360 p\n              join map.shop m on m.shop_id = p.shop_id\n              join (select medium,\n                           source\n                    from stg.mkt_partner_deal_history h\n                    left join (select utm_medium,utm_source\n                          from stg.mkt_staq_raw\n                          group by 1,2) s on s.utm_medium = h.medium\n                                          and s.utm_source = h.source\n                    where s.utm_medium is null\n                    and deal_type = 'credit'\n                    group by 1,2) t1 on t1.medium =  p.last_utm_medium\n                                     and t1.source = p.last_utm_source\n               group by 1,2,3,4,5,6\n          )t2 on t1.date = t2.report_date\n              and t1.utm_medium = t2.utm_medium\n              and t1.utm_source = t2.utm_source\n              and (t1.utm_campaign = t2.utm_campaign or t1.utm_campaign is null)\n              and t1.country = t2.country\n\n  group by 1,2,3,4,5,6,7,8,9,10,11\n\n  ;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "dq_STAQ_daily_spend"
                    ]
                },
                "tables": [
                    "tmp.dq_STAQ_daily_spend"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO tmp.dq_STAQ_daily_spend\n\n  ------------------ INFLUENCER SPEND DATA-----------------------\n      SELECT  'spend' as spend_type,\n                  'fixed_duration' as deal_type,\n                  t1.date as report_date,\n                  t1.utm_medium,\n                  t1.utm_source,\n                  t1.utm_campaign,\n                  t1.utm_content,\n                  t1.utm_term,\n                  'Influencer' as marketing_vendor_name,\n                  t1.landing_url,\n                  'US' as country,\n                  nvl(t1.spending,0) as amount,\n                  nvl(t2.new_members,0) as new_members,\n                  nvl(t2.reactivations,0) as reactivations\n\n\n          FROM\n                        (select    d.date,\n                                  report_date,\n                                  utm_medium,\n                                  utm_source,\n                                  utm_campaign,\n                                  utm_content,\n                                  utm_term,\n                                  end_date,\n                                  landing_url,\n                                  sum(case when i.report_date = d.date then spending else 0 end) as spending\n\n                        from dmt.d_date d\n                        join\n\n                         (select report_date\n                                ,utm_medium\n                                ,utm_source\n                                ,utm_campaign\n                                ,utm_content\n                                ,utm_term\n                                ,split_part(url_with_params,'?',1) as landing_url\n                                ,spending\n                                ,nvl(lag(report_date,1) over (PARTITION BY utm_medium,utm_source, utm_campaign, utm_term ORDER BY report_date desc), getdate()::date)::date as end_date\n                                from (select report_date\n                                            ,utm_medium\n                                            ,utm_source\n                                            ,utm_campaign\n                                            ,utm_content\n                                            ,url_with_params\n                                            ,utm_term\n                                            ,sum(spending) as spending\n                                      from stg.mkt_influencer_spending\n                                      --where utm_campaign = 'alpha'\n                                      group by 1,2,3,4,5,6,7) s\n                                ) i on d.date >= i.report_date and d.date < nvl(end_date,getdate()::date)\n                          group by 1,2,3,4,5,6,7,8,9) t1\n\n                        left join\n\n\n                        (select CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', p.start_date_time)::date  as report_date,\n                        i.utm_medium,\n                        i.utm_source,\n                        i.utm_campaign,\n                        i.utm_content,\n                        i.utm_term,\n                        sum(case when p.sub_plan_rank = 1 then 1 else 0 end) as new_members,\n                        sum(case when p.sub_plan_rank != 1 and p.plan_conversion_source is null then 1 else 0 end) as reactivations\n\n                        from dmt.d_customer_plan_360 p\n                        left join dmt.d_customer c on c.customer_id = p.customer_id\n                        left join stg.test_customers t on t.customer_id = p.customer_id\n                        join (select  utm_medium,\n                                      utm_source,\n                                      utm_campaign,\n                                      utm_content,\n                                      utm_term\n                              from stg.mkt_influencer_spending\n                              group by 1,2,3,4,5\n\n                                       ) i on i.utm_medium = p.last_utm_medium\n                                           and i.utm_source = p.last_utm_source\n                                           and p.last_utm_campaign like '%'+ lower(i.utm_campaign) +'%'\n                                           and i.utm_content = p.last_utm_content\n                                           and i.utm_term = p.last_utm_term\n                        where (c.email not like '%@dollarshaveclub.%' or c.email is null)\n                        and t.customer_id is null\n                        --and i.utm_campaign = 'alpha'\n                        group by 1,2,3,4,5,6) t2 on t1.date = t2.report_date\n                                                  and t1.utm_medium = t2.utm_medium\n                                                  and t1.utm_source = t2.utm_source\n                                                  and t1.utm_campaign = t2.utm_campaign\n                                                  and t1.utm_content = t2.utm_content\n                                                  and t1.utm_term = t2.utm_term\n          WHERE (nvl(t1.spending,0) +  nvl(t2.new_members,0) +  nvl(t2.reactivations,0) )>0\n\n  ;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "dq_STAQ_daily_spend"
                    ]
                },
                "tables": [
                    "tmp.dq_STAQ_daily_spend"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO tmp.dq_STAQ_daily_spend\n\n  -------------- FIXED DURATION CREDIT WITH STAQ RAW DATA FOR STATIC/NULL CAMPAIGNS-----------------\n  select\n  'spend' as spend_type,\n  'fixed_duration' as deal_type,\n  t1.date,\n  t1.utm_medium,\n  t1.utm_source,\n  t1.utm_campaign,\n  null as content,\n  null as term,\n  t1.marketing_vendor_name,\n  t2.landing_url,\n  T1.COUNTRY,\n   sum(nvl(t1.amount_per_campaign_landing_url,0)) as amount,\n    sum(nvl(t2.new_members,0)) as new_members,\n     sum(nvl(t2.reactivations,0)) as reactivations\n  from\n  -------------- CALCULATE FIXED FEE BY DAY/NUMBER OF CAMPAIGN/LANDING URL COMBOS -------------------\n  (select dl.date,\n         dl.marketing_vendor_name,\n         dl.utm_medium,\n         dl.utm_source,\n         dl.utm_campaign,\n         dl.country,\n         dl.amount/(case when dl.utm_campaign is null and dl.utm_medium is not null and dl.utm_source is not null and c.no_of_campaigns is not null then c.no_of_campaigns\n                                  when dl.utm_campaign is not null and dl.utm_campaign not like '%' and c2.no_of_campaigns is not null then c2.no_of_campaigns\n                                  when dl.utm_campaign like '%' and c3.no_of_campaigns is not null then c3.no_of_campaigns\n                                  else 1 end) as amount_per_campaign_landing_url\n  from\n  ---------------fixed spending daily from fixed spend view -----------------------------\n  ( SELECT report_date as date, marketing_vendor_name,\n         utm_medium,\n         utm_source,\n         utm_campaign,\n         country,\n         duration,\n         duration_unit,\n         start_date,\n         end_date,SUM(fixed_spending_per_day ) AS amount FROM stg.mkt_pdh_fixed_spending_view\n         GROUP BY 1,2,3,4,5,6,7,8,9,10 ) dl\n         -------------- FIND NUMBER OF CAMPAIGN/LANDING URLS BY MEDIUM/SOURCE----------------\n  left join (select CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', start_date_time)::date as report_date,\n               s.last_utm_medium as utm_medium,\n               s.last_utm_source as utm_source,\n               m.shop_name as country,\n               count(distinct s.last_utm_campaign||split_part(s.landing_url_without_params,'?',1)) as no_of_campaigns\n        from dmt.d_customer_plan_360 s\n        join map.shop m on m.shop_id = s.shop_id\n        where last_utm_medium is not null\n        and last_utm_source is not null\n\n        group by 1,2,3,4) c on c.report_date = dl.date\n                          and dl.utm_medium = c.utm_medium\n                          and dl.utm_source = c.utm_source\n                          and dl.country = c.country\n                          and dl.utm_campaign is null\n         -------------- FIND NUMBER OF LANDING URLS BY MEDIUM/SOURCE/CAMPAIGN----------------\n  left join (select CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', start_date_time)::date as report_date,\n               s.last_utm_medium as utm_medium,\n               s.last_utm_source as utm_source,\n               s.last_utm_campaign as utm_campaign,\n               m.shop_name as country,\n               count(distinct split_part(s.landing_url_without_params,'?',1)) as no_of_campaigns\n        from dmt.d_customer_plan_360 s\n        join map.shop m on m.shop_id = s.shop_id\n        where utm_medium is not null\n        and utm_source is not null\n        and utm_campaign is not null\n\n        group by 1,2,3,4,5) c2 on c2.report_date = dl.date\n                          and dl.utm_medium = c2.utm_medium\n                          and dl.utm_source = c2.utm_source\n                          and dl.utm_campaign = c2.utm_campaign\n                          and dl.country = c2.country\n\n  left join (select CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', start_date_time)::date as report_date,\n               s.last_utm_medium as utm_medium,\n               s.last_utm_source as utm_source,\n               dh.campaign as utm_campaign,\n               m.shop_name as country,\n               count(distinct split_part(s.landing_url_without_params,'?',1)) as no_of_campaigns\n        from dmt.d_customer_plan_360 s\n        join map.shop m on m.shop_id = s.shop_id\n        join (select medium, source,campaign\n              from stg.mkt_partner_deal_history d\n              where d.deal_type = 'fix_spending'\n              and campaign like '%'\n              group by 1,2,3)dh on dh.medium = s.last_utm_medium\n                                       and dh.source = s.last_utm_source\n                                       and s.last_utm_campaign like dh.campaign\n\n        group by 1,2,3,4,5) c3 on c3.report_date = dl.date\n                          and dl.utm_medium = c3.utm_medium\n                          and dl.utm_source = c3.utm_source\n                          and dl.utm_campaign = c3.utm_campaign\n                          and dl.country = c3.country) t1\n\n        ------------- PULL SOURCE/MEDIUM/CAMPAIGN DATA TO ASSOCIATE WITH FEES--------------\n  left join(  -------get activations, reactivations from daily acqusitions table ----------------\n               select start_date_pst_date   as report_date\n                     , last_utm_medium\n                     , last_utm_source\n                     , last_utm_campaign\n                     , landing_url\n                     , shop_name as country\n                     , SUM(new_members) as new_members\n                     , SUM(reactivations) as reactivations FROM tmp.mkt_daily_acquisition_details as s\n                join (select medium, source,campaign\n                      from stg.mkt_partner_deal_history d\n                      where d.deal_type = 'fix_spending'\n                      and campaign like '%'\n                      group by 1,2,3) dh on dh.medium = s.last_utm_medium\n                                         and dh.source = s.last_utm_source\n                                         and s.last_utm_campaign like dh.campaign\n                group by 1,2,3,4,5,6\n          UNION ALL\n\n\n          select start_date_pst_date   as report_date\n                     , last_utm_medium\n                     , last_utm_source\n                     , last_utm_campaign\n                     , landing_url\n                     , shop_name as country\n                     , SUM(new_members) as new_members\n                     , SUM(reactivations) as reactivations FROM tmp.mkt_daily_acquisition_details as s\n                join (select medium, source,campaign\n                      from stg.mkt_partner_deal_history d\n                      where d.deal_type = 'fix_spending'\n                      and medium is not null\n                      and source  is not null\n                      and campaign  is null\n                      group by 1,2,3          ) dh on dh.medium = s.last_utm_medium\n                                               and dh.source = s.last_utm_source\n\n                group by 1,2,3,4,5,6\n              )t2 on t1.date = t2.report_date\n              and t1.utm_medium = t2.last_utm_medium\n              and t1.utm_source = t2.last_utm_source\n              and (t1.utm_campaign = t2.last_utm_campaign or t1.utm_campaign is null)\n              and t1.country = t2.country\n\n  group by 1,2,3,4,5,6,7,8,9,10,11\n\n  ;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "dq_STAQ_daily_spend"
                    ]
                },
                "tables": [
                    "tmp.dq_STAQ_daily_spend"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO tmp.dq_STAQ_daily_spend\n      ------------------ CPA SPEND FOR STATIC/NULL CAMPAIGN--------------------\n    select 'spend' as spend_type,\n           t1.deal_type as deal_type,\n           t1.date,\n           t1.medium,\n           t1.source,\n           t1.campaign,\n           null as content,\n           null as term,\n           t1.marketing_vendor_name,\n           s.landing_url_without_params,\n           s.shop_name as country,\n           sum(case when t1.deal_type = 'cpa' then  t1.amount*s.new_members\n                    when t1.deal_type = 'cpa30' then  t1.amount*s.cpa30_new_members\n                    else 0 end ) as amount,\n           sum(s.new_members) as new_members,\n           sum(s.reactivations)as reactivations\n\n    from\n        (select d.date,\n        cpa.marketing_vendor_name,\n        cpa.medium,\n        cpa.source,\n        cpa.campaign,\n        cpa.country,\n        cpa.amount,\n        cpa.percentage,\n        cpa.deal_type\n\n    from   dmt.d_date d\n    join (SELECT marketing_vendor_name, medium, source, campaign,country, amount, percentage, duration, duration_unit, start_date, end_date, deal_type\n            FROM stg.mkt_partner_deal_history\n            WHERE deal_type in ('cpa','cpa30')\n            AND amount IS NOT NULL) cpa ON d.date >= cpa.start_date\n            AND (end_date IS NULL OR d.date <= cpa.end_date) and d.date <= getdate()::date) t1\n    join\n    -----changed the below code to take acqusitions reactivations from staging table which uses DPR looker logic//\n         (\n         select start_date_pst_date\n                     , last_utm_medium\n                     , last_utm_source\n                     , last_utm_campaign\n                     , landing_url as landing_url_without_params\n                     , shop_name\n                     , SUM(new_members) as new_members\n                     , SUM(reactivations) as reactivations\n                     , SUM(cpa30_new_members) as cpa30_new_members\n                     , SUM(cpa_30_reactivations) as cpa_30_reactivations\n                      FROM tmp.mkt_daily_acquisition_details\n                     GROUP BY 1,2,3,4,5,6\n         ) s on s.start_date_pst_date = t1.date AND s.last_utm_medium = t1.medium AND s.last_utm_source = t1.source\n         AND (s.last_utm_campaign = t1.campaign or t1.campaign is null) AND t1.country = s.shop_name\n\n    group by 1,2,3,4,5,6,7,8,9,10,11\n    ;"
            }
        ],
        "transform.dmt.staq_daily_spend.sql": [
            {
                "skipped": true,
                "value": "CREATE TEMP TABLE staq_spend_detail distkey(1) interleaved sortkey(utm_medium, utm_source, utm_campaign) \nAS    \n    select vw.report_date\n        , vw.marketing_vendor_name\n        , vw.utm_medium\n        , vw.utm_source\n        , vw.utm_campaign\n        , split_part(vw.landing_url,'?',1) as landing_url\n        , vw.country\n        , vw.spend as staq_spend\n        , case when vw.utm_source = 'adob' and vw.utm_medium is not null then null else vw.spend end as spend\n        , case when vw.utm_source = 'adob' and vw.utm_medium is not null then vw.spend else null end as spend_with_fee\n        , case when k.utm_medium is not null and k.utm_campaign is null then '-' else k.utm_campaign end as pdh_campaign\n        , count(*) over (order by vw.report_date\n                                   , vw.marketing_vendor_name\n                                   , vw.utm_medium\n                                   , vw.utm_source\n                                   , vw.utm_campaign\n                                   , split_part(vw.landing_url,'?',1) \n                                   , vw.country\n                                   , vw.spend rows unbounded preceding ) as id\n    from stg.mkt_staq_raw vw\n    left join \n        (\n        select \n             v.source as utm_source\n            , v.medium as utm_medium\n            , v.campaign as utm_campaign\n            , v.country\n        from stg.mkt_partner_deal_history v\n        group by  \n            v.source\n            , v.medium\n            , v.campaign\n            , v.country\n    ) as k\n    on vw.utm_medium = k.utm_medium\n    and (vw.utm_source = k.utm_source or k.utm_source is null)\n    and vw.country = k.country\n    and (k.utm_campaign is null or vw.utm_campaign like '%'+ replace(k.utm_campaign, '%', '') + '%');"
            },
            {
                "skipped": true,
                "value": "CREATE TEMP TABLE staq_spend_summary_landing_url_perc_fee distkey(1) interleaved sortkey(utm_medium, utm_source, utm_campaign) \nAS\n       select \n              acq.report_date\n              , acq.marketing_vendor_name\n              , acq.utm_medium\n              , acq.utm_source\n              , acq.utm_campaign\n              , acq.landing_url\n              , acq.country\n              , acq.pdh_campaign\n              , acq.staq_spends\n              , (case when acq.spends is null and pp.percentage is not null then acq.spend_with_fees / (1 + pp.percentage /100.00) \n                     when acq.spends is null and pp.percentage is null then acq.spend_with_fees\n                     else acq.spends end) as spend\n              , pp.percentage\n              , (case when acq.spends is not null and pp.percentage is not null then (acq.spends * pp.percentage /100.00)\n                     when acq.spend_with_fees is not null and pp.percentage is not null then ((acq.spend_with_fees  * pp.percentage /100.00) / (1 + pp.percentage /100.00))\n                     else null end) as percentage_fee_amount\n              , (case when acq.spend_with_fees is null and pp.percentage is not null then acq.spends * (1 + pp.percentage /100.00) else acq.spend_with_fees end) as spend_with_fee\n              , count(*) over (order by acq.report_date\n                                   , acq.marketing_vendor_name\n                                   , acq.utm_medium\n                                   , acq.utm_source\n                                   , acq.utm_campaign\n                                   , acq.landing_url\n                                   , acq.country\n                                   , acq.pdh_campaign\n                                   , acq.staq_spends rows unbounded preceding ) as id\n       from (\n              SELECT\n              report_date\n              , marketing_vendor_name\n              , utm_medium\n              , utm_source\n              , utm_campaign\n              , landing_url\n              , country\n              , pdh_campaign\n              , sum(staq_spend) as staq_spends\n              , sum(spend) as spends \n              , sum(spend_with_fee) as spend_with_fees\n       FROM staq_spend_detail\n       GROUP BY report_date\n              , marketing_vendor_name\n              , utm_medium\n              , utm_source\n              , utm_campaign\n              , landing_url\n              , country\n              , pdh_campaign\n       ) acq\n       left join (\n              select report_date\n                     , utm_medium\n                     , utm_source\n                     , utm_campaign\n                     , country\n                     , deal_type, max(percentage) as percentage \n              from (\n                     SELECT d.date AS report_date,\n                            pdh.marketing_vendor_name,\n                            pdh.medium AS utm_medium,\n                            pdh.source AS utm_source,\n                            (case when pdh.campaign is null then '-' else pdh.campaign end) AS utm_campaign,\n                            pdh.country,\n                            pdh.deal_type,\n                            pdh.amount,\n                            pdh.percentage,\n                            pdh.duration,\n                            pdh.duration_unit,\n                            pdh.start_date,\n                            pdh.end_date,\n                            pdh.dw_load_date_time\n                     FROM dmt.d_date d\n                     JOIN stg.mkt_partner_deal_history pdh ON d.date >= pdh.start_date\n                     AND d.date <= COALESCE(pdh.end_date, getdate())\n                     WHERE pdh.deal_type = 'fee'\n                            AND pdh.percentage IS NOT NULL\n              ) \n              group by report_date\n                     , utm_medium\n                     , utm_source\n                     , utm_campaign\n                     , country\n                     , deal_type\n       ) pp -- bw7 needs to be fixed\n        on acq.report_date = pp.report_date\n        and (acq.utm_source = pp.utm_source or pp.utm_source is null)\n        and acq.utm_medium = pp.utm_medium\n        and acq.pdh_campaign = pp.utm_campaign\n        and acq.country = pp.country;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [
                    "dmt.staq_daily_spend"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM dmt.staq_daily_spend;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "staq_daily_spend"
                    ]
                },
                "tables": [
                    "dmt.staq_daily_spend"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO dmt.staq_daily_spend\n  select\n   ------------------ SPEND RECIEVED FROM STAQ --------------------\n   'spend' as spend_type,\n   'staq_raw' as deal_type,\n   s.report_date,\n   s.utm_medium,\n   s.utm_source,\n   s.utm_campaign,\n  null as utm_content,\n  null as utm_term,\n   s.marketing_vendor_name,\n   s.landing_url as landing_url_without_params,\n   s.country,\n   max(nvl(s.spend,0)) as amount, --To avoid double counting taking the MAX amount when joined against customer 360 table when campaign info is null in staq raw//\n   --sum(nvl(s.spend,0)) as amount,\n   sum(nvl(p.new_members,0)) as new_members,\n   sum(nvl(p.reactivations,0)) as reactivations\n\n\n   from (select report_date,\n               utm_medium,\n               utm_source,\n               utm_campaign,\n               country,\n               marketing_vendor_name,\n               split_part(landing_url,'?',1) as landing_url,\n               sum(spend) as spend\n         from staq_spend_summary_landing_url_perc_fee\n         group by 1,2,3,4,5,6,7) s\n   left join (select medium,source,country from stg.mkt_partner_deal_history group by 1,2,3) h on h.source = s.utm_source and h.medium = s.utm_medium and s.country = h.country\n   left join (select CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', start_date_time)::date as start_date_time_pst\n                     , last_utm_medium\n                     , last_utm_source\n                     , last_utm_campaign\n                     , landing_url_without_params as landing_url\n                     , m.shop_name\n                     , sum(case when sub_plan_rank = 1 and plan_conversion_source is null then 1 else 0 end ) as new_members\n                     , sum(case when sub_plan_rank != 1 and plan_conversion_source is null then 1 else 0 end ) as reactivations\n              from dmt.d_customer_plan_360 p\n              left join dmt.d_customer c on c.customer_id = p.customer_id\n              left join stg.test_customers t on t.customer_id = p.customer_id\n              left join map.shop m on m.shop_id = p.shop_id\n              where last_utm_medium is not null\n              and (c.email not like '%@dollarshaveclub.%' or c.email is null)\n              and t.customer_id is null\n              group by 1,2,3,4,5,6) p on p.start_date_time_pst = s.report_date\n                                  and p.last_utm_medium = s.utm_medium\n                                  and p.last_utm_source = s.utm_source\n                                  and (p.last_utm_campaign = s.utm_campaign or s.utm_campaign is null)\n                                  and p.landing_url = s.landing_url\n                                  and p.shop_name = s.country\n    group  by 1,2,3,4,5,6,7,8,9,10,11\n\n  ;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "staq_daily_spend"
                    ],
                    "select": [
                        "start_date_time",
                        "last_utm_medium",
                        "last_utm_source",
                        "last_utm_campaign",
                        "staq.marketing_vendor_name",
                        "lu.landing_url",
                        "staq.utm_medium",
                        "landing_url_without_params",
                        "map.shop.shop_name",
                        "sub_plan_rank",
                        "plan_conversion_source",
                        []
                    ],
                    "join": [
                        "dmt.d_customer.customer_id",
                        "dmt.d_customer_plan_360.customer_id",
                        "stg.test_customers.customer_id",
                        "map.shop.shop_id",
                        "dmt.d_customer_plan_360.shop_id",
                        "dmt.d_customer_plan_360.last_utm_medium",
                        "lu.utm_medium",
                        "dmt.d_customer_plan_360.last_utm_source",
                        "lu.utm_source",
                        "dmt.d_customer_plan_360.last_utm_campaign",
                        "lu.utm_campaign",
                        "dmt.d_customer_plan_360.landing_url_without_params",
                        "lu.landing_url",
                        "map.shop.shop_name",
                        "lu.country",
                        "staq.utm_medium",
                        "staq.utm_source",
                        "staq.utm_campaign",
                        "staq.country"
                    ],
                    "where": [
                        "last_utm_medium",
                        "dmt.d_customer.email",
                        "stg.test_customers.customer_id",
                        "lu.landing_url",
                        "staq.utm_medium",
                        "start_date_time"
                    ]
                },
                "tables": [
                    "dmt.staq_daily_spend",
                    "dmt.d_customer_plan_360",
                    "dmt.d_customer",
                    "stg.test_customers",
                    "map.shop",
                    "stg.mkt_staq_raw"
                ],
                "subqueries": {
                    "lu": "select utm_medium, utm_source, utm_campaign, country, split_part (landing_url, '?', 1) as landing_url from stg.mkt_staq_raw group by 1, 2, 3, 4, 5",
                    "staq": "select utm_medium, utm_source, utm_campaign, marketing_vendor_name, country from stg.mkt_staq_raw group by 1, 2, 3, 4, 5"
                },
                "skipped": false,
                "value": "INSERT INTO dmt.staq_daily_spend\n\n\n  select             'spend' as spend_type\n                     ,'staq_raw' as deal_type\n                     ,CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', start_date_time)::date as start_date_time_pst\n                     , last_utm_medium as utm_medium\n                     , last_utm_source as utm_source\n                     , last_utm_campaign as utm_campaign\n                     , null as utm_content\n                     , null as utm_term\n                     , staq.marketing_vendor_name as marketing_vendor_name\n                     , case when lu.landing_url is null and staq.utm_medium is not null then 'unassigned' else landing_url_without_params end as landing_url\n                     , m.shop_name as country\n                     , 0 as amount\n                     , sum(case when sub_plan_rank = 1 and plan_conversion_source is null then 1 else 0 end ) as new_members\n                     , sum(case when sub_plan_rank != 1 and plan_conversion_source is null then 1 else 0 end ) as reactivations\n              from dmt.d_customer_plan_360 p\n              left join dmt.d_customer c on c.customer_id = p.customer_id\n              left join stg.test_customers t on t.customer_id = p.customer_id\n              left join map.shop m on m.shop_id = p.shop_id\n              left join (select utm_medium,\n                               utm_source,\n                               utm_campaign,\n                               country,\n                               split_part(landing_url,'?',1)as landing_url\n                        from stg.mkt_staq_raw\n                        group by 1,2,3,4,5) lu on p.last_utm_medium = lu.utm_medium\n                                              and p.last_utm_source = lu.utm_source\n                                              and (p.last_utm_campaign = lu.utm_campaign or lu.utm_campaign is null)\n                                              and p.landing_url_without_params = lu.landing_url\n                                              and m.shop_name = lu.country\n              left join (select utm_medium,\n                               utm_source,\n                               utm_campaign,\n                               marketing_vendor_name,\n                               country\n                        from stg.mkt_staq_raw\n                        group by 1,2,3,4,5) staq on p.last_utm_medium = staq.utm_medium\n                                              and p.last_utm_source = staq.utm_source\n                                              and (p.last_utm_campaign = staq.utm_campaign or staq.utm_campaign is null)\n                                              and m.shop_name = staq.country\n              where last_utm_medium is not null\n              and (c.email not like '%@dollarshaveclub.%' or c.email is null)\n              and t.customer_id is null\n              and lu.landing_url is null\n              and staq.utm_medium is not null\n              and CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', start_date_time)::date  >='2019-01-01'\n              --and CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', start_date_time)::date  ='2019-06-21'\n\n              group by 1,2,3,4,5,6,7,8,9,10,11,12\n\n  ;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "staq_daily_spend"
                    ]
                },
                "tables": [
                    "dmt.staq_daily_spend"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO dmt.staq_daily_spend\n  ---------------------PERCENTAGE FEES FOR STATIC/NULL CAMPAIGN -------------------------\n\n  select\n      'fee' as spend_type,\n      'percentage' as deal_type,\n      report_date,\n      utm_medium ,\n      utm_source ,\n      utm_campaign,\n      null as content,\n      null as term,\n      marketing_vendor_name,\n      landing_url as landing_url_without_params,\n      country,\n      percentage_fee_amount as amount,\n      0 as new_members,\n      0 as reactivations\n  from staq_spend_summary_landing_url_perc_fee\n  where percentage is not null;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "staq_daily_spend"
                    ],
                    "select": [
                        "t1.date",
                        "t1.medium"
                    ]
                },
                "tables": [
                    "dmt.staq_daily_spend"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO dmt.staq_daily_spend\n\n\n  select\n  'fee' as spend_type,\n  'fixed_duration' as deal_type,\n  t1.date,\n  t1.medium, --changed to pick source and medium from partner deal history instead of customer 360,\n  t1.source,\n  t1.campaign,\n  null as content,\n  null as term,\n  t1.marketing_vendor_name,\n  t2.landing_url_without_params,\n  t1.country,\n  sum(t1.amount_per_campaign_landing_url) as amount,\n  0 as new_members,\n  0 as reactivations\n\n  from\n  -------------- CALCULATE FIXED FEE BY DAY/NUMBER OF CAMPAIGN/LANDING URL COMBOS -------------------\n  (select d.date,\n         dl.marketing_vendor_name,\n         dl.medium,\n         dl.source,\n         dl.campaign,\n         dl.country,\n         dl.amount/(CASE WHEN dl.duration_unit ilike 'mon%' THEN\n                      DATEDIFF('day', DATE_ADD('day', 1, LAST_DAY(date_add('mon', (dl.duration*-1), d.date))), LAST_DAY(d.date)) + 1\n                      WHEN dl.duration_unit ilike 'w%' THEN (dl.duration * 7)\n                      WHEN dl.duration_unit ilike 'd%' THEN dl.duration\n                      ELSE NULL\n                      END )/(case when dl.campaign is not null and c2.no_of_campaigns is not null then c2.no_of_campaigns\n                                  when dl.campaign is null and c.no_of_campaigns is not null then c.no_of_campaigns\n                                  when dl.campaign is null and c3.no_of_campaigns is not null then c3.no_of_campaigns\n                             else 1 end) as amount_per_campaign_landing_url\n  from\n  dmt.d_date d\n        ------------ DELTA QUERY TO FIND CERTAIN VENDORS ------------------\n  join (select marketing_vendor_name,\n         medium,\n         source,\n         campaign,\n         country,\n         amount,\n         duration,\n         duration_unit,\n         start_date,\n         end_date\n       from stg.mkt_partner_deal_history h\n          left join (select utm_medium,utm_source from stg.mkt_staq_raw group by 1,2) s\n              on s.utm_medium = h.medium\n              and s.utm_source = h.source\n       where deal_type = 'fee'\n          and amount is not null\n          and duration is not null\n          ) dl on d.date >=dl.start_date\n                                           and d.date <= nvl(end_date,getdate()::date)\n                                           and d.date < getdate()::date\n         -------------- FIND NUMBER OF CAMPAIGN/LANDING URLS BY MEDIUM/SOURCE----------------\n  left join (select report_date,\n               utm_medium,\n               utm_source,\n               country,\n               count(distinct utm_campaign||split_part(landing_url,'?',1)) as no_of_campaigns\n        from stg.mkt_staq_raw\n        where utm_medium is not null\n        and utm_source is not null\n        group by 1,2,3,4) c on c.report_date = d.date\n                          and dl.medium = c.utm_medium\n                          and dl.source = c.utm_source\n                          and dl.country = c.country\n         -------------- FIND NUMBER OF LANDING URLS BY MEDIUM/SOURCE/CAMPAIGN----------------\n  left join (select report_date,\n               utm_medium,\n               utm_source,\n               utm_campaign,\n               country,\n               count(distinct split_part(landing_url,'?',1)) as no_of_campaigns\n        from stg.mkt_staq_raw\n        where utm_medium is not null\n        and utm_source is not null\n        and utm_campaign is not null\n        group by 1,2,3,4,5) c2 on c2.report_date = d.date\n                          and dl.medium = c2.utm_medium\n                          and dl.source = c2.utm_source\n                          and dl.campaign = c2.utm_campaign\n                          and dl.country = c2.country\n  left join (select CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', start_date_time)::date as report_date,\n               s.last_utm_medium as utm_medium,\n               s.last_utm_source as utm_source,\n               dh.campaign as utm_campaign,\n               m.shop_name as country,\n               count(distinct split_part(s.landing_url_without_params,'?',1)) as no_of_campaigns\n        from dmt.d_customer_plan_360 s\n        join map.shop m on m.shop_id = s.shop_id\n        join (select medium, source,campaign\n              from stg.mkt_partner_deal_history d\n              left join (select utm_medium,utm_source\n                          from stg.mkt_staq_raw\n                          group by 1,2) s on s.utm_medium = d.medium\n                                          and s.utm_source = d.source\n              where d.deal_type = 'fee'\n              and amount is not null\n              and medium is not null\n              and s.utm_medium is null\n              group by 1,2,3)dh on dh.medium = s.last_utm_medium\n                                       and dh.source = s.last_utm_source\n                                       and dh.campaign is null\n\n        group by 1,2,3,4,5) c3 on c3.report_date = d.date\n                          and dl.medium = c3.utm_medium\n                          and dl.source = c3.utm_source\n                          and dl.country = c3.country\n  ) t1\n        ------------- PULL SOURCE/MEDIUM/CAMPAIGN DATA TO ASSOCIATE WITH FEES--------------\n  left join(\n              select report_date,\n              utm_medium,\n              utm_source,\n              utm_campaign,\n              split_part(landing_url,'?',1) as landing_url_without_params,\n              country\n              from stg.mkt_staq_raw\n              group by 1,2,3,4,5,6\n\n              union all\n\n              select\n              CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', p.start_date_time)::date  as report_date,\n              last_utm_medium,\n              last_utm_source,\n              null as utm_campaign,\n              landing_url_without_params,\n              m.shop_name\n\n              from dmt.d_customer_plan_360 p\n              join map.shop m on m.shop_id = p.shop_id\n              join (select medium,\n                           source\n                    from stg.mkt_partner_deal_history h\n                    left join (select utm_medium,utm_source\n                          from stg.mkt_staq_raw\n                          group by 1,2) s on s.utm_medium = h.medium\n                                          and s.utm_source = h.source\n                    where s.utm_medium is null\n                    and deal_type = 'fee'\n                    and amount is not null\n                    group by 1,2) t1 on t1.medium =  p.last_utm_medium\n                                     and t1.source = p.last_utm_source\n               group by 1,2,3,4,5,6\n          )t2 on t1.date = t2.report_date\n              and t1.medium = t2.utm_medium\n              and t1.source = t2.utm_source\n              and (t1.campaign = t2.utm_campaign or t1.campaign is null)\n              and t1.country = t2.country\n\n  group by 1,2,3,4,5,6,7,8,9,10,11\n\n\n\n\n\n\n  ;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "staq_daily_spend"
                    ]
                },
                "tables": [
                    "dmt.staq_daily_spend"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO dmt.staq_daily_spend\n\n  -------------- FIXED DURATION CREDIT WITH STAQ RAW DATA FOR STATIC/NULL CAMPAIGNS-----------------\n  select\n  'credit' as spend_type,\n  'fixed_duration' as deal_type,\n  t1.date,\n t1.medium, --changed to pick source and medium from partner deal history instead of customer 360,\n  t1.source,\n  t1.campaign,\n  null as content,\n  null as term,\n  t1.marketing_vendor_name,\n  t2.landing_url_without_params,\n  t1.country,\n  sum(t1.amount_per_campaign_landing_url)*-1 as amount,\n  0 as new_members,\n  0 as reactivations\n\n  from\n  -------------- CALCULATE FIXED FEE BY DAY/NUMBER OF CAMPAIGN/LANDING URL COMBOS -------------------\n  (select d.date,\n         dl.marketing_vendor_name,\n         dl.medium,\n         dl.source,\n         dl.campaign,\n         dl.country,\n         dl.amount/(CASE WHEN dl.duration_unit ilike 'mon%' THEN\n                      DATEDIFF('day', DATE_ADD('day', 1, LAST_DAY(date_add('mon', (dl.duration*-1), d.date))), LAST_DAY(d.date)) + 1\n                      WHEN dl.duration_unit ilike 'w%' THEN (dl.duration * 7)\n                      WHEN dl.duration_unit ilike 'd%' THEN dl.duration\n                      ELSE NULL\n                      END )/(case when dl.campaign  is not null and c2.no_of_campaigns is not null\n                                      then c2.no_of_campaigns\n                                  when dl.campaign is null and c.no_of_campaigns is not null\n                                      then c.no_of_campaigns\n                                  when dl.campaign is null and c3.no_of_campaigns is not null\n                                      then c3.no_of_campaigns\n                               else 1 end) as amount_per_campaign_landing_url\n  from\n  dmt.d_date d\n        ------------ DELTA QUERY TO FIND CERTAIN VENDORS ------------------\n  join (select marketing_vendor_name,\n         medium,\n         source,\n         campaign,\n         country,\n         amount,\n         duration,\n         duration_unit,\n         start_date,\n         end_date\n       from stg.mkt_partner_deal_history h\n          left join (select utm_medium,utm_source from stg.mkt_staq_raw group by 1,2) s\n              on s.utm_medium = h.medium\n              and s.utm_source = h.source\n       where deal_type = 'credit'\n          and amount is not null\n          and duration is not null) dl on d.date >=dl.start_date\n                                           and d.date <= nvl(end_date,getdate()::date)\n         -------------- FIND NUMBER OF CAMPAIGN/LANDING URLS BY MEDIUM/SOURCE----------------\n  left join (select s.report_date,\n               s.utm_medium,\n               s.utm_source,\n               s.country,\n               count(distinct s.utm_campaign||split_part(s.landing_url,'?',1)) as no_of_campaigns\n        from stg.mkt_staq_raw s\n        where utm_medium is not null\n        and utm_source is not null\n        group by 1,2,3,4) c on c.report_date = d.date\n                          and dl.medium = c.utm_medium\n                          and dl.source = c.utm_source\n                          and dl.country = c.country\n         -------------- FIND NUMBER OF LANDING URLS BY MEDIUM/SOURCE/CAMPAIGN----------------\n  left join (select s.report_date,\n               s.utm_medium,\n               s.utm_source,\n               s.utm_campaign,\n               s.country,\n               count(distinct split_part(s.landing_url,'?',1)) as no_of_campaigns\n        from stg.mkt_staq_raw s\n        where utm_medium is not null\n        and utm_source is not null\n        and utm_campaign is not null\n        group by 1,2,3,4,5) c2 on c2.report_date = d.date\n                          and dl.medium = c2.utm_medium\n                          and dl.source = c2.utm_source\n                          and dl.campaign = c2.utm_campaign\n                          and dl.country = c2.country\n        -------------- FIND NUMBER OF LANDING URLS BY MEDIUM/SOURCE for INTERNAL----------------\n  left join (select CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', start_date_time)::date as report_date,\n               s.last_utm_medium as utm_medium,\n               s.last_utm_source as utm_source,\n               dh.campaign as utm_campaign,\n               m.shop_name as country,\n               count(distinct split_part(s.landing_url_without_params,'?',1)) as no_of_campaigns\n        from dmt.d_customer_plan_360 s\n        join map.shop m on m.shop_id = s.shop_id\n        join (select medium, source,campaign\n              from stg.mkt_partner_deal_history d\n              left join (select utm_medium,utm_source\n                          from stg.mkt_staq_raw\n                          group by 1,2) s on s.utm_medium = d.medium\n                                          and s.utm_source = d.source\n              where d.deal_type = 'credit'\n              and s.utm_medium is null\n              group by 1,2,3)dh on dh.medium = s.last_utm_medium\n                                       and dh.source = s.last_utm_source\n                                       and dh.campaign is null\n\n        group by 1,2,3,4,5) c3 on c3.report_date = d.date\n                          and dl.medium = c3.utm_medium\n                          and dl.source = c3.utm_source\n                          and dl.country = c3.country\n\n\n                          ) t1\n        ------------- PULL SOURCE/MEDIUM/CAMPAIGN DATA TO ASSOCIATE WITH FEES--------------\n  left join(\n              select report_date,\n              utm_medium,\n              utm_source,\n              utm_campaign,\n              country,\n              split_part(landing_url,'?',1) as landing_url_without_params\n              from stg.mkt_staq_raw\n              group by 1,2,3,4,5,6\n\n              union all\n\n              select\n              CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', p.start_date_time)::date  as report_date,\n              last_utm_medium,\n              last_utm_source,\n              null as utm_campaign,\n              m.shop_name,\n              landing_url_without_params\n\n              from dmt.d_customer_plan_360 p\n              join map.shop m on m.shop_id = p.shop_id\n              join (select medium,\n                           source\n                    from stg.mkt_partner_deal_history h\n                    left join (select utm_medium,utm_source\n                          from stg.mkt_staq_raw\n                          group by 1,2) s on s.utm_medium = h.medium\n                                          and s.utm_source = h.source\n                    where s.utm_medium is null\n                    and deal_type = 'credit'\n                    group by 1,2) t1 on t1.medium =  p.last_utm_medium\n                                     and t1.source = p.last_utm_source\n               group by 1,2,3,4,5,6\n          )t2 on t1.date = t2.report_date\n              and t1.medium = t2.utm_medium\n              and t1.source = t2.utm_source\n              and (t1.campaign = t2.utm_campaign or t1.campaign is null)\n              and t1.country = t2.country\n\n  group by 1,2,3,4,5,6,7,8,9,10,11\n\n  ;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "staq_daily_spend"
                    ]
                },
                "tables": [
                    "dmt.staq_daily_spend"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO dmt.staq_daily_spend\n\n  ------------------ INFLUENCER SPEND DATA-----------------------\n      SELECT  'spend' as spend_type,\n                  'fixed_duration' as deal_type,\n                  t1.date as report_date,\n                  t1.utm_medium,\n                  t1.utm_source,\n                  t1.utm_campaign,\n                  t1.utm_content,\n                  t1.utm_term,\n                  'Influencer' as marketing_vendor_name,\n                  t1.landing_url,\n                  'US' as country,\n                  nvl(t1.spending,0) as amount,\n                  nvl(t2.new_members,0) as new_members,\n                  nvl(t2.reactivations,0) as reactivations\n\n\n          FROM\n                        (select    d.date,\n                                  report_date,\n                                  utm_medium,\n                                  utm_source,\n                                  utm_campaign,\n                                  utm_content,\n                                  utm_term,\n                                  end_date,\n                                  landing_url,\n                                  sum(case when i.report_date = d.date then spending else 0 end) as spending\n\n                        from dmt.d_date d\n                        join\n\n                         (select report_date\n                                ,utm_medium\n                                ,utm_source\n                                ,utm_campaign\n                                ,utm_content\n                                ,utm_term\n                                ,split_part(url_with_params,'?',1) as landing_url\n                                ,spending\n                                ,nvl(lag(report_date,1) over (PARTITION BY utm_medium,utm_source, utm_campaign, utm_term ORDER BY report_date desc), getdate()::date)::date as end_date\n                                from (select report_date\n                                            ,utm_medium\n                                            ,utm_source\n                                            ,utm_campaign\n                                            ,utm_content\n                                            ,url_with_params\n                                            ,utm_term\n                                            ,sum(spending) as spending\n                                      from stg.mkt_influencer_spending\n                                      --where utm_campaign = 'alpha'\n                                      group by 1,2,3,4,5,6,7) s\n                                ) i on d.date >= i.report_date and d.date < nvl(end_date,getdate()::date)\n                          group by 1,2,3,4,5,6,7,8,9) t1\n\n                        left join\n\n\n                        (select CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', p.start_date_time)::date  as report_date,\n                        i.utm_medium,\n                        i.utm_source,\n                        i.utm_campaign,\n                        i.utm_content,\n                        i.utm_term,\n                        sum(case when p.sub_plan_rank = 1 then 1 else 0 end) as new_members,\n                        sum(case when p.sub_plan_rank != 1 and p.plan_conversion_source is null then 1 else 0 end) as reactivations\n\n                        from dmt.d_customer_plan_360 p\n                        left join dmt.d_customer c on c.customer_id = p.customer_id\n                        left join stg.test_customers t on t.customer_id = p.customer_id\n                        join (select  utm_medium,\n                                      utm_source,\n                                      utm_campaign,\n                                      utm_content,\n                                      utm_term\n                              from stg.mkt_influencer_spending\n                              group by 1,2,3,4,5\n\n                                       ) i on i.utm_medium = p.last_utm_medium\n                                           and i.utm_source = p.last_utm_source\n                                           and p.last_utm_campaign like '%'+ lower(i.utm_campaign) +'%'\n                                           and i.utm_content = p.last_utm_content\n                                           and i.utm_term = p.last_utm_term\n                        where (c.email not like '%@dollarshaveclub.%' or c.email is null)\n                        and t.customer_id is null\n                        --and i.utm_campaign = 'alpha'\n                        group by 1,2,3,4,5,6) t2 on t1.date = t2.report_date\n                                                  and t1.utm_medium = t2.utm_medium\n                                                  and t1.utm_source = t2.utm_source\n                                                  and t1.utm_campaign = t2.utm_campaign\n                                                  and t1.utm_content = t2.utm_content\n                                                  and t1.utm_term = t2.utm_term\n          WHERE (nvl(t1.spending,0) +  nvl(t2.new_members,0) +  nvl(t2.reactivations,0) )>0\n\n\n\n\n  ;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "staq_daily_spend"
                    ]
                },
                "tables": [
                    "dmt.staq_daily_spend"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO dmt.staq_daily_spend\n\n  -------------- FIXED DURATION CREDIT WITH STAQ RAW DATA FOR STATIC/NULL CAMPAIGNS-----------------\n  select\n  'spend' as spend_type,\n  'fixed_duration' as deal_type,\n  t1.date,\n  t1.medium as utm_medium,\n  t1.source as utm_source,\n  t1.campaign as utm_campaign,\n  null as content,\n  null as term,\n  t1.marketing_vendor_name,\n  t2.landing_url_without_params,\n  T1.COUNTRY,\n   sum(nvl(t1.amount_per_campaign_landing_url,0)) as amount,\n    sum(nvl(t2.new_members,0)) as new_members,\n     sum(nvl(t2.reactivations,0)) as reactivations\n  from\n  -------------- CALCULATE FIXED FEE BY DAY/NUMBER OF CAMPAIGN/LANDING URL COMBOS -------------------\n  (select d.date,\n         dl.marketing_vendor_name,\n         dl.medium,\n         dl.source,\n         dl.campaign,\n         dl.country,\n         dl.amount/(CASE WHEN dl.duration_unit ilike 'mon%' THEN\n                      DATEDIFF('day', DATE_ADD('day', 1, LAST_DAY(date_add('mon', (dl.duration*-1), d.date))), LAST_DAY(d.date)) + 1\n                      WHEN dl.duration_unit ilike 'w%' THEN (dl.duration * 7)\n                      WHEN dl.duration_unit ilike 'd%' THEN dl.duration\n                      ELSE NULL\n                      END )/(case when dl.campaign is null and dl.medium is not null and dl.source is not null and c.no_of_campaigns is not null then c.no_of_campaigns\n                                  when dl.campaign is not null and dl.campaign not like '%' and c2.no_of_campaigns is not null then c2.no_of_campaigns\n                                  when dl.campaign like '%' and c3.no_of_campaigns is not null then c3.no_of_campaigns\n                                  else 1 end) as amount_per_campaign_landing_url\n  from\n  dmt.d_date d\n        ------------ DELTA QUERY TO FIND CERTAIN VENDORS ------------------\n  join (select marketing_vendor_name,\n         medium,\n         source,\n         campaign,\n         country,\n         amount,\n         duration,\n         duration_unit,\n         start_date,\n         end_date\n       from stg.mkt_partner_deal_history h\n       where deal_type = 'fix_spending'\n          and amount is not null\n          and duration is not null\n  ) dl on d.date >=dl.start_date\n                                           and d.date <= nvl(end_date,getdate()::date)\n         -------------- FIND NUMBER OF CAMPAIGN/LANDING URLS BY MEDIUM/SOURCE----------------\n  left join (select CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', start_date_time)::date as report_date,\n               s.last_utm_medium as utm_medium,\n               s.last_utm_source as utm_source,\n               m.shop_name as country,\n               count(distinct s.last_utm_campaign||split_part(s.landing_url_without_params,'?',1)) as no_of_campaigns\n        from dmt.d_customer_plan_360 s\n        join map.shop m on m.shop_id = s.shop_id\n        where last_utm_medium is not null\n        and last_utm_source is not null\n\n        group by 1,2,3,4) c on c.report_date = d.date\n                          and dl.medium = c.utm_medium\n                          and dl.source = c.utm_source\n                          and dl.country = c.country\n                          and dl.campaign is null\n         -------------- FIND NUMBER OF LANDING URLS BY MEDIUM/SOURCE/CAMPAIGN----------------\n  left join (select CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', start_date_time)::date as report_date,\n               s.last_utm_medium as utm_medium,\n               s.last_utm_source as utm_source,\n               s.last_utm_campaign as utm_campaign,\n               m.shop_name as country,\n               count(distinct split_part(s.landing_url_without_params,'?',1)) as no_of_campaigns\n        from dmt.d_customer_plan_360 s\n        join map.shop m on m.shop_id = s.shop_id\n        where utm_medium is not null\n        and utm_source is not null\n        and utm_campaign is not null\n\n        group by 1,2,3,4,5) c2 on c2.report_date = d.date\n                          and dl.medium = c2.utm_medium\n                          and dl.source = c2.utm_source\n                          and dl.campaign = c2.utm_campaign\n                          and dl.country = c2.country\n\n  left join (select CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', start_date_time)::date as report_date,\n               s.last_utm_medium as utm_medium,\n               s.last_utm_source as utm_source,\n               dh.campaign as utm_campaign,\n               m.shop_name as country,\n               count(distinct split_part(s.landing_url_without_params,'?',1)) as no_of_campaigns\n        from dmt.d_customer_plan_360 s\n        join map.shop m on m.shop_id = s.shop_id\n        join (select medium, source,campaign\n              from stg.mkt_partner_deal_history d\n              where d.deal_type = 'fix_spending'\n              and campaign like '%'\n              group by 1,2,3)dh on dh.medium = s.last_utm_medium\n                                       and dh.source = s.last_utm_source\n                                       and s.last_utm_campaign like dh.campaign\n\n        group by 1,2,3,4,5) c3 on c3.report_date = d.date\n                          and dl.medium = c3.utm_medium\n                          and dl.source = c3.utm_source\n                          and dl.campaign = c3.utm_campaign\n                          and dl.country = c3.country) t1\n\n        ------------- PULL SOURCE/MEDIUM/CAMPAIGN DATA TO ASSOCIATE WITH FEES--------------\n  left join(select CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', start_date_time)::date as report_date,\n                       s.last_utm_medium as utm_medium,\n                       s.last_utm_source as utm_source,\n                       dh.campaign as utm_campaign,\n                       m.shop_name as country,\n                       s.landing_url_without_params,\n                       sum(case when sub_plan_rank = 1 then 1 else 0 end) as new_members,\n                       sum(case when sub_plan_rank > 1 then 1 else 0 end) as reactivations\n\n                from dmt.d_customer_plan_360 s\n                join map.shop m on m.shop_id = s.shop_id\n                join (select medium, source,campaign\n                      from stg.mkt_partner_deal_history d\n                      where d.deal_type = 'fix_spending'\n                      and campaign like '%'\n                      group by 1,2,3) dh on dh.medium = s.last_utm_medium\n                                         and dh.source = s.last_utm_source\n                                         and s.last_utm_campaign like dh.campaign\n                group by 1,2,3,4,5,6\n          UNION ALL\n\n          select CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', start_date_time)::date as report_date,\n                       s.last_utm_medium as utm_medium,\n                       s.last_utm_source as utm_source,\n                       dh.campaign as utm_campaign,\n                       m.shop_name as country,\n                       s.landing_url_without_params,\n                       sum(case when sub_plan_rank = 1 then 1 else 0 end) as new_members,\n                       sum(case when sub_plan_rank > 1 then 1 else 0 end) as reactivations\n\n                from dmt.d_customer_plan_360 s\n                join map.shop m on m.shop_id = s.shop_id\n                join (select medium, source,campaign\n                      from stg.mkt_partner_deal_history d\n                      where d.deal_type = 'fix_spending'\n                      and medium is not null\n                      and source  is not null\n                      and campaign  is null\n                      group by 1,2,3          ) dh on dh.medium = s.last_utm_medium\n                                               and dh.source = s.last_utm_source\n\n                group by 1,2,3,4,5,6\n              )t2 on t1.date = t2.report_date\n              and t1.medium = t2.utm_medium\n              and t1.source = t2.utm_source\n              and (t1.campaign = t2.utm_campaign or t1.campaign is null)\n              and t1.country = t2.country\n\n  group by 1,2,3,4,5,6,7,8,9,10,11\n\n\n\n  ;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "staq_daily_spend"
                    ]
                },
                "tables": [
                    "dmt.staq_daily_spend"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO dmt.staq_daily_spend\n\n     ------------------ CPA SPEND FOR STATIC/NULL CAMPAIGN--------------------\n    select 'spend' as spend_type,\n           t1.deal_type as deal_type,\n           t1.date,\n           t1.medium,\n           t1.source,\n           t1.campaign,\n           null as content,\n           null as term,\n           t1.marketing_vendor_name,\n           s.landing_url_without_params,\n           s.shop_name as country,\n           sum(case when t1.deal_type = 'cpa' then  t1.amount*s.new_members\n                    when t1.deal_type = 'cpa30' then  t1.amount*s.cpa30_new_members\n                    else 0 end ) as amount,\n           sum(s.new_members) as new_members,\n           sum(s.reactivations)as reactivations\n\n    from\n        (select d.date,\n        cpa.marketing_vendor_name,\n        cpa.medium,\n        cpa.source,\n        cpa.campaign,\n        cpa.country,\n        cpa.amount,\n        cpa.percentage,\n        cpa.deal_type\n\n    from   dmt.d_date d\n    join (SELECT marketing_vendor_name, medium, source, campaign,country, amount, percentage, duration, duration_unit, start_date, end_date, deal_type\n            FROM stg.mkt_partner_deal_history\n            WHERE deal_type in ('cpa','cpa30')\n            AND amount IS NOT NULL) cpa ON d.date >= cpa.start_date AND (end_date IS NULL OR d.date <= cpa.end_date) and d.date <= getdate()::date) t1\n    join\n         (select CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', start_date_time)::date as start_date_time_pst,\n               h.medium,\n               h.source,\n               h.campaign,\n               p.landing_url_without_params,\n               m.shop_name,\n               sum(case when sub_plan_rank = 1 then 1 else 0 end ) as new_members,\n               sum(case when sub_plan_rank != 1 and plan_conversion_source is null  then 1 else 0 end) as reactivations,\n               sum(case when sub_plan_rank = 1 and (floor(datediff('h',start_date_time, end_date_time)/24) < 30 or end_date_time is null) then 1 else 0 end) as cpa30_new_members ,\n               sum(case when sub_plan_rank != 1 and plan_conversion_source is null and (floor(datediff('h',start_date_time, end_date_time)/24) < 30 or end_date_time is null) then 1 else 0 end)cpa_30_reactivations\n         from (select medium, source, campaign,country, '%\\\\' + replace(campaign, '%', '') + '%' as campjoin from stg.mkt_partner_deal_history where deal_type = 'cpa' group by 1,2,3,4) h\n         join dmt.d_customer_plan_360 p on  p.last_utm_medium = h.medium and p.last_utm_source = h.source  and p.last_utm_campaign like h.campjoin\n         join map.shop m on m.shop_id = p.shop_id and m.shop_name = h.country\n         left join dmt.d_customer c on c.customer_id = p.customer_id\n         left join stg.test_customers t on t.customer_id = p.customer_id\n         where campaign like '%'\n         and (c.email not like '%@dollarshaveclub.%' or c.email is null)\n         and t.customer_id is null\n         group by 1,2,3,4,5,6\n\n        union all\n\n        -------------------THIS QUERY IS TO ROLL UP TO A STATIC CAMPAIGN OR A NULL CAMPAIGN------\n         select CONVERT_TIMEZONE ( 'UTC', 'america/los_angeles', start_date_time)::date as start_date_time_pst,\n               h.medium,\n               h.source,\n               h.campaign,\n               p.landing_url_without_params,\n               m.shop_name,\n               sum(case when sub_plan_rank = 1 then 1 else 0 end ) as new_members,\n               sum(case when sub_plan_rank != 1 and plan_conversion_source is null  then 1 else 0 end) as reactivations,\n               sum(case when sub_plan_rank = 1 and (floor(datediff('h',start_date_time, end_date_time)/24) < 30 or end_date_time is null) then 1 else 0 end) as cpa30_new_members ,\n               sum(case when sub_plan_rank != 1 and plan_conversion_source is null and (floor(datediff('h',start_date_time, end_date_time)/24) < 30 or end_date_time is null) then 1 else 0 end)cpa_30_reactivations\n         from (select medium, source, campaign, country from stg.mkt_partner_deal_history where deal_type  in ('cpa','cpa30') group by 1,2,3,4) h\n         join dmt.d_customer_plan_360 p on  p.last_utm_medium = h.medium and p.last_utm_source = h.source  and (p.last_utm_campaign = campaign or campaign is null)\n         join map.shop m on m.shop_id = p.shop_id and m.shop_name = h.country\n         left join dmt.d_customer c on c.customer_id = p.customer_id\n         left join stg.test_customers t on t.customer_id = p.customer_id\n         where (campaign not like '%' or campaign is null)\n         and (c.email not like '%@dollarshaveclub.%' or c.email is null)\n         and t.customer_id is null\n         group by 1,2,3,4,5,6) s on s.start_date_time_pst = t1.date and s.medium = t1.medium and s.source = t1.source and (s.campaign = t1.campaign or s.campaign is null) and t1.country = s.shop_name\n\n    group by 1,2,3,4,5,6,7,8,9,10,11\n\n\n\n  ;"
            }
        ],
        "load.stg.mkt_staq_raw.sql": [
            {
                "type": "DELETE",
                "columns": null,
                "tables": [
                    "stg.mkt_staq_raw"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.mkt_staq_raw;"
            },
            {
                "skipped": true,
                "value": "INSERT INTO stg.mkt_staq_raw(\n    report_date\n    , utm_medium\n    , utm_source\n    , utm_campaign\n    , marketing_vendor_name\n    , publisher_domain\n    , country\n    , impressions\n    , spend\n    , conversions\n    , clicks\n    , landing_url                       \n    , staq_medium\n    , staq_campaign\n    , staq_source\n)\nWITH normalized AS (\n    SELECT\n        report_date\n        , CASE WHEN LOWER(landing_url) = 'null' OR landing_url = '' THEN null ELSE landing_url END AS landing_url\n        , CASE WHEN LOWER(medium) = 'null' OR medium = '' THEN null ELSE medium END AS medium\n        , CASE WHEN LOWER(campaign) = 'null' OR campaign = '' THEN null ELSE campaign END AS campaign\n        , CASE WHEN LOWER(source) = 'null' OR source = '' THEN null ELSE source END AS source\n        , CASE WHEN LOWER(marketing_vendor_name) = 'null' OR marketing_vendor_name = '' THEN null ELSE marketing_vendor_name END AS marketing_vendor_name\n        , CASE WHEN LOWER(publisher_domain) = 'null' OR publisher_domain = '' THEN null ELSE publisher_domain END AS publisher_domain\n        , CASE WHEN LOWER(country) = 'null' OR country = '' THEN null ELSE country END AS country\n        , CASE WHEN LOWER(impressions) = 'null' OR impressions = '' THEN null ELSE CAST(impressions AS INTEGER) END AS impressions\n        , CASE WHEN LOWER(spend) = 'null' OR spend = '' THEN null ELSE CAST(spend AS FLOAT4) END AS spend\n        , CASE WHEN LOWER(conversions) = 'null' OR conversions = '' THEN null ELSE CAST(conversions AS FLOAT4) END AS conversions\n        , CASE WHEN LOWER(clicks) = 'null' OR clicks = '' THEN null ELSE CAST(clicks AS INTEGER) END AS clicks\n        , REGEXP_SUBSTR ( landing_url, 'utm_medium=[^&$]*', 1, 1) AS utm_medium\n        , REGEXP_SUBSTR ( landing_url, 'utm_source=[^&$]*', 1, 1) AS utm_source\n        , REGEXP_SUBSTR ( landing_url, 'utm_campaign=[^&$]*', 1, 1) AS utm_campaign\n    FROM extract.mkt_staq_raw\n    WHERE 1=1\n      AND report_date IS NOT NULL\n),\ntransformed AS (\n  SELECT\n    report_date\n    , landing_url                      \n    , medium\n    , campaign\n    , source\n    , marketing_vendor_name\n    , publisher_domain\n    , country\n    , impressions\n    , spend\n    , conversions\n    , clicks\n    , CASE WHEN utm_medium IS NULL OR utm_medium ='' THEN medium ELSE REPLACE(utm_medium, 'utm_medium=', '') END AS utm_medium\n    , CASE WHEN utm_source IS NULL OR utm_source ='' THEN source ELSE REPLACE(utm_source, 'utm_source=', '') END AS utm_source\n    , CASE WHEN utm_campaign IS NULL OR utm_campaign ='' THEN campaign ELSE REPLACE(utm_campaign, 'utm_campaign=', '') END AS utm_campaign\n  FROM normalized\n)\nSELECT \n    report_date\n    , utm_medium\n    , utm_source\n    , utm_campaign\n    , marketing_vendor_name\n    , publisher_domain\n    , country\n    , impressions\n    , spend\n    , conversions\n    , clicks\n    , landing_url                      \n    , medium\n    , campaign\n    , source\nFROM transformed\nGROUP BY\n    report_date\n    , utm_medium\n    , utm_source\n    , utm_campaign\n    , marketing_vendor_name\n    , publisher_domain\n    , country\n    , impressions\n    , spend\n    , conversions\n    , clicks\n    , landing_url                      \n    , medium\n    , campaign\n    , source\n;"
            }
        ]
    },
    "dm-dmp-export": {
        "export.crmid_traits.sql": [],
        "export.dmt.dmp_export.sql": [],
        "transform.stg.dmp_customer_list.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "dmp_customer_list"
                    ],
                    "select": [
                        "evar23",
                        "stg.adobe_src_prod.mcvisid",
                        "mcvisid"
                    ],
                    "order_by": [
                        "stg.adobe_src_prod.mcvisid"
                    ],
                    "join": [
                        "stg.customers.obfuscated_id",
                        "stg.adobe_src_prod.evar23",
                        "stg.customer_attributes.customer_id",
                        "stg.customers.id",
                        "d.mcvisid",
                        "stg.adobe_src_prod.mcvisid"
                    ],
                    "where": [
                        "stg.customer_attributes.registered_in_shop_id"
                    ]
                },
                "tables": [
                    "stg.dmp_customer_list",
                    "stg.adobe_src_prod",
                    "stg.customers",
                    "stg.customer_attributes"
                ],
                "subqueries": {
                    "a": "select evar23, mcvisid from stg.adobe_src_prod group by 1, 2",
                    "d": "select mcvisid, count(distinct evar23) as crm_count from stg.adobe_src_prod a join stg.customers c on c.obfuscated_id = a.evar23 group by 1 having count(distinct evar23) > 1"
                },
                "skipped": false,
                "value": "INSERT INTO  stg.dmp_customer_list\n  select distinct getdate() as dw_load_date_time,\n          evar23 as obfuscated_id,\n          a.mcvisid,\n          row_number() over(partition by c.obfuscated_id order by a.mcvisid desc) as crm_id_rank,\n          d.crm_count\n          from (select evar23, mcvisid from stg.adobe_src_prod group by 1,2) a\n          join stg.customers c on c.obfuscated_id = a.evar23\n          join stg.customer_attributes ca on ca.customer_id = c.id\n          left join (select\n                      mcvisid,\n                      count(distinct evar23) as crm_count\n                      from stg.adobe_src_prod a\n                      join stg.customers c on c.obfuscated_id = a.evar23\n                      group by 1\n                      having count(distinct evar23) >1) d on d.mcvisid = a.mcvisid\n          where ca.registered_in_shop_id = 1\n          --and a.mcvisid  ='38122018598588843103311099625654120152'\n          --group by 1,2,4\n\n\n  ;"
            }
        ],
        "export.mcvisid_traits.sql": [],
        "transform.stg.dmp_invoice_traits.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "dmp_invoice_traits_delta"
                    ],
                    "select": [
                        "stg.customers.obfuscated_id"
                    ],
                    "join": [
                        "stg.customers.id",
                        "dmt.f_invoice.customer_id",
                        "dmt.d_customer_plan_360.customer_id"
                    ],
                    "where": [
                        "dmt.f_invoice.dw_load_date_time"
                    ]
                },
                "tables": [
                    "extract.dmp_invoice_traits_delta",
                    "stg.customers",
                    "dmt.f_invoice",
                    "dmt.d_customer_plan_360"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO extract.dmp_invoice_traits_delta\n\n\nselect c.obfuscated_id\n\nfrom stg.customers c\nleft join dmt.f_invoice i on c.id = i.customer_id\nleft join dmt.d_customer_plan_360 p on c.id = p.customer_id\n\nwhere  i.dw_load_date_time  >= '<start_date>'::timestamp  - interval '2 days'\n    or p.dw_load_date_time  >= '<start_date>'::timestamp  - interval '2 days'\ngroup by 1\n\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.dmp_invoice_traits.obfuscated_id",
                        "extract.dmp_invoice_traits_delta.obfuscated_id"
                    ]
                },
                "tables": [
                    "stg.dmp_invoice_traits"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.dmp_invoice_traits\nusing extract.dmp_invoice_traits_delta\nwhere stg.dmp_invoice_traits.obfuscated_id = extract.dmp_invoice_traits_delta.obfuscated_id\n\n\n\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "dmp_invoice_traits"
                    ],
                    "select": [
                        "t1.obfuscated_id"
                    ]
                },
                "tables": [
                    "stg.dmp_invoice_traits"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.dmp_invoice_traits\n select getdate() as dw_load_date_time\n        ,t1.obfuscated_id\n       --------------- PLAN SHIPMENT TRAITS------------------------\n       ,case when t2.recurring_box_count = 0 then '0'\n            when t2.recurring_box_count between 1 and 9 then '10'\n            when t2.recurring_box_count between 10 and 19 then '20'\n            when t2.recurring_box_count between 20 and 29 then '30'\n            when t2.recurring_box_count between 30 and 39 then '40'\n            when t2.recurring_box_count between 40 and 49 then '50'\n            when t2.recurring_box_count >=50 then '50+' else 'null' end  AS \"plan_shipment_count\",\n       --------------- LIFETIME REVENUE TRAIT------------------------\n       case when t1.total_lifetime_revenue = 0 then '0'\n            when t1.total_lifetime_revenue > 0 and t1.total_lifetime_revenue < 50 then '<50'\n            when t1.total_lifetime_revenue between 50 and 99.9999 then '100'\n            when t1.total_lifetime_revenue between 100 and 149.9999 then '150'\n            when t1.total_lifetime_revenue between 150 and 249.9999 then '250'\n            when t1.total_lifetime_revenue between 250 and 499.9999 then '500'\n            when t1.total_lifetime_revenue >= 500 then '500+' else 'null' end as TotalSpendLifetime,\n       --------------- PAST 12 MONTH SPEND------------------------\n       case when t1.last_12_months_revenue = 0 then '0'\n            when t1.last_12_months_revenue > 0 and t1.last_12_months_revenue < 50 then '<50'\n            when t1.last_12_months_revenue between 50 and 99.9999 then '100'\n            when t1.last_12_months_revenue between 100 and 149.9999 then '150'\n            when t1.last_12_months_revenue between 150 and 249.9999 then '250'\n            when t1.last_12_months_revenue between 250 and 499.9999 then '500'\n            when t1.last_12_months_revenue >= 500 then '500+' else 'null' end as Past12MSpend,\n       --------------- TOTAL SHIP NOW ORDERS------------------------\n       case when (t2.ship_now_count_bm2+t2.ship_now_count_bm1) = 0 then '0'\n            when (t2.ship_now_count_bm2+t2.ship_now_count_bm1) between 1 and 9 then '1'\n            when (t2.ship_now_count_bm2+t2.ship_now_count_bm1) between 10 and 19 then '2'\n            when (t2.ship_now_count_bm2+t2.ship_now_count_bm1) between 20 and 29 then '3'\n            when (t2.ship_now_count_bm2+t2.ship_now_count_bm1) between 30 and 39 then '4'\n            when (t2.ship_now_count_bm2+t2.ship_now_count_bm1) between 40 and 49 then '5'\n            when (t2.ship_now_count_bm2+t2.ship_now_count_bm1) >=50 then '5+' else 'null' end as total_shipnow_count,\n       --------------- TOTAL PAID ORDERS------------------------\n       case when t1.total_paid_orders = 0 then '0'\n            when t1.total_paid_orders between 1 and 9 then '10'\n            when t1.total_paid_orders between 10 and 19 then '20'\n            when t1.total_paid_orders between 20 and 29 then '30'\n            when t1.total_paid_orders between 30 and 39 then '40'\n            when t1.total_paid_orders between 40 and 49 then '50'\n            when t1.total_paid_orders >=50 then '>50' else 'null' end  AS \"total_paid_orders\",\n       -------------- POE TRAIT -------------------------------\n       case when fpoe.map_to_value is not null then fpoe.map_to_value\n            else 'null' end                                            as POE\n\n\n\nfrom  extract.dmp_invoice_traits_delta dd\n\njoin     (select c360.customer_id,c.obfuscated_id, fp.initial_plan_funnel_product_list,fp.map_to_value from\n            dmt.d_customer_360 c360\n         join dmt.d_customer c on c.customer_id = c360.customer_id\n         left join map.dmp_funnel_product_trait fp on fp.initial_plan_funnel_product_list = c360.initial_plan_funnel_product_list) fpoe on fpoe.obfuscated_id = dd.obfuscated_id\n---------------- ORDER TOTAL QUERIES (LIFETIME REVENUE ETC)------------------------oin    (SELECT\njoin    (SELECT\n            c.obfuscated_id,\n            c.customer_id,\n            sum(amount_true) as total_lifetime_revenue,\n            sum(case when datediff('month',i.order_created_at,getdate())<12 then amount_true else 0 end) as last_12_months_revenue,\n            count(case when (i.order_creation_source  NOT IN ('msa', 'fulfillment_monitor'))\n                       then i.invoice_id else 0 end) as total_paid_orders\n        FROM dmt.f_invoice AS i\n            JOIN dmt.d_customer_360  AS c360 ON c360.customer_id=i.customer_id\n            join dmt.d_customer c on c.customer_id = c360.customer_id\n            LEFT JOIN stg.test_customers  AS tc ON i.customer_id=tc.customer_id\n        WHERE (i.invoice_status = 'paid')\n        AND (i.shop_name = 'US')\n        AND (c.email NOT LIKE '%@dollarshaveclub.%' OR c.email IS NULL)\n        AND (tc.customer_id  IS NULL)\n        GROUP BY 1,2) t1 on t1.customer_id = fpoe.customer_id\n\n---------------- ORDER TYPE CLASSIFICATION SUBQUERY------------------------\nLEFT JOIN\n         (select customer_id,\n             sum(case when shipment_rank = 1\n                       and order_attribution_attribution_type = 'standalonecart'\n                       and customer_subscription_plan_id is not null\n                       then 1 else 0 end) as initial_box_count,\n             sum(case when shipment_rank != 1\n                       and order_attribution_attribution_type = 'standalonecart'\n                       and customer_subscription_plan_id is not null\n                       then 1 else 0 end) as ship_now_count_bm2,\n             sum(case when order_attribution_attribution_type = 'standalonecart'\n                      and customer_subscription_plan_id is null\n                      then 1 else 0 end) as nsrq_count,\n             sum(case when order_attribution_attribution_type = 'scheduledcart'\n                 then 1 else 0 end) as recurring_box_count,\n             sum(case when order_creation_reason = 10 then 1 else 0 end) as ship_now_count_bm1,\n             sum(case when order_attribution_attribution_type = 'customersubscription'\n                 then 1 else 0 end ) as bm1_recurring_box\n\n\n             from(select\n                    i.customer_id\n                    , i.invoice_id\n                    , i.invoice_created_at\n                    , i.shipment_shipped_at\n                    , i.shipment_type\n                    , row_number() over(partition by i.customer_id order by i.shipment_shipped_at) as shipment_rank\n                    , i.order_attribution_attribution_type\n                    , i.order_creation_reason_name\n                    , i.order_creation_reason\n                    , i.amount_true\n                    , i.shipment_id\n                    , i.invoice_status\n                    , customer_subscription_plan_id\n                    , start_date_time\n                    , end_date_time\n                  from dmt.f_invoice i\n                  LEFT JOIN dmt.d_customer_plan_360 p ON i.customer_id = p.customer_id\n                                                      and i.invoice_created_at\n                                                        between dateadd(min, -2, p.start_date_time)\n                                                        and ISNULL(dateadd(min, 2, p.end_date_time), getdate())\n                  where i.invoice_status = 'paid')\n\n             group by 1 ) t2 on t1.customer_id = t2.customer_id\n\n\n;"
            }
        ],
        "transform.stg.dmp_scheduled_cart_traits.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "dmp_scheduled_cart_traits_delta"
                    ],
                    "select": [
                        "stg.customers.obfuscated_id"
                    ],
                    "join": [
                        "stg.customers.id",
                        "stg.ps_scheduled_carts.customer_id"
                    ],
                    "where": [
                        "stg.ps_scheduled_carts.dsc_processed_at"
                    ]
                },
                "tables": [
                    "extract.dmp_scheduled_cart_traits_delta",
                    "stg.customers",
                    "stg.ps_scheduled_carts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO extract.dmp_scheduled_cart_traits_delta\n\n\nselect c.obfuscated_id\n\nfrom stg.customers c\nleft join stg.ps_scheduled_carts p  on c.id = p.customer_id\n\nwhere  p.dsc_processed_at  >= '<start_date>' ::timestamp  - interval '2 days'\ngroup by 1\n\n\n\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.dmp_scheduled_cart_traits.obfuscated_id",
                        "extract.dmp_scheduled_cart_traits_delta.obfuscated_id"
                    ]
                },
                "tables": [
                    "stg.dmp_scheduled_cart_traits"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.dmp_scheduled_cart_traits\nusing extract.dmp_scheduled_cart_traits_delta\nwhere stg.dmp_scheduled_cart_traits.obfuscated_id = extract.dmp_scheduled_cart_traits_delta.obfuscated_id\n\n\n\n;"
            },
            {
                "skipped": true,
                "value": "INSERT INTO stg.dmp_scheduled_cart_traits\n  Select getdate() as dw_load_date_time,\n       c.obfuscated_id,\n       LISTAGG(DISTINCT case when recurring_qty > 0   then lower(product_category) end, '+') within group (order by product_category asc) as next_recurring_cats,\n       LISTAGG(DISTINCT case when onetime_qty > 0   then lower(product_category) end, '+') within group (order by product_category asc) as next_one_time_cats,\n       sum(t1.total_revenue) as next_box_value\n\n\nfrom\n    dmt.d_customer c\n    join extract.dmp_scheduled_cart_traits_delta dd on c.obfuscated_id = dd.obfuscated_id\n    -- BM2 upcoming /scheduled  cart revenue (at the scheduled_cart_id level)\n    join (select\n        s.plan_bills_at as next_bill_at\n      , s.customer_id\n      , s.scheduled_cart_id as schedule_id\n      , s.plan_id as customer_subscription_plan_id\n      , 'plan' as bm_type\n      , s.registered_in_shop_name\n      , s.currency\n      , s.plan_frequency\n      , s.product_sku\n      , s.product_category\n      , sum(s.cart_quantity) as item_quantity\n      , nvl(SUM(s.total_revenue),0)  as total_revenue\n      , nvl(SUM(s.total_qty),0)  as total_qty\n      , nvl(SUM(s.recurring_qty),0) as recurring_qty\n      , nvl(SUM(s.onetime_qty),0) as onetime_qty\n    from (\n          select\n              sc.plan_bills_at\n            , sci.customer_id\n            , sci.scheduled_cart_id\n            , sci.plan_id\n            , dc.registered_in_shop_name\n            , cur.currency\n            , sc.plan_frequency\n            --, sci.product_sku\n            , p.product_category\n            , sci.quantity as cart_quantity\n            , sci.product_sku\n            -- , pi.quantity as plan_quantity\n            , nvl((sci.quantity::NUMERIC(37,15) * sci.unit_price::NUMERIC(37,15))::NUMERIC(37,15),0) as total_revenue\n            , nvl(sci.quantity,0) as total_qty\n\n            -- cart qty less than plan is APP BUG, defaulting to cart qty in this case\n            -- cart and plan qty match - all revenue is recurring\n            -- cart qty more then plan - take recurring qty from plan\n            , case when sci.quantity < nvl(pi.quantity,0) -- cart qty less than plan is APP BUG, defaulting to cart qty in this case\n                then nvl(sci.quantity,0)\n                when nvl(pi.quantity,0) = sci.quantity or sci.quantity > nvl(pi.quantity,0)\n                  then nvl(pi.quantity,0)\n                  else 0\n\n              end as recurring_qty\n\n            -- cart qty more then plan - take one qty from (cart qty - plan qty)\n            , case when pi.quantity is null or sci.quantity > nvl(pi.quantity,0)\n                then (sci.quantity-nvl(pi.quantity,0))\n                else 0\n              end as onetime_qty\n\n          from stg.ps_scheduled_cart_items sci\n            -- take the most recent active (not closed) cart - workaround for multiple opened carts, which is APP BUG\n            inner join (\n                select\n                      sc0.customer_id\n                    , sc0.plan_id\n                    , sc0.scheduled_cart_id\n                    , sc0.plan_bills_at\n                    , sc0.plan_frequency\n                from (\n                   select\n                       sc1.customer_id\n                     , sc1.plan_id\n                     , sc1.id as scheduled_cart_id\n                     , p1.plan_bills_at\n                     , p1.plan_frequency as plan_frequency\n                     , rank() over(partition by sc1.plan_id order by sc1.scheduled_cart_created_at desc) rnk  -- latest cart rnk = 1\n                  from stg.ps_scheduled_carts sc1\n                     inner join stg.ps_plans p1\n                        on sc1.customer_id = p1.customer_id and sc1.plan_id = p1.id\n                  where 1=1\n                    and sc1.scheduled_cart_closed_at is null -- cart is not closed\n                    and p1.plan_state in ('active', 'rebilling')\n                      -- and sc1.customer_id = 6812405 -- customer with cancelled plan - excluding from the main output\n                ) sc0\n                where 1=1\n                  and sc0.rnk =1\n            ) sc\n              on sci.scheduled_cart_id = sc.scheduled_cart_id\n            inner join dmt.d_product p\n              on sci.product_id = p.product_id\n            inner join map.shop_currency cur\n              on sci.shop_id = cur.shop_id\n            -- only valid customers\n            inner join dmt.rpt_member dc\n              on sci.customer_id = dc.customer_id\n            left outer join stg.ps_plan_items pi\n              on pi.customer_id = sci.customer_id\n                and pi.plan_id = sci.plan_id\n                and pi.product_sku = sci.product_sku\n                and pi.removed is null  --item is not removed\n                and pi.snooze_until is null -- item is not snoozed for the upcoming box\n                and pi.plan_state = 'active' -- only active plans considered for scheduled revenue\n          where 1 = 1\n            and sci.removed is null  --item is not removed from scheduled cart\n            ) s\n\n           group by\n        s.plan_bills_at\n      , s.customer_id\n      , s.scheduled_cart_id\n      , s.plan_id\n      , s.registered_in_shop_name\n      , s.currency\n      , s.plan_frequency\n      , s.product_sku\n      , s.product_category) t1 on t1.customer_id = c.customer_id\n\ngroup by 1,2\n\n;"
            }
        ],
        "transform.stg.dmp_plan_traits.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "dmp_plan_traits_delta"
                    ],
                    "select": [
                        "stg.customers.obfuscated_id"
                    ],
                    "join": [
                        "stg.customers.id",
                        "dmt.d_customer_plan_360.customer_id"
                    ],
                    "where": [
                        "dmt.d_customer_plan_360.dw_load_date_time"
                    ]
                },
                "tables": [
                    "extract.dmp_plan_traits_delta",
                    "stg.customers",
                    "dmt.d_customer_plan_360"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO extract.dmp_plan_traits_delta\n\n\nselect c.obfuscated_id\n\nfrom stg.customers c\nleft join dmt.d_customer_plan_360 p  on c.id = p.customer_id\n\nwhere  p.dw_load_date_time  >= '<start_date>' ::timestamp  - interval '2 days'\ngroup by 1\n\n\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.dmp_plan_traits.obfuscated_id",
                        "extract.dmp_plan_traits_delta.obfuscated_id"
                    ]
                },
                "tables": [
                    "stg.dmp_plan_traits"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.dmp_plan_traits\nusing extract.dmp_plan_traits_delta\nwhere stg.dmp_plan_traits.obfuscated_id = extract.dmp_plan_traits_delta.obfuscated_id\n\n\n\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "dmp_plan_traits"
                    ],
                    "select": [
                        "c.obfuscated_id"
                    ]
                },
                "tables": [
                    "stg.dmp_plan_traits"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.dmp_plan_traits\n  select\n    getdate() as dw_load_date_time\n    ,c.obfuscated_id\n    ------------------- DSC TENURE TRAIT------------------------\n    ,CASE WHEN datediff('month',customer_tenure_start,customer_tenure_end) <3 then '<3'\n          WHEN datediff('month',customer_tenure_start,customer_tenure_end) between 3 and 6 then '3+'\n          WHEN datediff('month',customer_tenure_start,customer_tenure_end) between 7 and 9 then '6+'\n          WHEN datediff('month',customer_tenure_start,customer_tenure_end) between 9 and 12 then '9+'\n          WHEN datediff('month',customer_tenure_start,customer_tenure_end) between 13 and 24 then '12+'\n          WHEN datediff('month',customer_tenure_start,customer_tenure_end) between 25 and 36 then '24+'\n          WHEN datediff('month',customer_tenure_start,customer_tenure_end) between 37 and 48 then '36+'\n          WHEN datediff('month',customer_tenure_start,customer_tenure_end) between 49 and 60 then '48+'\n          WHEN datediff('month',customer_tenure_start,customer_tenure_end) > 60 then '60+'\n          else 'null' end as DSCTenure\n    ------------------- BM2 PLAN TENURE TRAIT------------------------\n    ,CASE WHEN datediff('month',plan_tenure_start,plan_tenure_end) <3 then '<3'\n          WHEN datediff('month',plan_tenure_start,plan_tenure_end) between 3 and 6 then '3+'\n          WHEN datediff('month',plan_tenure_start,plan_tenure_end) between 7 and 9 then '6+'\n          WHEN datediff('month',plan_tenure_start,plan_tenure_end) between 9 and 12 then '9+'\n          WHEN datediff('month',plan_tenure_start,plan_tenure_end) between 13 and 24 then '12+'\n          WHEN datediff('month',plan_tenure_start,plan_tenure_end) >24 then '24+'\n          else 'null' end as PlanTenure\n    ------------------- BM1 SUBSCRIPTION TENURE TRAIT------------------------\n    ,CASE WHEN datediff('month',sub_tenure_start,sub_tenure_end) <3 then '<3'\n          WHEN datediff('month',sub_tenure_start,sub_tenure_end) between 3 and 6 then '3+'\n          WHEN datediff('month',sub_tenure_start,sub_tenure_end) between 7 and 9 then '6+'\n          WHEN datediff('month',sub_tenure_start,sub_tenure_end) between 9 and 12 then '9+'\n          WHEN datediff('month',sub_tenure_start,sub_tenure_end) between 13 and 24 then '12+'\n          WHEN datediff('month',sub_tenure_start,sub_tenure_end) >24 then '24+'\n          else 'null' end as CustomerSubscriptionTenure\n    ------------------- CURRENTLY CHURNED TRAIT------------------------\n   ,case when current_active = 1 then 'n'\n          when current_active = 0 then 'y'\n          else 'null' end as churned\n    ,case when full_service_start = 1 then 'fs'\n         when migrated_to_fs = 1 then 'c'\n        else 'null' end as member_start_method\n   , case when t1.bm_type = 'sub' then 'classic'\n          when t1.bm_type = 'plan' then 'fullservice'\n          else 'null' end as business_model\n   , nvl(t1.sub_total,0) as first_box_value\n\n\n\nfrom dmt.d_customer c\njoin extract.dmp_plan_traits_delta dd on c.obfuscated_id = dd.obfuscated_id\n\njoin (\nselect customer_id\n       ,min(start_date_time::date) as customer_tenure_start\n       ,max(nvl(end_date_time::date,getdate()::date)) as customer_tenure_end\n       ,min(case when bm_type = 'plan' then start_date_time::date else null end) as plan_tenure_start\n       ,max(case when bm_type = 'plan' then nvl(end_date_time::date,getdate()::date) else null end) as plan_tenure_end\n       ,min(case when bm_type = 'sub' then start_date_time::date else null end) as sub_tenure_start\n       ,max(case when bm_type = 'sub' then nvl(end_date_time::date,getdate()::date) else null end) as sub_tenure_end\n       ,max(case when lower(status_name) = 'active' then 1 else 0 end) as current_active\n       ,max(case when bm_type = 'plan' and sub_plan_rank = 1 then 1 else 0 end) as full_service_start\n       ,max(case when bm_type = 'plan' and plan_conversion_source is not null then 1 else 0 end) as migrated_to_fs\n\nfrom dmt.d_customer_plan_360\n\ngroup by 1) p on p.customer_id = c.customer_id\n\nleft join (select customer_id\n       ,bm_type\n       ,p.customer_subscription_plan_id\n       ,p.sub_total\n       ,row_number() over(partition by customer_id order by sub_plan_rank desc) as rnk\n\nfrom dmt.d_customer_plan_360 p) t1 on t1.customer_id = c.customer_id and t1.rnk = 1\n\n\n;"
            }
        ],
        "transform.stg.dmp_customer_traits.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "dmp_customer_traits_delta"
                    ],
                    "select": [
                        "stg.customers.obfuscated_id"
                    ],
                    "join": [
                        "stg.customers.id",
                        "stg.customer_acxiom_output.customer_id",
                        "stg.adobe_visit_customers.customer_id"
                    ],
                    "where": [
                        "stg.customers.updated_at"
                    ]
                },
                "tables": [
                    "extract.dmp_customer_traits_delta",
                    "stg.customers",
                    "stg.customer_acxiom_output",
                    "stg.adobe_visit_customers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO extract.dmp_customer_traits_delta\n\nselect c.obfuscated_id\n\nfrom stg.customers c\nleft join stg.customer_acxiom_output a on c.id = a.customer_id\nleft join stg.adobe_visit_customers vc on c.id = vc.customer_id\n\nwhere c.updated_at >= '<start_date>' ::timestamp - interval '2 days'\n    or a.dw_load_date_time  >= '<start_date>' ::timestamp - interval '2 days'\n    or vc.dw_load_date_time  >= '<start_date>' ::timestamp - interval '2 days'\ngroup by 1\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.dmp_customer_traits.obfuscated_id",
                        "extract.dmp_customer_traits_delta.obfuscated_id"
                    ]
                },
                "tables": [
                    "stg.dmp_customer_traits"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.dmp_customer_traits\nusing extract.dmp_customer_traits_delta\nwhere stg.dmp_customer_traits.obfuscated_id = extract.dmp_customer_traits_delta.obfuscated_id\n\n\n\n\n\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "dmp_customer_traits"
                    ]
                },
                "tables": [
                    "stg.dmp_customer_traits"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.dmp_customer_traits\n\nselect\n        ---------------Customer Traits----------------------\n        getdate() as dw_load_date_time\n        ,c.obfuscated_id\n        ,NVL(c.state, acxiom.state, 'null') as state\n        ,acxiom.gender\n        ,ethnicity\n        ,Education_InputIndividual as \"EducationInputIndividual\"\n        ,Occupation_InputIndividual as \"OccupationInputIndividual\"\n        ,NumberofChildren as \"NumberofChildren100Children\"\n        ,case when Age >=18 and Age <=25 then 1 else 0 end as AgeGroup18_25\n        ,case when Age >=26 and Age <=30 then 1 else 0 end as AgeGroup26_30\n        ,case when Age >=31 and Age <=35 then 1 else 0 end as AgeGroup31_35\n        ,case when Age >=36 and Age <=40 then 1 else 0 end as AgeGroup36_40\n        ,case when Age >=41 and Age <=45 then 1 else 0 end as AgeGroup41_45\n        ,case when Age >=46 and Age <=50 then 1 else 0 end as AgeGroup46_50\n        ,case when Age >=51 then 1 else 0 end as AgeGroupOver50\n        ,Income\n        ,Beauty_Cosmetics\n        ,Spectator_Sports_TV_Sports\n        ------------Registration Timeframe Traits------------------------------\n        ,case WHEN DATEDIFF(day, c.created_at, GETDATE()) <= 90 THEN '90d'\n            WHEN DATEDIFF(day, c.created_at, GETDATE()) between 91 AND 180 THEN '180d'\n            WHEN DATEDIFF(day, c.created_at, GETDATE()) between 181 AND 365 THEN '365d'\n            WHEN DATEDIFF(day, c.created_at, GETDATE()) > 365 THEN '365d+'\n            ELSE 'null' END AS \"RegisteredWithin\"\n        ---------- Registration Shell Account Trait----------------------------\n        ,CASE\n            WHEN DATEDIFF(hour, c.created_at, GETDATE()) <= 24 and o.customer_id is null THEN '24h'\n            WHEN DATEDIFF(hour, c.created_at, GETDATE()) between 25 AND 48 and o.customer_id is null THEN '48h'\n            WHEN DATEDIFF(hour, c.created_at, GETDATE()) between 49 AND 72 and o.customer_id is null THEN '72h'\n            WHEN DATEDIFF(hour, c.created_at, GETDATE()) > 72 THEN\n                CASE\n                    WHEN DATEDIFF(day, c.created_at, GETDATE()) <= 7 and o.customer_id is null THEN '1w'\n                    WHEN DATEDIFF(day, c.created_at, GETDATE()) between 8 AND 30 and o.customer_id is null THEN '8d'\n                    WHEN DATEDIFF(day, c.created_at, GETDATE()) between 31 AND 90 and o.customer_id is null THEN '3M'\n                    WHEN DATEDIFF(day, c.created_at, GETDATE()) between 91 AND 180 and o.customer_id is null THEN '180d'\n                    WHEN DATEDIFF(day, c.created_at, GETDATE()) between 181 AND 365 and o.customer_id is null THEN '365d'\n                    when DATEDIFF(day, c.created_at, GETDATE()) > 365 and o.customer_id is null THEN '365d+'\n                    ELSE 'null'\n                END\n            ELSE\n                'null'\n        END AS \"ShellAccountCreationTimeframe\"\n        ------------ Behavioral Traits--------------------------\n        ,CASE WHEN c.sign_in_count = 0 then '0' else 'null' end as sign_in_count\n        ,case when v.unique_visits_90_days < 10 then '1'\n              when v.unique_visits_90_days between 11 and 20 then '2'\n              when v.unique_visits_90_days > 20 then '2+'\n              else 'null' end as \"unique_visits\"\n        -----------------------NSRQ CUSTOMER ONLY FLAG-------------------------\n        ,CASE WHEN c360.bm1_flag = 0\n                AND c360.bm2_flag = 0\n                AND o.count_of_orders > 0 then 'NSRQ' else 'null' end as nsrq_only_customer\n        , opt.future_value\n        , lower(opt.value_segment) as optimove_segment\n        , case when ca.eligible_for_pq is null then 'null'\n               when ca.eligible_for_pq = 0 then '0'\n               else '1' end as eligible_for_pq\n        --, opt.lifecycle_stageeligible_for_pq\n\n\n\n\n    FROM dmt.d_customer c\n    join extract.dmp_customer_traits_delta dd on dd.obfuscated_id = c.obfuscated_id\n    JOIN dmt.d_customer_360 c360 on c360.customer_id = c.customer_id\n    left join stg.customer_shop_attributes ca on ca.customer_id = c.customer_id and ca.shop_id = c.registered_in_shop_id\n    LEFT JOIN stg.test_customers  AS tc ON c.customer_id=tc.customer_id\n\n    --------------------- AXCIOM DATA SUBQUERY--------------------------------\n    left JOIN (select\n                    customer_id\n                    ,state\n                    ,case when ibe8688_8688 = 'M' then 'Male' when ibe8688_8688 = 'F' then 'Female' else 'Undisclosed' end as gender\n                    ,case when ibe3101_3101 = '' or ibe3101_3101 is null then 'null' else ibe3101_3101 end as ethnicity\n                    ,case when ibe9509_9509 = '' or ibe9509_9509 is null then 'null' else ibe9509_9509 end as Education_InputIndividual\n                    ,case when ibe8637_8637 = '' or ibe8637_8637 is null then 'null' else ibe8637_8637 end as Occupation_InputIndividual\n                    ,case when ibe7602_children_number_in_household_premier_complete_children > 0 then '1' else '0' end as NumberofChildren\n                    ,case when ibe8641_8641 = '' or ibe8641_8641 is null then 'null' else ibe8641_8641 end as Income\n                    ,case when ibe7849_7849 = '' or ibe7849_7849 is null then 'null' else ibe7849_7849 end as Beauty_Cosmetics\n                    ,case when ibe8257_8257 = '' or ibe8257_8257 is null then 'null' else ibe8257_8257 end as Spectator_Sports_TV_Sports\n                    ,date_diff('year',to_date((case when length(ibe8623_ibe_premier_dateofbirthccyymm00_year) > 0 then ibe8623_ibe_premier_dateofbirthccyymm00_year||'-'||ibe8623_ibe_premier_dateofbirthccyymm00_month||'-'||'01' else '2019-01-01' end::varchar),'yyyy-mm-dd'),getdate()) as Age\n                from stg.customer_acxiom_output\n              ) as acxiom ON acxiom.customer_id = c.customer_id\n     --------------------- count of orders by customer id --------------------------------\n    LEFT JOIN (select customer_id,\n                      count(o.id) as count_of_orders\n               from stg.customers c\n               left join stg.orders o on o.customer_id = c.id\n               group by 1) o on o.customer_id = c.customer_id\n    --------------------- unique visit count last 90 days by customer id --------------------------------\n    left join (select obfuscated_customer_id, count(distinct visit_id) as unique_visits_90_days\n               from stg.adobe_visit_customers\n               where customer_id is not null\n               and dateadd(s,visit_start_time_gmt,'1970-01-01') >= dateadd(day, -90, current_date)\n               group by 1) v on v.obfuscated_customer_id = c.obfuscated_id\n    left join (select customer_id, lifecycle_stage, value_segment,future_value from\n               stg.optimove_customer_output t1\n                join stg.optimove_microsegments t2 on t1.final_microsegment_id = t2.microsegment_id) opt on c.customer_id = opt.customer_id\n\n    WHERE (c.email NOT LIKE '%@dollarshaveclub.%' OR c.email IS NULL)\n    AND (tc.customer_id  IS NULL)\n    AND c.registered_in_shop_id = 1\n    AND c.obfuscated_id IS NOT NULL\n\n\n;"
            }
        ],
        "transform.stg.dmp_invoice_product_traits.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "dmp_invoice_product_traits_delta"
                    ],
                    "select": [
                        "stg.customers.obfuscated_id"
                    ],
                    "join": [
                        "stg.customers.id",
                        "dmt.f_invoice_product.customer_id"
                    ],
                    "where": [
                        "dmt.f_invoice_product.dw_load_date_time"
                    ]
                },
                "tables": [
                    "extract.dmp_invoice_product_traits_delta",
                    "stg.customers",
                    "dmt.f_invoice_product"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO extract.dmp_invoice_product_traits_delta\n\nselect c.obfuscated_id\n\nfrom stg.customers c\nleft join dmt.f_invoice_product i on c.id = i.customer_id\n\nwhere  i.dw_load_date_time  >= '<start_date>' ::timestamp - interval '2 days'\ngroup by 1\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.dmp_invoice_product_traits.obfuscated_id",
                        "extract.dmp_invoice_product_traits_delta.obfuscated_id"
                    ]
                },
                "tables": [
                    "stg.dmp_invoice_product_traits"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.dmp_invoice_product_traits\nusing extract.dmp_invoice_product_traits_delta\nwhere stg.dmp_invoice_product_traits.obfuscated_id = extract.dmp_invoice_product_traits_delta.obfuscated_id\n\n\n\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "dmp_invoice_product_traits"
                    ],
                    "select": [
                        "c.obfuscated_id",
                        "total_nrp_purchases"
                    ]
                },
                "tables": [
                    "stg.dmp_invoice_product_traits"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.dmp_invoice_product_traits\nselect getdate() as dw_load_date_time\n       ,c.obfuscated_id\n       ,case when total_nrp_purchases = 0 then '0'\n            when total_nrp_purchases between 1 and 5 then '1'\n            when total_nrp_purchases between 6 and 10 then '2'\n            when total_nrp_purchases between 11 and 20 then '3'\n            when total_nrp_purchases between 21 and 30 then '4'\n            when total_nrp_purchases between 31 and 40 then '5'\n            when total_nrp_purchases >40 then '6+' else 'null' end as \"NRPPurchaseCount\"\n       ,case when unique_nrp_purchases_100_days = 0 then '0'\n            when unique_nrp_purchases_100_days = 1 then '1'\n            when unique_nrp_purchases_100_days = 2 then '2'\n            when unique_nrp_purchases_100_days between 3 and 4 then '3'\n            when unique_nrp_purchases_100_days between 5 and 7 then '4'\n            when unique_nrp_purchases_100_days between 8 and 10 then '5'\n            when unique_nrp_purchases_100_days >10 then '6' else 'null' end as \"total_Unique_NRP_count_last100days\"\n       ,case when unique_prouct_category = 0 then '0'\n            when unique_prouct_category = 1 then '1'\n            when unique_prouct_category = 2 then '2'\n            when unique_prouct_category = 3 then '3'\n            when unique_prouct_category = 4 then '4'\n            when unique_prouct_category = 5 then '5'\n            when unique_prouct_category = 6 then '6'\n            when unique_prouct_category = 7 then '7'\n            when unique_prouct_category >= 8 then '8+' else 'null' end as \"DistinctProductCategoriesPurchased\"\n--       ,case when blueprint_purchase = 1 then 'y'\n--             when blueprint_purchase = 0 then 'n' else 'null' end as blueprint\n       ,case when categorytotal is not null then categorytotal else 'null' end as haspurchased\n       ,case when category2 is not null then category2 else 'null' end as haspurchased2\n--       ,CASE t2.categorytotal WHEN 'Shave+Shower+Oral' THEN 'SCS+OCS+ShCS'\n--            WHEN 'Shower+Oral' THEN 'Shcs+OCS'\n--            WHEN 'Shave+Shower' THEN 'SCS+ShCS'\n--            WHEN 'Shave+Oral' THEN 'SCS+OCS'\n--            ELSE 'null'\n--         END AS PurchaseCategories\n\n           ,nvl(t3.HasPurchasedSKU,'null') as HasPurchasedSKU\n       ,nvl(t3.\"HasPurchased2SKU\", 'null') as \"HasPurchased2SKU\"\n\n\n\n\nFROM dmt.d_customer c\nJOIN  extract.dmp_invoice_product_traits_delta dd on dd.obfuscated_id = c.obfuscated_id\n\njoin\n(select ip.customer_id\n       ,max(case when p.brand_id = 14 then 1 else 0 end) as blueprint_purchase\n       ,count(distinct case when  p.class_type = 'Nrp'\n                                and i.created_at >= dateadd(d,-100, getdate()::date)\n                            then p.product_id\n                            else null end) as unique_nrp_purchases_100_days\n       ,sum(case when p.class_type = 'Nrp'\n                 then quantity\n                 else 0 end) as total_nrp_purchases\n       ,count(distinct p.product_category) as unique_prouct_category\n\nfrom stg.erp_invoice_items ip\njoin stg.erp_invoices i on i.id = ip.invoice_id\njoin dmt.d_product p on p.product_id = ip.product_id\nwhere p.product_category not in ('Other', 'Unknown', 'Bundle','Gift')\nand ip.price > 0\ngroup by 1\n) t1 on t1.customer_id = c.customer_id\n\nleft join\n-------- NRP CATEGORY ADOPTION LIST-----------\n(select customer_id\n       ,LISTAGG(DISTINCT case when count_of_purchases > 1 then product_category end, '+') within group (order by product_category asc) as category2\n       ,LISTAGG(DISTINCT case when count_of_purchases > 0 then product_category end, '+') within group (order by product_category asc) as categorytotal\nfrom (\n        select ip.customer_id,\n        p.product_category,\n        sum(case when ip.price > 0 then quantity else 0 end) as count_of_purchases\n\n\n        from stg.erp_invoice_items ip\n        join dmt.d_product p on p.product_id = ip.product_id\n        where p.product_category not in ('Other', 'Unknown', 'Bundle','Gift')\n        group by 1,2)\ngroup by 1\n) t2 on t2.customer_id = t1.customer_id\n\nleft join (select  customer_id\n        ,LISTAGG(CASE WHEN count_of_products_purchased_excluding_bundle_child >0\n                        THEN sku ELSE NULL END, '+') within group (order by sku) as HasPurchasedSKU\n        ,LISTAGG(CASE WHEN count_of_products_purchased_excluding_bundle_child >=2\n                        THEN sku ELSE NULL END, '+') within group (order by sku) as \"HasPurchased2SKU\"\n\nfrom(\nselect ip.customer_id,\np.sku,\nsum(case when ip.price > 0 then quantity else 0 end) as count_of_products_purchased_excluding_bundle_child\n--sum(quantity) as count_of_products_purchased_including_bundle_child\n\n\nfrom stg.erp_invoice_items ip\njoin dmt.d_product p on p.product_id = ip.product_id\nwhere p.product_category not in ('Other', 'Unknown', 'Bundle','Gift')\ngroup by 1,2)\ngroup by 1) t3 on t3.customer_id = t1.customer_id\n\n;"
            }
        ]
    },
    "dm-dpr": {
        "load.public.dm_dpr_subs_spend.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "public.dm_dpr_subs_spend.date",
                        "public.stg_dm_dpr_subs_spend.date",
                        "public.dm_dpr_subs_spend.medium_code",
                        "public.stg_dm_dpr_subs_spend.medium_code",
                        "public.dm_dpr_subs_spend.source_code",
                        "public.stg_dm_dpr_subs_spend.source_code",
                        "public.dm_dpr_subs_spend.shop_name"
                    ]
                },
                "tables": [
                    "public.dm_dpr_subs_spend",
                    "public.stg_dm_dpr_subs_spend.shop_name",
                    "public.stg_dm_dpr_subs_spend.date"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from public.dm_dpr_subs_spend\nusing public.stg_dm_dpr_subs_spend\nwhere 1=1\n      and public.dm_dpr_subs_spend.date = public.stg_dm_dpr_subs_spend.date\n      and public.dm_dpr_subs_spend.medium_code = public.stg_dm_dpr_subs_spend.medium_code\n      and public.dm_dpr_subs_spend.source_code = public.stg_dm_dpr_subs_spend.source_code\n      and public.dm_dpr_subs_spend.shop_name = UPPER(TRIM(both ' ' from public.stg_dm_dpr_subs_spend.shop_name))\n      and public.stg_dm_dpr_subs_spend.date is not null\n;"
            },
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- select * from public.dm_dpr_subs_spend;\n-- select * from public.stg_dm_dpr_subs_spend;\n\ninsert into public.dm_dpr_subs_spend\nselect\n\t  s.date\n\t, s.medium_code\n\t, s.source_code\n\t, s.razor_subs\n\t, s.spend_usd\n\t-- , shop_id\n  , case\n      when UPPER(TRIM(both ' ' from s.shop_name)) = 'US' then 1\n      when UPPER(TRIM(both ' ' from s.shop_name)) = 'AU' then 2\n      when UPPER(TRIM(both ' ' from s.shop_name)) = 'OTHER' then 3\n      when UPPER(TRIM(both ' ' from s.shop_name)) = 'CA' then 4\n      when UPPER(TRIM(both ' ' from s.shop_name)) = 'UK' then 5\n    end as shop_id\n\t, UPPER(TRIM(both ' ' from shop_name)) as shop_name\n\t, getdate() as dw_load_date_time\nfrom public.stg_dm_dpr_subs_spend s\nwhere 1=1\n  and s.date is not null\n;"
            }
        ]
    },
    "dm-ga360-export": {
        "export.dmt.d_customer_360.sql": [],
        "export.stg.ps_change_snooze_events.sql": [],
        "export.dmt.d_customer_plan_360.sql": [],
        "export.stg.ps_change_plan_attribute_events.sql": [],
        "export.dmt.f_invoice_product.sql": []
    },
    "dm-transform": {
        "load.map.invoice_status.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "invoice_status"
                    ],
                    "select": [
                        "*"
                    ]
                },
                "tables": [
                    "map.invoice_status"
                ],
                "subqueries": {
                    "t": "select 0 as invoice_status_id, 'Cancelled' as invoice_status_name, getdate () as dw_loaddatetime union all select 1 as invoice_status_id, 'Paid' as invoice_status_name, getdate () as dw_loaddatetime union all select 2 as invoice_status_id, 'Unpaid' as invoice_status_name, getdate () as dw_loaddatetime union all select 3 as invoice_status_id, 'Past Due' as invoice_status_name, getdate () as dw_loaddatetime union all select 4 as invoice_status_id, 'Rolled Back' as invoice_status_name, getdate () as dw_loaddatetime"
                },
                "skipped": false,
                "value": "INSERT INTO map.invoice_status\nselect * from (\n  select 0 as invoice_status_id, 'Cancelled' as  invoice_status_name, getdate() as dw_loaddatetime union all\n  select 1 as invoice_status_id, 'Paid' as  invoice_status_name, getdate() as dw_loaddatetime union all\n  select 2 as invoice_status_id, 'Unpaid' as  invoice_status_name, getdate() as dw_loaddatetime union all\n  select 3 as invoice_status_id, 'Past Due' as  invoice_status_name, getdate() as dw_loaddatetime union all\n  select 4 as invoice_status_id, 'Rolled Back' as  invoice_status_name, getdate() as dw_loaddatetime\n) t\norder by invoice_status_id\n;"
            }
        ],
        "load.stg.customer_subscriptions.sql": [
            {
                "skipped": true,
                "value": "delete from dm.stg.customer_subscriptions\nusing dm.extract.customer_subscriptions\nwhere dm.stg.customer_subscriptions.id = dm.extract.customer_subscriptions.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_subscriptions"
                    ],
                    "select": [
                        "id",
                        "subscription_id",
                        "start_date_time",
                        "end_date_time",
                        "shipping_address_id",
                        "product_quantity",
                        "created_at",
                        "updated_at",
                        "customer_id",
                        "frequency",
                        "zuora_latest_subscription_id",
                        "status",
                        "product_rate_plan_id",
                        "zuora_original_subscription_id",
                        "zuora_subscription_status",
                        "current_cycle_start_date_time",
                        "current_cycle_end_date_time",
                        "last_add_amendment_date_time",
                        "iteration_count",
                        "current_iteration_count",
                        "obfuscated_id",
                        "last_bill_date_time",
                        "next_bill_date_time",
                        "bill_cycle_reference_date_time",
                        "scheduled_for_cancellation_at_date_time",
                        "shop_id"
                    ]
                },
                "tables": [
                    "dm.stg.customer_subscriptions",
                    "dm.extract.customer_subscriptions"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into dm.stg.customer_subscriptions\nselect\n    id \n\t,subscription_id \n\t,start_date_time  \n\t,end_date_time  \n\t,shipping_address_id \n\t,product_quantity \n\t,created_at   \n\t,updated_at \n\t,customer_id \n\t,frequency \n\t,zuora_latest_subscription_id \n\t,status \n\t,product_rate_plan_id  \n\t,zuora_original_subscription_id \n\t,zuora_subscription_status \n\t,current_cycle_start_date_time \n\t,current_cycle_end_date_time \n\t,last_add_amendment_date_time   \n\t,iteration_count \n\t,current_iteration_count \n\t,obfuscated_id \n\t,last_bill_date_time \n\t,next_bill_date_time  \n\t,bill_cycle_reference_date_time   \n\t,scheduled_for_cancellation_at_date_time\n\t,shop_id \nfrom dm.extract.customer_subscriptions\n;"
            }
        ],
        "load.order_creation_reason.sql": [],
        "transform.dmt.ga_d_customer_plan_360.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "ga_plan_360_delta"
                    ],
                    "select": [
                        "stg.customers.id",
                        "stg.ga_visit_customers.customer_id",
                        "dmt.ga_visit_summary.dw_load_date_time"
                    ],
                    "join": [
                        "stg.customers.id",
                        "stg.customer_subscriptions.customer_id",
                        "stg.ps_plans.customer_id",
                        "stg.orders.customer_id",
                        "dmt.ga_visit_summary.visit_id",
                        "stg.ga_visit_customers.visit_id",
                        "vc1.customer_id",
                        "stg.erp_invoice_items.customer_id",
                        "stg.erp_invoice_items.order_id",
                        "stg.orders.id"
                    ],
                    "where": [
                        "stg.customers.updated_at"
                    ]
                },
                "tables": [
                    "extract.ga_plan_360_delta",
                    "stg.customers",
                    "stg.customer_subscriptions",
                    "stg.ps_plans",
                    "stg.orders",
                    "stg.ga_visit_customers",
                    "dmt.ga_visit_summary",
                    "stg.erp_invoice_items"
                ],
                "subqueries": {
                    "t1": "SELECT c.id as customer_id FROM stg.customers c LEFT JOIN stg.customer_subscriptions cs ON c.id = cs.customer_id LEFT JOIN stg.ps_plans pc ON c.id = pc.customer_id LEFT JOIN stg.orders o ON c.id = o.customer_id LEFT JOIN (SELECT vc.customer_id, max(vs.dw_load_date_time) as dw_load_date_time FROM stg.ga_visit_customers vc JOIN dmt.ga_visit_summary vs on vs.visit_id = vc.visit_id GROUP BY 1) vc1 ON vc1.customer_id = c.id LEFT JOIN stg.erp_invoice_items ii ON ii.customer_id = c.id and ii.order_id = o.id WHERE (c.updated_at >= '<start_date>' :: timestamp - interval '2 day' OR cs.updated_at >= '<start_date>' :: timestamp - interval '2 day' OR pc.dsc_processed_at >= '<start_date>' :: timestamp - interval '2 day' OR o.updated_at >= '<start_date>' :: timestamp - interval '2 day' OR vc1.dw_load_date_time >= '<start_date>' :: timestamp - interval '2 day' OR ii.dsc_processed_at >= '<start_date>' :: timestamp - interval '2 day') GROUP BY 1",
                    "vc1": "SELECT vc.customer_id, max(vs.dw_load_date_time) as dw_load_date_time FROM stg.ga_visit_customers vc JOIN dmt.ga_visit_summary vs on vs.visit_id = vc.visit_id GROUP BY 1"
                },
                "skipped": false,
                "value": "INSERT INTO extract.ga_plan_360_delta\nSELECT\n  customer_id\nFROM\n\t(\n\tSELECT  c.id as customer_id\n    FROM stg.customers c\n\t\tLEFT JOIN stg.customer_subscriptions cs\n\t\t\tON c.id = cs.customer_id\n\t\tLEFT JOIN stg.ps_plans pc\n\t\t\tON c.id = pc.customer_id\n\t\tLEFT JOIN stg.orders o\n\t\t\tON c.id = o.customer_id\n\t\tLEFT JOIN\n\t\t(\n\t\tSELECT vc.customer_id, max(vs.dw_load_date_time) as dw_load_date_time\n\t\t\tFROM stg.ga_visit_customers vc\n\t\t\tJOIN dmt.ga_visit_summary vs\n\t\t\t\ton vs.visit_id = vc.visit_id\n\t\t\tGROUP BY 1\n\t\t) vc1\n\t\t\tON vc1.customer_id = c.id\n\t\tLEFT JOIN stg.erp_invoice_items ii\n\t\t\tON ii.customer_id = c.id and ii.order_id = o.id\n  WHERE (\n\t\t\t\t c.updated_at >= '<start_date>'::timestamp  -  interval '2 day'\n\t\t\t\t OR cs.updated_at >= '<start_date>'::timestamp -  interval '2 day'\n\t\t\t\t OR pc.dsc_processed_at >= '<start_date>'::timestamp -  interval '2 day'\n\t\t\t\t OR o.updated_at >= '<start_date>' ::timestamp -  interval '2 day'\n\t\t\t\t OR vc1.dw_load_date_time >= '<start_date>' ::timestamp -  interval '2 day'\n\t\t\t\t OR ii.dsc_processed_at >= '<start_date>'::timestamp -  interval '2 day'\n         )\n  GROUP BY 1\n) t1\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "extract.ga_plan_360_delta.customer_id",
                        "dmt.ga_d_customer_plan_360.customer_id"
                    ]
                },
                "tables": [
                    "dmt.ga_d_customer_plan_360"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM dmt.ga_d_customer_plan_360\nUSING extract.ga_plan_360_delta\nWHERE extract.ga_plan_360_delta.customer_id = dmt.ga_d_customer_plan_360.customer_id;"
            },
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-----------------INITIAL LOAD SCRIPT USING ABOVE DELTA TABLE------------------\n\nINSERT INTO dmt.ga_d_customer_plan_360\nwith sub_plan_list_final\nas\n\t(SELECT ---------FINAL OUTPUT FOR FINAL QUERY. SELECTS RANK = 1 FROM SUB QUERY BELOW--------\n\t\t sp.bm_type\n\t\t ,sp.customer_id\n\t\t ,sp.obfuscated_customer_id\n\t\t ,sp.customer_created_at\n\t\t ,sp.customer_subscription_plan_id\n\t\t ,sp.shop_id\n\t\t ,sp.start_date_time\n\t\t ,sp.end_date_time\n\t\t ,sp.next_bill_date_time\n\t\t ,sp.frequency\n\t\t ,sp.status_name\n\t\t ,sp.cancel_reason\n\t\t ,sp.plan_rank\n\t\t ,sp.linked_start_date_time\n\t\t ,sp.plan_conversion_source\n\t\t ,sp.order_id\n\t\t ,sp.created_at\n\t\t ,sp.sub_total\n\t\t ,sp.obfuscated_order_id\n\t\t ,sp.order_creation_source\n\t\t ,sp.prev_type\n\t\t ,sp.prev_id\n\t\t ,sp.plan_sub_updated_at\n\t\t ,sp.order_updated_at\n\t\t ,sp.migrated_sub_start_date\n\t\t ,sp.migrated_sub_freqeuncy\n\t\tFROM\n\t\t(---------- LINKS SUB OR PLAN TO FIRST ORDER -------------------\n\t\tSELECT\n\t\t\t f.bm_type\n\t\t\t , f.customer_id\n\t\t\t , c.created_at AS customer_created_at\n\t\t\t , c.obfuscated_id AS obfuscated_customer_id\n\t\t\t , f.customer_subscription_id AS customer_subscription_plan_id\n\t\t\t , f.shop_id\n\t\t\t , f.start_date_time\n\t\t\t , f.end_date_time\n\t\t\t , f.next_bill_date_time\n\t\t\t , f.frequency\n\t\t\t , f.status_name\n\t\t\t , f.cancel_reason\n\t\t\t , f.plan_rank\n\t\t\t , f.linked_start_date_time\n\t\t\t , f.plan_conversion_source\n\t\t\t , (case when linked_start_date_time < '2013-03-01' then null else i.id end) AS order_id\n\t\t\t , (case when linked_start_date_time < '2013-03-01' then null else i.created_at end) AS created_at\n\t\t\t , (case when linked_start_date_time < '2013-03-01' then null else i.sub_total end) AS sub_total\n\t\t\t , (case when linked_start_date_time < '2013-03-01' then null else i.obfuscated_id end) AS obfuscated_order_id\n\t\t\t , (case when linked_start_date_time < '2013-03-01' then null else i.creation_source end) AS order_creation_source\n\t\t\t , datediff(MIN,linked_start_date_time ,i.created_at)\n\t\t\t , row_number() OVER(PARTITION BY f.bm_type, f.customer_subscription_id ORDER BY linked_start_date_time ,i.created_at ASC) AS rank\n\t\t\t , f.prev_type\n\t\t\t , prev_id\n\t\t\t , f.updated_at  AS plan_sub_updated_at\n\t\t\t , i.updated_at  AS order_updated_at\n\t\t\t , f.migrated_sub_start_date\n\t\t\t , f.migrated_sub_freqeuncy\n\t\t\tFROM\n\t\t\t\t(\n\t\t\t\tSELECT\n\t\t\t\t\tpf.bm_type\n\t\t\t\t\t,pf.customer_id\n\t\t\t\t\t,pf.customer_subscription_id\n\t\t\t\t\t,pf.shop_id\n\t\t\t\t\t,pf.start_date_time\n\t\t\t\t\t,pf.end_date_time\n\t\t\t\t\t,pf.next_bill_date_time\n\t\t\t\t\t,pf.updated_at\n\t\t\t\t\t,pf.plan_conversion_source\n\t\t\t\t\t,pf.cancel_reason\n\t\t\t\t\t,pf.frequency\n\t\t\t\t\t,pf.status_name\n\t\t\t\t\t,pf.rank as plan_rank\n\t\t\t\t\t,(CASE WHEN (plan_conversion_source is not null AND lag(pf.plan_conversion_source,1) OVER(PARTITION BY pf.customer_id ORDER BY pf.start_date_time ASC) IS NULL)\n\t\t\t\t\t\t\t\tTHEN lag(pf.start_date_time,1) over(PARTITION BY pf.customer_id ORDER BY pf.start_date_time ASC)\n\t\t\t\t\t\t\t\tELSE pf.start_date_time END) AS linked_start_date_time\n\n\t\t\t\t\t,lag(bm_type,1) over (PARTITION BY customer_id ORDER BY start_date_time ASC) AS prev_type\n\t\t\t\t\t,lag(customer_subscription_id,1) over (PARTITION BY customer_id ORDER BY start_date_time ASC) AS prev_id\n\t\t\t\t\t,(case when pf.plan_conversion_source is not null then lag(pf.start_date_time,1) OVER(PARTITION BY pf.customer_id ORDER BY pf.start_date_time ASC) else null end) as migrated_sub_start_date\n\t\t\t\t\t,(case when pf.plan_conversion_source is not null then lag(pf.frequency,1) OVER(PARTITION BY pf.customer_id ORDER BY pf.start_date_time ASC) else null end) as migrated_sub_freqeuncy\n\n\t\t\t\t\tFROM(\n\t\t\t\t\t\t\t---------- ADDS RANK BY CUSTOMER TO GIVE THE SUB PLAN RANK ------------\n\t\t\t\t\t\t\t SELECT\n\t\t\t\t\t\t\t\tusp.bm_type\n\t\t\t\t\t\t\t\t, usp.customer_id\n\t\t\t\t\t\t\t\t, usp.customer_subscription_id\n\t\t\t\t\t\t\t\t, usp.shop_id\n\t\t\t\t\t\t\t\t, usp.start_date_time\n\t\t\t\t\t\t\t\t, usp.end_date_time\n\t\t\t\t\t\t\t\t, usp.next_bill_date_time\n\t\t\t\t\t\t\t\t, usp.updated_at\n\t\t\t\t\t\t\t\t, usp.plan_conversion_source\n\t\t\t\t\t\t\t\t, usp.cancel_reason\n\t\t\t\t\t\t\t\t, usp.frequency\n\t\t\t\t\t\t\t\t, usp.status_name\n\t\t\t\t\t\t\t\t,  row_number() over (PARTITION BY usp.customer_id ORDER BY usp.start_date_time ASC) AS rank\n\n\t\t\t\t\t\t\tFROM (\n\t\t\t\t\t\t\t\t\t\t\t--------- ORIGINAL UNION QUERY FOR SUBS AND PLANS-----------\n\t\t\t\t\t\t\t\t\t\t SELECT\n\t\t\t\t\t\t\t\t\t\t\t 'sub' AS bm_type\n\t\t\t\t\t\t\t\t\t\t\t , s.customer_id\n\t\t\t\t\t\t\t\t\t\t\t , s.id AS customer_subscription_id\n\t\t\t\t\t\t\t\t\t\t\t , s.shop_id\n\t\t\t\t\t\t\t\t\t\t\t , s.start_date_time\n\t\t\t\t\t\t\t\t\t\t\t , s.end_date_time\n\t\t\t\t\t\t\t\t\t\t\t , s.next_bill_date_time\n\t\t\t\t\t\t\t\t\t\t\t , s.updated_at\n\t\t\t\t\t\t\t\t\t\t\t , NULL AS plan_conversion_source\n\t\t\t\t\t\t\t\t\t\t\t , sc.reason AS cancel_reason\n\t\t\t\t\t\t\t\t\t\t\t , s.frequency\n\t\t\t\t\t\t\t\t\t\t\t ,(CASE WHEN s.status = 0 THEN 'Cancelled' WHEN s.status = 1 THEN 'Active'\n\t\t\t\t\t\t\t\t\t\t\t\tWHEN s.status = 2 THEN 'Suspended' WHEN s.status = 3 THEN 'S Timeout'\n\t\t\t\t\t\t\t\t\t\t\t\tWHEN s.status = 4 THEN 'Paused' ELSE 'Other' END) status_name\n\t\t\t\t\t\t\t\t\t\t FROM stg.customer_subscriptions s\n\t\t\t\t\t\t\t\t\t\t LEFT OUTER JOIN stg.customer_subscription_cancellation_reasons sc\n\t\t\t\t\t\t\t\t\t\t\t\tON sc.customer_subscription_id = s.id AND parent_id IS NULL\n\t\t\t\t\t\t\t\t\t\t where s.customer_id is not null\n\n\t\t\t\t\t\t\t\t\t\t UNION ALL\n\n\t\t\t\t\t\t\t\t\t\t SELECT\n\t\t\t\t\t\t\t\t\t\t\t 'plan' AS bm_type\n\t\t\t\t\t\t\t\t\t\t\t , p.customer_id\n\t\t\t\t\t\t\t\t\t\t\t , p.id AS customer_subscription_id\n\t\t\t\t\t\t\t\t\t\t\t , p.shop_id\n\t\t\t\t\t\t\t\t\t\t\t , p.plan_created_at AS start_date_time\n\t\t\t\t\t\t\t\t\t\t\t , (case when p.plan_state = 'inactive' and  pc.plan_ended_at is null then p.plan_updated_at else pc.plan_ended_at end) AS end_date_time\n\t\t\t\t\t\t\t\t\t\t\t , p.plan_bills_at as next_bill_date_time\n\t\t\t\t\t\t\t\t\t\t\t , p.plan_updated_at AS updated_at\n\t\t\t\t\t\t\t\t\t\t\t , c.plan_conversion_source\n\t\t\t\t\t\t\t\t\t\t\t , pc.plan_cancellation_reason AS cancel_reason\n\t\t\t\t\t\t\t\t\t\t\t , p.plan_frequency as frequency\n\t\t\t\t\t\t\t\t\t\t\t , p.plan_state as status_name\n\t\t\t\t\t\t\t\t\t\t FROM stg.ps_plans p\n\t\t\t\t\t\t\t\t\t\t LEFT OUTER JOIN stg.plan_cancellations pc\n\t\t\t\t\t\t\t\t\t\t\t\t\tON pc.id = p.plan_cancellation_id\n\t\t\t\t\t\t\t\t\t\t LEFT OUTER JOIN stg.ps_subscription_to_plan_conversion c\n\t\t\t\t\t\t\t\t\t\t\t\t\tON p.id = c.plan_id\n\t\t\t\t\t\t\t\t\t\t where p.customer_id is not null\n\t\t\t\t\t\t\t\t\t\t ) usp\n\t\t\t\t\t\t\t\t\tJOIN extract.ga_plan_360_delta d\n\t\t\t\t\t\t\t\t\t\ton usp.customer_id = d.customer_id\n\t\t\t\t\t\t )pf\n\t\t\t\t\t) f\n\t\t\t\tLEFT OUTER JOIN stg.orders i\n\t\t\t\t\t\t ON f.customer_id = i.customer_id\n\t\t\t\t\t\t\t\tand datediff(s,linked_start_date_time, i.created_at) >= -40\n\t\t\t\tLEFT OUTER JOIN stg.customers c\n\t\t\t\t\t\t ON c.id = f.customer_id\n\t\t\t\t) sp\n\t\tWHERE rank = 1\n\t\t)\n\n\n\n----------------- FINAL QUERY BRINGING ALL SUB QUERIES TOGETHER FOR THE FINAL TABLE ---------------------------\nSELECT\n\ts.bm_type\n\t, s.customer_subscription_plan_id\n\t, s.obfuscated_customer_id AS obfuscated_customer_id\n\t, s.customer_id\n\t, s.customer_created_at\n\t, s.plan_rank AS sub_plan_rank\n\t, s.prev_type\n\t, s.prev_id\n\t, s.shop_id\n\t, s.frequency\n\t, og.original_frequency\n\t, s.status_name\n\t, s.start_date_time\n\t, s.end_date_time\n\t, s.next_bill_date_time\n\t, (CASE WHEN s.bm_type = 'plan' THEN s.plan_conversion_source ELSE NULL END) AS plan_conversion_source\n\t, s.cancel_reason\n\t, ct.churn_type\n\t, s.order_id\n\t, s.obfuscated_order_id\n\t, s.created_at AS order_created_at\n\t, s.order_creation_source\n\t, s.sub_total\n\t, o.first_order_product_qty\n\t, o.first_order_product_total_price\n\t, o.first_order_sku_list\n\t, o.funnel_sku_qty\n\t, o.funnel_sku_value\n\t, o.funnel_sku_list\n\t, av.post_visid_high\n\t, av.post_visid_low\n\t, av.visit_num\n\t, av.visit_start_time_gmt_epoch\n\t, av.visit_start_time_gmt\n\t, av.visit_end_time_gmt\n\t, av.visit_start_time_pst\n\t, av.visit_end_time_pst\n\t, av.first_utm_source\n\t, av.first_utm_medium\n\t, av.first_utm_campaign\n\t, av.first_utm_content\n\t, av.first_utm_term\n\t, av.last_utm_source\n\t, av.last_utm_medium\n\t, av.last_utm_campaign\n\t, av.last_utm_content\n\t, av.last_utm_term\n\t, av.landing_url_without_params\n\t, av.landing_pagename\n\t, av.ab_test_assignment\n\t, av.shopcode AS web_shop_name\n\t, av.plan_purchase_flag\n\t, av.subscription_purchase_flag\n\t, av.subscription_shipnow_purchase_flag\n\t, av.nsrq_purchase_flag\n\t, av.gift_bundle_purchase_flag\n\t, av.gift_ecard_purchase_flag\n\t, av.preorder_purchase_flag\n\t, av.order_count\n\t, getdate()::timestamp AS dw_load_date_time\n\t, s.migrated_sub_start_date\n\t, s.migrated_sub_freqeuncy\n\n\t, av.analytics\n\t, av.visit_id\n\n--FROM  extract.plan_360_delta d\nFROM  sub_plan_list_final  s\n\t--on d.customer_id = s.customer_id\nLEFT OUTER JOIN\n\t\t(\n\t\t SELECT c.bm_type,\n\t\t\t\t\t\tc.customer_id,\n\t\t\t\t\t\tc.sub_plan_id,\n\t\t\t\t\t\tc.churn_type\n\t\t FROM\n\t\t (\n\t\t\t\tSELECT 'plan' AS bm_type,\n\t\t\t\t\t\t\t\t\tp.customer_id,\n\t\t\t\t\t\t\t\t\th.plan_id AS sub_plan_id,\n\t\t\t\t\t\t\t\t\t(CASE WHEN c.plan_id IS NULL AND from_state = 'suspended' THEN 'passive' ELSE 'active' END) AS churn_type\n\t\t\t\t\t FROM\n\t\t\t\t\t (\n\t\t\t\t\t\tSELECT sh.plan_id, sh.from_state\n\t\t\t\t\t\tFROM\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\tSELECT plan_id, from_state, row_number() over (PARTITION BY plan_id ORDER BY created_at DESC) AS rank\n\t\t\t\t\t\t\t\tFROM stg.plan_state_histories\n\t\t\t\t\t\t\t\tWHERE to_state = 'inactive'\n\t\t\t\t\t\t\t) sh\n\t\t\t\t\t\tWHERE rank = 1\n\t\t\t\t\t ) h\n\t\t\t\t\tJOIN stg.ps_plans p on h.plan_id = p.id\n\t\t\t\t\tLEFT JOIN stg.plan_cancellations c\n\t\t\t\t\t\ton c.id = p.plan_cancellation_id\n\n\t\t\t\t UNION ALL\n\n\t\t\t\t SELECT 'sub' as bm_type,\n\t\t\t\t\t\t\t\ts.customer_id,\n\t\t\t\t\t\t\t\ts.id AS sub_plan_id,\n\t\t\t\t\t\t\t\t(CASE WHEN status = 3 THEN 'passive' WHEN status = 0 THEN 'active' ELSE NULL END) AS churn_type\n\t\t\t\t FROM stg.customer_subscriptions s\n\t\t\t\t WHERE churn_type IS NOT NULL\n\t\t\t) c\n\t\t JOIN extract.ga_plan_360_delta d on d.customer_id = c.customer_id\n\t\t\t) ct\n    ON ct.sub_plan_id = customer_subscription_plan_id\n      and ct.bm_type = s.bm_type\n    LEFT OUTER JOIN\n\t\t(\n\t\t\t\t\tSELECT  a.visit_id\n\t\t\t\t\t,a.obfuscated_customer_id\n\t\t\t\t\t,f.customer_subscription_plan_id\n\t\t\t\t\t,a.visit_customer_min_timestamp\n\t\t\t\t\t,a.visit_customer_max_timestamp\n\t\t\t\t\t, a.post_visid_high\n\t\t\t\t\t, a.post_visid_low\n\t\t\t\t\t, a.visit_num\n\t\t\t\t\t, a.visit_start_time_gmt_epoch\n\t\t\t\t\t, a.visit_start_time_gmt\n\t\t\t\t\t, a.visit_end_time_gmt\n\t\t\t\t\t, a.visit_start_time_pst\n\t\t\t\t\t, a.visit_end_time_pst\n\t\t\t\t\t, a.first_utm_source\n\t\t\t\t\t, a.first_utm_medium\n\t\t\t\t\t, a.first_utm_campaign\n\t\t\t\t\t, a.first_utm_content\n\t\t\t\t\t, a.first_utm_term\n\t\t\t\t\t, a.last_utm_source\n\t\t\t\t\t, a.last_utm_medium\n\t\t\t\t\t, a.last_utm_campaign\n\t\t\t\t\t, a.last_utm_content\n\t\t\t\t\t, a.last_utm_term\n\t\t\t\t\t, a.landing_url_without_params\n\t\t\t\t\t, a.landing_pagename\n\t\t\t\t\t, a.ab_test_assignment\n\t\t\t\t\t, a.shopcode\n\t\t\t\t\t, a.plan_purchase_flag\n\t\t\t\t\t, a.subscription_purchase_flag\n\t\t\t\t\t, a.subscription_shipnow_purchase_flag\n\t\t\t\t\t, a.nsrq_purchase_flag\n\t\t\t\t\t, a.gift_bundle_purchase_flag\n\t\t\t\t\t, a.gift_ecard_purchase_flag\n\t\t\t\t\t, a.preorder_purchase_flag\n\t\t\t\t\t, a.order_count\n\t\t\t\t\t,datediff(seconds, visit_customer_min_timestamp,f.linked_start_date_time) as diff\n\t\t\t\t\t,row_number() over (partition by a.obfuscated_customer_id, f.customer_subscription_plan_id\n\t\t\t\t\t\t\t\t\t\t\t\t\t\torder by datediff(seconds, visit_customer_min_timestamp, f.linked_start_date_time) asc) as rank\n\t\t\t\t\t, a.analytics\n\n\t\t\t\t\tFROM(\n\t\t\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\t\t\t av.visit_id\n\t\t\t\t\t\t\t\t\t ,vc.obfuscated_customer_id\n\t\t\t\t\t\t\t\t\t ,vc.visit_customer_min_timestamp\n\t\t\t\t\t\t\t\t\t ,vc.visit_customer_max_timestamp\n\t\t\t\t\t\t\t\t\t , av.post_visid_high::VARCHAR(64)\n\t\t\t\t\t\t\t\t\t , av.post_visid_low::VARCHAR(64)\n\t\t\t\t\t\t\t\t\t , av.visit_num\n\t\t\t\t\t\t\t\t\t , av.visit_start_time_gmt_epoch\n\t\t\t\t\t\t\t\t\t , av.visit_start_time_gmt\n\t\t\t\t\t\t\t\t\t , av.visit_end_time_gmt\n\t\t\t\t\t\t\t\t\t , av.visit_start_time_pst\n\t\t\t\t\t\t\t\t\t , av.visit_end_time_pst\n\t\t\t\t\t\t\t\t\t , av.first_utm_source\n\t\t\t\t\t\t\t\t\t , av.first_utm_medium\n\t\t\t\t\t\t\t\t\t , av.first_utm_campaign\n\t\t\t\t\t\t\t\t\t , av.first_utm_content\n\t\t\t\t\t\t\t\t\t , av.first_utm_term\n\t\t\t\t\t\t\t\t\t , av.last_utm_source\n\t\t\t\t\t\t\t\t\t , av.last_utm_medium\n\t\t\t\t\t\t\t\t\t , av.last_utm_campaign\n\t\t\t\t\t\t\t\t\t , av.last_utm_content\n\t\t\t\t\t\t\t\t\t , av.last_utm_term\n\t\t\t\t\t\t\t\t\t , av.landing_url_without_params\n\t\t\t\t\t\t\t\t\t , av.landing_pagename\n\t\t\t\t\t\t\t\t\t , av.ab_test_assignment\n\t\t\t\t\t\t\t\t\t , av.shopcode\n\t\t\t\t\t\t\t\t\t , av.plan_purchase_flag\n\t\t\t\t\t\t\t\t\t , av.subscription_purchase_flag\n\t\t\t\t\t\t\t\t\t , av.subscription_shipnow_purchase_flag\n\t\t\t\t\t\t\t\t\t , av.nsrq_purchase_flag\n\t\t\t\t\t\t\t\t\t , av.gift_bundle_purchase_flag\n\t\t\t\t\t\t\t\t\t , av.gift_ecard_purchase_flag\n\t\t\t\t\t\t\t\t\t , av.preorder_purchase_flag\n\t\t\t\t\t\t\t\t\t , av.order_count\n\t\t\t\t\t\t\t\t\t , 'adobe' as analytics\n\n\t\t\t\t\t\t\t\tFROM stg.adobe_visit_customers vc\n\t\t\t\t\t\t\t\tjoin dmt.adobe_visit_summary av ON vc.visit_id = av.visit_id\n\t\t\t\t\t\t\t\twhere purchase_flag = 1\n\t\t\t\t\t\t\t\tand av.dw_load_date_time::date < '2021-01-17'\n\n\t\t\t\t\t\t\t\tUNION\n\n\t\t\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\t\t\t av.visit_id\n\t\t\t\t\t\t\t\t\t ,vc.obfuscated_customer_id\n\t\t\t\t\t\t\t\t\t ,vc.visit_customer_min_timestamp\n\t\t\t\t\t\t\t\t\t ,vc.visit_customer_max_timestamp\n\t\t\t\t\t\t\t\t\t , av.post_visid_high\n\t\t\t\t\t\t\t\t\t , av.post_visid_low\n\t\t\t\t\t\t\t\t\t , av.visit_num\n\t\t\t\t\t\t\t\t\t , av.visit_start_time_gmt_epoch\n\t\t\t\t\t\t\t\t\t , av.visit_start_time_gmt\n\t\t\t\t\t\t\t\t\t , av.visit_end_time_gmt\n\t\t\t\t\t\t\t\t\t , av.visit_start_time_pst\n\t\t\t\t\t\t\t\t\t , av.visit_end_time_pst\n\t\t\t\t\t\t\t\t\t , av.first_utm_source\n\t\t\t\t\t\t\t\t\t , av.first_utm_medium\n\t\t\t\t\t\t\t\t\t , av.first_utm_campaign\n\t\t\t\t\t\t\t\t\t , av.first_utm_content\n\t\t\t\t\t\t\t\t\t , av.first_utm_term\n\t\t\t\t\t\t\t\t\t , av.last_utm_source\n\t\t\t\t\t\t\t\t\t , av.last_utm_medium\n\t\t\t\t\t\t\t\t\t , av.last_utm_campaign\n\t\t\t\t\t\t\t\t\t , av.last_utm_content\n\t\t\t\t\t\t\t\t\t , av.last_utm_term\n\t\t\t\t\t\t\t\t\t , av.landing_url_without_params\n\t\t\t\t\t\t\t\t\t , av.landing_pagename\n\t\t\t\t\t\t\t\t\t , av.ab_test_assignment\n\t\t\t\t\t\t\t\t\t , av.shopcode\n\t\t\t\t\t\t\t\t\t , av.plan_purchase_flag\n\t\t\t\t\t\t\t\t\t , av.subscription_purchase_flag\n\t\t\t\t\t\t\t\t\t , av.subscription_shipnow_purchase_flag\n\t\t\t\t\t\t\t\t\t , av.nsrq_purchase_flag\n\t\t\t\t\t\t\t\t\t , av.gift_bundle_purchase_flag\n\t\t\t\t\t\t\t\t\t , av.gift_ecard_purchase_flag\n\t\t\t\t\t\t\t\t\t , av.preorder_purchase_flag\n\t\t\t\t\t\t\t\t\t , av.order_count\n\t\t\t\t\t\t\t\t\t , 'ga' as analytics\n\n\t\t\t\t\t\t\t\tFROM stg.ga_visit_customers vc\n\t\t\t\t\t\t\t\tjoin dmt.ga_visit_summary av ON vc.visit_id = av.visit_id\n\t\t\t\t\t\t\t\twhere purchase_flag = 1\n\t\t\t\t\t\t\t\tand av.dw_load_date_time >= '2021-01-17'\n\n\t\t\t\t\t\t\t\t) a\n\t\t\t\t\tjoin sub_plan_list_final f\n\t\t\t\t\t\ton a.obfuscated_customer_id = f.obfuscated_customer_id\n\n\t\t\t\t\twhere ((f.linked_start_date_time between dateadd(min,-2,a.visit_customer_min_timestamp) and dateadd(min,2,a.visit_customer_max_timestamp))\n\t\t\t\t\t\t\t\t OR f.created_at between dateadd(min,-2,a.visit_customer_min_timestamp) and dateadd(min,2,a.visit_customer_max_timestamp))\n\t\t\t\t) av\n    ON s.obfuscated_customer_id = av.obfuscated_customer_id\n        AND s.customer_subscription_plan_id = av.customer_subscription_plan_id\n        AND av.rank = 1\n    LEFT OUTER JOIN\n\t\t(\n\t\tSELECT\n\t\t\t\tii.order_id\n\t\t\t\t, left(LISTAGG(DISTINCT CASE WHEN p.type IN (0,1,2,14) THEN p.sku ELSE NULL END, ' | ') within group (order by p.sku) ,500) AS funnel_sku_list\n\t\t\t\t, left(LISTAGG(DISTINCT CASE WHEN  ii.price > 0 THEN p.sku ELSE NULL END, '|') within group (order by p.sku) ,500) AS first_order_sku_list\n\t\t\t\t, SUM(CASE WHEN p.type IN (0,1,2,14) THEN ii.quantity ELSE 0 END) AS funnel_sku_qty\n\t\t\t\t, SUM(CASE WHEN p.type IN (0,1,2,14) THEN ii.price ELSE 0 END) AS funnel_sku_value\n\t\t\t\t, SUM(CASE WHEN  ii.price > 0 THEN ii.quantity ELSE 0 END) AS first_order_product_qty\n\t\t\t\t, SUM(CASE WHEN  ii.price > 0 THEN ii.price ELSE 0 END) AS first_order_product_total_price\n\t\tFROM stg.erp_invoices i\n\t\tjoin extract.ga_plan_360_delta d on d.customer_id = i.customer_id\n\t\tjoin stg.erp_invoice_items ii\n\t\t\ton ii.invoice_id = i.id\n\t\tLEFT JOIN stg.products p\n\t\t\tON ii.product_id = p.id\n\t\tWHERE ii.price > 0\n\t\tGROUP BY 1\n\t\t) o\n\t\tON o.order_id = s.order_id\n\tLEFT JOIN\n\t(\n\t\t\tselect 'sub' as bm_type,\n\t\t\t\t\t\t s.id as plan_id,\n\t\t\t\t\t\t case when old_frequency is null then s.frequency else old_frequency end as original_frequency\n\t\t\tfrom stg.customer_subscriptions s\n\t\t\tjoin extract.ga_plan_360_delta d on d.customer_id = s.customer_id\n\t\t\tleft join\n\t\t\t(\n\t\t\tselect\n\t\t\t\tcustomer_subscription_id\n\t\t\t\t,old_frequency\n\t\t\t\t,row_number() over (partition by customer_subscription_id order by sh.created_at) as rank\n\t\t\tfrom stg.customer_subscription_product_frequency_histories sh\n\t\t\t) h\n\t\t\ton h.customer_subscription_id = s.id and rank = 1\n\n\t\t\t UNION ALL\n\n\t\t\t select 'plan' as bm_type,\n\t\t\t\t\t\t\tp.id,\n\t\t\t\t\t\t\tcase when old_frequency is null then p.plan_frequency else old_frequency end as original_frequency\n\t\t\t from stg.ps_plans p\n\t\t\t join extract.ga_plan_360_delta d on d.customer_id = p.customer_id\n\t\t\t LEFT JOIN\n\t\t\t (\n\t\t\t\tselect  ce.plan_id\n\t\t\t\t\t\t\t\t,old_frequency\n\t\t\t\t\t\t\t\t,row_number() over (partition by plan_id order by ce.dsc_processed_at) as rank\n\t\t\t\tfrom stg.ps_change_plan_attribute_events ce\n\t\t\t\twhere event = 'change_plan_frequency'\n\t\t\t\t) h\n\t\t\t\ton h.plan_id = p.id and  h.rank = 1\n\t\t) og\n\t\ton og.bm_type = s.bm_type and og.plan_id = s.customer_subscription_plan_id\n;"
            }
        ],
        "load.map.currency.sql": [],
        "load.map.shop.sql": [
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "--  DROP TABLE IF EXISTS map.order_creation_source;\n\n-- CREATE TABLE map.order_creation_source as\n\n-- TRUNCATE TABLE map.shop;\n\nINSERT INTO map.shop\nselect * from (\n  select 1 as shop_id, 'US' as  shop_name, getdate() as dw_loaddatetime union all\n  select 2 as shop_id, 'AU' as  shop_name, getdate() as dw_loaddatetime union all\n  select 3 as shop_id, 'OTHER' as  shop_name, getdate() as dw_loaddatetime union all\n  select 4 as shop_id, 'CA' as  shop_name, getdate() as dw_loaddatetime union all\n  select 5 as shop_id, 'UK' as  shop_name, getdate() as dw_loaddatetime\n) t\n;"
            }
        ],
        "load.public.numbers.sql": [
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- TRUNCATE TABLE public.numbers;\n\nINSERT INTO public.numbers\nSELECT\n  row_number() over() as number\nFROM dsc_prod.customers\nlimit 20000;"
            }
        ],
        "load.map.product_type.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "product_type"
                    ],
                    "select": [
                        "t.product_type_id",
                        "t.product_type_name"
                    ]
                },
                "tables": [
                    "map.product_type"
                ],
                "subqueries": {
                    "t": "select 'Subscription' as product_type_name, 0 as product_type_id union all select 'Subscription Bundle' as product_type_name, 1 as product_type_id union all select 'Blade' as product_type_name, 2 as product_type_id union all select 'Handle' as product_type_name, 3 as product_type_id union all select 'Packaging' as product_type_name, 4 as product_type_id union all select 'Marketing' as product_type_name, 5 as product_type_id union all select 'Shave Butter' as product_type_name, 6 as product_type_id union all select 'Sample' as product_type_name, 7 as product_type_id union all select 'Gift Card' as product_type_name, 8 as product_type_id union all select 'Groundskeeper' as product_type_name, 9 as product_type_id union all select 'Post Shave' as product_type_name, 10 as product_type_id union all select 'Serum' as product_type_name, 11 as product_type_id union all select 'Hair' as product_type_name, 12 as product_type_id union all select 'Gift Plan' as product_type_name, 13 as product_type_id union all select 'Bundle' as product_type_name, 14 as product_type_id union all select 'Gifting Overbox' as product_type_name, 15 as product_type_id union all select 'Gift Kit' as product_type_name, 16 as product_type_id union all select 'Shave Lather' as product_type_name, 17 as product_type_id union all select 'Big Cloud' as product_type_name, 18 as product_type_id union all select 'Wanderer' as product_type_name, 19 as product_type_id union all select 'Pre-Shave' as product_type_name, 20 as product_type_id union all select 'Gift Wrap' as product_type_name, 21 as product_type_id union all select 'Traveler' as product_type_name, 22 as product_type_id union all select 'Other' as product_type_name, 23 as product_type_id union all select 'Minis' as product_type_name, 24 as product_type_id union all select 'Other' as product_type_name, 25 as product_type_id union all select 'Superba' as product_type_name, 26 as product_type_id union ALL select 'Blueprint' as product_type_name, 28 as product_type_id"
                },
                "skipped": false,
                "value": "INSERT INTO map.product_type\nselect\n\t  t.product_type_id\n\t, t.product_type_name\n  , getdate()\nfrom (\nselect 'Subscription' as product_type_name, 0 as product_type_id union all\nselect 'Subscription Bundle' as product_type_name, 1 as product_type_id union all\nselect 'Blade' as product_type_name, 2 as product_type_id union all\nselect 'Handle' as product_type_name, 3 as product_type_id union all\nselect 'Packaging' as product_type_name, 4 as product_type_id union all\nselect 'Marketing' as product_type_name, 5 as product_type_id union all\nselect 'Shave Butter' as product_type_name, 6 as product_type_id union all\nselect 'Sample' as product_type_name, 7 as product_type_id union all\nselect 'Gift Card' as product_type_name, 8 as product_type_id union all\nselect 'Groundskeeper' as product_type_name, 9 as product_type_id union all \nselect 'Post Shave' as product_type_name, 10 as product_type_id union all\nselect 'Serum' as product_type_name, 11 as product_type_id union all\nselect 'Hair' as product_type_name, 12 as product_type_id union all\nselect 'Gift Plan' as product_type_name, 13 as product_type_id union all\nselect 'Bundle' as product_type_name, 14 as product_type_id union all\nselect 'Gifting Overbox' as product_type_name, 15 as product_type_id union all\nselect 'Gift Kit' as product_type_name, 16 as product_type_id union all\nselect 'Shave Lather' as product_type_name, 17 as product_type_id union all\nselect 'Big Cloud' as product_type_name, 18 as product_type_id union all\nselect 'Wanderer' as product_type_name, 19 as product_type_id union all\nselect 'Pre-Shave' as product_type_name, 20 as product_type_id union all\nselect 'Gift Wrap' as product_type_name, 21 as product_type_id union all\nselect 'Traveler' as product_type_name, 22 as product_type_id union all\nselect 'Other' as product_type_name, 23 as product_type_id union all\nselect 'Minis' as product_type_name, 24 as product_type_id union all\nselect 'Other' as product_type_name, 25 as product_type_id union all\nselect 'Superba' as product_type_name, 26 as product_type_id union ALL\nselect 'Blueprint' as product_type_name, 28 as product_type_id \n) t\n;"
            }
        ],
        "load.stg.customer_phone_numbers.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.customer_phone_numbers.id",
                        "extract.customer_phone_numbers.id"
                    ]
                },
                "tables": [
                    "stg.customer_phone_numbers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.customer_phone_numbers\nusing extract.customer_phone_numbers\nwhere stg.customer_phone_numbers.id = extract.customer_phone_numbers.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_phone_numbers"
                    ],
                    "select": [
                        "*"
                    ]
                },
                "tables": [
                    "stg.customer_phone_numbers",
                    "extract.customer_phone_numbers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.customer_phone_numbers\nselect\n  *\nfrom extract.customer_phone_numbers\n;"
            }
        ],
        "transform.dmt.f_invoice.sql": [
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "stg.erp_invoices.customer_id"
                    ],
                    "join": [
                        "stg.erp_invoices.order_id",
                        "stg.orders.id",
                        "stg.erp_shipments.order_id"
                    ],
                    "where": [
                        "stg.erp_invoices.dsc_processed_at"
                    ]
                },
                "tables": [
                    "dm_delta",
                    "stg.erp_invoices",
                    "stg.orders",
                    "stg.erp_shipments"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "CREATE TEMP TABLE dm_delta AS\nselect distinct i.customer_id as customer_id\nfrom stg.erp_invoices i\n  inner join stg.orders o\n    on i.order_id = o.id\n  left outer join stg.erp_shipments s\n    on i.order_id = s.order_id\nwhere (\n         i.dsc_processed_at >= '<start_date>'::timestamp  -  interval '1 day'\n         OR o.updated_at >= '<start_date>'::timestamp -  interval '1 day'\n         OR s.dsc_processed_at >= '<start_date>'::timestamp -  interval '1 day'\n       )\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "dmt.f_invoice.customer_id",
                        "dm_delta.customer_id"
                    ]
                },
                "tables": [
                    "dmt.f_invoice"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from dmt.f_invoice\nusing dm_delta\nwhere dmt.f_invoice.customer_id = dm_delta.customer_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "f_invoice"
                    ],
                    "select": [
                        "i.id",
                        "i.order_id",
                        "i.customer_id",
                        "s.id",
                        "i.sub_total",
                        "i.total_shipping",
                        "i.profit",
                        "i.profit_margin",
                        "i.total_line_item_shipping_discount",
                        "i.total_discount",
                        "i.base_shipping_discount",
                        "i.base_shipping",
                        "i.status"
                    ]
                },
                "tables": [
                    "dmt.f_invoice"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO dmt.f_invoice\nselect\n    i.id as invoice_id\n  , i.order_id\n  , i.customer_id\n  , s.id as shipment_id\n  , i.sub_total\n  , i.total_shipping\n  , i.profit\n  , i.profit_margin\n  , i.total_line_item_shipping_discount\n  , i.total_discount\n  , i.base_shipping_discount\n  , i.base_shipping\n  , i.status as invoice_status -- only paid/ unpaid\n  , i.total_tax --\n  , i.total_line_item_shipping_tax\n  , i.total_line_item_shipping\n  , i.base_discount\n  , i.base_tax\n  , i.total_shipping_discount\n  , i.grand_total\n  , (ISNULL(i.grand_total,0) - ISNULL(i.total_tax,0)) as amount_true\n  , i.total_line_item_discount\n  , i.total_line_item_tax\n  , i.created_at invoice_created_at\n  , i.base_shipping_tax\n  , i.total_cost\n  , i.total_shipping_tax\n  , i.balance\n  , ocs.first_order_date as first_order_date\n  , DATE_TRUNC('month',ocs.first_order_date)::date as first_order_month\n  , scs.first_subscription_start_date as first_subscription_date\n  , DATE_TRUNC('month',scs.first_subscription_start_date)::date as first_subscription_month\n  , case when ocs.first_order_id = i.order_id then TRUE else FALSE end as initial_invoice\n  , case when ocs.first_order_id = i.order_id then 'Initial'  else 'Recurring' end as invoice_revenue_type\n  , case when m_ocr.reason_id =14  -- NSRQ\n      then m_ocr.reason_name\n      else\n        case when ocs.first_order_id = i.order_id then 'Initial'  else 'Recurring' end\n    end as invoice_revenue_type_name\n  ---- customer\n  , i.customer_created_at\n  -- , test_customer all test customers are excluded\n  , i.customer_type\n  , left(i.customer_first_name,64) as customer_first_name\n  , left(i.customer_last_name,64) as customer_last_name\n  , i.customer_gender\n  , left(i.customer_email, 128) as customer_email\n  ----- orders\n  , o.created_at as order_created_at\n  , o.updated_at order_updated_at\n  , o.created_by as order_created_by\n  , i.order_base_shipping_charges\n  , i.order_creation_reason\n  , o.creation_reason as order_creation_reason_id\n  , case when m_ocr.reason_id is null then 'Other' else m_ocr.reason_name end as order_creation_reason_name\n  , case when m_or.reason_id is null then 'Other' else m_or.reason_name end as order_reason_name\n  , case when o.creation_reason = 14 then 'true' else 'false' end nsrq\n  , case when o.creation_reason = 14 and (o.created_at <  DATE_TRUNC('day', scs.first_subscription_start_date) OR scs.first_subscription_start_date is null) THEN 'true' else 'false' end as nsrq_guest_purchase\n  , case when datediff(second, scs.curr_subscription_start_date, o.created_at) between 0 and 60 then 'true' else 'false' end as funnel_purchase_subscription\n  , case when datediff(second, scs.first_subscription_start_date, o.created_at) between 0 and 60 then 'true' else 'false' end as initial_purchase_customer\n  , i.order_creation_source\n  , i.order_currency_code\n  , i.order_discount\n  , i.order_ignore_shipping_charges\n  , i.order_is_on_the_house\n  , i.order_shipping_charges\n  , i.shop_id\n  , case when m_shop.shop_id is null then 'Other' else m_shop.shop_name end as shop_name\n  , i.order_sub_total\n  , i.order_tax\n  , i.order_total\n  , i.order_total_shipping_charges\n  -----// orders\n  , i.tax_rate_id\n  , i.tax_rate_country\n  , i.tax_rate_state_province\n  , i.tax_rate_county\n  , i.tax_rate_post_code\n  , i.tax_rate\n  , i.shipping_address_id\n  , i.shipping_address_country\n  , i.shipping_address_state_province\n  , i.shipping_address_post_code\n  , o.customer_subscription_id\n  , o.coupon_instance_id\n  , o.confirmation_email_instance_id\n  , o.customer_subscription_bill_run_id\n  , case when s.id is null then FALSE else TRUE end as shipment_created\n  ---- shipment\n  , s.tracking_number as shipment_tracking_number\n  , s.price as shipment_price\n  , s.tax as shipment_tax\n  , s.created_at as shipment_created_at\n  , s.updated_at as shipment_updated_at\n  , left(s.status,32) as shipment_status_code\n  , case when m_ss.status_code is null then 'Other' else m_ss.status_name end as shipment_status_name\n  , case when m_ss.status_code is null then 'Other' else m_ss.push_status end as shipment_push_status\n  , left(s.provider_status, 64) as shipment_provider_status\n  , left(s.provider_method, 64) as shipment_provider_method\n  , s.total_weight as shipment_total_weight\n  , CASE\n      WHEN s.total_weight  <= 9 THEN '00' + ceiling(s.total_weight)::varchar(16) + ' oz'\n      WHEN s.total_weight  <= 15 THEN '0' + ceiling(s.total_weight)::varchar(16) + ' oz'\n      WHEN s.total_weight  <= 16 THEN '1 lb'\n      WHEN s.total_weight  > 15 THEN ceiling(s.total_weight / 16.0)::varchar(16) + ' lbs'\n    END  as shipment_weight_tier\n  , s.packaging_weight as shipment_packaging_weight\n  , s.contents_weight as shipment_contents_weight\n  , s.delivered_at as shipment_delivered_at\n  , s.fulfillment_provider_id as shipment_fulfillment_provider_id\n  , left(s.fulfillment_provider_name,64) as shipment_fulfillment_provider_name\n  , case when m_warehouse.warehouse_id is null then 'Other' else m_warehouse.warehouse_name end as warehouse_name\n  , s.inventory_location_id as shipment_inventory_location_id\n  , s.order_fulfillment_id as shipment_order_fulfillment_id\n  , s.shipped_at as shipment_shipped_at\n  , s.shipment_cost as shipment_cost\n  , s.handling_cost as shipment_handling_cost\n  , case when m_or.reason_id is null then 'Regular' else m_or.reason_name end as shipment_type\n  , i.cost_calculation_completed\n  , i.billing_address_id\n  , i.billing_address_country\n  , i.billing_address_state_province\n  , i.billing_address_post_code\n  , getdate() as dw_load_date_time\n-- bm2\n  , i.order_attribution_id\n  , i.order_attribution_attribution_id\n  , i.order_attribution_attribution_type\n  , i.order_attribution_created_at\n  , i.order_attribution_updated_at\n  , case when i.order_id = nvl(cip.order_id,000000000) then TRUE else FALSE end as plan_initial_invoice\n  , case when s.uuid is null then s.id::varchar else s.uuid end as shipment_uuid\t\n  , case when s.primary_shipment_uuid is null and s.uuid is null and s.shipped_at is not null then s.id::varchar else s.primary_shipment_uuid end as primary_shipment_uuid \t\nfrom dm_delta dd\n  inner join stg.erp_invoices as i\n    on dd.customer_id = i.customer_id\n  -- invoice cannot exist without order - so inner join\n  inner join stg.orders o\n    on i.order_id = o.id\n  left outer join stg.erp_shipments s\n    on i.order_id = s.order_id\n  left outer join map.shop m_shop\n    on i.shop_id = m_shop.shop_id\n  left outer join map.warehouse m_warehouse\n    on s.fulfillment_provider_id = m_warehouse.warehouse_id\n  left outer join map.order_creation_reason m_ocr\n    on o.creation_reason = m_ocr.reason_id\n  left outer join map.order_reason m_or\n    on o.creation_reason = m_or.reason_id\n  left outer join map.shipment_status m_ss\n    on s.status = m_ss.status_code\n  -- used for initial_invoice calc;\n  -- TODO: swith to inner join when truncate replaced with delete in customer_status\n  left outer join stg.customer_status cs\n    on i.customer_id = cs.customer_id\n  inner join (\n        select\n            o1.customer_id\n          , o1.first_order_id\n          , o1.first_order_date\n        from (\n          SELECT\n              o.customer_id\n            , FIRST_VALUE(o.id) OVER (PARTITION BY o.customer_id ORDER BY o.created_at rows between unbounded preceding and CURRENT ROW) as first_order_id\n            --, LAST_VALUE(o.id) OVER (PARTITION BY o.customer_id ORDER BY o.created_at rows between unbounded preceding and CURRENT ROW) as last_order_id\n            , FIRST_VALUE(o.created_at) OVER (PARTITION BY o.customer_id ORDER BY o.created_at rows between unbounded preceding and CURRENT ROW) as first_order_date\n            --, LAST_VALUE(o.created_at) OVER (PARTITION BY o.customer_id ORDER BY o.created_at rows between unbounded preceding and CURRENT ROW)  as last_order_date\n            , row_number() OVER (PARTITION BY o.customer_id ORDER BY o.created_at desc) as rnk\n          FROM stg.orders o\n            inner join dm_delta ddd\n              on ddd.customer_id = o.customer_id\n        )  o1\n        where 1=1\n          and o1.rnk =1\n  ) ocs\n    on dd.customer_id = ocs.customer_id\n  left outer join (\n        select\n            s1.customer_id\n          , s1.first_subscription_start_date\n          , s1.curr_subscription_start_date\n        from (\n          SELECT\n              s.customer_id\n            , FIRST_VALUE(s.start_date_time) OVER (PARTITION BY s.customer_id ORDER BY s.start_date_time rows between unbounded preceding and CURRENT ROW) as first_subscription_start_date\n            , LAST_VALUE(s.start_date_time) OVER (PARTITION BY s.customer_id ORDER BY s.start_date_time rows between unbounded preceding and CURRENT ROW)  as curr_subscription_start_date\n            , row_number() OVER (PARTITION BY s.customer_id ORDER BY s.start_date_time desc) as rnk\n          FROM stg.customer_subscriptions s\n            inner join dm_delta ddd\n              on ddd.customer_id = s.customer_id\n          --where s.customer_id = 5737548\n        )  s1\n        where 1=1\n          and s1.rnk =1\n  ) scs\n    on dd.customer_id = scs.customer_id\n  left outer join (\n      select\n        customer_id\n      from stg.test_customers\n      group by customer_id\n  ) tc\n  ON dd.customer_id = tc.customer_id\n  left outer join stg.customer_initial_plan cip\n    on i.customer_id = cip.customer_id\nwhere 1=1\n  and tc.customer_id is null\n;"
            }
        ],
        "transform.dmt.d_customer_360.sql": [
            {
                "skipped": true,
                "value": "CREATE TEMP TABLE dm_delta AS\nselect\n  customer_id\nfrom (\n\n  SELECT  c.customer_id\n    FROM dmt.d_customer c\n    LEFT JOIN dmt.d_customer_subscription cs\n      ON c.customer_id = cs.customer_id\n    LEFT JOIN stg.ps_plans pc\n      ON c.customer_id = pc.customer_id\n    LEFT JOIN stg.ps_scheduled_carts psc\n      ON c.customer_id = psc.customer_id\n    LEFT JOIN stg.ml_churn_scores mlc -- Teja_20190708\n      ON c.customer_id = mlc.customer_id\n  WHERE (\n           c.updated_at >= '<start_date>'::timestamp  -  interval '2 day'\n           OR cs.updated_at >= '<start_date>'::timestamp -  interval '2 day'\n           OR pc.dsc_processed_at >= '<start_date>'::timestamp -  interval '2 day'\n           OR psc.dsc_processed_at >= '<start_date>'::timestamp -  interval '2 day'\n           OR mlc.dw_load_date_time >= '<start_date>'::timestamp -  interval '2 day' -- Teja_20190708\n         )\n  group by 1\n\n  union\n\n  select\n      distinct i.customer_id\n  from stg.erp_invoices i\n    inner join stg.erp_invoice_items ii\n      on i.customer_id = ii.customer_id and i.id = ii.invoice_id\n    inner join dmt.d_product dp\n      --on ii.product_sku = dp.sku\n      on ii.product_id = dp.product_id\n    inner join (\n      select\n        p0.customer_id\n      from stg.ps_plans p0\n      group by\n        p0.customer_id\n    ) pc\n      on i.customer_id = pc.customer_id\n  where 1=1\n      and ii.product_sku ilike 'BN2%'\n      and i.order_attribution_attribution_type in ('standalonecart')\n      AND (\n            i.dsc_processed_at >= '<start_date>'::timestamp -  interval '2 day'\n            OR ii.dsc_processed_at >= '<start_date>'::timestamp -  interval '2 day'\n        )\n    group by 1\n\n    union\n\n  select\n    customer_id\n  from stg.ps_subscription_to_plan_conversion pc\n  where 1=1\n    and pc.dsc_processed_at >= '<start_date>'::timestamp -  interval '2 day'\n  group by\n    customer_id\n\n    union\n\n  select\n    customer_id\n  from stg.customer_sources cs\n  where 1=1\n    AND source = 'start_plan'\n    AND (cs.dsc_processed_at >= '<start_date>' :: TIMESTAMP - INTERVAL '2 day'\n         OR cs.updated_at >= '<start_date>' :: TIMESTAMP - INTERVAL '2 day'\n        )\n  group by\n    customer_id\n\n      union\n\n  select customer_id\n    from stg.customer_cohort_members\n    where customer_cohort_id = 104\n    and updated_at >= '<start_date>'::timestamp  -  interval '2 day'\n    group by customer_id\n\n) t\norder by customer_id\n;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- 20 sec\n\n-- select count(*), count(customer_id) from dm_delta\n\n-- select count(*), count(customer_id)  from stg.customer_initial_plan\n\ndelete from stg.customer_initial_plan\nusing dm_delta\nwhere stg.customer_initial_plan.customer_id = dm_delta.customer_id\n;"
            },
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- 5 sec\n\nINSERT INTO stg.customer_initial_plan\nselect\n      p.customer_id\n  -- funnel order if Funnel Customer otherwise First Scheduled Cart Order\n    , case when cip0.customer_id is null then csch.order_id else cip0.order_id end as order_id\n    , case when cip0.customer_id is null then csch.order_created_at else cip0.order_created_at end as order_created_at\n  --// first scheduled cart order of first plan -- migrated customers\n\n    , p.plan_created_at::timestamp as plan_start_at\n    , case when lower(p.plan_state) in ('active', 'suspended','rebilling') then '2100-01-01'::timestamp else p.plan_updated_at::timestamp end as plan_end_at\n  -- first scheduled cart order of first plan -- migrated customers\n    , case when cip0.customer_id is null then csch.order_created_date else cip0.order_created_date end as order_created_date\n  --// first scheduled cart order of first plan -- migrated customers\n    , date_trunc('day', p.plan_created_at::timestamp) as plan_start_date\n    , case when lower(p.plan_state) in ('active', 'suspended','rebilling') then '2100-01-01'::timestamp else date_trunc('day', p.plan_updated_at::timestamp) end as plan_end_date\n\n\n    , case when cip0.customer_id is null then csch.order_creation_reason else cip0.order_creation_reason end as order_creation_reason\n    , case when cip0.customer_id is null then csch.order_creation_source else cip0.order_creation_source end as order_creation_source\n\n    , case when cip0.customer_id is null then NVL(pi.product_sku,'N/A') else cip0.product_sku end as product_sku\n    , case when cip0.customer_id is null then dp.name else cip0.product_name end as product_name\n\n    , case when cip0.customer_id is null then csch.order_attribution_attribution_type else cip0.order_attribution_attribution_type end as order_attribution_attribution_type\n\n    , p.plan_id as plan_id\n    , p.shop_id\n    , p.plan_state\n    , p.plan_frequency\n\n    , p.plan_bills_at\n\n    , pc.plan_conversion_source\n    , pc.plan_selection_decision\n    , case\n        when cip0.customer_id is not null and pc.customer_id is not null then 'Funnel/Migrated'\n        when cip0.customer_id is null and pc.customer_id is not null then 'Migrated'\n        when cip0.customer_id is not null and pc.customer_id is null then 'Funnel'\n        else 'N/A'\n      end as plan_acquisition_type\n    , NVL(pi.plan_items, 0) as plan_items\n    , cip0.funnel_order_items\n    -- , pi.quantity\n    -- , pi.base_unit_price\n    -- , pi.unit_price\n    -- , pi.total_discount\n    -- , pi.total_price\n    -- , pi.product_id\n    -- , pi.product_nature\n    -- , pi.product_type\n    -- , pi.product_bundle_id\n    , NULL as plan_funnel_type -- TODO: single/multi core funnel; add from customer_sources\n    , getdate() as dw_load_date_time\n    , cip0.initial_plan_funnel_product_list\n    , cip0.initial_plan_funnel_sku_list\nfrom (\n      -- initial plan of selected customer\n    select\n        p1.plan_id\n      , p1.shop_id\n      , p1.customer_id\n      , p1.plan_state\n      , p1.plan_frequency\n      , p1.plan_bills_at\n      , p1.plan_created_at\n      , p1.plan_updated_at\n    from (\n      select\n          p0.id as plan_id\n        , p0.shop_id\n        , p0.customer_id\n        , p0.plan_state\n        , p0.plan_frequency\n        , p0.plan_bills_at\n        , p0.plan_created_at::timestamp\n        , p0.plan_updated_at::timestamp\n        , row_number() over(partition by p0.customer_id order by p0.plan_created_at,p0.id) rnk\n      from stg.ps_plans p0\n       inner join dm_delta dd\n         on p0.customer_id = dd.customer_id\n         ) p1\n    where p1.rnk= 1\n  ) p\n  left outer join (\n      --  initial item of the plan - not the funnel sku\n      -- plan items may be empty if all items removed - even if plan is active - hence outer join\n      select\n          pi1.plan_id\n        , pi1.customer_id\n        , pi1.product_sku\n        , pi1.product_id\n        , pi1.plan_items\n        , pi1.total_price\n      from (\n        select\n            pi0.plan_id\n          , pi0.customer_id\n          , pi0.product_sku\n          , pi0.product_id\n          , row_number() over(partition by pi0.plan_id, pi0.customer_id order by pi0.rails_site_processed_at) rnk\n          , sum(case when pi0.removed then 0 else 1 end) over(partition by pi0.plan_id, pi0.customer_id) plan_items\n          , sum(case when pi0.removed then 0 else pi0.total_price::numeric(37,15)  end) over(partition by pi0.plan_id, pi0.customer_id) total_price\n        from stg.ps_plan_items pi0\n        where 1=1\n      )pi1\n      where 1=1\n      and pi1.rnk = 1\n             ) pi\n    on p.customer_id = pi.customer_id and p.plan_id = pi.plan_id\n  left outer join dmt.d_product dp\n    --on pi.product_sku = dp.sku\n    on pi.product_id = dp.product_id\n  left outer join stg.ps_subscription_to_plan_conversion pc\n    on p.customer_id = pc.customer_id and p.plan_id = pc.plan_id\n  left outer join (\n    --- first scheduled cart order within the plan\n    -- need it to find order id of migrated customers\n    -- only 1 record per customer, since we are looking at the first plan\n          -- order_attribution_attribution_id in subscription orders is subscription id\n          -- exclude subscription orders by looking at orders created after the first scheduled card creation date\n      select\n          i.customer_id\n        , i.order_id\n        , i.order_created_at\n        , date_trunc('day', i.order_created_at) as order_created_date\n        , i.order_creation_reason\n        , i.order_creation_source\n        , i.order_attribution_attribution_type\n        , sc.min_scheduled_cart_created_at\n      from stg.erp_invoices i\n        inner join (\n          select\n              sc0.customer_id\n            , min(sc0.id) as scheduled_cart_id\n            , min(sc0.scheduled_cart_created_at::timestamp) as min_scheduled_cart_created_at\n          from stg.ps_scheduled_carts sc0\n           inner join dm_delta dd\n             on sc0.customer_id = dd.customer_id\n          group by\n            sc0.customer_id\n        ) sc\n          on i.customer_id = sc.customer_id\n             and i.order_attribution_attribution_id = sc.scheduled_cart_id\n          -- order_attribution_attribution_id in subscription orders is subscription id\n          -- exclude subscription orders by looking at orders created after the first scheduled card creation date\n             and i.order_created_at >= sc.min_scheduled_cart_created_at\n  ) csch\n    on p.customer_id = csch.customer_id\n  left outer join (\n    -- only funnel orders with plans -- plans without order are excluded\n        select\n            cip.customer_id\n          , cip.order_id\n          , cip.order_created_at\n          , cip.order_created_date\n          , cip.order_creation_reason\n          , cip.order_creation_source\n          , cip.product_sku\n          , cip.product_name\n          , cip.order_attribution_attribution_type\n          , cip.plan_id\n          , cip.funnel_order_items\n          , initial_plan_funnel_product_list\n          , initial_plan_funnel_sku_list\n        from (\n\n        select\n            c.customer_id\n          , c.order_id\n          , c.order_created_at\n          , c.order_created_date\n          , c.order_creation_reason\n          , c.order_creation_source\n          , c.product_sku\n          , c.product_name\n          , c.order_attribution_attribution_type\n          , p.plan_id\n          , c.initial_plan_funnel_product_list\n          , c.initial_plan_funnel_sku_list\n          , count(*) over(partition by c.customer_id, c.order_id) as funnel_order_items\n          -- one product from the list of products\n          , row_number() over(partition by c.customer_id order by c.order_created_at, p.plan_id, c.product_sku_priority_rank) as order_rnk\n        from\n        (\n          --- initial / funnel / standalone cart  orders only\n          -- invoice_items needed since standalone cart is not stored in plan events, hence product can be taken only from invoice items\n          -- migrated customers handled separately - scheduled cart product used for migrated customers\n          -- TODO: Multi Core funnels may have multiple bundles, hence multiple rows, select just ONE\n            select\n                i.customer_id\n              , i.order_id\n              , i.order_created_at\n              -- plan created in 3 sec after the order - hence shifting order to get into the plan frames\n              , i.order_created_at + interval '40 seconds' as order_created_at_shifted\n              , date_trunc('day', i.order_created_at) as order_created_date\n              , i.order_creation_reason\n              , i.order_creation_source\n              , ii.product_id\n              , ii.product_sku\n              , pp.starter_kit_priority::int as product_sku_priority_rank\n              , dp.name as product_name\n              , i.order_attribution_attribution_type\n              , left(listagg( dp.name, ' | ') within group (order by dp.name) over (partition by i.customer_id,i.order_id),500) as initial_plan_funnel_product_list\n              , left(listagg( dp.sku, ' | ') within group (order by dp.sku) over (partition by i.customer_id,i.order_id),500) as initial_plan_funnel_sku_list\n            from stg.erp_invoices i\n              inner join stg.erp_invoice_items ii\n                on i.customer_id = ii.customer_id and i.id = ii.invoice_id\n              inner join dmt.d_product dp\n                --on ii.product_sku = dp.sku\n                on ii.product_id = dp.product_id\n              inner join map.starter_kit_product_priority pp\n                on ii.product_id = pp.product_id\n              inner join (\n                -- include only plan customers\n                select\n                  p0.customer_id\n                from stg.ps_plans p0\n                group by\n                  p0.customer_id\n              ) pc\n                on i.customer_id = pc.customer_id\n             inner join dm_delta dd\n               on i.customer_id = dd.customer_id\n            where 1=1\n                and i.order_attribution_attribution_type in ('standalonecart')\n                and ii.price >0\n            group by\n                i.customer_id\n              , i.order_id\n              , i.order_created_at\n              , i.order_created_at + interval '40 seconds', date_trunc('day', i.order_created_at)\n              , i.order_creation_reason, i.order_creation_source\n              , ii.product_id\n              , ii.product_sku\n              , pp.starter_kit_priority\n              , dp.name\n              , i.order_attribution_attribution_type\n              , dp.sku\n        ) c\n          inner join\n        (\n\n            select\n                p0.id as plan_id\n              , p0.customer_id\n              , p0.plan_created_at::timestamp as plan_start_at\n              , case when lower(p0.plan_state) in ('active', 'suspended') then '2100-01-01'::timestamp else p0.plan_updated_at::timestamp + interval '40 seconds'  end as plan_end_at\n              , row_number() over(partition by p0.customer_id order by p0.plan_created_at,p0.id) rnk\n            from stg.ps_plans p0\n             inner join dm_delta dd\n               on p0.customer_id = dd.customer_id\n\n        )  p\n          on c.customer_id = p.customer_id\n             and c.order_created_at_shifted between p.plan_start_at and p.plan_end_at\n\n        ) cip\n        where 1=1\n          and cip.order_rnk = 1\n  ) cip0\n    on p.customer_id = cip0.customer_id and p.plan_id = cip0.plan_id\nwhere 1=1\norder by 1\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.customer_status_ext.customer_id",
                        "dm_delta.customer_id"
                    ]
                },
                "tables": [
                    "stg.customer_status_ext"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.customer_status_ext\nusing dm_delta\nwhere stg.customer_status_ext.customer_id = dm_delta.customer_id\n;"
            },
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- 15 sec\n\nINSERT INTO stg.customer_status_ext\nWITH customer_subscription_curr as\n  (SELECT * FROM\n  (SELECT customer_id, customer_subscription_id, frequency,\n          start_date_time, end_date_time, next_bill_date_time,\n          subscription_plan, status_name,\n          first_customer_subscription_start_date_time, shop_id, reactivation,\n  row_number()\n              OVER (\n                PARTITION BY customer_id\n                ORDER BY created_at DESC ) AS rnk\n  FROM dmt.d_customer_subscription\n  ) z WHERE 1 = 1 AND rnk = 1),\n\nplans_curr as\n  (SELECT * FROM\n  (SELECT\n     id\n     , customer_id\n     , plan_frequency\n     , plan_activated_at\n     , plan_state\n     , shop_id\n     , plan_bills_at\n     , case when lower(plan_state) in ('active', 'suspended','rebilling') then '2100-01-01'::timestamp else plan_updated_at::timestamp end as plan_end_at, -- added new field on 8/15\n  row_number()\n            OVER (PARTITION BY customer_id\n                  ORDER BY plan_created_at desc) AS rnk\n  FROM stg.ps_plans) z WHERE 1 = 1 AND rnk = 1),\n\nscheduled_cart_curr as\n  (SELECT * FROM\n  (SELECT plan_id, first_value(id)\n            OVER (PARTITION BY customer_id\n                  ORDER BY scheduled_cart_created_at DESC\n        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as current_scheduled_cart_id,\n\n  row_number()\n            OVER (PARTITION BY customer_id\n                  ORDER BY scheduled_cart_created_at desc) AS rnk\n  FROM stg.ps_scheduled_carts) z WHERE 1 = 1 AND rnk = 1)\n\n\n  SELECT\n      c.customer_id\n    , cs.customer_subscription_id as current_customer_subscription_id\n    , cs.frequency as current_frequency\n    , cs.start_date_time     AS current_subscription_start_date\n    , cs.end_date_time       AS current_subscription_end_date\n    , cs.next_bill_date_time AS subscription_next_bill_date\n    , cs.subscription_plan AS current_subscription_plan\n    , cs.status_name AS current_subscription_status\n    , cs.first_customer_subscription_start_date_time\n    , cs.shop_id\n    , cs.reactivation\n    , pc.id as current_plan_id\n    , sc.current_scheduled_cart_id\n    , pc.plan_frequency as current_plan_frequency\n    , pf.plan_frequency_name as current_plan_frequency_name\n    , pc.plan_activated_at::TIMESTAMP AS current_plan_start_date\n\n    , pc.plan_state AS current_plan_state\n    , pc.shop_id as plan_shop_id\n    , pc.plan_bills_at::TIMESTAMP  AS current_plan_bills_at\n    , CASE WHEN cs.customer_subscription_id IS NOT NULL THEN 1\n           ELSE 0\n      END AS bm1_flag\n    , CASE WHEN pc.id IS NOT NULL THEN 1\n           ELSE 0\n      END AS bm2_flag\n    , getdate() as dw_load_date_time\n    , pc.plan_end_at::TIMESTAMP AS current_plan_end_date --- added new field on 8/15:: Ajay\n\n  FROM dm_delta dd\n  INNER JOIN dmt.d_customer c\n    on dd.customer_id = c.customer_id\n    LEFT JOIN customer_subscription_curr cs\n      ON c.customer_id = cs.customer_id\n    LEFT JOIN plans_curr pc\n      ON c.customer_id = pc.customer_id\n    LEFT JOIN scheduled_cart_curr sc\n       ON pc.id = sc.plan_id\n    LEFT JOIN stg.test_customers t\n      ON c.customer_id = t.customer_id\n    LEFT JOIN map.plan_frequency pf\n      ON pc.plan_frequency = pf.plan_frequency\n\n  WHERE 1=1\n        and t.customer_id IS NULL;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- 15 sec\n\n-- select count(*), count(customer_id)  from stg.customer_initial_plan\n-- 8,829\n\n-- select count(*), count(customer_id)  from stg.customer_status_ext\n-- 10,308,856\n\n-- select count(*), count(customer_id)  from dmt.d_customer_360;\n-- 10,308,856\n\n-- select * from dmt.d_customer_360 where bm2_flag =1 limit 100;\n\ndelete from dmt.d_customer_360\nusing dm_delta\nwhere dmt.d_customer_360.customer_id = dm_delta.customer_id\n;"
            },
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- 5 sec\n\nINSERT INTO dmt.d_customer_360\nselect\n    cext.customer_id\n  , c.email\n  , cext.current_customer_subscription_id\n  , cext.current_frequency as current_subscription_frequency\n  , cext.current_subscription_start_date\n  , cext.current_subscription_end_date\n  , cext.subscription_next_bill_date as subscription_next_bill_date_time\n  , cext.current_subscription_plan as current_subscription_plan\n  , cext.current_subscription_status as current_subscription_status\n  , cext.first_customer_subscription_start_date_time\n  , cext.subscription_shop_id as subscription_shop_id -- change\n  , cext.subscription_reactivation as subscription_reactivation -- change\n\n  , cext.current_plan_id as current_plan_id\n  , cext.current_scheduled_cart_id\n  , cext.current_plan_frequency as current_plan_frequency -- change Teja\n  , cext.current_plan_frequency_name as current_plan_frequency_name-- change Teja\n  , cext.current_plan_start_date as current_plan_start_date\n  , cext.current_plan_state as current_plan_state\n  , cext.plan_shop_id\n  , cext.current_plan_bills_at as current_plan_bills_at\n  , cext.bm1_flag\n  , cext.bm2_flag\n\n  , cip.order_id as initial_plan_order_id\n  , cip.order_created_at as initial_plan_order_created_at\n  , cip.plan_start_at as initial_plan_plan_start_at\n  , cip.plan_end_at as initial_plan_plan_end_at\n  , cip.product_sku as initial_plan_product_sku\n  , left(cip.product_name,128) as initial_plan_product_name\n  , cip.plan_id as initial_plan_id\n  , cip.plan_state as initial_plan_state\n  , cip.plan_frequency as initial_plan_frequency\n\n  -- bm 2 migration\n\t, cip.plan_conversion_source\n\t, cip.plan_selection_decision\n  , cip.funnel_order_items -- num of products in the funnel order\n  , cs.funnel as plan_funnel_type -- funnel/ funnel:multi\n  -- new logic added to distinguish single/multi core (https://dollarshaveclub.atlassian.net/browse/DATASYS-1446) to replace with above\n  --, case when cso.customer_id is null then null when cso.funnel = 'plan' then 'single_core' when cso.funnel = 'plan:multi' then 'multi_core' else cso.funnel end as plan_funnel_type\n  , getdate() as dw_load_date_time\n  , case when nsrq.customer_id is null then False else True end as nsrq\n  , c.created_at as customer_created_at\n  , cmc.cohort_id as plan_migration_cohort_id\n  , cip.initial_plan_funnel_product_list\n  , cext.current_plan_end_date as current_plan_end_date  -- added new field 8/15\n  , cip.initial_plan_funnel_sku_list --- added 02/27/2019\n  , c.obfuscated_id\n  , banned.customer_banned_at\n  , mlc.churn_score AS churn_score\n  , CASE WHEN ip.ip_address is not null\n       THEN 1 ELSE 0\n       END as internal_ip_flag ---- added new field Graeme 07/29/2019\n  , case when obfuscated_id > 0 and MOD(btrim(obfuscated_id)::BIGINT,100) in (0,1,2) then 1 else 0 end  as global_holdout     \nfrom stg.customer_status_ext cext\n  inner join dm_delta dd\n    on cext.customer_id = dd.customer_id\n  left outer join dmt.d_customer c\n    on cext.customer_id = c.customer_id\n  left outer join stg.customer_initial_plan cip\n    on cext.customer_id = cip.customer_id\n  LEFT JOIN map.dsc_internal_ip ip\n      ON c.current_sign_in_ip = ip.ip_address\n  left outer join (\nselect\n    o.customer_id\n  , o.order_created_at\n  ---, cs.customer_id\n  , cs.subscription_started_at\n  , cs.subscription_ended_at\nfrom (\n  select\n     o1.customer_id\n   , max(o1.created_at) as order_created_at\n  from stg.orders o1\n    inner join dm_delta dd\n      on o1.customer_id = dd.customer_id\n    left join stg.erp_invoices i\n      on i.order_id = o1.id\n  where 1=1\n    and o1.creation_reason = 14\n    and (i.order_attribution_attribution_type NOT IN ('standalonecart','scheduledcart') OR i.order_attribution_attribution_type is null)\n  group by\n    o1.customer_id\n) o\nleft outer join (\n    select\n          cs2.customer_id\n        , cs2.subscription_started_at\n        , cs2.subscription_ended_at\n    from (\n        select\n            cs1.customer_id\n          , cs1.start_date_time as subscription_started_at\n          , nvl(cs1.end_date_time, '2100-01-01 00:00:00'::timestamp)::timestamp as subscription_ended_at\n          , row_number() over(PARTITION BY  cs1.customer_id order by cs1.start_date_time desc) as rnk\n        from stg.customer_subscriptions cs1\n          inner join dm_delta dd\n            on cs1.customer_id = dd.customer_id\n    ) cs2\n    where 1=1\n      and cs2.rnk=1\n) cs\n  on o.customer_id = cs.customer_id\nwhere 1=1\n  and cs.customer_id is null OR o.order_created_at > cs.subscription_ended_at::timestamp -  interval '4 hours'\n) nsrq\n  on cext.customer_id = nsrq.customer_id\nleft outer join stg.customer_migration_cohort cmc\n  on cext.customer_id = cmc.customer_id\n-- new code added to distinguish single/multi core and populate plan_funnel_type field (https://dollarshaveclub.atlassian.net/browse/DATASYS-1446)\nleft join (\n\t\t\t\t\t\t\tselect * from (\n\t\t\t\t\t\t\t\t\t\tselect customer_id,plan_id,source,funnel,created_at,row_number() over(partition by customer_id order by created_at asc, plan_id asc) rn\n\t\t\t\t\t\t\t\t\t\tfrom stg.customer_sources\n\t\t\t\t\t\t\t\t\t\twhere source = 'start_plan'\n\t\t\t\t\t\t\t\t\t\tand created_at >= '2018-08-03' --correct data started coming from 2018-08-03\n\t\t\t\t\t\t\t) t where rn = 1\n\t\t\t\t) cs\non cip.customer_id = cs.customer_id\nand cip.plan_id = cs.plan_id\nleft join (\n        select ccm.customer_id, min(created_at) as customer_banned_at\n                from dm_delta dd\n                join stg.customer_cohort_members ccm\n                on ccm.customer_id = dd.customer_id\n                where ccm.customer_cohort_id = 104\n                group by ccm.customer_id\n        ) banned on banned.customer_id = cext.customer_id\nLEFT JOIN (\n        SELECT ml.customer_id, max(ml.churn_score) as churn_score\n        FROM dm_delta dd\n        INNER JOIN (Select customer_id\n                      , churn_score\n                      FROM (\n                            SELECT\n                                customer_id\n                              , churn_score\n                              , churn_score_created_at\n                              , row_number() over(partition by customer_id order by churn_score_created_at desc) rn\n                            FROM stg.ml_churn_scores\n                    ) where rn = 1 ) ml\n        ON dd.customer_id = ml.customer_id\n        group by 1\n  ) mlc ON cext.customer_id = mlc.customer_id  -- Teja_20190708\n;"
            }
        ],
        "load.stg.customer_subscription_cancellation_reasons.sql": [
            {
                "skipped": true,
                "value": "delete from dm.stg.customer_subscription_cancellation_reasons\nusing dm.extract.customer_subscription_cancellation_reasons\nwhere dm.stg.customer_subscription_cancellation_reasons.id = dm.extract.customer_subscription_cancellation_reasons.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_subscription_cancellation_reasons"
                    ],
                    "select": [
                        "id",
                        "customer_subscription_id",
                        "reason",
                        "created_at",
                        "updated_at",
                        "survey_option_id",
                        "parent_id",
                        "admin_id"
                    ]
                },
                "tables": [
                    "stg.customer_subscription_cancellation_reasons",
                    "extract.customer_subscription_cancellation_reasons"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.customer_subscription_cancellation_reasons\nselect\n    id \n\t,customer_subscription_id    \n\t,reason \n\t,created_at  \n\t,updated_at \n\t,survey_option_id \n\t,parent_id    \n\t,admin_id \nfrom extract.customer_subscription_cancellation_reasons\n;"
            }
        ],
        "transform.dmt.d_product.sql": [
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "stg.products.id"
                    ],
                    "where": [
                        "stg.products.updated_at"
                    ]
                },
                "tables": [
                    "dm_delta",
                    "stg.products"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "CREATE TEMP TABLE dm_delta AS\nSelect p.id as id\nfrom stg.products p\nwhere p.updated_at >= '<start_date>'::timestamp - interval '1 day'\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "dmt.d_product.product_id",
                        "dm_delta.id"
                    ]
                },
                "tables": [
                    "dmt.d_product"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from dmt.d_product\nusing dm_delta\nwhere dmt.d_product.product_id = dm_delta.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "d_product"
                    ],
                    "select": [
                        "p.id",
                        "p.sku",
                        "p.name",
                        "p.description",
                        "p.primary_image",
                        "p.created_at",
                        "p.updated_at",
                        "p.type",
                        "p.nature",
                        "p.status",
                        "p.internal_description",
                        "p.internal_name",
                        "p.secondary_image",
                        "p.taxable",
                        "p.brand_id"
                    ]
                },
                "tables": [
                    "dmt.d_product"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO dmt.d_product\nSelect\n    p.id as product_id\n\t, p.sku\n\t, p.name\n\t, p.description\n\t, p.primary_image\n\t, p.created_at\n\t, p.updated_at\n\t, p.type\n\t, p.nature\n\t, p.status\n\t, p.internal_description\n\t, p.internal_name\n\t, p.secondary_image\n\t, p.taxable\n\t, p.brand_id\n\t\n--derived columns\n\n\t, CASE WHEN b.id is null then 'Other'\n    \telse b.name END\n\t\tAS brand_id_name\n\n  , CASE WHEN type in (0,1) THEN 'Razor Subs'\n\t\tWHEN type in (2,3) THEN 'Razor Extras'\n\t\tWHEN type in (6,10,11,17,20,27) THEN 'Dr. Carvers'\n\t\tWHEN type = 9 and brand_id = 7 THEN 'Charlies'\n\t\tWHEN type = 9 and brand_id = 16 THEN 'Groundskeeper'\t\t\n\t\tWHEN type = 8 THEN 'Gift Card'\n\t\tWHEN type = 12 THEN 'Boogies'\n\t\tWHEN type = 18 THEN 'Big Cloud'\n\t\tWHEN type = 14 THEN 'Bundle'\n\t\tWHEN type = 19 THEN 'Wanderer'\n\t\tWHEN type = 22 THEN 'Traveler'\n\t\tWHEN type = 28 THEN 'Blueprint'\n\t\tWHEN type = 24 and brand_id = 8 THEN 'Trial Size - Big Cloud'\n\t\tWHEN type = 24 and brand_id = 6 THEN 'Trial Size - Boogies'\n\t\tWHEN type = 24 and brand_id = 7 THEN 'Trial Size - Charlies'\n\t\tWHEN type = 24 and brand_id = 4 THEN 'Trial Size - Dr. Carvers'\n\t\tWHEN type = 24 and brand_id = 9 THEN 'Trial Size - Wanderer'\n\t\tWhen type = 25 Then 'Space Butler'\n\t\tWHEN type = 26 THEN 'Superba'\n\t\telse 'Other' END\n\t\tAS class\n\n  , CASE WHEN type in (0,1,2,3) THEN 'Razor'\n\t\tWHEN type in (6,9,10,11,12,17,18,19,20,22,25,26,27,28) THEN 'Nrp'\n\t\tWHEN type in (8,13,16,21) THEN 'Gift'\n\t\tWHEN type in (14) THEN 'Bundle'\n\t\tWHEN type = 24 THEN 'Minis'\n\t\telse 'Other' END\n\t\tAS class_type\n\n  , CASE WHEN type in (0,1) and left(p.name,2) = 'Hu' THEN 'HT'   -- type in (0,1) means 'Razor Subs'\n\t\tWHEN type in (0,1) and left(p.name,2) = '4X' THEN '4x'\n\t\tWHEN type in (0,1) and left(p.name,2) = 'Ex' THEN 'Exec'\n\t\tELSE 'other' END\n\t\tAS name_umbrella\n\n  , CASE WHEN p.nature = 0 THEN 'Physical'\n\t\tWHEN p.nature = 1 THEN 'Composite'\n\t\tWHEN p.nature = 2 THEN 'Digital'\n\t\tWHEN p.nature = 3 THEN 'Virtual'\n\t\tWHEN p.nature = 4 THEN 'Process'\n\t\tWHEN p.nature = 5 THEN 'Product Bundle'\n\t\tWHEN p.nature = 6 THEN 'Kit'\n\t\telse 'unknown' END\n\t\tAS nature_name\n\n  , CASE WHEN left(p.sku,5) = 'M-4X-' THEN '4x'\n\t\tWHEN left(p.sku,5) = 'MRZ-4' THEN '4x'\n\t\tWHEN left(p.sku,8) = 'M-DTWIN-' THEN 'Twin'\n\t\tWHEN left(p.sku,5) = 'MRZ-2' THEN 'Twin'\n\t\tWHEN left(p.sku,7) = 'M-EXEC-' THEN 'Exec'\n\t\tWHEN left(p.sku,5) = 'MRZ-6' THEN 'Exec'\n\t\tELSE p.sku END\n\t\tAS razor_plan\n\n  , CASE WHEN p.sku = 'ESB-6Z-1' THEN 'Shave Butter 6oz'\n\t\tWHEN p.sku = 'ESB-3Z-1' THEN 'Shave Butter 3oz'\n\t\tWHEN p.sku = 'MPS-3Z-2' THEN 'Post Shave'\n\t\tWHEN p.sku = 'OWC-40C-3' THEN 'One Wipe Charlies'\n\t\tWHEN p.sku = 'OWC-40T-2' THEN 'One Wipe Charlies - Travel'\n\t\tWHEN p.sku = 'MRZ-2B-2' THEN 'Twin Blade'\n\t\tWHEN p.sku = 'MRZ-2H-3' THEN 'Twin Handle'\n\t\tWHEN p.sku = 'MRZ-4B-2' THEN '4x Blade'\n\t\tWHEN p.sku = 'MRZ-4B-1' THEN '4x Blade'\n\t\tWHEN p.sku = 'MRZ-4H-2' THEN '4x Handle'\n\t\tWHEN p.sku = 'MRZ-6B-3' THEN 'Exec Blade'\n\t\tWHEN p.sku = 'MRZ-6H-2' THEN 'Exec Handle'\n\t\tWHEN p.sku = 'MPS-SRM-2Z-1' THEN 'Repair Serum'\n\t\tWHEN p.sku = 'BGEL-3Z-CURRENT' THEN 'Boogies Gel 3oz'\n\t\tWHEN p.sku = 'BGEL-5Z-CURRENT' THEN 'Boogies Gel 5oz'\n\t\tWHEN p.sku = 'BFIB-2Z-CURRENT' THEN 'Boogies Fiber'\n\t\tWHEN p.sku = 'BCLAY-2Z-CURRENT' THEN 'Boogies Clay'\n\t\tWHEN p.sku = 'BTP-3Z-CURRENT' THEN 'Boogies Paste'\n\t\tWHEN p.sku = 'BCREM-3Z-CURRENT' THEN 'Boogies Cream'\n\t\tWHEN p.sku = 'MPS-SAMPLE-BUNDLE' THEN 'Post Shave Sample'\n\t\tWHEN p.sku = 'OWC-SAMPLE-BUNDLE' THEN 'OWC Sample'\n\t\tWHEN p.sku = 'MPS-SRM-SAMPLE-BUNDLE' THEN 'Repair Serum Sample'\n\t\tWHEN p.sku = 'ESB-SAMPLE-BUNDLE' THEN 'Shave Butter Sample'\n\t\telse 'Other' END\n\t\tAS sku_code\n\n  , CASE WHEN left(p.sku,5) = 'M-4X-' THEN 'MRZ-4B-X'\n\t\tWHEN left(p.sku,8) = 'M-DTWIN-' THEN 'MRZ-2B-X'\n\t\tWHEN left(p.sku,7) = 'M-EXEC-' THEN 'MRZ-6B-X'\n\t\tELSE p.sku END\n\t\tAS sku_razor_clean\n\n  , CASE WHEN p.status = 0 THEN 1 ELSE 0 END AS status_retention_science\n\n  , CASE WHEN p.status = 0 THEN 'Active'\n\t\tWHEN p.status = 1 THEN 'Pending Review'\n\t\tWHEN p.status = 2 THEN 'Inactive'\n\t\tWHEN p.status = 3 THEN 'Retired'\n\t\tWHEN p.status = 4  THEN 'Coming Soon'\n\t\telse 'Other' END\n\t\tAS status_name\n\n, case when pt.product_type_id is null then 'Other'\n    \telse pt.product_type_name end \n\t\tAS type_name\n, getdate()::timestamp as dw_load_date_time\n,case \n    when brand_id_name = 'Gifting' OR type_name in ('Gift Card','Gift Kit','Gift Plan','Gift Wrap') then 'Gift'\n    when type_name in ('Marketing','Gifting Overbox', 'Packaging','Other') or sku like 'PKG-%' then 'Other'\n    when type_name = 'Bundle' then 'Bundle' \n    when (brand_id_name in ('The 4X','The Humble Twin','The Executive','PQ') or type_name in ('Handle')) then 'Blades'\n    when brand_id_name = 'Dr. Carver'\tthen 'Shave'\n    when brand_id_name = 'Boogie' then 'Hair Style'\n    when brand_id_name in ('Charlie','Space Butler','Groundskeeper') and sku not like '%PKG%' then 'Deodorant and Wipes'\n    when brand_id_name = 'Big Cloud' then 'Skin Care'\n    when brand_id_name = 'Wanderer'\tthen 'Shower'\n    when brand_id_name in ('Goods','DSC Goods')\tthen 'DSC Goods'\n    when brand_id_name = 'Superba'\tthen 'Oral Care'\n    when brand_id_name = 'Blueprint' then 'Cologne'\n    --when brand_id_name = 'Gifting' OR type_name in ('Gift Card','Gift Kit','Gift Plan','Gift Wrap')  then 'Gift'\n    else 'Unknown'\t\nend as product_category\nfrom dm_delta dd\n    inner join stg.products p\n\t\t\ton dd.id = p.id\n    LEFT OUTER JOIN map.product_type pt\n      on p.type = pt.product_type_id\n    LEFT OUTER JOIN stg.brands b\n      on p.brand_id = b.id\t\t\n;"
            }
        ],
        "load.map.numbers.sql": [
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- TRUNCATE TABLE map.numbers;\n\nINSERT INTO map.numbers\nSELECT\n  row_number() over() as number\nFROM dmt.d_customer\nlimit 20000"
            }
        ],
        "transform.dmt.d_customer_plan.sql": [
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "stg.ps_plans.customer_id"
                    ],
                    "join": [
                        "stg.ps_plans.id",
                        "stg.plan_cancellations.plan_id"
                    ],
                    "where": [
                        "stg.ps_plans.plan_updated_at"
                    ]
                },
                "tables": [
                    "dm_delta",
                    "stg.ps_plans",
                    "stg.plan_cancellations"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "CREATE TEMP TABLE dm_delta AS\nSelect distinct pp.customer_id as customer_id\nfrom stg.ps_plans pp\nleft outer join stg.plan_cancellations pc\n    on pp.id = pc.plan_id\nwhere (\n       pp.plan_updated_at >= '<start_date>'::timestamp  -  interval '1 day'\n       OR pp.dsc_processed_at >= '<start_date>'::timestamp  -  interval '1 day'\n\t   OR pc.plan_updated_at >= '<start_date>'::timestamp -  interval '1 day'\n\t   OR pc.dsc_processed_at >= '<start_date>'::timestamp -  interval '1 day'\n       )\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "dmt.d_customer_plan.customer_id",
                        "dm_delta.customer_id"
                    ]
                },
                "tables": [
                    "dmt.d_customer_plan"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from dmt.d_customer_plan\nusing dm_delta\nwhere dmt.d_customer_plan.customer_id = dm_delta.customer_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "d_customer_plan"
                    ],
                    "select": [
                        "id",
                        "shop_id",
                        "customer_id",
                        "plan_state",
                        "plan_frequency",
                        "product_name",
                        "plan_bills_at",
                        "plan_activated_at",
                        "plan_created_at",
                        "plan_updated_at",
                        "plan_ended_at",
                        "plan_cancellation_id",
                        "plan_cancellation_reason",
                        "plan_cancellation_reason_message",
                        "plan_cancellation_reason_code",
                        "plan_cancellation_reason_coded",
                        "invoice_id"
                    ]
                },
                "tables": [
                    "dmt.d_customer_plan"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "Insert into dmt.d_customer_plan\n\nSelect\n\t  id as plan_id\n\t, shop_id\n\t, customer_id\n\t, plan_state\n\t, plan_frequency\n\t, product_name\n\t, plan_bills_at\n\t, plan_activated_at\n\t, plan_created_at\n\t, plan_updated_at\n\t, plan_ended_at\n\t, plan_cancellation_id\n\t, plan_cancellation_reason\n\t, plan_cancellation_reason_message\n\t, plan_cancellation_reason_code\n\t, plan_cancellation_reason_coded\n\t, invoice_id as first_invoice_id --Added by Mallik 07262018\n\t, Case when reactive > 1 then TRUE else FALSE end reactivation --Added by Mallik 07262018\n\t, getdate() as dw_loaddatetime\nFROM\n(\n\tSelect\n\t  p0.*\n\t, pc.plan_cancellation_reason\n\t, pc.plan_ended_at\n\t, pc.plan_cancellation_reason_message\n\t, pc.plan_cancellation_reason_code\n\t, pc.plan_cancellation_reason_coded\n\t, RANK()over (partition by p0.customer_id, p0.id order by fp.invoice_id ASC) as rnk\n\t, fp.product_name\n\t, fp.invoice_id\n\t, ROW_NUMBER() over (Partition by p0.customer_id order by p0.plan_created_at) as reactive\n\tFROM dm_delta dd\n\tINNER JOIN stg.ps_plans p0\n\t\tON dd.customer_id = p0.customer_id\n\tLEFT JOIN stg.plan_cancellations pc\n\t\tON p0.customer_id = pc.customer_id\n\t\tAND p0.plan_cancellation_id = pc.id\n\tLEFT JOIN\n\t(\n\t\t\tSelect invoice_id, customer_id, order_created_at, product_name from\n\t\t\t(\n\t\t\t\tSELECT f.invoice_id\n\t\t\t\t, f.customer_id\n\t\t\t\t, o.created_at as order_created_at\n\t\t\t\t, min(b.starter_kit_priority) min_rank\n\t\t\t\tFROM dm_delta dd\n\t\t\t\tINNER JOIN stg.erp_invoice_items f\n\t\t\t\t\tON dd.customer_id = f.customer_id\n\t\t\t\tINNER JOIN  stg.orders o\n\t\t\t\t\tON f.order_id = o.id\n\t\t\t\tINNER JOIN  stg.products p\n\t\t\t\t\tON f.product_id = p.id\n\t\t\t\tINNER JOIN map.starter_kit_product_priority b\n\t\t\t\tON f.product_sku = b.product_sku\n\n\t\t\t\tGROUP BY f.invoice_id\n\t\t\t\t, f.customer_id\n\t\t\t\t, o.created_at\n\t\t\t) sub\n\n\t\t\tINNER JOIN map.starter_kit_product_priority b\n\t\t\t\tON sub.min_rank = b.starter_kit_priority\n\t) fp\n\t\tON fp.customer_id = p0.customer_id\n\t\tAND fp.order_created_at BETWEEN (p0.plan_created_at::timestamp - interval '30 seconds') AND p0.plan_updated_at\n\tLEFT JOIN stg.test_customers  AS test_customers\n\t\tON p0.customer_id = test_customers.customer_id\n\twhere 1 = 1\n\tand test_customers.customer_id  IS NULL\n) A\n\nWHERE rnk = 1\norder by customer_id ASC\n;"
            }
        ],
        "load.map.shipment_status.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "shipment_status"
                    ],
                    "select": [
                        "t.status_id",
                        "t.status_code",
                        "t.status_name",
                        "t.push_status"
                    ]
                },
                "tables": [
                    "map.shipment_status"
                ],
                "subqueries": {
                    "t": "select 'Pending' as status_name, 'pending' as status_code, 'Not Pushed' as push_status, 0 as status_id union all select 'Processing' as status_name, 'processing' as status_code, 'Pushed' as push_status, 1 as status_id union all select 'Update Received' as status_name, 'update_received' as status_code, 'Pushed' as push_status, 2 as status_id union all select 'Shipped' as status_name, 'shipped' as status_code, 'Pushed' as push_status, 3 as status_id union all select 'Delivered' as status_name, 'delivered' as status_code, 'Pushed' as push_status, 4 as status_id union all select 'Undeliverable' as status_name, 'undeliverable' as status_code, 'Pushed' as push_status, 5 as status_id union all select 'Canceled' as status_name, 'canceled' as status_code, 'Cancelled' as push_status, 6 as status_id union all select 'Returned' as status_name, 'returned' as status_code, 'Pushed' as push_status, 7 as status_id union all select 'Lost' as status_name, 'lost' as status_code, 'Pushed' as push_status, 8 as status_id union all select 'Hold' as status_name, 'hold' as status_code, 'Pushed' as push_status, 9 as status_id union all select 'Enqueued For Fulfillment' as status_name, 'enqueued_for_fulfillment' as status_code, 'Not Pushed' as push_status, 10 as status_id union all select 'Recalled' as status_name, 'recalled' as status_code, 'Pushed' as push_status, 11 as status_id"
                },
                "skipped": false,
                "value": "INSERT INTO map.shipment_status\nselect\n    t.status_id\n  , t.status_code\n  , t.status_name\n  , t.push_status\n  , getdate() as dw_load_date_time\nfrom (\n  select 'Pending' as status_name, 'pending' as status_code, 'Not Pushed' as push_status, 0 as status_id union all\n  select 'Processing' as status_name, 'processing' as status_code, 'Pushed' as push_status,  1 as status_id union all\n  select 'Update Received' as status_name,'update_received' as status_code, 'Pushed' as push_status,  2 as status_id union all\n  select 'Shipped' as status_name, 'shipped' as status_code, 'Pushed' as push_status,  3 as status_id union all\n  select 'Delivered' as status_name, 'delivered' as status_code,  'Pushed' as push_status,  4 as status_id union all\n  select 'Undeliverable' as status_name, 'undeliverable' as status_code, 'Pushed' as push_status,  5 as status_id union all\n  select 'Canceled' as status_name, 'canceled' as status_code, 'Cancelled' as push_status,  6 as status_id union all\n  select 'Returned' as status_name,'returned' as status_code, 'Pushed' as push_status,  7 as status_id union all\n  select 'Lost' as status_name, 'lost' as status_code, 'Pushed' as push_status,  8 as status_id union all\n  select 'Hold' as status_name, 'hold' as status_code, 'Pushed' as push_status,  9 as status_id union all\n  select 'Enqueued For Fulfillment' as status_name, 'enqueued_for_fulfillment' as status_code, 'Not Pushed' as push_status,  10 as status_id union all\n  select 'Recalled' as status_name, 'recalled' as status_code, 'Pushed' as push_status,  11 as status_id\n) t\n;"
            }
        ],
        "transform.dmt.d_bundle_discounted_value.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "d_bundle_discounted_value"
                    ],
                    "select": [
                        "bdv.bundle_product_id"
                    ]
                },
                "tables": [
                    "stg.d_bundle_discounted_value"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.d_bundle_discounted_value\nselect\n    bdv.bundle_product_id     -- PK1\n  , bdv.bundle_sku\n  , bdv.bundle_name\n  , bdv.bundle_type           -- PK2\n  , bdv.product_id            -- PK3\n  , bdv.product_sku\n  , bdv.product_name\n  , bdv.currency_id           -- PK4\n  , case when mcr.currency_id is null\n          then 'Other'\n          else mcr.currency\n    end AS currency\n  , bdv.price\n  , bdv.price_valid_starting\n  , bdv.price_valid_ending\n  , bdv.discounted_price\n  , bdv.quantity\n  , bdv.total_price\n  , bdv.total_discounted_price\n  , bdv.price_created_at\n  , bdv.price_updated_at\n  , getdate() as dw_load_date_time\nfrom (\nselect\n      po.id as bundle_product_id\n    , po.sku as bundle_sku\n    , po.name as bundle_name\n    , 'bundle_extras' as bundle_type\n    , p.id as product_id\n    , p.sku as product_sku\n    , p.name as product_name\n    , pp.currency_id\n    , pp.price as price\n    , pp.valid_starting as price_valid_starting\n    , pp.valid_ending as price_valid_ending\n    , v.discounted_value as discounted_price\n    , be.quantity as quantity\n    , be.quantity * pp.price as total_price\n    , be.quantity * v.discounted_value as total_discounted_price\n    , p.created_at as price_created_at\n    , p.updated_at as price_updated_at\nfrom stg.bundles b\n     join (\n          -- removing dups\n          select\n              be1.bundle_id\n            , be1.extra_id\n            , be1.quantity\n          from (\n          select\n              be0.bundle_id\n            , be0.extra_id\n            , be0.quantity\n            , row_number() OVER(PARTITION BY be0.bundle_id, be0.extra_id ORDER BY be0.quantity desc) rnk\n          from stg.bundle_extras as be0\n          ) be1\n          where 1=1\n            and be1.rnk = 1\n          ) be\n       on be.bundle_id = b.id\n     join stg.extras x\n       on be.extra_id = x.id\n     join stg.products p\n       on x.product_id = p.id\n     join stg.products po\n       on b.product_id = po.id\n     join (select product_id,\n                 currency_id,\n                 price,\n                 valid_starting,\n                 valid_ending,\n                 row_number() over (partition by product_id, currency_id order by valid_starting desc) as price_rank\n          from stg.product_prices) pp\n       on p.id = pp.product_id and price_rank = 1\n          --and pp.currency_id = 1 -- !!!\n     left join (\n          -- removing dups\n          select\n              dbv1.bundle_id\n            , dbv1.bundle_product_id\n            , dbv1.product_id\n            , dbv1.discounted_value\n          from (\n          select\n              dbv0.bundle_id\n            , dbv0.bundle_product_id\n            , dbv0.product_id\n            , dbv0.discounted_value\n            , row_number() OVER(PARTITION BY dbv0.bundle_id, dbv0.bundle_product_id, dbv0.product_id ORDER BY dbv0.discounted_value desc) rnk\n          from stg.discounted_bundle_values as dbv0\n          where 1=1\n          ) dbv1\n          where 1=1\n            and dbv1.rnk = 1\n               ) v\n        on b.id = v.bundle_id and p.id = v.product_id\nwhere 1=1\n\nunion all\n\nselect\n      po.id as bundle_product_id\n    , po.sku as bundle_sku\n    , po.name as bundle_name\n    , 'bundle_subscriptions' as bundle_type\n    , p.id as product_id\n    , p.sku as product_sku\n    , p.name as product_name\n    , pp.currency_id\n    , pp.price as retail_price\n    , pp.valid_starting as price_valid_starting\n    , pp.valid_ending as price_valid_ending\n    , v.discounted_value as discounted_price\n    , bs.quantity as product_quantity\n    , bs.quantity * pp.price as total_price\n    , bs.quantity * v.discounted_value as total_discounted_price\n    , p.created_at as price_created_at\n    , p.updated_at as price_updated_at\nfrom stg.bundles b\n     join stg.bundle_subscriptions bs\n       on bs.bundle_id = b.id\n     join stg.products p\n       on bs.subscription_id = p.id\n     join stg.products po\n       on b.product_id = po.id\n    join (select product_id,\n                 currency_id,\n                 price,\n                 valid_starting,\n                 valid_ending,\n                 row_number() over (partition by product_id, currency_id order by valid_starting desc) as price_rank\n          from stg.product_prices) pp\n       on p.id = pp.product_id and price_rank = 1\n     left join (\n          -- removing dups\n          select\n              dbv1.bundle_id\n            , dbv1.bundle_product_id\n            , dbv1.product_id\n            , dbv1.discounted_value\n          from (\n          select\n              dbv0.bundle_id\n            , dbv0.bundle_product_id\n            , dbv0.product_id\n            , dbv0.discounted_value\n            , row_number() OVER(PARTITION BY dbv0.bundle_id, dbv0.bundle_product_id, dbv0.product_id ORDER BY dbv0.discounted_value desc) rnk\n          from stg.discounted_bundle_values as dbv0\n          where 1=1\n          ) dbv1\n          where 1=1\n            and dbv1.rnk = 1\n               ) v\n        on b.id = v.bundle_id and p.id = v.product_id\nwhere 1=1\n) bdv\n  left outer join map.currency mcr\n    on bdv.currency_id = mcr.currency_id\nwhere 1=1\n--and bdv.bundle_product_id = 1169\norder by 1, 5, 8;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [
                    "dmt.d_bundle_discounted_value"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from dmt.d_bundle_discounted_value;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "d_bundle_discounted_value"
                    ],
                    "select": [
                        "*"
                    ]
                },
                "tables": [
                    "dmt.d_bundle_discounted_value",
                    "stg.d_bundle_discounted_value"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into dmt.d_bundle_discounted_value\nselect * from stg.d_bundle_discounted_value;"
            }
        ],
        "extract.dsc_prod.customer_attributes.sql": [],
        "transform.dmt.f_gift.sql": [
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "stg.erp_gifts.id"
                    ],
                    "where": [
                        "stg.erp_gifts.dsc_processed_at"
                    ]
                },
                "tables": [
                    "dm_delta",
                    "stg.erp_gifts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "CREATE TEMP TABLE dm_delta AS\nSelect g.id as gift_id\nfrom stg.erp_gifts g\nwhere g.dsc_processed_at >= '<start_date>'::timestamp - interval '1 day'\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "dmt.f_gift.gift_id",
                        "dm_delta.gift_id"
                    ]
                },
                "tables": [
                    "dmt.f_gift"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from dmt.f_gift\nusing dm_delta\nwhere dmt.f_gift.gift_id = dm_delta.gift_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "f_gift"
                    ],
                    "select": [
                        "id",
                        "invoice_id",
                        "order_id",
                        "amount",
                        "balance",
                        "gifter_customer_id",
                        "recipient_customer_id",
                        "purchased_bundle_product_id",
                        "purchased_bundle_product_sku",
                        "gift_wrap_product_id",
                        "gift_wrap_product_sku",
                        "first_email_delivery_date_time",
                        "created_at",
                        "dsc_processed_at",
                        "message",
                        "shipping_address_id",
                        "recipient_subscription_id",
                        "recipient_subscription_type_id",
                        "recipient_subscription_product_id",
                        "recipient_subscription_product_sku",
                        "recipient_subscription_bundle_id",
                        "first_shipping_address_id"
                    ],
                    "join": [
                        "dm_delta.gift_id",
                        "stg.erp_gifts.id"
                    ],
                    "where": [
                        "stg.erp_gifts.created_at"
                    ]
                },
                "tables": [
                    "dmt.f_gift",
                    "dm_delta",
                    "stg.erp_gifts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO dmt.f_gift\nSelect\n     id as gift_id\n    ,invoice_id\n    ,order_id\n    ,amount\n    ,balance\n    ,gifter_customer_id\n    ,recipient_customer_id\n    ,purchased_bundle_product_id\n    ,purchased_bundle_product_sku\n    ,gift_wrap_product_id\n    ,gift_wrap_product_sku\n    ,first_email_delivery_date_time\n    ,created_at\n    ,dsc_processed_at\n    ,message \n\t  ,shipping_address_id \n\t  ,recipient_subscription_id \n\t  ,recipient_subscription_type_id \n\t  ,recipient_subscription_product_id \n\t  ,recipient_subscription_product_sku \n\t  ,recipient_subscription_bundle_id \n\t  ,first_shipping_address_id  \n\t\t,case when first_shipping_address_id != shipping_address_id then TRUE else FALSE end as different_first_shipment_address\n  ,getdate() \nfrom dm_delta dd\n    inner join stg.erp_gifts g\n      on dd.gift_id = g.id\nwhere g.created_at >= '2018-02-01'\t      \n;"
            }
        ],
        "housekeeping.dmt.vacuum.sql": [],
        "load.map.order_creation_reason.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "order_creation_reason"
                    ],
                    "select": [
                        "t.reason_id",
                        "t.reason_name"
                    ]
                },
                "tables": [
                    "map.order_creation_reason"
                ],
                "subqueries": {
                    "t": "select 'Unknown' as reason_name, 0 as reason_id union all select 'SignUp' as reason_name, 1 as reason_id union all select 'Renewal' as reason_name, 2 as reason_id union all select 'One Off' as reason_name, 3 as reason_id union all select 'Manual' as reason_name, 4 as reason_id union all select 'Support Request' as reason_name, 5 as reason_id union all select 'Product Replacement' as reason_name, 6 as reason_id union all select 'Order Replacement' as reason_name, 7 as reason_id union all select 'Return Replacement' as reason_name, 8 as reason_id union all select 'Custom Gift' as reason_name, 9 as reason_id union all select 'On Demand (ship now)' as reason_name, 10 as reason_id union all select 'Not Available' as reason_name, 11 as reason_id union all select 'Donation' as reason_name, 12 as reason_id union all select 'Policy Claim' as reason_name, 13 as reason_id union all select 'NSRQ' as reason_name, 14 as reason_id"
                },
                "skipped": false,
                "value": "INSERT INTO map.order_creation_reason\nselect\n    t.reason_id\n  , t.reason_name\n  , getdate() as dw_load_date_time\nfrom (\n  select 'Unknown' as reason_name, 0 as reason_id union all\n  select 'SignUp' as reason_name, 1 as reason_id union all\n  select 'Renewal' as reason_name, 2 as reason_id union all\n  select 'One Off' as reason_name, 3 as reason_id union all\n  select 'Manual' as reason_name, 4 as reason_id union all\n  select 'Support Request' as reason_name, 5 as reason_id union all\n  select 'Product Replacement' as reason_name, 6 as reason_id union all\n  select 'Order Replacement' as reason_name, 7 as reason_id union all\n  select 'Return Replacement' as reason_name, 8 as reason_id union all\n  select 'Custom Gift' as reason_name, 9 as reason_id union all\n  select 'On Demand (ship now)' as reason_name, 10 as reason_id union all\n  select 'Not Available' as reason_name, 11 as reason_id union all\n  select 'Donation' as reason_name, 12 as reason_id union all\n  select 'Policy Claim' as reason_name, 13 as reason_id union all\n  select 'NSRQ' as reason_name, 14 as reason_id\n) t\n;"
            }
        ],
        "load.stg.products.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.products.id",
                        "extract.products.id"
                    ]
                },
                "tables": [
                    "stg.products"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.products\nusing extract.products\nwhere stg.products.id = extract.products.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "products"
                    ],
                    "select": [
                        "id",
                        "sku",
                        "name",
                        "description",
                        "primary_image",
                        "created_at",
                        "updated_at"
                    ]
                },
                "tables": [
                    "stg.products",
                    "extract.products"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.products\nselect\n    id  \n\t,sku \n\t,name  \n\t,description  \n\t,primary_image \n\t,created_at   \n\t,updated_at  \n\t,type \n\t,nature \n\t,status\n\t,internal_description \n\t,internal_name  \n\t,secondary_image   \n\t,taxable  \n\t,brand_id\nfrom extract.products\n;"
            }
        ],
        "load.stg.survey_options.sql": [
            {
                "skipped": true,
                "value": "delete from dm.stg.survey_options\nusing dm.extract.survey_options\nwhere dm.stg.survey_options.id = dm.extract.survey_options.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "survey_options"
                    ],
                    "select": [
                        "id",
                        "target",
                        "message",
                        "created_at",
                        "updated_at",
                        "is_custom",
                        "code"
                    ]
                },
                "tables": [
                    "dm.stg.survey_options",
                    "dm.extract.survey_options"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into dm.stg.survey_options\nselect\n    id \n\t,target    \n\t,message   \n\t,created_at  \n\t,updated_at  \n\t,is_custom \n\t,code \n\t,ordinality \n\t,is_internal\n\t,parent_id  \n\t,placeholder \nfrom dm.extract.survey_options\n;"
            }
        ],
        "transform.stg.derived_cheetah_email_purchases.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "send_date"
                    ]
                },
                "tables": [
                    "stg.derived_cheetah_email_purchases"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.derived_cheetah_email_purchases\nWHERE send_date >= trunc(getdate()) - 8;"
            },
            {
                "skipped": true,
                "value": "/* INSERT FOR CLICK ATTRIBUTION TO CART */\nINSERT INTO stg.derived_cheetah_email_purchases (send_date, camp_id, product_id, days_from_send, customers_purchasing, quantity, revenue, type, attribution)\n\n\tSELECT\n\t\ttrunc(s.send_time)  AS send_date,\n\t\tcamp_id,\n\t\tsci.product_id,\n\t\tdatediff(day, s.send_time, sci.created_at) as days_from_send,\n\t\tcount(DISTINCT pl.customer_id) AS customers_purchasing,\n\t\tsum(sci.quantity)   AS quantity,\n\t\tsum(sci.quantity * pp.price)   AS revenue,\n\t\t'cart'  AS type,\n\t\t'click' as attribution\n\n\tFROM stg.cheetah_send_events s\n\t\tJOIN (\n\t\t\t\t\t SELECT\n\t\t\t\t\t\t msg_id,\n\t\t\t\t\t\t min(click_time) AS first_click\n\t\t\t\t\t FROM stg.cheetah_click_events\n\t\t\t\t\t GROUP BY 1\n\t\t\t\t ) ck\n\t\t\tON s.msg_id = ck.msg_id AND datediff(HOUR, s.send_time, ck.first_click) BETWEEN 0 AND 72\n\n\t\tJOIN stg.dsc_prod_plans pl\n\t\t\tON s.customer_id = pl.customer_id\n\t\t\t\t AND pl.activated_at < s.send_time\n\t\t\t\t AND (pl.ended_at > s.send_time OR pl.ended_at IS NULL)\n\n\t\tJOIN stg.ps_scheduled_carts sc\n\t\t\tON pl.id = sc.plan_id\n\n\t\tJOIN stg.dsc_prod_scheduled_cart_items sci\n\t\t\tON sc.id = sci.scheduled_cart_id\n\t\t\t\t AND datediff(HOUR, first_click, sci.created_at :: TIMESTAMP) BETWEEN -1 AND 24\n\n\t\tjoin stg.product_prices pp ON sci.product_id = pp.product_id AND pp.currency_id = 1 and  sci.created_at > nvl(pp.valid_starting,'1970-01-01'::timestamp) and sci.created_at < nvl(valid_ending, getdate())\n\n\tWHERE send_time >= trunc(getdate()) - 8\n\tGROUP BY 1, 2, 3, 4;"
            },
            {
                "skipped": true,
                "value": "/* INSERT FOR CLICK ATTRIBUTION FOR SHIP NOW */\nINSERT INTO stg.derived_cheetah_email_purchases (send_date, camp_id, product_id, days_from_send, customers_purchasing, quantity, revenue, type, attribution)\n\n\tSELECT\n\t\ttrunc(s.send_time) AS send_date,\n\t\tcamp_id,\n\t\tii.product_id,\n\t\tdatediff(day, s.send_time, sh.created_at) as days_from_send,\n\t\tcount(DISTINCT i.customer_id) AS customers_purchasing,\n\t\tsum(ii.quantity) AS quantity,\n\t\tsum(ii.price) AS revenue,\n\t\t'ship now' AS type,\n\t\t'click' as attribution\n\tFROM stg.cheetah_send_events s\n\t\tJOIN (\n\t\t\t\t\t SELECT\n\t\t\t\t\t\t msg_id,\n\t\t\t\t\t\t min(click_time) AS first_click\n\t\t\t\t\t FROM stg.cheetah_click_events\n\t\t\t\t\t GROUP BY 1\n\t\t\t\t ) ck\n\t\t\tON s.msg_id = ck.msg_id AND datediff(HOUR, s.send_time, ck.first_click) BETWEEN 0 AND 72\n\n\t\tJOIN stg.erp_invoices i\n\t\t\tON s.customer_id = i.customer_id\n\n\t\tJOIN stg.erp_shipments sh\n\t\t\tON i.order_id = sh.order_id\n\t\t\t\t AND datediff(HOUR, first_click, sh.created_at) BETWEEN -1 AND 24\n\n\t\tJOIN stg.orders o\n\t\t\tON i.order_id = o.id AND o.creation_reason != 2\n\n\t\tJOIN stg.erp_invoice_items ii\n\t\t\tON i.id = ii.invoice_id AND ii.price > 0\n\n\tWHERE send_time >= trunc(getdate()) - 8\n\tGROUP BY 1, 2, 3, 4;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "derived_cheetah_email_purchases",
                        "send_date",
                        "camp_id",
                        "product_id",
                        "days_from_send",
                        "customers_purchasing",
                        "quantity",
                        "revenue"
                    ],
                    "select": [
                        "stg.cheetah_send_events.send_time",
                        "camp_id",
                        "stg.dsc_prod_scheduled_cart_items.product_id"
                    ],
                    "join": [
                        "stg.cheetah_send_events.customer_id",
                        "stg.dsc_prod_plans.customer_id",
                        "stg.dsc_prod_plans.activated_at",
                        "stg.cheetah_send_events.send_time",
                        "stg.dsc_prod_plans.ended_at",
                        "stg.dsc_prod_plans.id",
                        "stg.ps_scheduled_carts.plan_id",
                        "stg.ps_scheduled_carts.id",
                        "stg.dsc_prod_scheduled_cart_items.scheduled_cart_id",
                        "stg.dsc_prod_scheduled_cart_items.product_id",
                        "stg.product_prices.product_id",
                        "stg.product_prices.currency_id",
                        "stg.dsc_prod_scheduled_cart_items.created_at",
                        "stg.product_prices.valid_starting"
                    ],
                    "where": [
                        "send_time"
                    ]
                },
                "tables": [
                    "stg.derived_cheetah_email_purchases",
                    "stg.cheetah_send_events",
                    "stg.dsc_prod_plans",
                    "stg.ps_scheduled_carts",
                    "stg.dsc_prod_scheduled_cart_items",
                    "stg.product_prices"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "/* INSERT FOR SEND ATTRIBUTION FOR ADD TO CART */\nINSERT INTO stg.derived_cheetah_email_purchases (send_date, camp_id, product_id, days_from_send, customers_purchasing, quantity, revenue, type, attribution)\n\n\tSELECT\n\t\ttrunc(s.send_time)  AS send_date,\n\t\tcamp_id,\n\t\tsci.product_id,\n\t\tdatediff(day, s.send_time, sci.created_at) as days_from_send,\n\t\tcount(DISTINCT pl.customer_id) AS customers_purchasing,\n\t\tsum(sci.quantity)   AS quantity,\n\t\tsum(sci.quantity * pp.price)   AS revenue,\n\t\t'cart'  AS type,\n\t\t'days_from_send' as attribution\n\n\tFROM stg.cheetah_send_events s\n\t\tJOIN stg.dsc_prod_plans pl\n\t\t\tON s.customer_id = pl.customer_id\n\t\t\t\t AND pl.activated_at < s.send_time\n\t\t\t\t AND (pl.ended_at > s.send_time OR pl.ended_at IS NULL)\n\n\t\tJOIN stg.ps_scheduled_carts sc\n\t\t\tON pl.id = sc.plan_id\n\n\t\tJOIN stg.dsc_prod_scheduled_cart_items sci\n\t\t\tON sc.id = sci.scheduled_cart_id\n\t\t\t\t AND datediff(day, s.send_time, sci.created_at :: TIMESTAMP) BETWEEN 0 and 7\n\n\t\tjoin stg.product_prices pp ON sci.product_id = pp.product_id AND pp.currency_id = 1 and  sci.created_at > nvl(pp.valid_starting,'1970-01-01'::timestamp) and sci.created_at < nvl(valid_ending, getdate())\n\n\tWHERE send_time >= trunc(getdate()) - 8\n\tGROUP BY 1, 2, 3, 4;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "derived_cheetah_email_purchases",
                        "send_date",
                        "camp_id",
                        "product_id",
                        "days_from_send",
                        "customers_purchasing",
                        "quantity",
                        "revenue"
                    ],
                    "select": [
                        "stg.cheetah_send_events.send_time",
                        "camp_id",
                        "stg.erp_invoice_items.product_id"
                    ],
                    "join": [
                        "stg.cheetah_send_events.customer_id",
                        "stg.erp_invoices.customer_id",
                        "stg.erp_invoices.order_id",
                        "stg.erp_shipments.order_id",
                        "stg.orders.id",
                        "stg.orders.creation_reason",
                        "stg.erp_invoices.id",
                        "stg.erp_invoice_items.invoice_id",
                        "stg.erp_invoice_items.price"
                    ],
                    "where": [
                        "send_time"
                    ]
                },
                "tables": [
                    "stg.derived_cheetah_email_purchases",
                    "stg.cheetah_send_events",
                    "stg.erp_invoices",
                    "stg.erp_shipments",
                    "stg.orders",
                    "stg.erp_invoice_items"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "/* INSERT FOR SEND ATTRIBUTION FOR SHIP NOW */\nINSERT INTO stg.derived_cheetah_email_purchases (send_date, camp_id, product_id, days_from_send, customers_purchasing, quantity, revenue, type, attribution)\n\n\tSELECT\n\t\ttrunc(s.send_time) AS send_date,\n\t\tcamp_id,\n\t\tii.product_id,\n\t\tdatediff(day, s.send_time, sh.created_at) as days_from_send,\n\t\tcount(DISTINCT i.customer_id) AS customers_purchasing,\n\t\tsum(ii.quantity) AS quantity,\n\t\tsum(ii.price) AS revenue,\n\t\t'ship now' AS type,\n\t\t'days_from_send' as attribution\n\tFROM stg.cheetah_send_events s\n\n\t\tJOIN stg.erp_invoices i\n\t\t\tON s.customer_id = i.customer_id\n\t\t\t\t AND datediff(day, s.send_time, i.created_at) BETWEEN 0 and 7\n\n\t\tJOIN stg.erp_shipments sh\n\t\t\tON i.order_id = sh.order_id\n\n\t\tJOIN stg.orders o\n\t\t\tON i.order_id = o.id AND o.creation_reason != 2\n\n\t\tJOIN stg.erp_invoice_items ii\n\t\t\tON i.id = ii.invoice_id AND ii.price > 0\n\n\tWHERE send_time >= trunc(getdate()) - 8\n\tGROUP BY 1, 2, 3, 4;"
            }
        ],
        "load.dmt.d_date.sql": [
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- https://forums.aws.amazon.com/thread.jspa?threadID=224094\n\n-- TRUNCATE TABLE dmt.d_date;\n\nINSERT INTO dmt.d_date\n    (\n      tk\n    , date\n    , day_of_week\n    , day_of_week_name\n    , day_of_month\n    , day_of_month_name\n    , day_of_year\n    , day_of_year_name\n    , week\n    , week_name\n    , week_end_date\n    , month\n    , month_name\n    , month_end_date\n    , quarter\n    , quarter_name\n    , half_year\n    , half_year_name\n    , year\n    , is_weekday\n    , is_weekend\n    , is_outlier\n    , created_batch_id\n    )\nSELECT bas.tk\n      ,bas.date\n      ,bas.day_of_week\n      ,CASE bas.day_of_week\n            WHEN 1 THEN 'Sunday'\n            WHEN 2 THEN 'Monday'\n            WHEN 3 THEN 'Tuesday'\n            WHEN 4 THEN 'Wednesday'\n            WHEN 5 THEN 'Thursday'\n            WHEN 6 THEN 'Friday'\n            WHEN 7 THEN 'Saturday'\n       END  as day_of_week_name\n      ,bas.day_of_month\n      ,CONVERT(VARCHAR(2),bas.day_of_month)\n       + CASE RIGHT(CONVERT(VARCHAR(2),bas.day_of_month),1)\n              WHEN 1 THEN CASE WHEN CONVERT(VARCHAR(2),bas.day_of_month) = '11' THEN 'th' ELSE 'st' END\n              WHEN 2 THEN CASE WHEN CONVERT(VARCHAR(2),bas.day_of_month) = '12' THEN 'th' ELSE 'nd' END\n              WHEN 3 THEN CASE WHEN CONVERT(VARCHAR(2),bas.day_of_month) = '13' THEN 'th' ELSE 'rd' END\n              WHEN 4 THEN 'th' WHEN 5 THEN 'th' WHEN 6 THEN 'th' WHEN 7 THEN 'th'\n              WHEN 8 THEN 'th' WHEN 9 THEN 'th' WHEN 0 THEN 'th' END as Day_of_month_name\n      ,bas.day_of_year\n      ,CONVERT(VARCHAR(3),bas.day_of_year)\n       + CASE RIGHT(CONVERT(VARCHAR(2),bas.day_of_year),1)\n              WHEN 1 THEN CASE WHEN RIGHT(CONVERT(VARCHAR(2),bas.day_of_year),2) = '11' THEN 'th' ELSE 'st' END\n              WHEN 2 THEN CASE WHEN RIGHT(CONVERT(VARCHAR(2),bas.day_of_year),2) = '12' THEN 'th' ELSE 'nd' END\n              WHEN 3 THEN CASE WHEN RIGHT(CONVERT(VARCHAR(2),bas.day_of_year),2) = '13' THEN 'th' ELSE 'rd' END\n              WHEN 4 THEN 'th' WHEN 5 THEN 'th' WHEN 6 THEN 'th' WHEN 7 THEN 'th'\n              WHEN 8 THEN 'th' WHEN 9 THEN 'th' WHEN 0 THEN 'th' END as Day_of_year_name\n      ,bas.week\n      ,CONVERT(VARCHAR(2),bas.week)\n       + CASE RIGHT(CONVERT(VARCHAR(2),bas.week),1)\n              WHEN 1 THEN CASE WHEN CONVERT(VARCHAR(2),bas.week) = '11' THEN 'th' ELSE 'st' END\n              WHEN 2 THEN CASE WHEN CONVERT(VARCHAR(2),bas.week) = '12' THEN 'th' ELSE 'nd' END\n              WHEN 3 THEN CASE WHEN CONVERT(VARCHAR(2),bas.week) = '13' THEN 'th' ELSE 'rd' END\n              WHEN 4 THEN 'th' WHEN 5 THEN 'th' WHEN 6 THEN 'th' WHEN 7 THEN 'th'\n              WHEN 8 THEN 'th' WHEN 9 THEN 'th' WHEN 0 THEN 'th' END as Week_name\n      ,DATEADD(day,7-(CONVERT(INT,bas.day_of_week)),bas.date) as Week_end_date\n      ,bas.month\n      ,CASE bas.month\n            WHEN  1 THEN 'January'\n            WHEN  2 THEN 'February'\n            WHEN  3 THEN 'March'\n            WHEN  4 THEN 'April'\n            WHEN  5 THEN 'May'\n            WHEN  6 THEN 'June'\n            WHEN  7 THEN 'July'\n            WHEN  8 THEN 'August'\n            WHEN  9 THEN 'September'\n            WHEN 10 THEN 'October'\n            WHEN 11 THEN 'November'\n            WHEN 12 THEN 'December'\n       END  as  month_name\n      ,DATEADD(day,-1,DATEADD(month,1,DATEADD(day,-(bas.day_of_month-1),bas.date))) as Month_end_date\n      ,bas.quarter\n      ,'Q' + CONVERT(VARCHAR(1),bas.quarter)  as quarter_name\n      ,bas.half_year\n      ,'H' + CONVERT(VARCHAR(1),bas.half_year) as half_year_name\n      ,bas.year\n      ,bas.is_weekday\n      ,bas.is_weekend\n      ,0 as is_outlier\n      ,0 as created_batch_id\n  FROM (SELECT CONVERT(INT,TO_CHAR(     DATEADD(day,num.number,'2001-01-01'),'YYYYMMDD'))                as tk\n              ,CAST(                    DATEADD(day,num.number,'2001-01-01') AS DATE)                    as \"date\"\n              ,DATE_PART(dow,           DATEADD(day,num.number,'2001-01-01'))+1                          as day_of_week\n              ,DATEPART(day,            DATEADD(day,num.number,'2001-01-01'))                            as day_of_month\n              ,DATEPART(doy,            DATEADD(day,num.number,'2001-01-01'))                            as day_of_year\n              ,DATEPART(week,           DATEADD(day,num.number,'2001-01-01'))                            as week\n              ,DATEPART(month,          DATEADD(day,num.number,'2001-01-01'))                            as \"month\"\n              ,DATEPART(quarter,        DATEADD(day,num.number,'2001-01-01'))                            as quarter\n              ,CASE WHEN DATEPART(qtr,  DATEADD(day,num.number,'2001-01-01')) < 3 THEN 1 ELSE 2 END      as half_year\n              ,DATEPART(year,           DATEADD(day,num.number,'2001-01-01'))                            as \"year\"\n              ,CASE WHEN DATEPART(dow,  DATEADD(day,num.number,'2001-01-01')) IN (0,6) THEN 0 ELSE 1 END as is_weekday\n              ,CASE WHEN DATEPART(dow,  DATEADD(day,num.number,'2001-01-01')) IN (0,6) THEN 1 ELSE 0 END as is_weekend\n          FROM (      SELECT one.number               FROM map.numbers one\n                UNION SELECT two.number + 1000 number FROM map.numbers two\n                UNION SELECT thr.number + 2000 number FROM map.numbers thr\n                UNION SELECT fou.number + 3000 number FROM map.numbers fou\n                UNION SELECT fiv.number + 4000 number FROM map.numbers fiv\n                UNION SELECT six.number + 5000 number FROM map.numbers six\n                UNION SELECT sev.number + 6000 number FROM map.numbers sev) num\n         UNION ALL\n        /* Default Start and End dates */\n        SELECT CONVERT(INT,19700101)                                                                         as tk\n              ,                         CAST('1970-01-01' AS DATE)                              as \"date\"\n              ,DATE_PART(dow,           CAST('1970-01-01' AS DATE))+1                           as day_of_weekeek\n              ,DATEPART(day,            CAST('1970-01-01' AS DATE))                             as day_of_monthonth\n              ,DATEPART(doy,            CAST('1970-01-01' AS DATE))                             as day_of_yearear\n              ,DATEPART(week,           CAST('1970-01-01' AS DATE))                             as week\n              ,DATEPART(month,          CAST('1970-01-01' AS DATE))                             as \"month\"\n              ,DATEPART(quarter,        CAST('1970-01-01' AS DATE))                             as quarter\n              ,CASE WHEN DATEPART(qtr,  CAST('1970-01-01' AS DATE)) < 3 THEN 1 ELSE 2 END       as half_yearr\n              ,DATEPART(year,           CAST('1970-01-01' AS DATE))                             as \"year\"\n              ,CASE WHEN DATEPART(dow,  CAST('1970-01-01' AS DATE)) IN (0,6) THEN 0 ELSE 1 END  as weekday\n              ,CASE WHEN DATEPART(dow,  CAST('1970-01-01' AS DATE)) IN (0,6) THEN 1 ELSE 0 END  as weekend\n         UNION ALL\n        SELECT CONVERT(INT,34991231)                                                                         as tk\n              ,                         CAST('3499-12-31' AS DATE)                              as \"date\"\n              ,DATE_PART(dow,           CAST('3499-12-31' AS DATE))+1                           as day_of_week\n              ,DATEPART(day,            CAST('3499-12-31' AS DATE))                             as day_of_month\n              ,DATEPART(doy,            CAST('3499-12-31' AS DATE))                             as day_of_year\n              ,DATEPART(week,           CAST('3499-12-31' AS DATE))                             as week\n              ,DATEPART(month,          CAST('3499-12-31' AS DATE))                             as \"month\"\n              ,DATEPART(quarter,        CAST('3499-12-31' AS DATE))                             as quarter\n              ,CASE WHEN DATEPART(qtr,  CAST('3499-12-31' AS DATE)) < 3 THEN 1 ELSE 2 END       as half_year\n              ,DATEPART(year,           CAST('3499-12-31' AS DATE))                             as \"year\"\n              ,CASE WHEN DATEPART(dow,  CAST('3499-12-31' AS DATE)) IN (0,6) THEN 0 ELSE 1 END  as is_weekday\n              ,CASE WHEN DATEPART(dow,  CAST('3499-12-31' AS DATE)) IN (0,6) THEN 1 ELSE 0 END  as is_weekend\n        )                       bas\n;"
            }
        ],
        "load.map.shipment_type.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "shipment_type"
                    ],
                    "select": [
                        "t.shipment_type_id",
                        "t.shipment_type_name"
                    ]
                },
                "tables": [
                    "map.shipment_type"
                ],
                "subqueries": {
                    "t": "select 0 as shipment_type_id, 'Normal' as shipment_type_name, getdate () as dw_loaddatetime union all select 1 as shipment_type_id, 'Ship Now' as shipment_type_name, getdate () as dw_loaddatetime union all select 2 as shipment_type_id, 'NSRQ' as shipment_type_name, getdate () as dw_loaddatetime"
                },
                "skipped": false,
                "value": "INSERT INTO map.shipment_type\nselect\n\t  t.shipment_type_id\n\t, t.shipment_type_name\n  , getdate()\nfrom (\n  select 0 as shipment_type_id, 'Normal' as  shipment_type_name, getdate() as dw_loaddatetime union all\n  select 1 as shipment_type_id, 'Ship Now' as  shipment_type_name, getdate() as dw_loaddatetime union all\n  select 2 as shipment_type_id, 'NSRQ' as  shipment_type_name, getdate() as dw_loaddatetime\n) t\n\n;"
            }
        ],
        "load.map.shipment_tenure.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "shipment_tenure"
                    ],
                    "select": [
                        "t.shipment_tenure_id",
                        "t.shipment_tenure_name"
                    ]
                },
                "tables": [
                    "map.shipment_tenure"
                ],
                "subqueries": {
                    "t": "select 0 as shipment_tenure_id, 'Initial' as shipment_tenure_name, getdate () as dw_loaddatetime union all select 1 as shipment_tenure_id, 'Recurring' as shipment_tenure_name, getdate () as dw_loaddatetime"
                },
                "skipped": false,
                "value": "INSERT INTO map.shipment_tenure\nselect\n\t  t.shipment_tenure_id\n\t, t.shipment_tenure_name\n  , getdate()\nfrom (\n  select 0 as shipment_tenure_id, 'Initial' as  shipment_tenure_name, getdate() as dw_loaddatetime union all\n  select 1 as shipment_tenure_id, 'Recurring' as  shipment_tenure_name, getdate() as dw_loaddatetime\n) t\n;"
            }
        ],
        "load.stg.customers.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.customers.id",
                        "extract.customers.id"
                    ]
                },
                "tables": [
                    "stg.customers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.customers\nusing extract.customers\nwhere stg.customers.id = extract.customers.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customers"
                    ],
                    "select": [
                        "*"
                    ]
                },
                "tables": [
                    "stg.customers",
                    "extract.customers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.customers\nselect\n  *\nfrom extract.customers\n;"
            }
        ],
        "transform.stg.derived_cheetah_email_summary.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "send_date"
                    ]
                },
                "tables": [
                    "stg.derived_cheetah_email_summary"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.derived_cheetah_email_summary\n\tWHERE send_date >= trunc(getdate()) - 10 ;"
            },
            {
                "skipped": true,
                "value": "INSERT INTO stg.derived_cheetah_email_summary\n\n\t\tSELECT\n\t\t\t\tcamp_id,\n\t\t\t  campaign_name,\n\t\t\t\ttrunc(s.send_time) as send_date,\n\t\t\t  count(1) as sends,\n\t\t\t\tcount(DISTINCT o.msg_id) AS unique_opens,\n\t\t\t  sum(ISNULL (o.total_opens, 0)) AS total_opens,\n\t\t\t\tcount(DISTINCT ck.msg_id) AS unique_clicks,\n\t\t\t  sum(ISNULL (ck.total_clicks, 0)) AS total_clicks\n\t\tFROM stg.cheetah_send_events s\n\n\t\t\tLEFT JOIN\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\t\t\tmsg_id,\n\t\t\t\t\t\t\t\t\tcount(1)        AS total_opens,\n\t\t\t\t\t\t\t\t\tmin(click_time) AS first_open\n\t\t\t\t\t\t\t\tFROM stg.cheetah_open_events\n\t\t\t\t\t\t\t\tGROUP BY 1\n\t\t\t\t\t\t\t) o\n\t\t\tON s.msg_id = o.msg_id\n\t\t\t\t AND datediff(DAY, s.send_time, o.first_open) BETWEEN 0 AND 7\n\n\t\t\tLEFT JOIN\n\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\t\t msg_id,\n\t\t\t\t\t\t\t\t count(1)        AS total_clicks,\n\t\t\t\t\t\t\t\t min(click_time) AS first_click\n\t\t\t\t\t\t\t FROM stg.cheetah_click_events\n\t\t\t\t\t\t\t GROUP BY 1\n\t\t\t\t\t\t\t\t\t) ck\n\t\t\tON s.msg_id = ck.msg_id AND datediff(DAY, s.send_time, ck.first_click) BETWEEN 0 AND 7\n\n\t\tWHERE send_date >= trunc(getdate()) -10\n\t\tGROUP BY 1, 2, 3\n\t\tORDER BY 1, 2, 3\n;"
            }
        ],
        "load.public.d_date.sql": [
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- https://forums.aws.amazon.com/thread.jspa?threadID=224094\n\n-- TRUNCATE TABLE public.d_date;\n\nINSERT INTO public.d_date\n    (\n      tk\n    , date\n    , day_of_week\n    , day_of_week_name\n    , day_of_month\n    , day_of_month_name\n    , day_of_year\n    , day_of_year_name\n    , week\n    , week_name\n    , week_end_date\n    , month\n    , month_name\n    , month_end_date\n    , quarter\n    , quarter_name\n    , half_year\n    , half_year_name\n    , year\n    , is_weekday\n    , is_weekend\n    , is_outlier\n    , created_batch_id\n    )\nSELECT bas.tk\n      ,bas.date\n      ,bas.day_of_week\n      ,CASE bas.day_of_week\n            WHEN 1 THEN 'Sunday'\n            WHEN 2 THEN 'Monday'\n            WHEN 3 THEN 'Tuesday'\n            WHEN 4 THEN 'Wednesday'\n            WHEN 5 THEN 'Thursday'\n            WHEN 6 THEN 'Friday'\n            WHEN 7 THEN 'Saturday'\n       END  as day_of_week_name\n      ,bas.day_of_month\n      ,CONVERT(VARCHAR(2),bas.day_of_month)\n       + CASE RIGHT(CONVERT(VARCHAR(2),bas.day_of_month),1)\n              WHEN 1 THEN CASE WHEN CONVERT(VARCHAR(2),bas.day_of_month) = '11' THEN 'th' ELSE 'st' END\n              WHEN 2 THEN CASE WHEN CONVERT(VARCHAR(2),bas.day_of_month) = '12' THEN 'th' ELSE 'nd' END\n              WHEN 3 THEN CASE WHEN CONVERT(VARCHAR(2),bas.day_of_month) = '13' THEN 'th' ELSE 'rd' END\n              WHEN 4 THEN 'th' WHEN 5 THEN 'th' WHEN 6 THEN 'th' WHEN 7 THEN 'th'\n              WHEN 8 THEN 'th' WHEN 9 THEN 'th' WHEN 0 THEN 'th' END as Day_of_month_name\n      ,bas.day_of_year\n      ,CONVERT(VARCHAR(3),bas.day_of_year)\n       + CASE RIGHT(CONVERT(VARCHAR(2),bas.day_of_year),1)\n              WHEN 1 THEN CASE WHEN RIGHT(CONVERT(VARCHAR(2),bas.day_of_year),2) = '11' THEN 'th' ELSE 'st' END\n              WHEN 2 THEN CASE WHEN RIGHT(CONVERT(VARCHAR(2),bas.day_of_year),2) = '12' THEN 'th' ELSE 'nd' END\n              WHEN 3 THEN CASE WHEN RIGHT(CONVERT(VARCHAR(2),bas.day_of_year),2) = '13' THEN 'th' ELSE 'rd' END\n              WHEN 4 THEN 'th' WHEN 5 THEN 'th' WHEN 6 THEN 'th' WHEN 7 THEN 'th'\n              WHEN 8 THEN 'th' WHEN 9 THEN 'th' WHEN 0 THEN 'th' END as Day_of_year_name\n      ,bas.week\n      ,CONVERT(VARCHAR(2),bas.week)\n       + CASE RIGHT(CONVERT(VARCHAR(2),bas.week),1)\n              WHEN 1 THEN CASE WHEN CONVERT(VARCHAR(2),bas.week) = '11' THEN 'th' ELSE 'st' END\n              WHEN 2 THEN CASE WHEN CONVERT(VARCHAR(2),bas.week) = '12' THEN 'th' ELSE 'nd' END\n              WHEN 3 THEN CASE WHEN CONVERT(VARCHAR(2),bas.week) = '13' THEN 'th' ELSE 'rd' END\n              WHEN 4 THEN 'th' WHEN 5 THEN 'th' WHEN 6 THEN 'th' WHEN 7 THEN 'th'\n              WHEN 8 THEN 'th' WHEN 9 THEN 'th' WHEN 0 THEN 'th' END as Week_name\n      ,DATEADD(day,7-(CONVERT(INT,bas.day_of_week)),bas.date) as Week_end_date\n      ,bas.month\n      ,CASE bas.month\n            WHEN  1 THEN 'January'\n            WHEN  2 THEN 'February'\n            WHEN  3 THEN 'March'\n            WHEN  4 THEN 'April'\n            WHEN  5 THEN 'May'\n            WHEN  6 THEN 'June'\n            WHEN  7 THEN 'July'\n            WHEN  8 THEN 'August'\n            WHEN  9 THEN 'September'\n            WHEN 10 THEN 'October'\n            WHEN 11 THEN 'November'\n            WHEN 12 THEN 'December'\n       END  as  month_name\n      ,DATEADD(day,-1,DATEADD(month,1,DATEADD(day,-(bas.day_of_month-1),bas.date))) as Month_end_date\n      ,bas.quarter\n      ,'Q' + CONVERT(VARCHAR(1),bas.quarter)  as quarter_name\n      ,bas.half_year\n      ,'H' + CONVERT(VARCHAR(1),bas.half_year) as half_year_name\n      ,bas.year\n      ,bas.is_weekday\n      ,bas.is_weekend\n      ,0 as is_outlier\n      ,0 as created_batch_id\n  FROM (SELECT CONVERT(INT,TO_CHAR(     DATEADD(day,num.number,'2001-01-01'),'YYYYMMDD'))                as tk\n              ,CAST(                    DATEADD(day,num.number,'2001-01-01') AS DATE)                    as \"date\"\n              ,DATE_PART(dow,           DATEADD(day,num.number,'2001-01-01'))+1                          as day_of_week\n              ,DATEPART(day,            DATEADD(day,num.number,'2001-01-01'))                            as day_of_month\n              ,DATEPART(doy,            DATEADD(day,num.number,'2001-01-01'))                            as day_of_year\n              ,DATEPART(week,           DATEADD(day,num.number,'2001-01-01'))                            as week\n              ,DATEPART(month,          DATEADD(day,num.number,'2001-01-01'))                            as \"month\"\n              ,DATEPART(quarter,        DATEADD(day,num.number,'2001-01-01'))                            as quarter\n              ,CASE WHEN DATEPART(qtr,  DATEADD(day,num.number,'2001-01-01')) < 3 THEN 1 ELSE 2 END      as half_year\n              ,DATEPART(year,           DATEADD(day,num.number,'2001-01-01'))                            as \"year\"\n              ,CASE WHEN DATEPART(dow,  DATEADD(day,num.number,'2001-01-01')) IN (0,6) THEN 0 ELSE 1 END as is_weekday\n              ,CASE WHEN DATEPART(dow,  DATEADD(day,num.number,'2001-01-01')) IN (0,6) THEN 1 ELSE 0 END as is_weekend\n          FROM (      SELECT one.number               FROM public.numbers one\n                UNION SELECT two.number + 1000 number FROM public.numbers two\n                UNION SELECT thr.number + 2000 number FROM public.numbers thr\n                UNION SELECT fou.number + 3000 number FROM public.numbers fou\n                UNION SELECT fiv.number + 4000 number FROM public.numbers fiv\n                UNION SELECT six.number + 5000 number FROM public.numbers six\n                UNION SELECT sev.number + 6000 number FROM public.numbers sev) num\n         UNION ALL\n        /* Default Start and End dates */\n        SELECT CONVERT(INT,19700101)                                                                         as tk\n              ,                         CAST('1970-01-01' AS DATE)                              as \"date\"\n              ,DATE_PART(dow,           CAST('1970-01-01' AS DATE))+1                           as day_of_weekeek\n              ,DATEPART(day,            CAST('1970-01-01' AS DATE))                             as day_of_monthonth\n              ,DATEPART(doy,            CAST('1970-01-01' AS DATE))                             as day_of_yearear\n              ,DATEPART(week,           CAST('1970-01-01' AS DATE))                             as week\n              ,DATEPART(month,          CAST('1970-01-01' AS DATE))                             as \"month\"\n              ,DATEPART(quarter,        CAST('1970-01-01' AS DATE))                             as quarter\n              ,CASE WHEN DATEPART(qtr,  CAST('1970-01-01' AS DATE)) < 3 THEN 1 ELSE 2 END       as half_yearr\n              ,DATEPART(year,           CAST('1970-01-01' AS DATE))                             as \"year\"\n              ,CASE WHEN DATEPART(dow,  CAST('1970-01-01' AS DATE)) IN (0,6) THEN 0 ELSE 1 END  as weekday\n              ,CASE WHEN DATEPART(dow,  CAST('1970-01-01' AS DATE)) IN (0,6) THEN 1 ELSE 0 END  as weekend\n         UNION ALL\n        SELECT CONVERT(INT,34991231)                                                                         as tk\n              ,                         CAST('3499-12-31' AS DATE)                              as \"date\"\n              ,DATE_PART(dow,           CAST('3499-12-31' AS DATE))+1                           as day_of_week\n              ,DATEPART(day,            CAST('3499-12-31' AS DATE))                             as day_of_month\n              ,DATEPART(doy,            CAST('3499-12-31' AS DATE))                             as day_of_year\n              ,DATEPART(week,           CAST('3499-12-31' AS DATE))                             as week\n              ,DATEPART(month,          CAST('3499-12-31' AS DATE))                             as \"month\"\n              ,DATEPART(quarter,        CAST('3499-12-31' AS DATE))                             as quarter\n              ,CASE WHEN DATEPART(qtr,  CAST('3499-12-31' AS DATE)) < 3 THEN 1 ELSE 2 END       as half_year\n              ,DATEPART(year,           CAST('3499-12-31' AS DATE))                             as \"year\"\n              ,CASE WHEN DATEPART(dow,  CAST('3499-12-31' AS DATE)) IN (0,6) THEN 0 ELSE 1 END  as is_weekday\n              ,CASE WHEN DATEPART(dow,  CAST('3499-12-31' AS DATE)) IN (0,6) THEN 1 ELSE 0 END  as is_weekend\n        )                       bas\n;"
            }
        ],
        "load.f_invoice.sql": [],
        "extract.dsc_prod.customer_phone_numbers.sql": [],
        "load.map.order_reason.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "order_reason"
                    ],
                    "select": [
                        "t.reason_id",
                        "t.reason_name"
                    ]
                },
                "tables": [
                    "map.order_reason"
                ],
                "subqueries": {
                    "t": "select 'Ship Now' as reason_name, 10 as reason_id union all select 'NSRQ' as reason_name, 14 as reason_id"
                },
                "skipped": false,
                "value": "INSERT INTO map.order_reason\nselect\n    t.reason_id\n  , t.reason_name\n  , getdate() as dw_load_date_time\nfrom (\n  select 'Ship Now' as reason_name, 10 as reason_id union all\n  select 'NSRQ' as reason_name, 14 as reason_id\n) t\n;"
            }
        ],
        "load.map.order_creation_source.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "order_creation_source"
                    ],
                    "select": [
                        "t.source_id",
                        "t.source_name"
                    ]
                },
                "tables": [
                    "map.order_creation_source"
                ],
                "subqueries": {
                    "t": "select 'Unknown' as source_name, 0 as source_id union all select 'System' as source_name, 1 as source_id union all select 'Customer' as source_name, 2 as source_id union all select 'MSA' as source_name, 3 as source_id union all select 'Fulfillment Monitor' as source_name, 4 as source_id"
                },
                "skipped": false,
                "value": "INSERT INTO map.order_creation_source\nselect\n    t.source_id\n  , t.source_name\n  , getdate() as dw_load_date_time\nfrom (\n    select 'Unknown' as source_name, 0 as source_id union all\n    select 'System' as source_name, 1 as source_id union all\n    select 'Customer' as source_name, 2 as source_id union all\n    select 'MSA' as source_name, 3 as source_id union all\n    select 'Fulfillment Monitor' as source_name, 4 as source_id\n) t\n;"
            }
        ],
        "transform.dmt.d_customer.sql": [
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "stg.customers.id"
                    ],
                    "join": [
                        "stg.customers.id",
                        "stg.customer_attributes.customer_id"
                    ],
                    "where": [
                        "stg.customers.updated_at"
                    ]
                },
                "tables": [
                    "dm_delta",
                    "stg.customers",
                    "stg.customer_attributes"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "CREATE TEMP TABLE dm_delta AS\nSelect c.id as customer_id\nfrom stg.customers c\n  left outer join stg.customer_attributes ca\n    on c.id = ca.customer_id\nwhere (c.updated_at >= '<start_date>'::timestamp -  interval '1 day'\n       OR ca.updated_at >= '<start_date>'::timestamp - interval '1 day'\n\t\t\t OR c.dsc_processed_at >= '<start_date>'::timestamp -  interval '1 day'\n\t\t\t )\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "dmt.d_customer.customer_id",
                        "dm_delta.customer_id"
                    ]
                },
                "tables": [
                    "dmt.d_customer"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from dmt.d_customer\nusing dm_delta\nwhere dmt.d_customer.customer_id = dm_delta.customer_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "d_customer"
                    ],
                    "select": [
                        "c.id",
                        "c.email",
                        "c.encrypted_password",
                        "c.reset_password_token",
                        "c.reset_password_sent_at",
                        "c.remember_created_at",
                        "c.sign_in_count",
                        "c.current_sign_in_at",
                        "c.last_sign_in_at",
                        "c.current_sign_in_ip",
                        "c.last_sign_in_ip",
                        "c.created_at",
                        "c.updated_at",
                        "c.first_name",
                        "c.last_name",
                        "c.location_id",
                        "c.zuora_account_id",
                        "c.referral_code",
                        "c.wallet_balance",
                        "c.provider",
                        "c.uid",
                        "c.gender",
                        "c.birthday",
                        "c.relationship_status",
                        "c.time_zone",
                        "c.audience_type",
                        "c.allow_resubscription",
                        "c.zuora_account_number",
                        "c.fb_token",
                        "c.customer_type",
                        "c.obfuscated_id",
                        "c.last_vip_date_time",
                        "c.rank",
                        "c.authentication_token",
                        "c.force_logout"
                    ]
                },
                "tables": [
                    "dmt.d_customer"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into dmt.d_customer\nselect\n   c.id as customer_id\n\t,left(c.email, 128) as email\n\t,left(c.encrypted_password, 128) as encrypted_password\n\t,left(c.reset_password_token, 128) as reset_password_token\n\t,c.reset_password_sent_at\n\t,c.remember_created_at\n\t,c.sign_in_count\n\t,c.current_sign_in_at\n\t,c.last_sign_in_at\n\t,c.current_sign_in_ip\n\t,c.last_sign_in_ip\n\t,c.created_at\n\t,c.updated_at\n\t,c.first_name\n\t,c.last_name\n\t,c.location_id\n\t,c.zuora_account_id\n\t,c.referral_code\n\t,c.wallet_balance\n\t,c.provider\n\t,c.uid\n\t,c.gender\n\t,c.birthday\n\t,c.relationship_status\n\t,c.time_zone\n\t,c.audience_type\n\t,c.allow_resubscription\n\t,c.zuora_account_number\n\t,c.fb_token\n\t,c.customer_type\n\t,c.obfuscated_id\n\t,c.last_vip_date_time\n\t,c.rank\n\t,c.authentication_token\n\t,c.force_logout\n  -- added from dsc_prod.addresses\n  , left(trim(both '' FROM regexp_replace(c.address_line_1, '[^ -~]', ' ')), 128) as address_line_1\n\t, left(trim(both '' FROM regexp_replace(c.address_line_2, '[^ -~]', ' ')), 128) as address_line_2\n\t,c.city\n\t,c.state\n\t,c.zip_code\n    -- added from dsc_prod.customer_attributes\n\t,ca.convertro_id\n\t,ca.initial_referrer\n\t,ca.twitter\n\t,ca.facebook\n\t,ca.cellphone_number\n\t,ca.last_user_agent\n\t,ca.fraud_score\n\t,ca.klout_score\n\t,ca.full_contact_status\n\t,ca.satisfaction_score\n\t,ca.browser_hash\n\t,ca.permanent_cookie\n\t,ca.last_login_request_headers\n\t,ca.failed_credit_card_attempt_count\n\t,ca.primary_referral_name\n\t,ca.secondary_referral_name\n\t,ca.proxy_score\n\t,ca.id as customer_attributes_id\n\t,ca.registered_in_shop_id\n\t,c.uuid as customer_uuid\n\t,c.dsc_processed_at\n\t,getdate() dw_load_datetime\n -- added from stg.erp_invoices\n--  ,\n--   CASE WHEN ei.attribution_type IS NULL\n--   THEN 'BM1_unidentified'\n--   WHEN ei.attribution_type = 'standalonecart' OR ei.attribution_type = 'scheduledcart'\n--   THEN 'BM2'\n--   WHEN ei.attribution_type = 'customersubscription' OR ei.attribution_type = 'customercart'\n--   THEN 'BM1'\n--   END  AS attribution_type\n    --, ei.attribution_type\n    FROM dm_delta dd\n        INNER JOIN stg.customers c\n        ON c.id = dd.customer_id\n        LEFT OUTER JOIN stg.customer_attributes ca\n        ON c.id = ca.customer_id\n    LEFT OUTER JOIN\n       (\n    SELECT\n      customer_id,\n      attribution_type\n      FROM\n        (\n          SELECT\n            customer_id,\n            last_value(order_attribution_attribution_type)\n              OVER (\n                PARTITION BY customer_id\n                ORDER BY created_at\n                ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) AS attribution_type,\n            row_number()\n              OVER (\n                PARTITION BY customer_id\n                ORDER BY created_at DESC ) AS rnk\n          FROM stg.erp_invoices\n        ) t\n        WHERE 1 = 1 AND t.rnk = 1\n      ) ei\n        ON c.id = ei.customer_id ;"
            }
        ],
        "extract.dsc_prod.customer_subscriptions.sql": [],
        "transform.stg.braze_optimove_email_sends.sql": [
            {
                "type": "CREATE",
                "columns": null,
                "tables": [
                    "dm_delta_optimove"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "CREATE TEMP TABLE dm_delta_optimove AS\n--Control and Test from Optimove data\nSELECT\n\tc.customer_id,\n\tc.customer_uuid AS customer_uuid,\n\ttg.braze_campaign_id,\n\ttg.email_actual_sent_time::Date AS email_actual_sent_time,  -- if join is on time\n\ttg.optimove_campaign_id\n\t--tg.send_id\nFROM stg.braze_optimove_customer_target_group AS tg\nJOIN dmt.d_customer AS c ON c.obfuscated_id = tg.obfuscated_customer_id\nWHERE 1 = 1\n\tAND tg.dw_load_date_time >= '<start_date>'::timestamp - interval '30 day'\n\t--AND tg.dw_load_date_time::date = '10/05/2020'\n    and tg.email_actual_sent_time < getdate()\n    and tg.email_actual_sent_time < (SELECT MAX(nvl(email_actual_sent_time, getdate()))::date - interval '1 day' FROM stg.braze_optimove_customer_target_group)\nGROUP BY 1,2,3,4,5\n\nUNION\n\n-- Braze Engagement -- Send Events data for Optimove Test\nSELECT\nA.customer_id,\nA.customer_uuid,\nA.braze_campaign_id,\nA.email_actual_sent_time::Date AS email_actual_sent_time, -- if join is on time\nopt.optimove_campaign_id\n--opt.send_id\nFROM\n(\n\tSELECT\n\t\tc.customer_id,\n\t\tc.obfuscated_id AS obfuscated_customer_id,\n\t\tse.external_user_id AS customer_uuid,\n\t\tse.campaign_id AS braze_campaign_id,\n\t\t(to_char(TIMESTAMP 'epoch' + se.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS'))::TIMESTAMP AS email_actual_sent_time\n\t\t--se.send_id\n\tFROM braze_spectrum.event_type_users_messages_email_send AS se\n\tJOIN dmt.d_customer AS c ON c.customer_uuid = se.external_user_id\n\tWHERE 1 = 1\n\t\t--AND ip_pool in ('content.dollarshaveclub.com', 'shop.dollarshaveclub.com') -- Optimove is US only so excluding intl and transactional emails\n\t\t--AND se.ip_pool not like '%transact%'\n\tGROUP BY 1,2,3,4,5 -- ,6\n)A\nJOIN stg.braze_optimove_customer_target_group as opt\n\tON A.obfuscated_customer_id = opt.obfuscated_customer_id\n\t\tAND A.braze_campaign_id = opt.braze_campaign_id\n\t\tAND A.email_actual_sent_time::date = opt.email_actual_sent_time::date\n\t\t--AND A.send_id = opt.send_id\nWHERE 1 = 1\n\tAND opt.dw_load_date_time >= '<start_date>'::timestamp - interval '30 day'\n\t--AND opt.dw_load_date_time::date = '10/05/2020'\n\tAND opt.email_actual_sent_time < getdate()\n    AND opt.email_actual_sent_time < (SELECT MAX(nvl(email_actual_sent_time, getdate()))::date - interval '1 day' FROM stg.braze_optimove_customer_target_group)\nGROUP BY 1,2,3,4,5 --,6\norder by 1,2,3,4,5 --,6\n;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- select * from dm_delta_optimove limit 10;\n-- select count(*) from dm_delta_optimove --6,911,341 -- 7275484-- 6913071\n-- select * from stg.braze_optimove_customer_target_group limit 10\n-- select count(*) from stg.braze_optimove_customer_target_group -- 615453\n-- select * FROM braze_spectrum.event_type_users_messages_email_send limit 10\n-- select count(*) from stg.braze_optimove_email_sends\n-- select * from stg.braze_optimove_email_sends limit 10\n\n--SELECT ip_pool, count(*) FROM braze_spectrum.event_type_users_messages_email_send GROUP BY 1\n\nDELETE FROM stg.braze_optimove_email_sends\nUSING dm_delta_optimove\nWHERE 1=1\n\tAND stg.braze_optimove_email_sends.email_source = 'optimove_braze'\n\tAND stg.braze_optimove_email_sends.customer_id = dm_delta_optimove.customer_id\n\tAND (stg.braze_optimove_email_sends.camp_id = dm_delta_optimove.braze_campaign_id\n\t\t\tOR stg.braze_optimove_email_sends.optimove_campaign_id = dm_delta_optimove.optimove_campaign_id) -- To delete control group using OR condition\n\tAND stg.braze_optimove_email_sends.send_time::date = dm_delta_optimove.email_actual_sent_time::date -- if join is on date\n\t--AND stg.braze_optimove_email_sends.send_id = dm_delta_optimove.send_id\n;"
            },
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- select count(1) from stg.braze_optimove_email_sends\n-- select * from stg.braze_optimove_email_sends limit 10\n\nINSERT INTO stg.braze_optimove_email_sends\n--Test Group\nSELECT\n'optimove_braze' AS email_source,\n1 AS email_sent_flag,\nnull::INTEGER as msg_id, -- currently its int for cheetah braze dispatch_id is varchar union notes going fwd\nA.braze_campaign_id as camp_id,\nA.campaign_name,\nA.customer_id,\nA.shop_name,\nA.send_time, -- Braze send time\nt1.target_group_id,\nt1.target_group_name,\nt1.optimove_campaign_id,\nt1.campaign_customer_group_type,\nt1.campaign_type,\nop.min_open_time,\nop.number_of_opens,\ncl.min_click_time,\ncl.number_of_clicks,\ngetdate()::timestamp AS dw_load_date_time,\nA.dispatch_id,\nA.message_variation_id,\nA.canvas_id,\nA.canvas_name,\nA.canvas_variation_id,\nA.canvas_variation_name,\nA.canvas_step_id,\nA.canvas_step_name,\nA.send_id,\nA.ip_pool\nFROM\n-- Braze Test Data set wrt delta table\n(\n\tSELECT\n\t\tc.customer_id,\n\t\tc.obfuscated_id AS obfuscated_customer_id,\n\t\tse.external_user_id AS customer_uuid,\n\t\tse.campaign_id as braze_campaign_id,\n\t\tse.campaign_name,\n\t\t(to_char(TIMESTAMP 'epoch' + se.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS'))::TIMESTAMP AS send_time,\n\t\tse.dispatch_id,\n\t\tse.message_variation_id,\n\t\tse.canvas_id,\n\t\tse.canvas_name,\n\t\tse.canvas_variation_id,\n\t\tse.canvas_variation_name,\n\t\tse.canvas_step_id,\n\t\tse.canvas_step_name,\n\t\tse.send_id,\n\t\tse.ip_pool,\n\t\tsh.shop_name\n\tFROM braze_spectrum.event_type_users_messages_email_send AS se\n\tJOIN dm_delta_optimove AS dd\n\t\tON se.external_user_id = dd.customer_uuid\n\t\tAND se.campaign_id = dd.braze_campaign_id\n\t  AND (to_char(TIMESTAMP 'epoch' + se.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS'))::date = dd.email_actual_sent_time::date -- if join is on time too\n\t\t-- AND se.send_id = dd.send_id\n\tJOIN dmt.d_customer AS c ON c.customer_uuid = se.external_user_id\n\tLEFT JOIN stg.customer_attributes ca on ca.customer_id = c.customer_id\n\tLEFT JOIN map.shop sh on sh.shop_id = ca.registered_in_shop_id\n) A\nLEFT JOIN -- Optimove data set\n(\n\tSELECT Distinct\n\t\tc.customer_id,\n\t\tc.customer_uuid AS customer_uuid,\n\t\to.obfuscated_customer_id,\n\t\to.target_group_name,\n\t\to.campaign_customer_group_type,\n\t\to.campaign_type,\n\t\to.target_group_id,\n\t\to.optimove_campaign_id,\n\t\to.braze_campaign_id,\n\t\t--o.send_id,\n\t\to.email_actual_sent_time\n\tFROM stg.braze_optimove_customer_target_group AS o\n\tJOIN dmt.d_customer AS c ON c.obfuscated_id = o.obfuscated_customer_id\n\tWHERE 1 = 1\n\t\tAND o.optimove_campaign_id is not null\n\t\tAND o.campaign_customer_group_type = 'Test'\n ) t1\nON t1.customer_id = A.customer_id\nAND t1.obfuscated_customer_id = A.obfuscated_customer_id\nAND t1.braze_campaign_id = A.braze_campaign_id\nAND t1.email_actual_sent_time::date = A.send_time::date  -- if join is on date too\n-- AND t1.send_id = A.send_id\nLEFT JOIN -- Braze Opens\n(\nSELECT\n\to.dispatch_id,\n\to.external_user_id AS customer_uuid,\n\to.campaign_id as braze_campaign_id,\n\tmin((to_char(TIMESTAMP 'epoch' + o.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS'))::TIMESTAMP) as min_open_time,\n\tcount(o.id) as number_of_opens\nFROM braze_spectrum.event_type_users_messages_email_open o\ninner join braze_spectrum.event_type_users_messages_email_send s\non s.dispatch_id = o.dispatch_id and s.campaign_id = o.campaign_id and s.external_user_id = o.external_user_id\nwhere datediff(days, (to_char(TIMESTAMP 'epoch' + s.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS'))::TIMESTAMP, (to_char(TIMESTAMP 'epoch' + o.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS'))::TIMESTAMP) < 31\nand (to_char(TIMESTAMP 'epoch' + s.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS'))::TIMESTAMP >= '2020-09-22'\nGROUP BY 1,2,3\n) op\nON op.customer_uuid = A.customer_uuid\n\tAND op.dispatch_id = A.dispatch_id\n\tAND op.braze_campaign_id = A.braze_campaign_id\nLEFT JOIN  -- Braze Clicks\n(\nSELECT\n\tc.dispatch_id,\n\tc.external_user_id AS customer_uuid,\n\tc.campaign_id as braze_campaign_id,\n\tmin((to_char(TIMESTAMP 'epoch' + c.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS'))::TIMESTAMP) as min_click_time,\n\tcount(c.id) as number_of_clicks\nFROM braze_spectrum.event_type_users_messages_email_click c\ninner join braze_spectrum.event_type_users_messages_email_send s\non s.dispatch_id = c.dispatch_id and s.campaign_id = c.campaign_id and s.external_user_id = c.external_user_id\nwhere datediff(days, (to_char(TIMESTAMP 'epoch' + s.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS'))::TIMESTAMP, (to_char(TIMESTAMP 'epoch' + c.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS'))::TIMESTAMP) < 31\nand (to_char(TIMESTAMP 'epoch' + s.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS'))::TIMESTAMP >= '2020-09-22'\nGROUP BY 1,2,3\n) cl\nON cl.customer_uuid = A.customer_uuid\n\tAND cl.dispatch_id = A.dispatch_id\n\tAND cl.braze_campaign_id = A.braze_campaign_id\n\nGROUP BY A.braze_campaign_id,\nA.campaign_name,\nA.customer_id,\nA.shop_name,\nA.send_time,\nt1.target_group_id,\nt1.target_group_name,\nt1.optimove_campaign_id,\nt1.campaign_customer_group_type,\nt1.campaign_type,\nop.min_open_time,\nop.number_of_opens,\ncl.min_click_time,\ncl.number_of_clicks,\nA.dispatch_id,\nA.message_variation_id,\nA.canvas_id,\nA.canvas_name,\nA.canvas_variation_id,\nA.canvas_variation_name,\nA.canvas_step_id,\nA.canvas_step_name,\nA.send_id,\nA.ip_pool\n\nUNION ALL\n\n-- Control group\nSELECT\n\t'optimove_braze' as email_source,\n\t0 as email_sent,\n\tnull::INTEGER as msg_id,\n\tnull as camp_id,\n\tA.campaign_name,\n\tA.customer_id,\n\tA.shop_name,\n\tA.email_actual_sent_time,\n\tA.target_group_id,\n\tA.target_group_name,\n\tA.optimove_campaign_id,\n\tA.campaign_customer_group_type,\n\tA.campaign_type,\n\tnull as min_open_time,\n\tnull as number_of_opens,\n\tnull as min_click_time,\n\tnull as number_of_clicks,\n\tgetdate()::timestamp as dw_load_date_time,\n\tnull AS dispatch_id,\n\tnull AS message_variation_id,\n\tnull AS canvas_id,\n\tnull AS canvas_name,\n\tnull AS canvas_variation_id,\n\tnull AS canvas_variation_name,\n\tnull AS canvas_step_id,\n\tnull AS canvas_step_name,\n\tnull AS send_id,\n\tnull AS ip_pool\nFROM\n(\nSELECT\n\tc.customer_id,\n\tc.customer_uuid,\n\to.target_group_name||'_control' as campaign_name,\n\tsh.shop_name,\n\to.target_group_id,\n\to.target_group_name,\n\to.optimove_campaign_id,\n\to.campaign_customer_group_type,\n\to.campaign_type,\n\to.email_actual_sent_time\n\t--o.send_id\nFROM stg.braze_optimove_customer_target_group AS o\nJOIN dmt.d_customer AS c ON c.obfuscated_id = o.obfuscated_customer_id\nLEFT JOIN stg.customer_attributes ca ON ca.customer_id = c.customer_id\nLEFT JOIN map.shop sh ON sh.shop_id = ca.registered_in_shop_id\nWHERE LOWER(o.campaign_customer_group_type) = 'control'\nGROUP BY 1,2,3,4,5,6,7,8,9,10\n)A\nJOIN dm_delta_optimove dd\nON A.customer_id = dd.customer_id\n\tAND A.optimove_campaign_id = dd.optimove_campaign_id\n\t-- AND A.send_id = dd.send_id\nGROUP BY \tA.campaign_name,\n\tA.customer_id,\n\tA.shop_name,\n\tA.email_actual_sent_time,\n\tA.target_group_id,\n\tA.target_group_name,\n\tA.optimove_campaign_id,\n\tA.campaign_customer_group_type,\n\tA.campaign_type\n;"
            },
            {
                "skipped": true,
                "value": "CREATE Temp TABLE dm_delta_braze as\nSELECT\n\tA.customer_id,\n\tA.campaign_id,\n\tA.external_user_id,\n\tA.dispatch_id,\n\tA.email_actual_sent_time\n\tFROM\n(\nSELECT\n\tc.customer_id,\n\tc.obfuscated_id,\n\tse.campaign_id,\n\tse.external_user_id,\n\tse.dispatch_id,\n\t(to_char(TIMESTAMP 'epoch' + se.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS'))::TIMESTAMP AS email_actual_sent_time\nFROM braze_spectrum.event_type_users_messages_email_send AS se\nJOIN dmt.d_customer AS c ON c.customer_uuid = se.external_user_id\nWHERE 1 = 1\nAND (to_char(TIMESTAMP 'epoch' + se.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS'))::TIMESTAMP >= '<start_date>'::timestamp - interval '30 day'\nAND (to_char(TIMESTAMP 'epoch' + se.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS'))::TIMESTAMP\n< (SELECT MAX(nvl(email_actual_sent_time, getdate()))::date - interval '1 day' FROM stg.braze_optimove_customer_target_group)\nAND (to_char(TIMESTAMP 'epoch' + se.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS'))::timestamp < getdate()\n--AND ip_pool NOT LIKE '%transact%'\nGROUP BY 1,2,3,4,5,6\n)A\nWHERE 1 = 1\nAND A.campaign_id NOT IN (SELECT braze_campaign_id FROM stg.braze_optimove_customer_target_group WHERE campaign_customer_group_type = 'Test' GROUP BY 1)\nGROUP BY 1,2,3,4,5\n;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- 6,927,724\n-- drop table dm_delta_braze\n\n-- select count(*) from dm_delta_braze -- 954,474\n-- select email_actual_sent_time::date, count(*) from dm_delta_braze group by 1 order by 1\n\nDELETE FROM stg.braze_optimove_email_sends\nUSING dm_delta_braze\nWHERE 1=1\nAND stg.braze_optimove_email_sends.email_source = 'braze_only'\nAND stg.braze_optimove_email_sends.customer_id = dm_delta_braze.customer_id\nAND stg.braze_optimove_email_sends.camp_id = dm_delta_braze.campaign_id\nAND stg.braze_optimove_email_sends.dispatch_id = dm_delta_braze.dispatch_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "braze_optimove_email_sends"
                    ],
                    "select": [
                        "A.email_source",
                        "A.email_sent",
                        "A.msg_id",
                        "A.camp_id",
                        "A.campaign_name",
                        "A.customer_id",
                        "A.shop_name",
                        "A.send_time",
                        "A.target_group_id",
                        "A.target_group_name",
                        "A.optimove_campaign_id",
                        "A.campaign_customer_group",
                        "A.campaign_type",
                        "A.min_open_time",
                        "A.number_of_opens",
                        "A.min_click_time",
                        "A.number_of_clicks",
                        "A.dw_load_date_time",
                        "A.dispatch_id",
                        "A.message_variation_id",
                        "A.canvas_id",
                        "A.canvas_name",
                        "A.canvas_variation_id",
                        "A.canvas_variation_name",
                        "A.canvas_step_id",
                        "A.canvas_step_name",
                        "A.send_id",
                        "A.ip_pool",
                        "braze_spectrum.event_type_users_messages_email_send.campaign_name",
                        "t1.opens",
                        "t1.clicks",
                        "braze_spectrum.event_type_users_messages_email_send.campaign_id",
                        "braze_spectrum.event_type_users_messages_email_click.customer_id",
                        "braze_spectrum.event_type_users_messages_email_click.obfuscated_id",
                        "map.shop.shop_name",
                        "braze_spectrum.event_type_users_messages_email_open.dispatch_id",
                        "braze_spectrum.event_type_users_messages_email_open.external_user_id",
                        "braze_spectrum.event_type_users_messages_email_open.campaign_id",
                        "braze_spectrum.event_type_users_messages_email_click.dispatch_id",
                        "braze_spectrum.event_type_users_messages_email_click.external_user_id",
                        "braze_spectrum.event_type_users_messages_email_click.campaign_id",
                        "braze_spectrum.event_type_users_messages_email_send.dispatch_id",
                        "braze_spectrum.event_type_users_messages_email_send.external_user_id",
                        "braze_spectrum.event_type_users_messages_email_open.id",
                        "braze_spectrum.event_type_users_messages_email_click.id",
                        "braze_campaign_id",
                        [
                            "braze_spectrum.event_type_users_messages_email_send.campaign_name",
                            "braze_spectrum.event_type_users_messages_email_send.campaign_name"
                        ]
                    ],
                    "join": [
                        "braze_spectrum.event_type_users_messages_email_send.campaign_id",
                        "dm_delta_braze.campaign_id",
                        "braze_spectrum.event_type_users_messages_email_send.external_user_id",
                        "dm_delta_braze.external_user_id",
                        "braze_spectrum.event_type_users_messages_email_send.dispatch_id",
                        "dm_delta_braze.dispatch_id",
                        "braze_spectrum.event_type_users_messages_email_click.customer_uuid",
                        "braze_spectrum.event_type_users_messages_email_open.dispatch_id",
                        "braze_spectrum.event_type_users_messages_email_open.campaign_id",
                        "braze_spectrum.event_type_users_messages_email_open.external_user_id",
                        "op.external_user_id",
                        "op.dispatch_id",
                        "op.campaign_id",
                        "braze_spectrum.event_type_users_messages_email_click.dispatch_id",
                        "braze_spectrum.event_type_users_messages_email_click.campaign_id",
                        "braze_spectrum.event_type_users_messages_email_click.external_user_id",
                        "cl.external_user_id",
                        "cl.dispatch_id",
                        "cl.campaign_id",
                        "t1.external_user_id",
                        "t1.dispatch_id",
                        "t1.campaign_id",
                        "stg.customer_attributes.customer_id",
                        "braze_spectrum.event_type_users_messages_email_click.customer_id",
                        "map.shop.shop_id",
                        "stg.customer_attributes.registered_in_shop_id"
                    ],
                    "where": [
                        "days",
                        "A.camp_id",
                        "campaign_customer_group_type"
                    ]
                },
                "tables": [
                    "stg.braze_optimove_email_sends",
                    "braze_spectrum.event_type_users_messages_email_send",
                    "dm_delta_braze",
                    "dmt.d_customer",
                    "braze_spectrum.event_type_users_messages_email_open",
                    "braze_spectrum.event_type_users_messages_email_click",
                    "stg.customer_attributes",
                    "map.shop",
                    "stg.braze_optimove_customer_target_group"
                ],
                "subqueries": {
                    "A": "SELECT 'braze_only' as email_source, case when lower (se.campaign_name) like '%_control%' and t1.opens = 0 and t1.clicks = 0 then 0 else 1 end as email_sent, null as msg_id, se.campaign_id AS camp_id, se.campaign_name, c.customer_id, c.obfuscated_id, sh.shop_name, (to_char (TIMESTAMP 'epoch' + se.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS')) :: TIMESTAMP AS send_time, null as target_group_id, null as target_group_name, null as optimove_campaign_id, case when lower (se.campaign_name) like '%_control%' and t1.opens = 0 and t1.clicks = 0 then 'Control' else 'Test' end as campaign_customer_group, null as campaign_type, op.min_open_time, op.number_of_opens, cl.min_click_time, cl.number_of_clicks, getdate () :: timestamp as dw_load_date_time, se.dispatch_id, se.message_variation_id, se.canvas_id, se.canvas_name, se.canvas_variation_id, se.canvas_variation_name, se.canvas_step_id, se.canvas_step_name, se.send_id, se.ip_pool FROM braze_spectrum.event_type_users_messages_email_send AS se JOIN dm_delta_braze dd on se.campaign_id = dd.campaign_id and se.external_user_id = dd.external_user_id and se.dispatch_id = dd.dispatch_id JOIN dmt.d_customer AS c ON c.customer_uuid = se.external_user_id LEFT JOIN (SELECT o.dispatch_id, o.external_user_id, o.campaign_id, min((to_char (TIMESTAMP 'epoch' + o.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS')) :: TIMESTAMP) as min_open_time, count(o.id) as number_of_opens FROM braze_spectrum.event_type_users_messages_email_open o inner join braze_spectrum.event_type_users_messages_email_send s on s.dispatch_id = o.dispatch_id and s.campaign_id = o.campaign_id and s.external_user_id = o.external_user_id where datediff(days, (to_char (TIMESTAMP 'epoch' + s.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS')) :: TIMESTAMP, (to_char (TIMESTAMP 'epoch' + o.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS')) :: TIMESTAMP) < 31 and (to_char (TIMESTAMP 'epoch' + s.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS')) :: TIMESTAMP >= '2020-09-22' GROUP BY 1, 2, 3) op ON op.external_user_id = se.external_user_id AND op.dispatch_id = se.dispatch_id AND op.campaign_id = se.campaign_id LEFT JOIN (SELECT c.dispatch_id, c.external_user_id, c.campaign_id, min((to_char (TIMESTAMP 'epoch' + c.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS')) :: TIMESTAMP) as min_click_time, count(c.id) as number_of_clicks FROM braze_spectrum.event_type_users_messages_email_click c inner join braze_spectrum.event_type_users_messages_email_send s on s.dispatch_id = c.dispatch_id and s.campaign_id = c.campaign_id and s.external_user_id = c.external_user_id where datediff(days, (to_char (TIMESTAMP 'epoch' + s.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS')) :: TIMESTAMP, (to_char (TIMESTAMP 'epoch' + c.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS')) :: TIMESTAMP) < 31 and (to_char (TIMESTAMP 'epoch' + s.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS')) :: TIMESTAMP >= '2020-09-22' GROUP BY 1, 2, 3) cl ON cl.external_user_id = se.external_user_id AND cl.dispatch_id = se.dispatch_id AND cl.campaign_id = se.campaign_id LEFT JOIN (SELECT se.dispatch_id, se.external_user_id, se.campaign_id, count(oe.id) as opens, count(ce.id) as clicks FROM braze_spectrum.event_type_users_messages_email_send AS se LEFT JOIN braze_spectrum.event_type_users_messages_email_open AS oe ON oe.external_user_id = se.external_user_id AND oe.dispatch_id = se.dispatch_id AND oe.campaign_id = se.campaign_id LEFT JOIN braze_spectrum.event_type_users_messages_email_click AS ce ON ce.external_user_id = se.external_user_id AND ce.dispatch_id = se.dispatch_id AND ce.campaign_id = se.campaign_id GROUP BY 1, 2, 3) t1 ON t1.external_user_id = se.external_user_id AND t1.dispatch_id = se.dispatch_id AND t1.campaign_id = se.campaign_id LEFT JOIN stg.customer_attributes ca ON ca.customer_id = c.customer_id LEFT JOIN map.shop sh ON sh.shop_id = ca.registered_in_shop_id",
                    "op": "SELECT o.dispatch_id, o.external_user_id, o.campaign_id, min((to_char (TIMESTAMP 'epoch' + o.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS')) :: TIMESTAMP) as min_open_time, count(o.id) as number_of_opens FROM braze_spectrum.event_type_users_messages_email_open o inner join braze_spectrum.event_type_users_messages_email_send s on s.dispatch_id = o.dispatch_id and s.campaign_id = o.campaign_id and s.external_user_id = o.external_user_id where datediff(days, (to_char (TIMESTAMP 'epoch' + s.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS')) :: TIMESTAMP, (to_char (TIMESTAMP 'epoch' + o.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS')) :: TIMESTAMP) < 31 and (to_char (TIMESTAMP 'epoch' + s.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS')) :: TIMESTAMP >= '2020-09-22' GROUP BY 1, 2, 3",
                    "cl": "SELECT c.dispatch_id, c.external_user_id, c.campaign_id, min((to_char (TIMESTAMP 'epoch' + c.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS')) :: TIMESTAMP) as min_click_time, count(c.id) as number_of_clicks FROM braze_spectrum.event_type_users_messages_email_click c inner join braze_spectrum.event_type_users_messages_email_send s on s.dispatch_id = c.dispatch_id and s.campaign_id = c.campaign_id and s.external_user_id = c.external_user_id where datediff(days, (to_char (TIMESTAMP 'epoch' + s.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS')) :: TIMESTAMP, (to_char (TIMESTAMP 'epoch' + c.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS')) :: TIMESTAMP) < 31 and (to_char (TIMESTAMP 'epoch' + s.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS')) :: TIMESTAMP >= '2020-09-22' GROUP BY 1, 2, 3",
                    "t1": "SELECT se.dispatch_id, se.external_user_id, se.campaign_id, count(oe.id) as opens, count(ce.id) as clicks FROM braze_spectrum.event_type_users_messages_email_send AS se LEFT JOIN braze_spectrum.event_type_users_messages_email_open AS oe ON oe.external_user_id = se.external_user_id AND oe.dispatch_id = se.dispatch_id AND oe.campaign_id = se.campaign_id LEFT JOIN braze_spectrum.event_type_users_messages_email_click AS ce ON ce.external_user_id = se.external_user_id AND ce.dispatch_id = se.dispatch_id AND ce.campaign_id = se.campaign_id GROUP BY 1, 2, 3"
                },
                "skipped": false,
                "value": "INSERT INTO stg.braze_optimove_email_sends\nSELECT\nA.email_source,\nA.email_sent,\nA.msg_id::INTEGER,\nA.camp_id,\nA.campaign_name,\nA.customer_id,\nA.shop_name,\nA.send_time,\nA.target_group_id::INTEGER,\nA.target_group_name,\nA.optimove_campaign_id::INTEGER,\nA.campaign_customer_group,\nA.campaign_type,\nA.min_open_time,\nA.number_of_opens,\nA.min_click_time,\nA.number_of_clicks,\nA.dw_load_date_time,\nA.dispatch_id,\nA.message_variation_id,\nA.canvas_id,\nA.canvas_name,\nA.canvas_variation_id,\nA.canvas_variation_name,\nA.canvas_step_id,\nA.canvas_step_name,\nA.send_id,\nA.ip_pool\nFROM\n(\n\tSELECT\n\t'braze_only' as email_source,\n\tcase when lower(se.campaign_name) like '%_control%' and t1.opens =0 and t1.clicks= 0 then 0 else 1 end as email_sent,\n\tnull as msg_id,\n\tse.campaign_id AS camp_id,\n\tse.campaign_name,\n\tc.customer_id,\n\tc.obfuscated_id,\n\tsh.shop_name,\n\t(to_char(TIMESTAMP 'epoch' + se.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS'))::TIMESTAMP AS send_time,\n\tnull as target_group_id,\n\tnull as target_group_name,\n\tnull as optimove_campaign_id,\n\tcase when lower(se.campaign_name) like '%_control%' and t1.opens =0 and t1.clicks= 0 then 'Control' else 'Test' end as campaign_customer_group,\n\tnull as campaign_type,\n\top.min_open_time,\n\top.number_of_opens,\n\tcl.min_click_time,\n\tcl.number_of_clicks,\n\tgetdate()::timestamp as dw_load_date_time,\n\tse.dispatch_id,\n\tse.message_variation_id,\n\tse.canvas_id,\n\tse.canvas_name,\n\tse.canvas_variation_id,\n\tse.canvas_variation_name,\n\tse.canvas_step_id,\n\tse.canvas_step_name,\n\tse.send_id,\n\tse.ip_pool\n\n\tFROM braze_spectrum.event_type_users_messages_email_send AS se\n\tJOIN dm_delta_braze dd on se.campaign_id = dd.campaign_id and se.external_user_id = dd.external_user_id and se.dispatch_id = dd.dispatch_id\n\tJOIN dmt.d_customer AS c ON c.customer_uuid = se.external_user_id\n\tLEFT JOIN\n\t(\n\tSELECT\n\t\to.dispatch_id,\n\t\to.external_user_id,\n\t\to.campaign_id,\n\t\tmin((to_char(TIMESTAMP 'epoch' + o.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS'))::TIMESTAMP) as min_open_time,\n\t\tcount(o.id) as number_of_opens\n\tFROM braze_spectrum.event_type_users_messages_email_open o\n    inner join braze_spectrum.event_type_users_messages_email_send s\n    on s.dispatch_id = o.dispatch_id and s.campaign_id = o.campaign_id and s.external_user_id = o.external_user_id\n    where datediff(days, (to_char(TIMESTAMP 'epoch' + s.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS'))::TIMESTAMP, (to_char(TIMESTAMP 'epoch' + o.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS'))::TIMESTAMP) < 31\n    and (to_char(TIMESTAMP 'epoch' + s.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS'))::TIMESTAMP >= '2020-09-22'\n\tGROUP BY 1,2,3\n\t) op\n\tON op.external_user_id = se.external_user_id\n\t\tAND op.dispatch_id = se.dispatch_id\n\t\tAND op.campaign_id = se.campaign_id\n\tLEFT JOIN\n\t(\n\tSELECT\n\tc.dispatch_id,\n\tc.external_user_id,\n\tc.campaign_id,\n\tmin((to_char(TIMESTAMP 'epoch' + c.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS'))::TIMESTAMP) as min_click_time,\n\tcount(c.id) as number_of_clicks\n    FROM braze_spectrum.event_type_users_messages_email_click c\n    inner join braze_spectrum.event_type_users_messages_email_send s\n    on s.dispatch_id = c.dispatch_id and s.campaign_id = c.campaign_id and s.external_user_id = c.external_user_id\n    where datediff(days, (to_char(TIMESTAMP 'epoch' + s.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS'))::TIMESTAMP, (to_char(TIMESTAMP 'epoch' + c.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS'))::TIMESTAMP) < 31\n    and (to_char(TIMESTAMP 'epoch' + s.time * interval '1 second', 'YYYY-MM-DD HH24:MM:SS'))::TIMESTAMP >= '2020-09-22'\n    GROUP BY 1,2,3\n\t) cl\n\tON cl.external_user_id = se.external_user_id\n\t\tAND cl.dispatch_id = se.dispatch_id\n\t\tAND cl.campaign_id = se.campaign_id\n\tLEFT JOIN\n\t(\n\tSELECT\n\t\tse.dispatch_id,\n\t\tse.external_user_id,\n\t\tse.campaign_id,\n\t\tcount(oe.id) as opens,\n\t\tcount(ce.id) as clicks\n\tFROM braze_spectrum.event_type_users_messages_email_send AS se\n\tLEFT JOIN braze_spectrum.event_type_users_messages_email_open AS oe\n\t\tON oe.external_user_id = se.external_user_id AND oe.dispatch_id = se.dispatch_id AND oe.campaign_id = se.campaign_id\n\tLEFT JOIN braze_spectrum.event_type_users_messages_email_click AS ce\n\t\tON ce.external_user_id = se.external_user_id AND ce.dispatch_id = se.dispatch_id AND ce.campaign_id = se.campaign_id\n\tGROUP BY 1,2,3\n\t) t1\n\tON t1.external_user_id = se.external_user_id\n\t\tAND t1.dispatch_id = se.dispatch_id\n\t\tAND t1.campaign_id = se.campaign_id\n\tLEFT JOIN stg.customer_attributes ca ON ca.customer_id = c.customer_id\n\tLEFT JOIN map.shop sh ON sh.shop_id = ca.registered_in_shop_id\n)A\nWHERE 1 = 1\nAND A.camp_id NOT IN (SELECT braze_campaign_id FROM stg.braze_optimove_customer_target_group WHERE campaign_customer_group_type = 'Test' GROUP BY 1)\n\nGROUP BY A.email_source,\nA.email_sent,\nA.msg_id,\nA.camp_id,\nA.campaign_name,\nA.customer_id,\nA.shop_name,\nA.send_time,\nA.target_group_id::INTEGER,\nA.target_group_name,\nA.optimove_campaign_id::INTEGER,\nA.campaign_customer_group,\nA.campaign_type,\nA.min_open_time,\nA.number_of_opens,\nA.min_click_time,\nA.number_of_clicks,\nA.dw_load_date_time,\nA.dispatch_id,\nA.message_variation_id,\nA.canvas_id,\nA.canvas_name,\nA.canvas_variation_id,\nA.canvas_variation_name,\nA.canvas_step_id,\nA.canvas_step_name,\nA.send_id,\nA.ip_pool\n;"
            }
        ],
        "load.map.nrp_tenure.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "nrp_tenure"
                    ],
                    "select": [
                        "t.nrp_tenure_id",
                        "t.nrp_tenure_name"
                    ]
                },
                "tables": [
                    "map.nrp_tenure"
                ],
                "subqueries": {
                    "t": "select 0 as nrp_tenure_id, 'Initial' as nrp_tenure_name, getdate () as dw_loaddatetime union all select 1 as nrp_tenure_id, 'Repeat' as nrp_tenure_name, getdate () as dw_loaddatetime"
                },
                "skipped": false,
                "value": "INSERT INTO map.nrp_tenure\nselect\n\t  t.nrp_tenure_id\n\t, t.nrp_tenure_name\n  , getdate()\nfrom (\n  select 0 as nrp_tenure_id, 'Initial' as  nrp_tenure_name, getdate() as dw_loaddatetime union all\n  select 1 as nrp_tenure_id, 'Repeat' as  nrp_tenure_name, getdate() as dw_loaddatetime\n) t\n;"
            }
        ],
        "transform.dmt.d_customer_subscription.sql": [
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "stg.customer_subscriptions.customer_id"
                    ],
                    "join": [
                        "stg.customer_subscriptions.id",
                        "stg.customer_subscription_cancellation_reasons.customer_subscription_id",
                        "stg.customer_subscription_cancellation_reasons.survey_option_id",
                        "stg.survey_options.id"
                    ],
                    "where": [
                        "stg.customer_subscriptions.updated_at"
                    ]
                },
                "tables": [
                    "dm_delta",
                    "stg.customer_subscriptions",
                    "stg.customer_subscription_cancellation_reasons",
                    "stg.survey_options"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "CREATE TEMP TABLE dm_delta AS\nSelect distinct cs.customer_id as customer_id\nfrom stg.customer_subscriptions cs\n  left outer join stg.customer_subscription_cancellation_reasons cr\n    on cs.id = cr.customer_subscription_id\n  left outer join stg.survey_options so\n  on cr.survey_option_id = so.id\nwhere (\n       cs.updated_at >= '<start_date>'::timestamp  -  interval '1 day'\n       OR cr.updated_at >= '<start_date>'::timestamp -  interval '1 day'\n       OR so.updated_at >= '<start_date>'::timestamp -  interval '1 day'\n       )\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "dmt.d_customer_subscription.customer_id",
                        "dm_delta.customer_id"
                    ]
                },
                "tables": [
                    "dmt.d_customer_subscription"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from dmt.d_customer_subscription\nusing dm_delta\nwhere dmt.d_customer_subscription.customer_id = dm_delta.customer_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "d_customer_subscription"
                    ],
                    "select": [
                        "cs.id",
                        "first_subscription.first_customer_subscription_id"
                    ]
                },
                "tables": [
                    "dmt.d_customer_subscription"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "Insert into dmt.d_customer_subscription\nSelect\n\tcs.id as customer_subscription_id\n  ,first_subscription.first_customer_subscription_id      --derived column\n  ,current_subscription.current_customer_subscription_id  --derived column\n  ,first_subscription_start_date_time.first_customer_subscription_start_date_time           --derived column\n\t,cs.subscription_id\n\t,cs.start_date_time\n\t,cs.end_date_time\n\t,cs.shipping_address_id\n\t,cs.product_quantity\n\t,cs.created_at\n\t,cs.updated_at\n\t,cs.customer_id\n\t,cs.frequency\n\t, left(cs.zuora_latest_subscription_id, 64) as zuora_latest_subscription_id\n\t,cs.status\n\t,cs.product_rate_plan_id\n\t, left(cs.zuora_original_subscription_id, 64) as zuora_original_subscription_id\n\t,cs.zuora_subscription_status\n\t,cs.current_cycle_start_date_time\n\t,cs.current_cycle_end_date_time\n\t,cs.last_add_amendment_date_time\n\t,cs.iteration_count\n\t,cs.current_iteration_count\n\t, left(cs.obfuscated_id, 64) as obfuscated_id\n\t,cs.last_bill_date_time\n\t,cs.next_bill_date_time\n\t,cs.bill_cycle_reference_date_time\n\t,cs.scheduled_for_cancellation_at_date_time\n\t,cs.shop_id\n    --derived columns\n  , NVL(left(sh.shop_name, 16),'Other') as shop_name\n  ,CASE\n      WHEN cs.status = 0 THEN 'Cancelled'\n      WHEN cs.status = 1 THEN 'Active'\n      WHEN cs.status = 2 THEN 'Suspended'\n      WHEN cs.status = 3 THEN 'S Timeout'\n      WHEN cs.status = 4 THEN 'Paused'\n      ELSE 'Other' END status_name\n  ,reason.customer_subscription_cancellation_reason_id\n\t,left(reason.reason, 512) as reason\n\t,reason.customer_subscription_cancellation_reason_created_at\n\t,reason.reason_parent_id\n\t,reason.survey_option_id\n\t,reason.survey_option_target\n\t,left(reason.survey_option_message, 256) as survey_option_message\n\t,reason.survey_option_parent_id\n  ,left(reason.survey_option_code, 64) as survey_option_code\n  ,reason.survey_option_id_check\n  ,CASE\n      WHEN cs.subscription_id in (1,2) THEN 'Twin'\n      WHEN cs.subscription_id = 3 THEN '4x'\n      WHEN cs.subscription_id = 4 THEN 'Exec'\n      END AS subscription_plan\n  ,CASE\n      WHEN cs.subscription_id in (1,2) THEN 3.0\n      WHEN cs.subscription_id = 3 THEN 6.0\n      WHEN cs.subscription_id = 4 THEN 9.0\n      END AS subscription_amount\n  ,CASE WHEN cs.frequency = 1 THEN 'Monthly'\n      WHEN cs.frequency = 2 THEN 'NSH'\n      END AS frequency_name\n\t,CASE WHEN cs.id != first_subscription.first_customer_subscription_id then TRUE else FALSE end reactivation\n\t,CASE WHEN cs.status in (0,3) then TRUE else FALSE end churn   -- cancelled=3 and 0= S Timeout\n\t--,reason.prior_survey_option_message\t\t--Commented by Mallik 06082018\n\t,LAG(left(reason.survey_option_message,128),1) OVER(partition by cs.customer_id order by cs.start_date_time)  AS prior_cancellation_reason  --Added by Mallik 06082018\n\t,getdate()\n    from\n    dm_delta dd\n    inner join\n\t\tstg.customer_subscriptions cs\n    ON dd.customer_id = cs.customer_id\n    left outer join (\n                        select * from (\n                            select\n                            cs.id as customer_subscription_id\n                            ,cr.id customer_subscription_cancellation_reason_id\n                            ,cr.reason\n                            ,cr.created_at as customer_subscription_cancellation_reason_created_at\n                            ,cr.parent_id as reason_parent_id\n                            ,cr.survey_option_id\n                            ,so.target as survey_option_target\n                            ,so.message as survey_option_message\n                            ,so.parent_id as survey_option_parent_id\n                            ,so.code as survey_option_code\n                            ,case when cr.survey_option_id is NULL OR cr.survey_option_id IN (1,2,3,4,5,6,11,31) THEN TRUE else FALSE end survey_option_id_check\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t--,LAG(so.message,1) OVER(partition by cs.customer_id order by cs.start_date_time) as prior_survey_option_message --Commented by Mallik 06082018\n                            ,Row_Number() OVER(partition by cs.id order by cr.created_at desc) rnk\n                            from\n                            dm_delta dd\n                            inner join stg.customer_subscriptions cs\n                            ON dd.customer_id = cs.customer_id\n                            inner join stg.customer_subscription_cancellation_reasons cr\n                            on cs.id = cr.customer_subscription_id\n                            left join stg.survey_options so\n                            ON cr.survey_option_id = so.id\n                            where cr.parent_id is null\n                        ) dedupe where rnk = 1\n                ) reason\n    ON cs.id = reason.customer_subscription_id\n    left join map.shop shop on shop.shop_id = cs.shop_id\n    left join (select dd.customer_id, min(cs.id) as first_customer_subscription_id\n                from\n\t\t\t\t\t\t\t\tdm_delta dd\n                inner join\n\t\t\t\t\t\t\t\tstg.customer_subscriptions cs\n\t\t\t\t\t\t\t\tON dd.customer_id = cs.customer_id\n                group by dd.customer_id\n              ) first_subscription\n    ON dd.customer_id = first_subscription.customer_id\n    left join (select dd.customer_id, max(cs.id) as current_customer_subscription_id\n                from dm_delta dd\n                inner join stg.customer_subscriptions cs\n\t\t\t\t\t\t\t\tON dd.customer_id = cs.customer_id\n                group by dd.customer_id\n              ) current_subscription\n    ON dd.customer_id = current_subscription.customer_id\n    left join (select dd.customer_id, min(cs.start_date_time) as first_customer_subscription_start_date_time\n                from dm_delta dd\n                inner join stg.customer_subscriptions cs\n\t\t\t\t\t\t\t\tON dd.customer_id = cs.customer_id\n                group by dd.customer_id\n              ) first_subscription_start_date_time\n    ON dd.customer_id = first_subscription_start_date_time.customer_id\n\t\tleft join map.shop sh\n\t\tON sh.shop_id =  cs.shop_id\n    left outer join stg.test_customers tc\n    ON dd.customer_id = tc.customer_id\nwhere 1=1\n  and tc.customer_id is null\n    ;"
            }
        ],
        "extract.dsc_prod.products.sql": [],
        "extract.dsc_prod.customer_subscription_cancellation_reasons.sql": [],
        "extract.dsc_prod.customers.sql": [],
        "transform.dmt.d_customer_subscription_pause.sql": [
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "stg.customer_subscription_pauses.id"
                    ],
                    "where": [
                        "stg.customer_subscription_pauses.dsc_processed_at"
                    ]
                },
                "tables": [
                    "dm_delta",
                    "stg.customer_subscription_pauses"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "CREATE TEMP TABLE dm_delta AS\nselect distinct csp.id as id\nfrom stg.customer_subscription_pauses csp\nwhere (\n        csp.dsc_processed_at >= '<start_date>'::timestamp  -  interval '1 day'\n       )\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "dmt.d_customer_subscription_pause.customer_subscription_pause_id",
                        "dm_delta.id"
                    ]
                },
                "tables": [
                    "dmt.d_customer_subscription_pause"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from dmt.d_customer_subscription_pause\nusing dm_delta\nwhere dmt.d_customer_subscription_pause.customer_subscription_pause_id = dm_delta.id\n;"
            },
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- TRUNCATE TABLE dmt.d_customer_subscription_pause;  select count(1) from dm_delta ;  select count(1) from stg.customer_subscription_pauses ;\n\nINSERT INTO dmt.d_customer_subscription_pause\nselect\n   csp.id as customer_subscription_pause_id\n\t,csp.customer_subscription_id    \n\t,csp.status   \n\t,csp.pause_reason \n\t,csp.scheduled_to_resume_at_date_time   \n\t,csp.resumed_at_date_time   \n\t,csp.next_bill_date_time_after_resume   \n\t,csp.created_at \n\t,csp.updated_at  \n\t,csp.survey_option_id    \n\t,csp.number_of_months    \n\t,csp.resume_type  \n\t,csp.previous_customer_subscription_pause_id    \n\t,case when status = 0 then 'Inactive' \n     when status = 1 then 'Active'\n\t\t else 'Other' end as status_name \n\t,case when csp.resume_type = 0 then 'Immediate' \n     when csp.resume_type = 1 then 'Next Bill Date'\n\t\t when csp.resume_type = 2 AND csp.resumed_at_date_time IS NULL then 'Cancelled' \n     when csp.resume_type = 2 then 'Scheduled'\n\t\t else 'Other' end as resume_type_name\n\t,case when pause_reason = 'One Month Skip' then TRUE else FALSE end as skip \n\t,so.message as survey_option_message \n\t,so.target as survey_option_target\n\t,so.code as survey_option_code\n\t,getdate() \nfrom dm_delta dd\n inner join stg.customer_subscription_pauses csp \n ON dd.id = csp.id\n left join stg.survey_options so \n ON csp.survey_option_id = so.id\nwhere 1=1\n;"
            }
        ],
        "transform.stg.cheetah_optimove_email_sends.sql": [
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "stg.customers.id",
                        "campaign_name"
                    ],
                    "join": [
                        "stg.customers.obfuscated_id",
                        "stg.optimove_customer_target_group.obfuscated_customer_id"
                    ],
                    "where": [
                        "stg.optimove_customer_target_group.dw_load_date_time",
                        "stg.cheetah_send_events.created_at"
                    ]
                },
                "tables": [
                    "dm_delta_optimove",
                    "stg.optimove_customer_target_group",
                    "stg.customers",
                    "stg.cheetah_send_events"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "create temp table dm_delta_optimove as\nselect\n c.id as customer_id,\n optimove_campaign_id\n from stg.optimove_customer_target_group tg\n join stg.customers c on c.obfuscated_id = tg.obfuscated_customer_id\n\nwhere tg.dw_load_date_time >= '<start_date>'::timestamp - interval '2 day'\ngroup by 1,2\n\nunion\n\nselect\ncustomer_id,\nsplit_part(split_part(campaign_name, '_copy_',2),'_',2)::int as optimove_campaign_id\nfrom stg.cheetah_send_events se\nwhere se.created_at >= '<start_date>'::timestamp - interval '2 day'\nand se.campaign_name like '%\\\\_copy\\\\_%'\n\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.cheetah_optimove_email_sends.customer_id",
                        "dm_delta_optimove.customer_id",
                        "stg.cheetah_optimove_email_sends.optimove_campaign_id",
                        "dm_delta_optimove.optimove_campaign_id",
                        "stg.cheetah_optimove_email_sends.email_source"
                    ]
                },
                "tables": [
                    "stg.cheetah_optimove_email_sends"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.cheetah_optimove_email_sends\nusing dm_delta_optimove\nwhere 1=1\nand stg.cheetah_optimove_email_sends.customer_id = dm_delta_optimove.customer_id\nand stg.cheetah_optimove_email_sends.optimove_campaign_id = dm_delta_optimove.optimove_campaign_id\nand stg.cheetah_optimove_email_sends.email_source = 'optimove_cheetah'\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "cheetah_optimove_email_sends"
                    ],
                    "select": [
                        "stg.cheetah_send_events.msg_id",
                        "stg.cheetah_send_events.camp_id",
                        "stg.cheetah_send_events.campaign_name",
                        "stg.cheetah_send_events.customer_id",
                        "map.shop.shop_name",
                        "stg.cheetah_send_events.send_time",
                        "t1.target_group_id",
                        "t1.target_group_name",
                        "t1.optimove_campaign_id",
                        "t1.campaign_customer_group_type",
                        "t1.campaign_type",
                        "op.min_open_time",
                        "op.number_of_opens",
                        "cl.min_click_time",
                        "cl.number_of_clicks",
                        "stg.optimove_customer_target_group.target_group_name",
                        "stg.optimove_customer_target_group.campaign_customer_group_type",
                        "stg.optimove_customer_target_group.campaign_type",
                        "stg.optimove_customer_target_group.target_group_id",
                        "stg.optimove_customer_target_group.optimove_campaign_id",
                        "stg.customers.id",
                        "click_time",
                        "click_id",
                        "t1.min_send_time",
                        "send_time",
                        "cl.msg_id",
                        "stg.customer_attributes.customer_id",
                        "map.shop.shop_id",
                        "stg.customer_attributes.registered_in_shop_id"
                    ],
                    "join": [
                        "stg.cheetah_send_events.customer_id",
                        "dm_delta_optimove.customer_id",
                        "stg.cheetah_send_events.campaign_name",
                        "dm_delta_optimove.optimove_campaign_id",
                        "stg.customers.obfuscated_id",
                        "stg.optimove_customer_target_group.obfuscated_customer_id",
                        "t1.id",
                        "t1.optimove_campaign_id",
                        "op.msg_id",
                        "stg.cheetah_send_events.msg_id",
                        "cl.msg_id",
                        "stg.customer_attributes.customer_id",
                        "map.shop.shop_id",
                        "stg.customer_attributes.registered_in_shop_id",
                        "stg.customers.id",
                        "stg.optimove_customer_target_group.optimove_campaign_id",
                        "click_id"
                    ],
                    "where": [
                        "stg.optimove_customer_target_group.campaign_customer_group_type",
                        "stg.cheetah_send_events.send_time",
                        "t1.optimove_campaign_id",
                        "stg.optimove_customer_target_group.email_actual_sent_time",
                        "click_id",
                        "cl.msg_id",
                        "stg.cheetah_send_events.msg_id",
                        "stg.customer_attributes.customer_id",
                        "stg.cheetah_send_events.customer_id",
                        "map.shop.shop_id",
                        "stg.customer_attributes.registered_in_shop_id"
                    ]
                },
                "tables": [
                    "stg.cheetah_optimove_email_sends",
                    "stg.cheetah_send_events",
                    "dm_delta_optimove",
                    "stg.optimove_customer_target_group",
                    "stg.customers",
                    "stg.cheetah_open_events",
                    "stg.cheetah_click_events",
                    "stg.customer_attributes",
                    "map.shop"
                ],
                "subqueries": {
                    "t1": "select split_part (split_part (campaign_name, '_copy_', 2), '_', 2) as optimove_campaign_id, min(send_time) as min_send_time from stg.cheetah_send_events group by 1",
                    "op": "select msg_id, min(click_time) as min_open_time, count(click_id) as number_of_opens from stg.cheetah_open_events group by 1",
                    "cl": "select msg_id, min(click_time) as min_click_time, count(click_id) as number_of_clicks from stg.cheetah_click_events group by 1"
                },
                "skipped": false,
                "value": "insert into stg.cheetah_optimove_email_sends\n\nselect\n    'optimove_cheetah' as email_source,\n    1 as email_sent_flag,\n    se.msg_id,\n    se.camp_id,\n    se.campaign_name,\n    se.customer_id,\n    sh.shop_name,\n    se.send_time,\n    t1.target_group_id,\n    t1.target_group_name,\n    t1.optimove_campaign_id,\n    t1.campaign_customer_group_type,\n    t1.campaign_type,\n    op.min_open_time,\n    op.number_of_opens,\n    cl.min_click_time,\n    cl.number_of_clicks,\n    getdate()::timestamp as dw_load_date_time\n\n\n\n from stg.cheetah_send_events se\n join dm_delta_optimove dd on se.customer_id = dd.customer_id\n                           and split_part(split_part(se.campaign_name, '_copy_',2),'_',2) = dd.optimove_campaign_id\n left join(select o.target_group_name,\n             o.campaign_customer_group_type,\n             o.campaign_type,\n             o.target_group_id,\n             o.optimove_campaign_id,\n             c.id\n           from  stg.optimove_customer_target_group o\n           join stg.customers c on c.obfuscated_id = o.obfuscated_customer_id\n           where o.campaign_customer_group_type = 'Test'\n ) t1 on t1.id = se.customer_id and t1.optimove_campaign_id = split_part(split_part(campaign_name, '_copy_',2),'_',2)\n left join (select msg_id\n              , min(click_time) as min_open_time\n              ,count(click_id) as number_of_opens\n            from stg.cheetah_open_events group by 1\n           ) op on op.msg_id = se.msg_id\n  left join (select msg_id\n              , min(click_time) as min_click_time\n              ,count(click_id) as number_of_clicks\n            from stg.cheetah_click_events group by 1\n           ) cl on cl.msg_id = se.msg_id\n  left join stg.customer_attributes ca on ca.customer_id = se.customer_id\n  left join map.shop sh on sh.shop_id = ca.registered_in_shop_id\n\n where campaign_name like '%\\\\_copy\\\\_%'\n and se.send_time::date >= '2019-03-01'\n and t1.optimove_campaign_id is not null\n\n\n union all\n\n\n  select\n    'optimove_cheetah' as email_source,\n     0 as email_sent,\n     null as msg_id,\n     null as camp_id,\n     o.target_group_name||'_control' as campaign_name,\n     c.id as customer_id,\n     sh.shop_name,\n     t1.min_send_time,\n     o.target_group_id,\n     o.target_group_name,\n     o.optimove_campaign_id,\n     o.campaign_customer_group_type,\n     o.campaign_type,\n     null as min_open_time,\n     null as number_of_opens,\n     null as min_click_time,\n     null as number_of_clicks,\n     getdate()::timestamp as dw_load_date_time\n\n\n     from  stg.optimove_customer_target_group o\n     join stg.customers c on c.obfuscated_id = o.obfuscated_customer_id\n     join dm_delta_optimove dd on c.id = dd.customer_id\n                                            and o.optimove_campaign_id = dd.optimove_campaign_id\n     left join ( select split_part(split_part(campaign_name, '_copy_',2),'_',2) as optimove_campaign_id,\n                         min(send_time) as min_send_time\n                         from stg.cheetah_send_events\n                  group by 1\n               ) t1 on t1.optimove_campaign_id = o.optimove_campaign_id\n     left join stg.customer_attributes ca on ca.customer_id = c.id\n     left join map.shop sh on sh.shop_id = ca.registered_in_shop_id\n     where o.campaign_customer_group_type = 'Control'\n     and o.email_actual_sent_time >= '2019-03-01'\n\n;"
            },
            {
                "type": "CREATE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "--6,634,646\n\ncreate temp table dm_delta_cheetah as\nselect\n camp_id,\n customer_id\n from stg.cheetah_send_events se\n\nwhere created_at >= '<start_date>'::timestamp - interval '2 day'\nand se.campaign_name not like '%\\\\_copy\\\\_%'\ngroup by 1,2\n\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.cheetah_optimove_email_sends.customer_id",
                        "dm_delta_cheetah.customer_id",
                        "stg.cheetah_optimove_email_sends.camp_id",
                        "dm_delta_cheetah.camp_id",
                        "stg.cheetah_optimove_email_sends.email_source"
                    ]
                },
                "tables": [
                    "stg.cheetah_optimove_email_sends"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.cheetah_optimove_email_sends\nusing dm_delta_cheetah\nwhere 1=1\nand stg.cheetah_optimove_email_sends.customer_id = dm_delta_cheetah.customer_id\nand stg.cheetah_optimove_email_sends.camp_id = dm_delta_cheetah.camp_id\nand stg.cheetah_optimove_email_sends.email_source = 'cheetah_only'\n--7,531,200\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "cheetah_optimove_email_sends"
                    ],
                    "select": [
                        "stg.cheetah_send_events.campaign_name",
                        "t1.opens",
                        "t1.clicks",
                        "stg.cheetah_send_events.msg_id",
                        "stg.cheetah_send_events.camp_id",
                        "stg.cheetah_send_events.customer_id",
                        "map.shop.shop_name",
                        "stg.cheetah_send_events.send_time",
                        "op.min_open_time",
                        "op.number_of_opens",
                        "cl.min_click_time",
                        "cl.number_of_clicks",
                        "msg_id",
                        "click_time",
                        "click_id",
                        "camp_id",
                        "stg.cheetah_open_events.click_id",
                        "stg.cheetah_click_events.click_id",
                        [
                            "stg.cheetah_send_events.campaign_name",
                            "stg.cheetah_send_events.campaign_name"
                        ]
                    ],
                    "join": [
                        "stg.cheetah_send_events.camp_id",
                        "dm_delta_cheetah.camp_id",
                        "stg.cheetah_send_events.customer_id",
                        "dm_delta_cheetah.customer_id",
                        "stg.customers.id",
                        "op.msg_id",
                        "stg.cheetah_send_events.msg_id",
                        "cl.msg_id",
                        "stg.cheetah_open_events.msg_id",
                        "stg.cheetah_click_events.msg_id",
                        "t1.camp_id",
                        "stg.customer_attributes.customer_id",
                        "map.shop.shop_id",
                        "stg.customer_attributes.registered_in_shop_id"
                    ],
                    "where": [
                        "campaign_name",
                        "stg.cheetah_send_events.send_time"
                    ]
                },
                "tables": [
                    "stg.cheetah_optimove_email_sends",
                    "stg.cheetah_send_events",
                    "dm_delta_cheetah",
                    "stg.customers",
                    "stg.cheetah_open_events",
                    "stg.cheetah_click_events",
                    "stg.customer_attributes",
                    "map.shop"
                ],
                "subqueries": {
                    "op": "select msg_id, min(click_time) as min_open_time, count(click_id) as number_of_opens from stg.cheetah_open_events group by 1",
                    "cl": "select msg_id, min(click_time) as min_click_time, count(click_id) as number_of_clicks from stg.cheetah_click_events group by 1",
                    "t1": "select camp_id, count(oe.click_id) as opens, count(ce.click_id) as clicks from stg.cheetah_send_events se left join stg.cheetah_open_events oe on oe.msg_id = se.msg_id left join stg.cheetah_click_events ce on ce.msg_id = se.msg_id group by 1"
                },
                "skipped": false,
                "value": "insert into stg.cheetah_optimove_email_sends\n  select\n    'cheetah_only' as email_source,\n    case when lower(se.campaign_name) like '%_control%' and t1.opens =0 and t1.clicks= 0\n         then 0 else 1 end as email_sent,\n    se.msg_id,\n    se.camp_id,\n    se.campaign_name,\n    se.customer_id,\n    sh.shop_name,\n    se.send_time,\n    null as target_group_id,\n    null as target_group_name,\n    null as optimove_campaign_id,\n    case when lower(se.campaign_name) like '%_control%' and t1.opens =0 and t1.clicks= 0\n         then 'Control' else 'Test' end as campaign_customer_group,\n    null as campaign_type,\n    op.min_open_time,\n    op.number_of_opens,\n    cl.min_click_time,\n    cl.number_of_clicks,\n    getdate()::timestamp as dw_load_date_time\n\n\n\n from stg.cheetah_send_events se\n join dm_delta_cheetah dd on se.camp_id = dd.camp_id and se.customer_id = dd.customer_id\n join stg.customers c on c.id = se.customer_id\n left join (select msg_id\n              , min(click_time) as min_open_time\n              ,count(click_id) as number_of_opens\n            from stg.cheetah_open_events group by 1\n           ) op on op.msg_id = se.msg_id\n  left join (select msg_id\n              , min(click_time) as min_click_time\n              ,count(click_id) as number_of_clicks\n            from stg.cheetah_click_events group by 1\n           ) cl on cl.msg_id = se.msg_id\n  left join  (select camp_id,\n                     count(oe.click_id) as opens,\n                     count(ce.click_id) as clicks\n              from stg.cheetah_send_events se\n              left join stg.cheetah_open_events oe on oe.msg_id = se.msg_id\n              left join stg.cheetah_click_events ce on ce.msg_id = se.msg_id\n              group by 1) t1\n              on t1.camp_id = se.camp_id\n\n  left join stg.customer_attributes ca on ca.customer_id = se.customer_id\n  left join map.shop sh on sh.shop_id = ca.registered_in_shop_id\n\n  where campaign_name not like '%\\\\_copy\\\\_%'\n  and se.send_time::date >= '2019-03-01'\n;"
            }
        ],
        "transform.tmp.bm2_launch.sql": [
            {
                "type": "DELETE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "--truncate table tmp.bm2_adobe_kpi;\ndelete from tmp.bm2_adobe_kpi;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "bm2_adobe_kpi"
                    ],
                    "select": [
                        "stg.adobe_web_orig.date_time",
                        "post_evar54",
                        "post_evar55",
                        "stg.adobe_web_orig.mcvisid",
                        "stg.adobe_web_orig.visit_num",
                        "*"
                    ],
                    "join": [
                        "stg.adobe_web_orig.ip",
                        "tmp.dsc_internal_ip.ip_address"
                    ],
                    "where": [
                        "tmp.dsc_internal_ip.ip_address",
                        "stg.adobe_web_orig.date_time"
                    ]
                },
                "tables": [
                    "tmp.bm2_adobe_kpi",
                    "stg.adobe_web_orig",
                    "tmp.dsc_internal_ip"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into tmp.bm2_adobe_kpi\nSELECT\n    date_trunc('day', a.date_time) AS date\n  , post_evar54 as bm\n  , post_evar55 as ab\n  , count(distinct a.mcvisid) as unq_visitors\n  , count(distinct a.mcvisid + '-'+ a.visit_num) as visits\n  , count(*) as pv\nFROM stg.adobe_web_orig a\n  left outer join tmp.dsc_internal_ip ip\n    on a.ip = ip.ip_address\nWHERE 1 = 1\n  AND ip.ip_address is null\n  AND a.date_time >= '2018-03-28 00:00:00' --AND '2018-03-30 23:59:59'\n  AND a.username = 'dscwebproduction'\ngroup by\n    date_trunc('day', a.date_time)\n  , post_evar54\n  , post_evar55\norder by\n    date_trunc('day', a.date_time)\n  , post_evar54\n  , post_evar55\n;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "--truncate table tmp.bm2_adobe_details;\ndelete from tmp.bm2_adobe_details;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "bm2_adobe_details"
                    ],
                    "select": [
                        "a.date_time"
                    ]
                },
                "tables": [
                    "tmp.bm2_adobe_details"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into tmp.bm2_adobe_details\nSELECT\n    date_trunc('day', a.date_time)  AS date\n  --, a.mcvisid\n  , a.post_evar54 as bm\n  , a.post_evar55 as ab\n  , a.post_evar23 as obfuscated_customer_id\n  , a.post_evar40 as obfuscated_order_id\n  , o.customer_id as ord_customer_id\n  , dc.customer_id as cust_customer_id\n  , dc.email as customer_email\n  , o.id as order_id\n  , coalesce(o.customer_id, dc.customer_id) as customer_id\n  , a.post_evar19 membership\n  , count(distinct a.mcvisid) as unq_visitors\n  , count(distinct a.mcvisid + '-'+ a.visit_num) as visits\n  , count(*) as pv\n\t--select count(1)\nFROM stg.adobe_web_orig a\n  left outer join tmp.dsc_internal_ip ip\n    on a.ip = ip.ip_address\n  left outer join dmt.d_customer dc\n    on a.post_evar23 = dc.obfuscated_id\n  left outer join stg.orders o\n    on a.post_evar40 = o.obfuscated_id\nWHERE 1 = 1\n  AND ip.ip_address is null\n  AND a.date_time >= '2018-03-28 00:00:00' --AND '2018-03-31 23:59:59'\n  AND a.username = 'dscwebproduction'\n  AND post_evar54 is not null\n  AND post_evar55 is not null\ngroup by\n    date_trunc('day', a.date_time)\n  --, a.mcvisid\n  , a.post_evar54\n  , a.post_evar55\n  , a.post_evar23\n  , dc.customer_id\n  , dc.email\n  , a.post_evar40\n  , o.customer_id\n  , dc.customer_id\n  , o.id\n  , a.post_evar19\n  , coalesce(o.customer_id, dc.customer_id)\norder by\n    date_trunc('day', a.date_time)\n  --, a.mcvisid\n  , a.post_evar54\n  , a.post_evar55\n  , a.post_evar23\n;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [
                    "tmp.bm2_adobe_details_01"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from tmp.bm2_adobe_details_01;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "bm2_adobe_details_01"
                    ],
                    "select": [
                        "stg.adobe_web_orig.date_time",
                        "stg.adobe_web_orig.product_list",
                        "stg.adobe_web_orig.post_evar54",
                        "stg.adobe_web_orig.post_evar55",
                        "stg.adobe_web_orig.post_evar24",
                        "stg.adobe_web_orig.transactionid",
                        "stg.orders.customer_id",
                        "dmt.d_customer.customer_id",
                        "dmt.d_customer.email",
                        "stg.orders.id",
                        "stg.adobe_web_orig.post_evar19",
                        "stg.adobe_web_orig.mcvisid",
                        "stg.adobe_web_orig.visit_num",
                        "*"
                    ],
                    "join": [
                        "stg.adobe_web_orig.ip",
                        "tmp.dsc_internal_ip.ip_address",
                        "stg.adobe_web_orig.post_evar24",
                        "dmt.d_customer.obfuscated_id",
                        "stg.adobe_web_orig.transactionid",
                        "stg.orders.obfuscated_id"
                    ],
                    "where": [
                        "tmp.dsc_internal_ip.ip_address",
                        "stg.adobe_web_orig.date_time"
                    ]
                },
                "tables": [
                    "tmp.bm2_adobe_details_01",
                    "stg.adobe_web_orig",
                    "tmp.dsc_internal_ip",
                    "dmt.d_customer",
                    "stg.orders"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into tmp.bm2_adobe_details_01\nSELECT\n    date_trunc('day', a.date_time)  AS date\n  , a.product_list\n  , a.post_evar54 as bm\n  , a.post_evar55 as ab\n  , a.post_evar24 as obfuscated_customer_id\n  , a.transactionid\n  , o.customer_id as ord_customer_id\n  , dc.customer_id as cust_customer_id\n  , dc.email as customer_email\n  , o.id as order_id\n  , coalesce(o.customer_id, dc.customer_id) as customer_id\n  , a.post_evar19 membership\n  , count(distinct a.mcvisid) as unq_visitors\n  , count(distinct a.mcvisid + '-'+ a.visit_num) as visits\n  , count(*) as pv\nFROM stg.adobe_web_orig a\n  left outer join tmp.dsc_internal_ip ip\n    on a.ip = ip.ip_address\n  left outer join dmt.d_customer dc\n    on a.post_evar24 = dc.obfuscated_id\n  left outer join stg.orders o\n    on a.transactionid = o.obfuscated_id\nWHERE 1 = 1\n  AND ip.ip_address is null\n  AND a.date_time >= '2018-03-28 00:00:00' --AND '2019-03-31 23:59:59'\n  AND a.username = 'dscwebproduction'\n  AND post_evar54 is not null\n  AND post_evar55 is not null\ngroup by\n    date_trunc('day', a.date_time)\n  , a.product_list\n  , a.post_evar54\n  , a.post_evar55\n  , a.post_evar24\n  , dc.customer_id\n  , dc.email\n  , a.transactionid\n  , o.customer_id\n  , dc.customer_id\n  , o.id\n  , a.post_evar19\n  , coalesce(o.customer_id, dc.customer_id)\norder by\n    date_trunc('day', a.date_time)\n  , a.product_list\n  , a.post_evar54\n  , a.post_evar55\n  , a.post_evar24\n;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [
                    "tmp.bm2_adobe_src_kpi"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from tmp.bm2_adobe_src_kpi;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "bm2_adobe_src_kpi"
                    ],
                    "select": [
                        "a.date_time",
                        "post_evar54",
                        "post_evar55"
                    ]
                },
                "tables": [
                    "tmp.bm2_adobe_src_kpi"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into tmp.bm2_adobe_src_kpi\nSELECT\n    date_trunc('day', a.date_time) AS date\n  , post_evar54 as bm\n  , post_evar55 as ab\n  --, case when (a.visit_ref_domain is null and a.visit_start_page_url not ilike '%utm%') then 'dir_org' else 'paid' end as traffic_src\n  , case when a.visit_ref_domain is not null and visit_start_page_url like '%utm%'  then 'paid' else 'dir_org' end as traffic_src\n  , count(distinct a.mcvisid) as unq_visitors\n  , count(distinct a.mcvisid + '-'+ a.visit_num) as visits\n  , count(*) as pv\nFROM stg.adobe_web_orig a\n  left outer join tmp.dsc_internal_ip ip\n    on a.ip = ip.ip_address\nWHERE 1 = 1\n  AND ip.ip_address is null\n  AND a.date_time >= '2018-03-28 00:00:00' --AND '2018-03-30 23:59:59'\n  AND a.username = 'dscwebproduction'\ngroup by\n  1,2,3,4\norder by\n  1,2,3,4\n;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [
                    "tmp.bm2_adobe_details_src_01"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from tmp.bm2_adobe_details_src_01;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "bm2_adobe_details_src_01"
                    ],
                    "select": [
                        "stg.adobe_web_orig.date_time",
                        "stg.adobe_web_orig.product_list",
                        "stg.adobe_web_orig.post_evar54",
                        "stg.adobe_web_orig.post_evar55",
                        "stg.adobe_web_orig.visit_ref_domain",
                        "visit_start_page_url",
                        "stg.adobe_web_orig.post_evar24",
                        "stg.adobe_web_orig.transactionid",
                        "stg.adobe_web_orig.post_evar23",
                        "stg.adobe_web_orig.post_evar19",
                        "stg.adobe_web_orig.mcvisid",
                        "stg.adobe_web_orig.visit_num",
                        "*"
                    ],
                    "join": [
                        "stg.adobe_web_orig.ip",
                        "tmp.dsc_internal_ip.ip_address"
                    ]
                },
                "tables": [
                    "tmp.bm2_adobe_details_src_01",
                    "stg.adobe_web_orig",
                    "tmp.dsc_internal_ip"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into tmp.bm2_adobe_details_src_01\nSELECT\n    date_trunc('day', a.date_time)  AS date\n  , a.product_list\n  , a.post_evar54 as bm\n  , a.post_evar55 as ab\n  , case when a.visit_ref_domain is not null and visit_start_page_url like '%utm%'  then 'paid' else 'dir_org' end as traffic_src\n  , a.post_evar24 as obfuscated_customer_id\n  , a.transactionid\n  , a.post_evar24 as ord_customer_id\n  , a.post_evar23 as cust_customer_id\n  , null as customer_email\n  , a.transactionid as order_id\n  , a.post_evar24 as customer_id\n  , a.post_evar19 membership\n  , count(distinct a.mcvisid) as unq_visitors\n  , count(distinct a.mcvisid + '-'+ a.visit_num) as visits\n  , count(*) as pv\nFROM stg.adobe_web_orig a\n  left outer join tmp.dsc_internal_ip ip\n    on a.ip = ip.ip_address\n -- left outer join dmt.d_customer dc\n--    on a.post_evar24 = dc.obfuscated_id\n--  left outer join stg.orders o\n --   on a.transactionid = o.obfuscated_id\nWHERE 1 = 1\n  AND ip.ip_address is null\n  --AND a.date_time >= '2018-03-28 00:00:00' --AND '2019-03-31 23:59:59'\n  AND a.date_time >= '2018-03-28 00:00:00' --and '2018-04-20 00:00:00'\n  AND a.username = 'dscwebproduction'\n  AND post_evar54 is not null\n  AND post_evar55 is not null\ngroup by\n  1,2,3,4,5,6,7,8,9,10,11,12,13\n;"
            }
        ],
        "extract.dsc_prod.survey_options.sql": [],
        "transform.stg.order_frequency_mapping.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "order_frequency_delta"
                    ],
                    "select": [
                        "stg.orders.id"
                    ],
                    "where": [
                        "stg.orders.created_at"
                    ]
                },
                "tables": [
                    "extract.order_frequency_delta",
                    "stg.orders"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO extract.order_frequency_delta\nSelect o.id as order_id\nfrom stg.orders o\nwhere o.created_at >= '<start_date>'::timestamp - interval '1 day'\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.order_frequency_mapping.order_id",
                        "extract.order_frequency_delta.order_id"
                    ]
                },
                "tables": [
                    "stg.order_frequency_mapping"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.order_frequency_mapping\nusing extract.order_frequency_delta\nwhere stg.order_frequency_mapping.order_id = extract.order_frequency_delta.order_id\n;"
            },
            {
                "skipped": true,
                "value": "INSERT INTO stg.order_frequency_mapping\nSELECT m.id as order_id, i.invoice_id, m.created_at as order_created_at, m.customer_id, G.customer_subscription_plan_id, G.bm_type, G.frequency\nFROM extract.order_frequency_delta as dd\nJOIN dmt.f_invoice as i\n\tON dd.order_id = i.order_id\nJOIN stg.orders as m\n\tON i.order_id = m.id\nLEFT JOIN\n(\nSelect order_id, created_at, customer_id, customer_subscription_plan_id, bm_type, frequency, frequency_created_at, frequency_ended_at, customer_created_at \n, ROW_NUMBER() over(PARTITION by order_id order by bm_type desc, frequency_created_at) as rn_sub_plan\nFrom\n\t(\n\t\tSELECT o.id as order_id, o.created_at, o.customer_id, dcp.customer_subscription_plan_id, dcp.bm_type, C.frequency, C.frequency_created_at, C.frequency_ended_at, dc360.customer_created_at \n\t\t, ROW_NUMBER() over(PARTITION by o.id order by C.frequency_created_at) as rn\n\t\tFROM extract.order_frequency_delta as dd\n\t\tJOIN stg.orders as o\n\t\t\tON dd.order_id = o.id\n\t\tLEFT JOIN dmt.d_customer_plan_360 as dcp\n\t\t\tON o.customer_id = dcp.customer_id AND o.customer_subscription_id = dcp.customer_subscription_plan_id and (o.created_at >= dateadd(sec, -50, start_date_time) and o.created_at <= COALESCE(end_date_time, getdate()))\n\t\tLEFT JOIN \n\t\t\t(\n\t\t\t\tSELECT cs.id as customer_subscription_id\n\t\t\t\t, cs.customer_id\n\t\t\t\t, COALESCE(A.old_frequency, cs.frequency) as frequency\n\t\t\t\t, cs.created_at as frequency_created_at\n\t\t\t\t, COALESCE(A.created_at, cs.end_date_time)  as frequency_ended_at\n\t\t\t\tFROM stg.customer_subscriptions as cs\n\t\t\t\tLEFT JOIN \n\t\t\t\t\t(\n\t\t\t\t\tSELECT customer_subscription_id, old_frequency, created_at, row_number() over (partition by customer_subscription_id order by created_at) as rank\n\t\t\t\t\tfrom stg.customer_subscription_product_frequency_histories \n\t\t\t\t\t) A\n\t\t\t\tON A.customer_subscription_id = cs.id and A.rank = 1\n\n\t\t\t\tUNION \n\n\t\t\t\tSELECT cs.id as customer_subscription_id\n\t\t\t\t, cs.customer_id\n\t\t\t\t, COALESCE(B.new_frequency, cs.frequency) as new_frequency\n\t\t\t\t, COALESCE(B.frequency_created_at, cs.created_at) frequency_created_at\n\t\t\t\t, COALESCE(B.frequency_ended_at, cs.end_date_time) as frequency_ended_at\n\t\t\t\tfrom stg.customer_subscriptions as cs \n\t\t\t\tLEFT JOIN \n\t\t\t\t\t(\n\t\t\t\t\tSELECT customer_subscription_id, new_frequency, created_at as frequency_created_at, lead(created_at, 1) over (partition by customer_subscription_id order by created_at) as frequency_ended_at\n\t\t\t\t\tfrom stg.customer_subscription_product_frequency_histories \n\t\t\t\t\t) B\n\t\t\t\ton B.customer_subscription_id = cs.id \n\t\t\t\torder by 1,4 \n\t\t\t)C \n\t\t\tON o.customer_id = C.customer_id AND dcp.customer_subscription_plan_id = C.customer_subscription_id and (o.created_at >= C.frequency_created_at and o.created_at < COALESCE(C.frequency_ended_at, getdate()))\n\t\tLEFT JOIN dmt.d_customer_360 as dc360\n\t\t\tON o.customer_id = dc360.customer_id \n\t\tLEFT JOIN stg.test_customers AS test_customers \n\t\t\tON o.customer_id = test_customers.customer_id \n\n\t\twhere 1 = 1\n\t\tAND dcp.bm_type = 'sub'\n\t\tAND (dc360.email NOT LIKE '%@dollarshaveclub.%' OR dc360.email is NULL)\n\t\tAND (test_customers.customer_id IS NULL)\n\t\tgroup by 1, 2, 3, 4, 5, 6,7,8,9\n\n\t\tUNION\n\n\t\tSELECT o.id as order_id, o.created_at, o.customer_id, dcp.customer_subscription_plan_id, dcp.bm_type, D.frequency, D.frequency_created_at, D.frequency_ended_at, dc360.customer_created_at \n\t\t, ROW_NUMBER() over(PARTITION by o.id order by D.frequency_created_at) as rn_plan\n\t\tfrom extract.order_frequency_delta as dd\n\t\tJOIN stg.orders as o\n\t\t\tON dd.order_id = o.id\n\t\tLEFT JOIN dmt.d_customer_plan_360 as dcp\n\t\t\tON o.customer_id = dcp.customer_id and (o.created_at >= dateadd(sec, -50, COALESCE(start_date_time, getdate())) and o.created_at <= COALESCE(end_date_time, getdate()))\n\t\tLEFT JOIN \n\t\t\t(\n\t\t\t\tSELECT ps.id as customer_plan_id\n\t\t\t\t, ps.customer_id\n\t\t\t\t, COALESCE(A.old_frequency, ps.plan_frequency) as frequency\n\t\t\t\t, ps.plan_created_at as frequency_created_at\n\t\t\t\t, COALESCE(A.rails_site_processed_at, (case when ps.plan_state = 'inactive' and  pc.plan_ended_at is null then ps.plan_updated_at else pc.plan_ended_at end))  as frequency_ended_at\n\t\t\t\tFROM stg.ps_plans as ps\n\t\t\t\tLEFT JOIN stg.plan_cancellations pc\n\t\t\t\t\tON pc.id = ps.plan_cancellation_id AND pc.customer_id = ps.customer_id and pc.plan_id = ps.id\n\t\t\t\tLeft Join \n\t\t\t\t\t(\n\t\t\t\t\tSELECT ce.plan_id, ce.old_frequency, ce.rails_site_processed_at::timestamp as rails_site_processed_at, row_number() over (partition by ce.plan_id order by ce.dsc_processed_at) as rank\n\t\t\t\t\tFROM stg.ps_change_plan_attribute_events ce \n\t\t\t\t\twhere event = 'change_plan_frequency' \n\t\t\t\t\t) A\n\t\t\t\tON A.plan_id = ps.id and A.rank = 1\n\n\t\t\t\tUNION \n\n\t\t\t\tSELECT ps.id as customer_plan_id\n\t\t\t\t, ps.customer_id\n\t\t\t\t, COALESCE(B.new_frequency, ps.plan_frequency) as new_frequency\n\t\t\t\t, COALESCE(B.frequency_created_at, ps.plan_created_at) frequency_created_at\n\t\t\t\t, COALESCE(B.frequency_ended_at, (case when ps.plan_state = 'inactive' and  pc.plan_ended_at is null then ps.plan_updated_at else pc.plan_ended_at end)) as frequency_ended_at\n\t\t\t\tFROM stg.ps_plans as ps\n\t\t\t\tLEFT JOIN stg.plan_cancellations pc\n\t\t\t\t\tON pc.id = ps.plan_cancellation_id AND pc.customer_id = ps.customer_id and pc.plan_id = ps.id\n\t\t\t\tLEFT join \n\t\t\t\t\t(\n\t\t\t\t\tSELECT ce.plan_id, ce.new_frequency, ce.rails_site_processed_at::timestamp as frequency_created_at, lead(ce.rails_site_processed_at::timestamp, 1) over (partition by ce.plan_id order by ce.rails_site_processed_at::timestamp) as frequency_ended_at\n\t\t\t\t\tFROM stg.ps_change_plan_attribute_events ce \n\t\t\t\t\twhere event = 'change_plan_frequency' \n\t\t\t\t\t) B\n\t\t\t\tON B.plan_id = ps.id \n\t\t\t\torder by 1,4 \n\t\t\t) D\n\t\t\tON o.customer_id = D.customer_id AND dcp.customer_subscription_plan_id = D.customer_plan_id and (o.created_at >= dateadd(sec, -50, COALESCE(D.frequency_created_at, getdate())) and o.created_at < COALESCE(D.frequency_ended_at, getdate()))\n\t\tLEFT JOIN dmt.d_customer_360 as dc360\n\t\t\tON o.customer_id = dc360.customer_id \n\t\tLEFT JOIN stg.test_customers AS test_customers \n\t\tON o.customer_id = test_customers.customer_id \t\n\n\t\twhere 1 = 1 \n\t\tAND dcp.bm_type = 'plan'\n\t\tAND (dc360.email NOT LIKE '%@dollarshaveclub.%' OR dc360.email is NULL)\n\t\tAND (test_customers.customer_id IS NULL)\n\t\tgroup by 1, 2, 3, 4, 5, 6,7,8,9\n\t\torder by 1\n\t) r\nwhere rn = 1\n) G\nON m.id = G.order_id and rn_sub_plan = 1\nLEFT JOIN dmt.d_customer as dc\n\tON m.customer_id = dc.customer_id \nLEFT JOIN stg.test_customers AS test_customers \nON m.customer_id = test_customers.customer_id \nLEFT JOIN map.dsc_internal_ip ip\nON dc.current_sign_in_ip = ip.ip_address\n\t\t\t\nwhere 1 = 1 \nAND (dc.email NOT LIKE '%@dollarshaveclub.%' OR dc.email is NULL)\nAND (test_customers.customer_id IS NULL)\nand ip.ip_address IS NULL\ngroup by 1, 2, 3, 4, 5, 6,7 \norder by 1\n;"
            }
        ],
        "transform.dmt.f_customer_credit.sql": [
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "stg.erp_customer_credits.customer_id"
                    ],
                    "where": [
                        "stg.erp_customer_credits.dsc_processed_at"
                    ]
                },
                "tables": [
                    "dm_delta",
                    "stg.erp_customer_credits"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "CREATE TEMP TABLE dm_delta AS\nselect distinct cc.customer_id as customer_id\nfrom stg.erp_customer_credits cc\nwhere (\n        cc.dsc_processed_at >= '<start_date>'::timestamp  -  interval '1 day'\n       )\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "dmt.f_customer_credit.customer_id",
                        "dm_delta.customer_id"
                    ]
                },
                "tables": [
                    "dmt.f_customer_credit"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from dmt.f_customer_credit\nusing dm_delta\nwhere dmt.f_customer_credit.customer_id = dm_delta.customer_id\n;"
            },
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- TRUNCATE TABLE dmt.f_customer_credit;  select count(1) from dm_delta ;  select count(distinct customer_id),count(1) from stg.erp_customer_credits ;\n\nINSERT INTO dmt.f_customer_credit\nselect\n     cc.id AS customer_credit_id \n\t,cc.customer_id   \n\t,CASE\n        WHEN upper(cc.shop_name) = 'WWW' THEN 'US' \n        WHEN upper(cc.shop_name) = 'AU' THEN 'AU' \n        WHEN upper(cc.shop_name) = 'CA' THEN 'CA' \n        WHEN upper(cc.shop_name) = 'UK' THEN 'UK' \n        ELSE 'Other' END AS shop_name \n\t,cc.shop_code \n\t,cc.amount \n\t,cc.credit_type \n\t,cc.currency_code \n\t,cc.created_at\n\t,cc.source_type \n\t,cc.debit_type \n\t,CASE WHEN cc.amount > 0 THEN 'Credited' \n          WHEN cc.amount < 0 THEN 'Redeemed' \n          WHEN cc.amount = 0 THEN 'Zero'\n     END AS transaction_type \n    ,getdate() \nfrom dm_delta dd\n inner join stg.erp_customer_credits cc\n ON dd.customer_id = cc.customer_id\n left outer join stg.test_customers tc\n  ON dd.customer_id = tc.customer_id\nwhere 1=1\n  and tc.customer_id is null\n;"
            }
        ],
        "load.map.warehouse.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "warehouse"
                    ],
                    "select": [
                        "t.warehouse_id",
                        "t.warehouse_name"
                    ]
                },
                "tables": [
                    "map.warehouse"
                ],
                "subqueries": {
                    "t": "SELECT 1 AS warehouse_id, 'Kentucky' AS warehouse_name UNION ALL SELECT 4 AS warehouse_id, 'Torrance' AS warehouse_name UNION ALL SELECT 5 AS warehouse_id, 'Grove City' AS warehouse_name"
                },
                "skipped": false,
                "value": "INSERT INTO map.warehouse\nselect\n    t.warehouse_id\n  , t.warehouse_name\n  , getdate() as dw_load_date_time\nfrom (\n       SELECT\n         1          AS warehouse_id,\n         'Kentucky' AS warehouse_name\n       UNION ALL\n       SELECT\n         4          AS warehouse_id,\n         'Torrance' AS warehouse_name\n       UNION ALL\n       SELECT\n         5            AS warehouse_id,\n         'Grove City' AS warehouse_name\n     ) t\n;"
            }
        ],
        "transform.dmt.d_customer_status_ext.sql": [
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "dmt.d_customer.customer_id"
                    ],
                    "join": [
                        "dmt.d_customer.customer_id",
                        "dmt.d_customer_subscription.customer_id",
                        "stg.ps_plans.customer_id",
                        "stg.ps_scheduled_carts.customer_id"
                    ],
                    "where": [
                        "dmt.d_customer.updated_at"
                    ]
                },
                "tables": [
                    "dm_delta",
                    "dmt.d_customer",
                    "dmt.d_customer_subscription",
                    "stg.ps_plans",
                    "stg.ps_scheduled_carts"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "CREATE TEMP TABLE dm_delta AS\nSELECT DISTINCT c.customer_id\n  FROM dmt.d_customer c\n  LEFT JOIN dmt.d_customer_subscription cs\n    ON c.customer_id = cs.customer_id\n  LEFT JOIN stg.ps_plans pc\n    ON c.customer_id = pc.customer_id\n  LEFT JOIN stg.ps_scheduled_carts psc\n    ON c.customer_id = psc.customer_id\nWHERE (\n         c.updated_at >= '<start_date>'::timestamp  -  interval '1 day'\n         OR cs.updated_at >= '<start_date>'::timestamp -  interval '1 day'\n         OR pc.dsc_processed_at >= '<start_date>'::timestamp -  interval '1 day'\n         OR psc.dsc_processed_at >= '<start_date>'::timestamp -  interval '1 day'\n       )\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "dmt.d_customer_status_ext.customer_id",
                        "dm_delta.customer_id"
                    ]
                },
                "tables": [
                    "dmt.d_customer_status_ext"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from dmt.d_customer_status_ext\nusing dm_delta\nwhere dmt.d_customer_status_ext.customer_id = dm_delta.customer_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "d_customer_status_ext"
                    ],
                    "select": [
                        "*",
                        "customer_id",
                        "customer_subscription_id",
                        "frequency",
                        "start_date_time",
                        "end_date_time",
                        "next_bill_date_time",
                        "subscription_plan",
                        "status_name",
                        "iteration_count",
                        "current_iteration_count",
                        "first_customer_subscription_start_date_time",
                        "shop_id",
                        "reactivation",
                        "subscription_amount",
                        "id",
                        "plan_activated_at",
                        "plan_state",
                        "plan_bills_at",
                        "plan_id",
                        "dmt.d_customer.customer_id",
                        "dmt.d_customer.email",
                        "dmt.d_customer.wallet_balance",
                        "dmt.d_customer.provider",
                        "cs.customer_subscription_id",
                        "cs.frequency",
                        "cs.start_date_time",
                        "cs.end_date_time",
                        "cs.next_bill_date_time",
                        "cs.subscription_plan",
                        "cs.status_name",
                        "dmt.d_customer.sign_in_count",
                        "cs.iteration_count",
                        "cs.current_iteration_count",
                        "cs.first_customer_subscription_start_date_time",
                        "cs.shop_id",
                        "cs.reactivation",
                        "cs.subscription_amount",
                        "sc.plan_id",
                        "pc.plan_frequency",
                        "pc.plan_activated_at"
                    ],
                    "order_by": [
                        "created_at",
                        "plan_created_at",
                        "scheduled_cart_created_at"
                    ],
                    "where": [
                        "rnk",
                        "plans_curr",
                        "scheduled_cart_curr",
                        "stg.test_customers.customer_id",
                        "map.dsc_internal_ip.ip_address"
                    ],
                    "join": [
                        "dm_delta.customer_id",
                        "dmt.d_customer.customer_id",
                        "cs.customer_id",
                        "pc.customer_id",
                        "pc.id",
                        "sc.current_scheduled_cart_id",
                        "stg.test_customers.customer_id",
                        "dmt.d_customer.current_sign_in_ip",
                        "map.dsc_internal_ip.ip_address"
                    ]
                },
                "tables": [
                    "dmt.d_customer_status_ext",
                    "dmt.d_customer_subscription",
                    "stg.ps_plans",
                    "stg.ps_scheduled_carts",
                    "dm_delta",
                    "dmt.d_customer",
                    "stg.test_customers",
                    "map.dsc_internal_ip"
                ],
                "subqueries": {
                    "z": "SELECT plan_id, first_value (id) OVER (PARTITION BY customer_id ORDER BY scheduled_cart_created_at DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as current_scheduled_cart_id, row_number () OVER (PARTITION BY customer_id ORDER BY scheduled_cart_created_at desc) AS rnk FROM stg.ps_scheduled_carts"
                },
                "skipped": false,
                "value": "INSERT INTO dmt.d_customer_status_ext\nWITH\n\ncustomer_subscription_curr as\n  (SELECT * FROM\n  (SELECT customer_id, customer_subscription_id, frequency,\n          start_date_time, end_date_time, next_bill_date_time,\n          subscription_plan, status_name, iteration_count, current_iteration_count,\n          first_customer_subscription_start_date_time, shop_id, reactivation, subscription_amount,\n\n  row_number()\n              OVER (\n                PARTITION BY customer_id\n                ORDER BY created_at DESC ) AS rnk\n  FROM dmt.d_customer_subscription\n  ) z WHERE 1 = 1 AND rnk = 1),\n\nplans_curr as\n  (SELECT * FROM\n  (SELECT id, customer_id, plan_frequency,\n          plan_activated_at, plan_state,\n          shop_id, plan_bills_at,\n\n  row_number()\n            OVER (PARTITION BY customer_id\n                  ORDER BY plan_created_at desc) AS rnk\n  FROM stg.ps_plans) z WHERE 1 = 1 AND rnk = 1),\n\nscheduled_cart_curr as\n  (SELECT * FROM\n  (SELECT plan_id, first_value(id)\n            OVER (PARTITION BY customer_id\n                  ORDER BY scheduled_cart_created_at DESC\n        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as current_scheduled_cart_id,\n  row_number()\n            OVER (PARTITION BY customer_id\n                  ORDER BY scheduled_cart_created_at desc) AS rnk\n  FROM stg.ps_scheduled_carts) z WHERE 1 = 1 AND rnk = 1)\n\n\n  SELECT\n     c.customer_id\n    ,c.email\n    ,c.wallet_balance\n    ,c.provider\n    ,cs.customer_subscription_id\n    ,cs.frequency\n    ,cs.start_date_time     AS subscription_start_date_time\n    ,cs.end_date_time       AS subscription_end_date_time\n    ,cs.next_bill_date_time AS subscription_next_bill_date_time\n    ,cs.subscription_plan\n    ,cs.status_name\n    ,c.sign_in_count\n    ,cs.iteration_count\n    ,cs.current_iteration_count\n    ,cs.first_customer_subscription_start_date_time\n    ,cs.shop_id\n    ,cs.reactivation\n    ,cs.subscription_amount\n    ,sc.plan_id\n    ,CASE WHEN pc.plan_frequency = 1 THEN 'M'\n          WHEN pc.plan_frequency = 2 THEN 'EOM'\n          WHEN pc.plan_frequency = 3 THEN 'E3M'\n          WHEN pc.plan_frequency = 4 THEN 'E4M'\n          WHEN pc.plan_frequency = 5 THEN 'E5M'\n          WHEN pc.plan_frequency = 6 THEN 'E6M'\n    END AS plan_frequency\n    ,pc.plan_activated_at :: TIMESTAMP\n    ,pc.plan_state\n    ,pc.shop_id\n    ,pc.plan_bills_at :: TIMESTAMP\n    ,CASE WHEN sc.plan_id IS NULL THEN 1\n          ELSE 0\n     END AS bm1_flag\n    ,CASE WHEN sc.plan_id IS NOT NULL THEN 1\n          ELSE 0\n     END AS bm2_flag\n    , getdate() as dw_load_date_time\n  FROM dm_delta dd\n  INNER JOIN dmt.d_customer c\n    on dd.customer_id = c.customer_id\n    LEFT JOIN customer_subscription_curr cs\n      ON c.customer_id = cs.customer_id\n    LEFT JOIN plans_curr pc\n      ON c.customer_id = pc.customer_id\n    LEFT JOIN scheduled_cart_curr sc\n      ON pc.id = sc.current_scheduled_cart_id\n    LEFT JOIN stg.test_customers t\n      ON c.customer_id = t.customer_id\n    LEFT JOIN map.dsc_internal_ip ip\n      ON c.current_sign_in_ip = ip.ip_address\n\n  WHERE t.customer_id IS NULL\n        AND ip.ip_address IS NULL ;"
            }
        ],
        "transform.dmt.f_invoice_product.sql": [
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "stg.erp_invoice_items.customer_id"
                    ],
                    "join": [
                        "stg.erp_invoices.id",
                        "stg.erp_invoice_items.invoice_id",
                        "stg.erp_invoices.order_id",
                        "stg.orders.id",
                        "stg.erp_shipments.order_id"
                    ],
                    "where": [
                        "stg.erp_invoice_items.dsc_processed_at"
                    ]
                },
                "tables": [
                    "dm_delta",
                    "stg.erp_invoice_items",
                    "stg.erp_invoices",
                    "stg.orders",
                    "stg.erp_shipments"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "CREATE TEMP TABLE dm_delta AS\nselect distinct ii.customer_id as customer_id\nfrom stg.erp_invoice_items ii\n  inner join stg.erp_invoices i\n    on i.id = ii.invoice_id\n  inner join stg.orders o\n    on i.order_id = o.id\n  left outer join stg.erp_shipments s\n    on i.order_id = s.order_id\nwhere (\n        ii.dsc_processed_at >= '<start_date>'::timestamp  -  interval '1 day'\n       OR i.dsc_processed_at >= '<start_date>'::timestamp  -  interval '1 day'\n       OR o.updated_at >= '<start_date>'::timestamp -  interval '1 day'\n       OR s.dsc_processed_at >= '<start_date>'::timestamp -  interval '1 day'\n       )\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "dmt.f_invoice_product.customer_id",
                        "dm_delta.customer_id"
                    ]
                },
                "tables": [
                    "dmt.f_invoice_product"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from dmt.f_invoice_product\nusing dm_delta\nwhere dmt.f_invoice_product.customer_id = dm_delta.customer_id\n;"
            },
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- TRUNCATE TABLE dmt.f_invoice_product;\n\nINSERT INTO dmt.f_invoice_product\nselect\n  ii.id as invoice_product_id\n\t,ii.invoice_id \n\t,ii.customer_id \n\t,ii.order_id \n\t,ii.order_product_id \n\t,ii.coupon_instance_id \n\t,ii.effective_unit_price \n\t,ii.price \n\t,ii.quantity \n\t,ii.shipping \n\t,ii.shipping_discount \n\t,ii.shipping_tax \n\t,ii.tax \n\t,ii.total_cost \n\t,ii.unit_cost\n\t,ii.discount \n\t,ii.unit_price \n\t,ii.product_id \n\t,ii.product_sku \n\t,ii.bundle_breakdown_id \n\t,ii.discount_distribution \n\t,ii.price_contribution \n\t,ii.shipping_contribution \n\t,ii.shipping_discount_distribution \n\t,ii.top_level_invoice_item_id \n\t,ii.top_level_invoice_item_sku \n\t\n\t-- product column\n    ,p.name\n    ,p.nature\n    \n\t--Shipments columns\n\t,s.id as shipment_id                     \n\t,s.tracking_number as shipment_tracking_number\n\t,DATE_TRUNC('month',s.created_at)::date as shipment_created_month\n\t,s.created_at as shipment_created_at     \n\t,s.updated_at as shipment_updated_at\n\t,left(s.status,32) as shipment_status_code\n\t,case when m_ss.status_code is null then 'Other' else m_ss.status_name end as shipment_status_name\n    ,case when m_ss.status_code is null then 'Other' else m_ss.push_status end as shipment_push_status\n    ,left(s.provider_status, 64) as shipment_provider_status\n    ,left(s.provider_method, 64) as shipment_provider_method\n\t,s.delivered_at as shipment_delivered_at\n    ,s.fulfillment_provider_id as shipment_fulfillment_provider_id\n    ,left(s.fulfillment_provider_name,64) as shipment_fulfillment_provider_name\n    ,case when m_warehouse.warehouse_id is null then 'Other' else m_warehouse.warehouse_name end as warehouse_name\n    ,s.inventory_location_id as shipment_inventory_location_id\n    ,s.order_fulfillment_id as shipment_order_fulfillment_id\n  \t,s.shipped_at as shipment_shipped_at              \n\t,case when m_or.reason_id is null then 'Regular' else m_or.reason_name end as shipment_type \n\t,case when s.id is null then 'false' else 'true' end as shipment_created\t\n\t\t\n\t--Orders columns\n\t,ocs.first_order_date as first_order_date\n\t,DATE_TRUNC('month',ocs.first_order_date)::date as first_order_month\n\t, scs.first_subscription_start_date as first_subscription_date\n  , DATE_TRUNC('month',scs.first_subscription_start_date)::date as first_subscription_month\n\t,o.created_at as order_created_at\n\t,o.updated_at order_updated_at\n    ,i.order_creation_reason\n    ,o.creation_reason as order_creation_reason_id\n    ,case when m_ocr.reason_id is null then 'Other' else m_ocr.reason_name end as order_creation_reason_name\n    ,case when m_or.reason_id is null then 'Other' else m_or.reason_name end as order_reason_name\n    ,case when o.creation_reason = 14 then 'true' else 'false' end nsrq\n    ,case when o.creation_reason = 14 and (o.created_at < cs.first_subscription_start_date OR cs.first_subscription_start_date is null) THEN 'true' else 'false' end as nsrq_guest_purchase\n    ,case when datediff(second, cs.curr_subscription_start_date, o.created_at) between 0 and 60 then 'true' else 'false' end as funnel_purchase_subscription\n    ,case when datediff(second, cs.first_subscription_start_date, o.created_at) between 0 and 60 then 'true' else 'false' end as initial_purchase_customer\n    ,i.order_creation_source\n\t,o.currency_id\n\t,o.customer_subscription_id\n    ,o.confirmation_email_instance_id\n    ,o.customer_subscription_bill_run_id\n\n\t--invoice columns\n\t,i.status as invoice_status\n    ,case when ocs.first_order_id = i.order_id then TRUE else FALSE end as initial_invoice\n    ,case when ocs.first_order_id = i.order_id then 'Initial'  else 'Recurring' end as invoice_revenue_type\n    ,case when m_ocr.reason_id =14\n      then m_ocr.reason_name\n      else\n        case when ocs.first_order_id = i.order_id then 'Initial'  else 'Recurring' end\n      end as invoice_revenue_type_name\n\t, i.customer_created_at  --from erp_invoices table\n\t, i.shipping_address_id  --from erp_invoices table and should match to erp_shipments.shipping_address_id\n  , i.shipping_address_country\n  , i.shipping_address_state_province\n  , i.shipping_address_post_code\n  , i.shop_id\n\t, case when m_shop.shop_id is null then 'Other' else m_shop.shop_name end as shop_name\n  , getdate() as dw_load_date_time\n\n  , i.order_attribution_id\n  , i.order_attribution_attribution_id\n  , i.order_attribution_attribution_type\n  , i.order_attribution_created_at\n  , i.order_attribution_updated_at\n\n  from dm_delta dd\n  inner join stg.erp_invoice_items ii\n  on dd.customer_id = ii.customer_id\n  inner join stg.erp_invoices i\n    on i.id = ii.invoice_id\n  -- invoice cannot exist without order - so inner join\n  inner join stg.orders o\n    on i.order_id = o.id\n  left outer join stg.erp_shipments s\n    on i.order_id = s.order_id\n  left outer join dmt.d_product p\n    on p.product_id = ii.product_id\n  left outer join map.shop m_shop\n    on i.shop_id = m_shop.shop_id\n  left outer join map.warehouse m_warehouse\n    on s.fulfillment_provider_id = m_warehouse.warehouse_id\n  left outer join map.order_creation_reason m_ocr\n    on o.creation_reason = m_ocr.reason_id\n  left outer join map.order_reason m_or\n    on o.creation_reason = m_or.reason_id\n  left outer join map.shipment_status m_ss\n    on s.status = m_ss.status_code\n  -- used for initial_invoice calc;\n  -- TODO: swith to inner join when truncate replaced with delete in customer_status\n  left outer join stg.customer_status cs\n    on i.customer_id = cs.customer_id\ninner join (\n        select\n            o1.customer_id\n          , o1.first_order_id\n          , o1.first_order_date\n        from (\n          SELECT\n              o.customer_id\n            , FIRST_VALUE(o.id) OVER (PARTITION BY o.customer_id ORDER BY o.created_at rows between unbounded preceding and CURRENT ROW) as first_order_id\n            --, LAST_VALUE(o.id) OVER (PARTITION BY o.customer_id ORDER BY o.created_at rows between unbounded preceding and CURRENT ROW) as last_order_id\n            , FIRST_VALUE(o.created_at) OVER (PARTITION BY o.customer_id ORDER BY o.created_at rows between unbounded preceding and CURRENT ROW) as first_order_date\n            --, LAST_VALUE(o.created_at) OVER (PARTITION BY o.customer_id ORDER BY o.created_at rows between unbounded preceding and CURRENT ROW)  as last_order_date\n            , row_number() OVER (PARTITION BY o.customer_id ORDER BY o.created_at desc) as rnk\n          FROM stg.orders o\n            inner join dm_delta ddd\n              on ddd.customer_id = o.customer_id\n        )  o1\n        where 1=1\n          and o1.rnk =1\n  ) ocs\n    on dd.customer_id = ocs.customer_id\n  left outer join (\n        select\n            s1.customer_id\n          , s1.first_subscription_start_date\n          , s1.curr_subscription_start_date\n        from (\n          SELECT\n              s.customer_id\n            , FIRST_VALUE(s.start_date_time) OVER (PARTITION BY s.customer_id ORDER BY s.start_date_time rows between unbounded preceding and CURRENT ROW) as first_subscription_start_date\n            , LAST_VALUE(s.start_date_time) OVER (PARTITION BY s.customer_id ORDER BY s.start_date_time rows between unbounded preceding and CURRENT ROW)  as curr_subscription_start_date\n            , row_number() OVER (PARTITION BY s.customer_id ORDER BY s.start_date_time desc) as rnk\n          FROM stg.customer_subscriptions s\n            inner join dm_delta ddd\n              on ddd.customer_id = s.customer_id\n          --where s.customer_id = 5737548\n        )  s1\n        where 1=1\n          and s1.rnk =1\n  ) scs\n    on dd.customer_id = scs.customer_id\n  left outer join (\n      select\n        customer_id\n      from stg.test_customers\n      group by customer_id\n  ) tc\n  ON dd.customer_id = tc.customer_id\nwhere 1=1\n  and tc.customer_id is null\n;"
            }
        ],
        "load.stg.customer_attributes.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.customer_attributes.id",
                        "extract.customer_attributes.id"
                    ]
                },
                "tables": [
                    "stg.customer_attributes"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.customer_attributes\nusing extract.customer_attributes\nwhere stg.customer_attributes.id = extract.customer_attributes.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_attributes"
                    ],
                    "select": [
                        "*"
                    ]
                },
                "tables": [
                    "stg.customer_attributes",
                    "extract.customer_attributes"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.customer_attributes\nselect\n  *\nfrom extract.customer_attributes\n;"
            }
        ],
        "transform.dmt.d_customer_plan_360.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "plan_360_delta"
                    ],
                    "select": [
                        "stg.customers.id",
                        "stg.ga_visit_customers.customer_id",
                        "dmt.ga_visit_summary.dw_load_date_time"
                    ],
                    "join": [
                        "stg.customers.id",
                        "stg.customer_subscriptions.customer_id",
                        "stg.ps_plans.customer_id",
                        "stg.orders.customer_id",
                        "dmt.ga_visit_summary.visit_id",
                        "stg.ga_visit_customers.visit_id",
                        "vc1.customer_id",
                        "stg.erp_invoice_items.customer_id",
                        "stg.erp_invoice_items.order_id",
                        "stg.orders.id"
                    ],
                    "where": [
                        "stg.customers.updated_at"
                    ]
                },
                "tables": [
                    "extract.plan_360_delta",
                    "stg.customers",
                    "stg.customer_subscriptions",
                    "stg.ps_plans",
                    "stg.orders",
                    "stg.ga_visit_customers",
                    "dmt.ga_visit_summary",
                    "stg.erp_invoice_items"
                ],
                "subqueries": {
                    "t1": "SELECT c.id as customer_id FROM stg.customers c LEFT JOIN stg.customer_subscriptions cs ON c.id = cs.customer_id LEFT JOIN stg.ps_plans pc ON c.id = pc.customer_id LEFT JOIN stg.orders o ON c.id = o.customer_id LEFT JOIN (SELECT vc.customer_id, max(vs.dw_load_date_time) as dw_load_date_time FROM stg.ga_visit_customers vc JOIN dmt.ga_visit_summary vs on vs.visit_id = vc.visit_id GROUP BY 1) vc1 ON vc1.customer_id = c.id LEFT JOIN stg.erp_invoice_items ii ON ii.customer_id = c.id and ii.order_id = o.id WHERE (c.updated_at >= '<start_date>' :: timestamp - interval '2 day' OR cs.updated_at >= '<start_date>' :: timestamp - interval '2 day' OR pc.dsc_processed_at >= '<start_date>' :: timestamp - interval '2 day' OR o.updated_at >= '<start_date>' :: timestamp - interval '2 day' OR vc1.dw_load_date_time >= '<start_date>' :: timestamp - interval '2 day' OR ii.dsc_processed_at >= '<start_date>' :: timestamp - interval '2 day') GROUP BY 1",
                    "vc1": "SELECT vc.customer_id, max(vs.dw_load_date_time) as dw_load_date_time FROM stg.ga_visit_customers vc JOIN dmt.ga_visit_summary vs on vs.visit_id = vc.visit_id GROUP BY 1"
                },
                "skipped": false,
                "value": "INSERT INTO extract.plan_360_delta\nSELECT\n  customer_id\nFROM\n\t(\n\tSELECT  c.id as customer_id\n    FROM stg.customers c\n\t\tLEFT JOIN stg.customer_subscriptions cs\n\t\t\tON c.id = cs.customer_id\n\t\tLEFT JOIN stg.ps_plans pc\n\t\t\tON c.id = pc.customer_id\n\t\tLEFT JOIN stg.orders o\n\t\t\tON c.id = o.customer_id\n\t\tLEFT JOIN\n\t\t(\n\t\tSELECT vc.customer_id, max(vs.dw_load_date_time) as dw_load_date_time\n\t\t\tFROM stg.ga_visit_customers vc\n\t\t\tJOIN dmt.ga_visit_summary vs\n\t\t\t\ton vs.visit_id = vc.visit_id\n\t\t\tGROUP BY 1\n\t\t) vc1\n\t\t\tON vc1.customer_id = c.id\n\t\tLEFT JOIN stg.erp_invoice_items ii\n\t\t\tON ii.customer_id = c.id and ii.order_id = o.id\n  WHERE (\n\t\t\t\t c.updated_at >= '<start_date>'::timestamp  -  interval '2 day'\n\t\t\t\t OR cs.updated_at >= '<start_date>'::timestamp -  interval '2 day'\n\t\t\t\t OR pc.dsc_processed_at >= '<start_date>'::timestamp -  interval '2 day'\n\t\t\t\t OR o.updated_at >= '<start_date>' ::timestamp -  interval '2 day'\n\t\t\t\t OR vc1.dw_load_date_time >= '<start_date>' ::timestamp -  interval '2 day'\n\t\t\t\t OR ii.dsc_processed_at >= '<start_date>'::timestamp -  interval '2 day'\n         )\n  GROUP BY 1\n) t1\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "extract.plan_360_delta.customer_id",
                        "dmt.d_customer_plan_360.customer_id"
                    ]
                },
                "tables": [
                    "dmt.d_customer_plan_360"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM dmt.d_customer_plan_360\nUSING extract.plan_360_delta\nWHERE extract.plan_360_delta.customer_id = dmt.d_customer_plan_360.customer_id;"
            },
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-----------------INITIAL LOAD SCRIPT USING ABOVE DELTA TABLE------------------\n\nINSERT INTO dmt.d_customer_plan_360\nwith sub_plan_list_final\nas\n\t(SELECT ---------FINAL OUTPUT FOR FINAL QUERY. SELECTS RANK = 1 FROM SUB QUERY BELOW--------\n\t\t sp.bm_type\n\t\t ,sp.customer_id\n\t\t ,sp.obfuscated_customer_id\n\t\t ,sp.customer_created_at\n\t\t ,sp.customer_subscription_plan_id\n\t\t ,sp.shop_id\n\t\t ,sp.start_date_time\n\t\t ,sp.end_date_time\n\t\t ,sp.next_bill_date_time\n\t\t ,sp.frequency\n\t\t ,sp.status_name\n\t\t ,sp.cancel_reason\n\t\t ,sp.plan_rank\n\t\t ,sp.linked_start_date_time\n\t\t ,sp.plan_conversion_source\n\t\t ,sp.order_id\n\t\t ,sp.created_at\n\t\t ,sp.sub_total\n\t\t ,sp.obfuscated_order_id\n\t\t ,sp.order_creation_source\n\t\t ,sp.prev_type\n\t\t ,sp.prev_id\n\t\t ,sp.plan_sub_updated_at\n\t\t ,sp.order_updated_at\n\t\t ,sp.migrated_sub_start_date\n\t\t ,sp.migrated_sub_freqeuncy\n\t\tFROM\n\t\t(---------- LINKS SUB OR PLAN TO FIRST ORDER -------------------\n\t\tSELECT\n\t\t\t f.bm_type\n\t\t\t , f.customer_id\n\t\t\t , c.created_at AS customer_created_at\n\t\t\t , c.obfuscated_id AS obfuscated_customer_id\n\t\t\t , f.customer_subscription_id AS customer_subscription_plan_id\n\t\t\t , f.shop_id\n\t\t\t , f.start_date_time\n\t\t\t , f.end_date_time\n\t\t\t , f.next_bill_date_time\n\t\t\t , f.frequency\n\t\t\t , f.status_name\n\t\t\t , f.cancel_reason\n\t\t\t , f.plan_rank\n\t\t\t , f.linked_start_date_time\n\t\t\t , f.plan_conversion_source\n\t\t\t , (case when linked_start_date_time < '2013-03-01' then null else i.id end) AS order_id\n\t\t\t , (case when linked_start_date_time < '2013-03-01' then null else i.created_at end) AS created_at\n\t\t\t , (case when linked_start_date_time < '2013-03-01' then null else i.sub_total end) AS sub_total\n\t\t\t , (case when linked_start_date_time < '2013-03-01' then null else i.obfuscated_id end) AS obfuscated_order_id\n\t\t\t , (case when linked_start_date_time < '2013-03-01' then null else i.creation_source end) AS order_creation_source\n\t\t\t , datediff(MIN,linked_start_date_time ,i.created_at)\n\t\t\t , row_number() OVER(PARTITION BY f.bm_type, f.customer_subscription_id ORDER BY linked_start_date_time ,i.created_at ASC) AS rank\n\t\t\t , f.prev_type\n\t\t\t , prev_id\n\t\t\t , f.updated_at  AS plan_sub_updated_at\n\t\t\t , i.updated_at  AS order_updated_at\n\t\t\t , f.migrated_sub_start_date\n\t\t\t , f.migrated_sub_freqeuncy\n\t\t\tFROM\n\t\t\t\t(\n\t\t\t\tSELECT\n\t\t\t\t\tpf.bm_type\n\t\t\t\t\t,pf.customer_id\n\t\t\t\t\t,pf.customer_subscription_id\n\t\t\t\t\t,pf.shop_id\n\t\t\t\t\t,pf.start_date_time\n\t\t\t\t\t,pf.end_date_time\n\t\t\t\t\t,pf.next_bill_date_time\n\t\t\t\t\t,pf.updated_at\n\t\t\t\t\t,pf.plan_conversion_source\n\t\t\t\t\t,pf.cancel_reason\n\t\t\t\t\t,pf.frequency\n\t\t\t\t\t,pf.status_name\n\t\t\t\t\t,pf.rank as plan_rank\n\t\t\t\t\t,(CASE WHEN (plan_conversion_source is not null AND lag(pf.plan_conversion_source,1) OVER(PARTITION BY pf.customer_id ORDER BY pf.start_date_time ASC) IS NULL)\n\t\t\t\t\t\t\t\tTHEN lag(pf.start_date_time,1) over(PARTITION BY pf.customer_id ORDER BY pf.start_date_time ASC)\n\t\t\t\t\t\t\t\tELSE pf.start_date_time END) AS linked_start_date_time\n\n\t\t\t\t\t,lag(bm_type,1) over (PARTITION BY customer_id ORDER BY start_date_time ASC) AS prev_type\n\t\t\t\t\t,lag(customer_subscription_id,1) over (PARTITION BY customer_id ORDER BY start_date_time ASC) AS prev_id\n\t\t\t\t\t,(case when pf.plan_conversion_source is not null then lag(pf.start_date_time,1) OVER(PARTITION BY pf.customer_id ORDER BY pf.start_date_time ASC) else null end) as migrated_sub_start_date\n\t\t\t\t\t,(case when pf.plan_conversion_source is not null then lag(pf.frequency,1) OVER(PARTITION BY pf.customer_id ORDER BY pf.start_date_time ASC) else null end) as migrated_sub_freqeuncy\n\n\t\t\t\t\tFROM(\n\t\t\t\t\t\t\t---------- ADDS RANK BY CUSTOMER TO GIVE THE SUB PLAN RANK ------------\n\t\t\t\t\t\t\t SELECT\n\t\t\t\t\t\t\t\tusp.bm_type\n\t\t\t\t\t\t\t\t, usp.customer_id\n\t\t\t\t\t\t\t\t, usp.customer_subscription_id\n\t\t\t\t\t\t\t\t, usp.shop_id\n\t\t\t\t\t\t\t\t, usp.start_date_time\n\t\t\t\t\t\t\t\t, usp.end_date_time\n\t\t\t\t\t\t\t\t, usp.next_bill_date_time\n\t\t\t\t\t\t\t\t, usp.updated_at\n\t\t\t\t\t\t\t\t, usp.plan_conversion_source\n\t\t\t\t\t\t\t\t, usp.cancel_reason\n\t\t\t\t\t\t\t\t, usp.frequency\n\t\t\t\t\t\t\t\t, usp.status_name\n\t\t\t\t\t\t\t\t,  row_number() over (PARTITION BY usp.customer_id ORDER BY usp.start_date_time ASC) AS rank\n\n\t\t\t\t\t\t\tFROM (\n\t\t\t\t\t\t\t\t\t\t\t--------- ORIGINAL UNION QUERY FOR SUBS AND PLANS-----------\n\t\t\t\t\t\t\t\t\t\t SELECT\n\t\t\t\t\t\t\t\t\t\t\t 'sub' AS bm_type\n\t\t\t\t\t\t\t\t\t\t\t , s.customer_id\n\t\t\t\t\t\t\t\t\t\t\t , s.id AS customer_subscription_id\n\t\t\t\t\t\t\t\t\t\t\t , s.shop_id\n\t\t\t\t\t\t\t\t\t\t\t , s.start_date_time\n\t\t\t\t\t\t\t\t\t\t\t , s.end_date_time\n\t\t\t\t\t\t\t\t\t\t\t , s.next_bill_date_time\n\t\t\t\t\t\t\t\t\t\t\t , s.updated_at\n\t\t\t\t\t\t\t\t\t\t\t , NULL AS plan_conversion_source\n\t\t\t\t\t\t\t\t\t\t\t , sc.reason AS cancel_reason\n\t\t\t\t\t\t\t\t\t\t\t , s.frequency\n\t\t\t\t\t\t\t\t\t\t\t ,(CASE WHEN s.status = 0 THEN 'Cancelled' WHEN s.status = 1 THEN 'Active'\n\t\t\t\t\t\t\t\t\t\t\t\tWHEN s.status = 2 THEN 'Suspended' WHEN s.status = 3 THEN 'S Timeout'\n\t\t\t\t\t\t\t\t\t\t\t\tWHEN s.status = 4 THEN 'Paused' ELSE 'Other' END) status_name\n\t\t\t\t\t\t\t\t\t\t FROM stg.customer_subscriptions s\n\t\t\t\t\t\t\t\t\t\t LEFT OUTER JOIN stg.customer_subscription_cancellation_reasons sc\n\t\t\t\t\t\t\t\t\t\t\t\tON sc.customer_subscription_id = s.id AND parent_id IS NULL\n\t\t\t\t\t\t\t\t\t\t where s.customer_id is not null\n\n\t\t\t\t\t\t\t\t\t\t UNION ALL\n\n\t\t\t\t\t\t\t\t\t\t SELECT\n\t\t\t\t\t\t\t\t\t\t\t 'plan' AS bm_type\n\t\t\t\t\t\t\t\t\t\t\t , p.customer_id\n\t\t\t\t\t\t\t\t\t\t\t , p.id AS customer_subscription_id\n\t\t\t\t\t\t\t\t\t\t\t , p.shop_id\n\t\t\t\t\t\t\t\t\t\t\t , p.plan_created_at AS start_date_time\n\t\t\t\t\t\t\t\t\t\t\t , (case when p.plan_state = 'inactive' and  pc.plan_ended_at is null then p.plan_updated_at else pc.plan_ended_at end) AS end_date_time\n\t\t\t\t\t\t\t\t\t\t\t , p.plan_bills_at as next_bill_date_time\n\t\t\t\t\t\t\t\t\t\t\t , p.plan_updated_at AS updated_at\n\t\t\t\t\t\t\t\t\t\t\t , c.plan_conversion_source\n\t\t\t\t\t\t\t\t\t\t\t , pc.plan_cancellation_reason AS cancel_reason\n\t\t\t\t\t\t\t\t\t\t\t , p.plan_frequency as frequency\n\t\t\t\t\t\t\t\t\t\t\t , p.plan_state as status_name\n\t\t\t\t\t\t\t\t\t\t FROM stg.ps_plans p\n\t\t\t\t\t\t\t\t\t\t LEFT OUTER JOIN stg.plan_cancellations pc\n\t\t\t\t\t\t\t\t\t\t\t\t\tON pc.id = p.plan_cancellation_id\n\t\t\t\t\t\t\t\t\t\t LEFT OUTER JOIN stg.ps_subscription_to_plan_conversion c\n\t\t\t\t\t\t\t\t\t\t\t\t\tON p.id = c.plan_id\n\t\t\t\t\t\t\t\t\t\t where p.customer_id is not null\n\t\t\t\t\t\t\t\t\t\t ) usp\n\t\t\t\t\t\t\t\t\tJOIN extract.plan_360_delta d\n\t\t\t\t\t\t\t\t\t\ton usp.customer_id = d.customer_id\n\t\t\t\t\t\t )pf\n\t\t\t\t\t) f\n\t\t\t\tLEFT OUTER JOIN stg.orders i\n\t\t\t\t\t\t ON f.customer_id = i.customer_id\n\t\t\t\t\t\t\t\tand datediff(s,linked_start_date_time, i.created_at) >= -40\n\t\t\t\tLEFT OUTER JOIN stg.customers c\n\t\t\t\t\t\t ON c.id = f.customer_id\n\t\t\t\t) sp\n\t\tWHERE rank = 1\n\t\t)\n\n\n\n----------------- FINAL QUERY BRINGING ALL SUB QUERIES TOGETHER FOR THE FINAL TABLE ---------------------------\nSELECT\n\ts.bm_type\n\t, s.customer_subscription_plan_id\n\t, s.obfuscated_customer_id AS obfuscated_customer_id\n\t, s.customer_id\n\t, s.customer_created_at\n\t, s.plan_rank AS sub_plan_rank\n\t, s.prev_type\n\t, s.prev_id\n\t, s.shop_id\n\t, s.frequency\n\t, og.original_frequency\n\t, s.status_name\n\t, s.start_date_time\n\t, s.end_date_time\n\t, s.next_bill_date_time\n\t, (CASE WHEN s.bm_type = 'plan' THEN s.plan_conversion_source ELSE NULL END) AS plan_conversion_source\n\t, s.cancel_reason\n\t, ct.churn_type\n\t, s.order_id\n\t, s.obfuscated_order_id\n\t, s.created_at AS order_created_at\n\t, s.order_creation_source\n\t, s.sub_total\n\t, o.first_order_product_qty\n\t, o.first_order_product_total_price\n\t, o.first_order_sku_list\n\t, o.funnel_sku_qty\n\t, o.funnel_sku_value\n\t, o.funnel_sku_list\n\t, av.post_visid_high\n\t, av.post_visid_low\n\t, av.visit_num\n\t, av.visit_start_time_gmt_epoch\n\t, av.visit_start_time_gmt\n\t, av.visit_end_time_gmt\n\t, av.visit_start_time_pst\n\t, av.visit_end_time_pst\n\t, av.first_utm_source\n\t, av.first_utm_medium\n\t, av.first_utm_campaign\n\t, av.first_utm_content\n\t, av.first_utm_term\n\t, av.last_utm_source\n\t, av.last_utm_medium\n\t, av.last_utm_campaign\n\t, av.last_utm_content\n\t, av.last_utm_term\n\t, av.landing_url_without_params\n\t, av.landing_pagename\n\t, av.ab_test_assignment\n\t, av.shopcode AS web_shop_name\n\t, av.plan_purchase_flag\n\t, av.subscription_purchase_flag\n\t, av.subscription_shipnow_purchase_flag\n\t, av.nsrq_purchase_flag\n\t, av.gift_bundle_purchase_flag\n\t, av.gift_ecard_purchase_flag\n\t, av.preorder_purchase_flag\n\t, av.order_count\n\t, getdate()::timestamp AS dw_load_date_time\n\t, s.migrated_sub_start_date\n\t, s.migrated_sub_freqeuncy\n\n\t, av.analytics\n\t, av.visit_id\n\n--FROM  extract.plan_360_delta d\nFROM  sub_plan_list_final  s\n\t--on d.customer_id = s.customer_id\nLEFT OUTER JOIN\n\t\t(\n\t\t SELECT c.bm_type,\n\t\t\t\t\t\tc.customer_id,\n\t\t\t\t\t\tc.sub_plan_id,\n\t\t\t\t\t\tc.churn_type\n\t\t FROM\n\t\t (\n\t\t\t\tSELECT 'plan' AS bm_type,\n\t\t\t\t\t\t\t\t\tp.customer_id,\n\t\t\t\t\t\t\t\t\th.plan_id AS sub_plan_id,\n\t\t\t\t\t\t\t\t\t(CASE WHEN c.plan_id IS NULL AND from_state = 'suspended' THEN 'passive' ELSE 'active' END) AS churn_type\n\t\t\t\t\t FROM\n\t\t\t\t\t (\n\t\t\t\t\t\tSELECT sh.plan_id, sh.from_state\n\t\t\t\t\t\tFROM\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\tSELECT plan_id, from_state, row_number() over (PARTITION BY plan_id ORDER BY created_at DESC) AS rank\n\t\t\t\t\t\t\t\tFROM stg.plan_state_histories\n\t\t\t\t\t\t\t\tWHERE to_state = 'inactive'\n\t\t\t\t\t\t\t) sh\n\t\t\t\t\t\tWHERE rank = 1\n\t\t\t\t\t ) h\n\t\t\t\t\tJOIN stg.ps_plans p on h.plan_id = p.id\n\t\t\t\t\tLEFT JOIN stg.plan_cancellations c\n\t\t\t\t\t\ton c.id = p.plan_cancellation_id\n\n\t\t\t\t UNION ALL\n\n\t\t\t\t SELECT 'sub' as bm_type,\n\t\t\t\t\t\t\t\ts.customer_id,\n\t\t\t\t\t\t\t\ts.id AS sub_plan_id,\n\t\t\t\t\t\t\t\t(CASE WHEN status = 3 THEN 'passive' WHEN status = 0 THEN 'active' ELSE NULL END) AS churn_type\n\t\t\t\t FROM stg.customer_subscriptions s\n\t\t\t\t WHERE churn_type IS NOT NULL\n\t\t\t) c\n\t\t JOIN extract.plan_360_delta d on d.customer_id = c.customer_id\n\t\t\t) ct\n    ON ct.sub_plan_id = customer_subscription_plan_id\n      and ct.bm_type = s.bm_type\n    LEFT OUTER JOIN\n\t\t(\n\t\t\t\t\tSELECT  a.visit_id\n\t\t\t\t\t, a.obfuscated_customer_id\n\t\t\t\t\t, f.customer_subscription_plan_id\n\t\t\t\t\t, a.visit_customer_min_timestamp\n\t\t\t\t\t, a.visit_customer_max_timestamp\n\t\t\t\t\t, a.post_visid_high\n\t\t\t\t\t, a.post_visid_low\n\t\t\t\t\t, a.visit_num\n\t\t\t\t\t, a.visit_start_time_gmt_epoch\n\t\t\t\t\t, a.visit_start_time_gmt\n\t\t\t\t\t, a.visit_end_time_gmt\n\t\t\t\t\t, a.visit_start_time_pst\n\t\t\t\t\t, a.visit_end_time_pst\n\t\t\t\t\t, a.first_utm_source\n\t\t\t\t\t, a.first_utm_medium\n\t\t\t\t\t, a.first_utm_campaign\n\t\t\t\t\t, a.first_utm_content\n\t\t\t\t\t, a.first_utm_term\n\t\t\t\t\t, a.last_utm_source\n\t\t\t\t\t, a.last_utm_medium\n\t\t\t\t\t, a.last_utm_campaign\n\t\t\t\t\t, a.last_utm_content\n\t\t\t\t\t, a.last_utm_term\n\t\t\t\t\t, a.landing_url_without_params\n\t\t\t\t\t, a.landing_pagename\n\t\t\t\t\t, a.ab_test_assignment\n\t\t\t\t\t, a.shopcode\n\t\t\t\t\t, a.plan_purchase_flag\n\t\t\t\t\t, a.subscription_purchase_flag\n\t\t\t\t\t, a.subscription_shipnow_purchase_flag\n\t\t\t\t\t, a.nsrq_purchase_flag\n\t\t\t\t\t, a.gift_bundle_purchase_flag\n\t\t\t\t\t, a.gift_ecard_purchase_flag\n\t\t\t\t\t, a.preorder_purchase_flag\n\t\t\t\t\t, a.order_count\n\t\t\t\t\t,datediff(seconds, visit_customer_min_timestamp,f.linked_start_date_time) as diff\n\t\t\t\t\t,row_number() over (partition by a.obfuscated_customer_id, f.customer_subscription_plan_id\n\t\t\t\t\t\t\t\t\t\t\t\t\t\torder by datediff(seconds, visit_customer_min_timestamp, f.linked_start_date_time) asc) as rank\n\t\t\t\t\t, a.analytics\n\n\t\t\t\t\tFROM(\n\t\t\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\t\t\t av.visit_id\n\t\t\t\t\t\t\t\t\t ,vc.obfuscated_customer_id\n\t\t\t\t\t\t\t\t\t ,vc.visit_customer_min_timestamp\n\t\t\t\t\t\t\t\t\t ,vc.visit_customer_max_timestamp\n\t\t\t\t\t\t\t\t\t , av.post_visid_high\n\t\t\t\t\t\t\t\t\t , av.post_visid_low\n\t\t\t\t\t\t\t\t\t , av.visit_num\n\t\t\t\t\t\t\t\t\t , av.visit_start_time_gmt_epoch\n\t\t\t\t\t\t\t\t\t , av.visit_start_time_gmt\n\t\t\t\t\t\t\t\t\t , av.visit_end_time_gmt\n\t\t\t\t\t\t\t\t\t , av.visit_start_time_pst\n\t\t\t\t\t\t\t\t\t , av.visit_end_time_pst\n\t\t\t\t\t\t\t\t\t , av.first_utm_source\n\t\t\t\t\t\t\t\t\t , av.first_utm_medium\n\t\t\t\t\t\t\t\t\t , av.first_utm_campaign\n\t\t\t\t\t\t\t\t\t , av.first_utm_content\n\t\t\t\t\t\t\t\t\t , av.first_utm_term\n\t\t\t\t\t\t\t\t\t , av.last_utm_source\n\t\t\t\t\t\t\t\t\t , av.last_utm_medium\n\t\t\t\t\t\t\t\t\t , av.last_utm_campaign\n\t\t\t\t\t\t\t\t\t , av.last_utm_content\n\t\t\t\t\t\t\t\t\t , av.last_utm_term\n\t\t\t\t\t\t\t\t\t , av.landing_url_without_params\n\t\t\t\t\t\t\t\t\t , av.landing_pagename\n\t\t\t\t\t\t\t\t\t , av.ab_test_assignment\n\t\t\t\t\t\t\t\t\t , av.shopcode\n\t\t\t\t\t\t\t\t\t , av.plan_purchase_flag\n\t\t\t\t\t\t\t\t\t , av.subscription_purchase_flag\n\t\t\t\t\t\t\t\t\t , av.subscription_shipnow_purchase_flag\n\t\t\t\t\t\t\t\t\t , av.nsrq_purchase_flag\n\t\t\t\t\t\t\t\t\t , av.gift_bundle_purchase_flag\n\t\t\t\t\t\t\t\t\t , av.gift_ecard_purchase_flag\n\t\t\t\t\t\t\t\t\t , av.preorder_purchase_flag\n\t\t\t\t\t\t\t\t\t , av.order_count\n\t\t\t\t\t\t\t\t\t , av.analytics\n\n\t\t\t\t\t\t\t\tFROM stg.ga_visit_customers vc\n\t\t\t\t\t\t\t\tjoin dmt.ga_visit_summary av ON vc.visit_id = av.visit_id\n\t\t\t\t\t\t\t\twhere purchase_flag = 1\n\t\t\t\t\t\t\t\t) a\n\t\t\t\t\tjoin sub_plan_list_final f\n\t\t\t\t\t\ton a.obfuscated_customer_id = f.obfuscated_customer_id\n\n\t\t\t\t\twhere ((f.linked_start_date_time between dateadd(min,-2,a.visit_customer_min_timestamp) and dateadd(min,2,a.visit_customer_max_timestamp))\n\t\t\t\t\t\t\t\t OR f.created_at between dateadd(min,-2,a.visit_customer_min_timestamp) and dateadd(min,2,a.visit_customer_max_timestamp))\n\t\t\t\t) av\n    ON s.obfuscated_customer_id = av.obfuscated_customer_id\n        AND s.customer_subscription_plan_id = av.customer_subscription_plan_id\n        AND av.rank = 1\n    LEFT OUTER JOIN\n\t\t(\n\t\tSELECT\n\t\t\t\tii.order_id\n\t\t\t\t, left(LISTAGG(DISTINCT CASE WHEN p.type IN (0,1,2,14) THEN p.sku ELSE NULL END, ' | ') within group (order by p.sku) ,500) AS funnel_sku_list\n\t\t\t\t, left(LISTAGG(DISTINCT CASE WHEN  ii.price > 0 THEN p.sku ELSE NULL END, '|') within group (order by p.sku) ,500) AS first_order_sku_list\n\t\t\t\t, SUM(CASE WHEN p.type IN (0,1,2,14) THEN ii.quantity ELSE 0 END) AS funnel_sku_qty\n\t\t\t\t, SUM(CASE WHEN p.type IN (0,1,2,14) THEN ii.price ELSE 0 END) AS funnel_sku_value\n\t\t\t\t, SUM(CASE WHEN  ii.price > 0 THEN ii.quantity ELSE 0 END) AS first_order_product_qty\n\t\t\t\t, SUM(CASE WHEN  ii.price > 0 THEN ii.price ELSE 0 END) AS first_order_product_total_price\n\t\tFROM stg.erp_invoices i\n\t\tjoin extract.plan_360_delta d on d.customer_id = i.customer_id\n\t\tjoin stg.erp_invoice_items ii\n\t\t\ton ii.invoice_id = i.id\n\t\tLEFT JOIN stg.products p\n\t\t\tON ii.product_id = p.id\n\t\tWHERE ii.price > 0\n\t\tGROUP BY 1\n\t\t) o\n\t\tON o.order_id = s.order_id\n\tLEFT JOIN\n\t(\n\t\t\tselect 'sub' as bm_type,\n\t\t\t\t\t\t s.id as plan_id,\n\t\t\t\t\t\t case when old_frequency is null then s.frequency else old_frequency end as original_frequency\n\t\t\tfrom stg.customer_subscriptions s\n\t\t\tjoin extract.plan_360_delta d on d.customer_id = s.customer_id\n\t\t\tleft join\n\t\t\t(\n\t\t\tselect\n\t\t\t\tcustomer_subscription_id\n\t\t\t\t,old_frequency\n\t\t\t\t,row_number() over (partition by customer_subscription_id order by sh.created_at) as rank\n\t\t\tfrom stg.customer_subscription_product_frequency_histories sh\n\t\t\t) h\n\t\t\ton h.customer_subscription_id = s.id and rank = 1\n\n\t\t\t UNION ALL\n\n\t\t\t select 'plan' as bm_type,\n\t\t\t\t\t\t\tp.id,\n\t\t\t\t\t\t\tcase when old_frequency is null then p.plan_frequency else old_frequency end as original_frequency\n\t\t\t from stg.ps_plans p\n\t\t\t join extract.plan_360_delta d on d.customer_id = p.customer_id\n\t\t\t LEFT JOIN\n\t\t\t (\n\t\t\t\tselect  ce.plan_id\n\t\t\t\t\t\t\t\t,old_frequency\n\t\t\t\t\t\t\t\t,row_number() over (partition by plan_id order by ce.dsc_processed_at) as rank\n\t\t\t\tfrom stg.ps_change_plan_attribute_events ce\n\t\t\t\twhere event = 'change_plan_frequency'\n\t\t\t\t) h\n\t\t\t\ton h.plan_id = p.id and  h.rank = 1\n\t\t) og\n\t\ton og.bm_type = s.bm_type and og.plan_id = s.customer_subscription_plan_id\n\n;"
            }
        ],
        "transform.dmt.f_gift_card_status_history.sql": [
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "stg.erp_gift_card_status_histories.id"
                    ],
                    "where": [
                        "stg.erp_gift_card_status_histories.dsc_processed_at"
                    ]
                },
                "tables": [
                    "dm_delta",
                    "stg.erp_gift_card_status_histories"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "CREATE TEMP TABLE dm_delta AS\nSelect gcs.id as gift_card_status_id\nfrom stg.erp_gift_card_status_histories gcs\nwhere gcs.dsc_processed_at >= '<start_date>'::timestamp - interval '1 day'\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "dmt.f_gift_card_status_history.gift_card_status_id",
                        "dm_delta.gift_card_status_id"
                    ]
                },
                "tables": [
                    "dmt.f_gift_card_status_history"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from dmt.f_gift_card_status_history\nusing dm_delta\nwhere dmt.f_gift_card_status_history.gift_card_status_id = dm_delta.gift_card_status_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "f_gift_card_status_history"
                    ],
                    "select": [
                        "stg.erp_gift_card_status_histories.id",
                        "gift_card_id",
                        "from_status",
                        "to_status",
                        "created_at",
                        "dsc_processed_at"
                    ],
                    "join": [
                        "dm_delta.gift_card_status_id",
                        "stg.erp_gift_card_status_histories.id"
                    ],
                    "where": [
                        "stg.erp_gift_card_status_histories.created_at"
                    ]
                },
                "tables": [
                    "dmt.f_gift_card_status_history",
                    "dm_delta",
                    "stg.erp_gift_card_status_histories"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO dmt.f_gift_card_status_history\nSelect\n  gcs.id as gift_card_status_id\n\t,gift_card_id    \n\t,from_status \n\t,to_status \n\t,created_at \n\t,dsc_processed_at \n  ,getdate() \nfrom dm_delta dd\n    inner join stg.erp_gift_card_status_histories gcs\n      on dd.gift_card_status_id = gcs.id\nwhere gcs.created_at >= '2018-02-01'\t\t\t\t\n;"
            }
        ],
        "transform.dmt.f_gift_card.sql": [
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "stg.erp_gift_cards.id"
                    ],
                    "where": [
                        "stg.erp_gift_cards.dsc_processed_at"
                    ]
                },
                "tables": [
                    "dm_delta",
                    "stg.erp_gift_cards"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "CREATE TEMP TABLE dm_delta AS\nSelect gc.id as gift_card_id\nfrom stg.erp_gift_cards gc\nwhere gc.dsc_processed_at >= '<start_date>'::timestamp - interval '1 day'\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "dmt.f_gift_card.gift_card_id",
                        "dm_delta.gift_card_id"
                    ]
                },
                "tables": [
                    "dmt.f_gift_card"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from dmt.f_gift_card\nusing dm_delta\nwhere dmt.f_gift_card.gift_card_id = dm_delta.gift_card_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "f_gift_card"
                    ],
                    "select": [
                        "id",
                        "invoice_id",
                        "order_id",
                        "product_id",
                        "amount",
                        "balance",
                        "code",
                        "created_at"
                    ],
                    "join": [
                        "dm_delta.gift_card_id",
                        "stg.erp_gift_cards.id"
                    ],
                    "where": [
                        "stg.erp_gift_cards.created_at"
                    ]
                },
                "tables": [
                    "dmt.f_gift_card",
                    "dm_delta",
                    "stg.erp_gift_cards"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO dmt.f_gift_card\nSelect\n  id as gift_card_id\n ,invoice_id\n ,order_id\n ,product_id\n ,amount\n ,balance\n ,code\n ,created_at::TIMESTAMP\n ,currency_code\n ,delivery_date_time::TIMESTAMP\n ,gift_card_campaign_id\n ,gift_card_campaign_name\n ,gift_card_campaign_code\n ,gift_card_campaign_description\n ,gift_card_campaign_created_at::TIMESTAMP\n ,gift_card_campaign_prefix\n ,gift_card_campaign_generated_by_department\n ,purchased_by_customer_id::INTEGER\n ,redeemed_by_customer_id::INTEGER\n  ,CASE\n        WHEN upper(shop_name) = 'WWW' THEN 'US' \n        WHEN upper(shop_name) = 'AU' THEN 'AU' \n        WHEN upper(shop_name) = 'CA' THEN 'CA' \n        WHEN upper(shop_name) = 'UK' THEN 'UK' \n        ELSE 'Other' END AS shop_name \n ,shop_code\n ,status\n ,dsc_processed_at::TIMESTAMP\n ,recipient_name \n ,recipient_email \n\t,message \n\t,sender_name \n\t,sender_email \n ,getdate() \nfrom dm_delta dd\n    inner join stg.erp_gift_cards gc\n      on dd.gift_card_id = gc.id\nwhere gc.created_at >= '2018-02-01'\t\t\t\n;"
            }
        ],
        "load.dmt.d_customer_status.sql": [
            {
                "skipped": true,
                "value": "INSERT INTO stg.customer_order_status\nselect\n    getdate()::date as curr_date\n  , o2.customer_id\n\n  , o2.curr_order_id\n  , o2.first_order_id\n  , ISNULL(o2.previous_order_id, o2.first_order_id) as previous_order_id\n\n  , o2.curr_subscription_id\n  , o2.first_subscription_id\n  , ISNULL(o2.previous_subscription_id, o2.first_subscription_id) as previous_subscription_id\n  , o2.last_subscription_id\n\n  , o2.curr_order_date\n  , o2.first_order_date\n  , ISNULL(o2.previous_order_date, o2.first_order_date) as previous_order_date\n\n  , o2.total_orders_num\n  , o2.total_orders_amt\n\n  , DATEDIFF(DAY, o2.curr_order_date, getdate()::date)+1 AS days_from_curr_order\n  , DATEDIFF(DAY, o2.first_order_date, getdate()::date)+1 AS days_from_first_order\n  , DATEDIFF(DAY, ISNULL(o2.previous_order_date, o2.first_order_date), getdate()::date)+1 AS days_from_previous_order\n  , DATEDIFF(DAY, ISNULL(o2.previous_order_date, o2.first_order_date), o2.curr_order_date)+1 AS days_between_curr_and_prev_order\nfrom (\n  select\n      o1.customer_id\n\n    , o1.order_id as curr_order_id\n    , FIRST_VALUE(o1.order_id IGNORE NULLS) OVER(PARTITION BY o1.customer_id ORDER BY o1.order_date rows between unbounded preceding and CURRENT ROW) as first_order_id\n    , LAG(o1.order_id) OVER(PARTITION BY o1.customer_id order by o1.order_date) as previous_order_id\n\n    , o1.customer_subscription_id curr_subscription_id\n    , FIRST_VALUE(o1.customer_subscription_id IGNORE NULLS) OVER(PARTITION BY o1.customer_id ORDER BY o1.order_date rows between unbounded preceding and CURRENT ROW) as first_subscription_id\n    , LAG(o1.customer_subscription_id) OVER(PARTITION BY o1.customer_id order by o1.order_date) as previous_subscription_id\n    -- most recent valid subscription id; can be the same as current subscription_id\n    , LAST_VALUE(o1.customer_subscription_id IGNORE NULLS) OVER(partition by o1.customer_id  ORDER BY o1.order_date rows between unbounded preceding and CURRENT ROW) as last_subscription_id\n\n    , o1.order_date as curr_order_date\n    , FIRST_VALUE(o1.order_date IGNORE NULLS) OVER(PARTITION BY o1.customer_id ORDER BY o1.order_date rows between unbounded preceding and CURRENT ROW) as first_order_date\n    , LAG(o1.order_date) OVER(PARTITION BY o1.customer_id order by o1.order_date) as previous_order_date\n\n    -- total orders as of order date\n    , row_number() OVER (PARTITION BY o1.customer_id ORDER BY o1.order_date) as total_orders_num\n    , sum(o1.total) OVER(PARTITION BY o1.customer_id order by o1.order_date rows unbounded preceding) as total_orders_amt\n\n    , row_number() OVER (PARTITION BY o1.customer_id ORDER BY o1.order_date desc) as rnk\n  from (\n    -- group to avoid dups in case of multiple orders on the same date\n    SELECT\n        max(o.id) AS order_id\n      , max(o.customer_subscription_id) AS customer_subscription_id\n      , o.customer_id\n      , max(o.total) AS total\n      , o.created_at::date AS order_date\n      , max(o.updated_at::date) AS order_updated_date\n    FROM stg.orders o\n    GROUP BY\n        o.customer_id\n      , o.created_at::date\n  ) o1\n  where 1=1\n) o2\nwhere 1=1\n  and o2.rnk = 1\n;"
            },
            {
                "skipped": true,
                "value": "INSERT INTO stg.customer_subscription_status\nselect\n    getdate()::date as curr_date\n  , s1.customer_id\n\n  , s1.curr_subscription_id\n  , s1.first_subscription_id\n  , ISNULL(s1.previous_subscription_id, s1.first_subscription_id) as previous_subscription_id\n\n  , s1.curr_subscription_start_date\n  , s1.curr_subscription_end_date\n\n  , s1.first_subscription_start_date\n  , s1.first_subscription_end_date\n\n  , ISNULL(s1.previous_subscription_start_date, s1.first_subscription_start_date) as previous_subscription_start_date\n  , ISNULL(s1.previous_subscription_end_date, s1.first_subscription_end_date) as previous_subscription_end_date\n\n  , s1.total_subscriptions_num\n  , s1.total_product_quantity_num\n  , s1.total_subscriptions_amt\n\n  , s1.curr_subscription_status_id\n  , s1.first_subscription_status_id\n  , ISNULL(s1.previous_subscription_status_id, s1.first_subscription_status_id) as previous_subscription_status_id\n\n  , s1.curr_subscription_plan\n  , s1.first_subscription_subscription_plan\n  , ISNULL(s1.previous_subscription_plan, s1.first_subscription_subscription_plan) as previous_subscription_plan\n\n  , s1.curr_subscription_frequency\n  , s1.first_subscription_frequency\n  , ISNULL(s1.previous_subscription_frequency, s1.first_subscription_frequency) as previous_subscription_frequency\n\n  , DATEDIFF(DAY, s1.curr_subscription_start_date, getdate()::date)+1 AS days_from_curr_subscription\n  , DATEDIFF(DAY, s1.first_subscription_start_date, getdate()::date)+1 AS days_from_first_subscription\n  , DATEDIFF(DAY, ISNULL(s1.previous_subscription_start_date, s1.first_subscription_start_date), getdate()::date)+1 AS days_from_previous_subscription\nfrom (\n  SELECT\n    s.customer_id,\n    s.customer_subscription_id                           AS curr_subscription_id,\n    -- s.first_customer_subscription_id                     as first_subscription_id,\n    FIRST_VALUE(s.customer_subscription_id IGNORE NULLS)\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time\n      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) AS first_subscription_id,\n\n    LAG(s.customer_subscription_id)\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time )                       AS previous_subscription_id,\n    s.start_date_time :: DATE                            AS curr_subscription_start_date,\n    s.end_date_time :: DATE                              AS curr_subscription_end_date,\n    FIRST_VALUE(s.start_date_time :: DATE IGNORE NULLS)\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time\n      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) AS first_subscription_start_date,\n    FIRST_VALUE(s.end_date_time :: DATE IGNORE NULLS)\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time\n      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) AS first_subscription_end_date,\n    LAG(s.start_date_time :: DATE)\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time )                       AS previous_subscription_start_date,\n    LAG(s.end_date_time :: DATE)\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time )                       AS previous_subscription_end_date,\n    row_number()\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time )                       AS total_subscriptions_num,\n    sum(s.product_quantity)\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time\n      ROWS UNBOUNDED PRECEDING )                         AS total_product_quantity_num,\n    sum(s.subscription_amount)\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time\n      ROWS UNBOUNDED PRECEDING )                         AS total_subscriptions_amt,\n    s.status                                             AS curr_subscription_status_id,\n    FIRST_VALUE(s.status IGNORE NULLS)\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time\n      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) AS first_subscription_status_id,\n    LAG(s.status)\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time )                       AS previous_subscription_status_id,\n    s.subscription_plan                                  AS curr_subscription_plan,\n    FIRST_VALUE(s.subscription_plan IGNORE NULLS)\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time\n      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) AS first_subscription_subscription_plan,\n    LAG(s.subscription_plan)\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time )                       AS previous_subscription_plan,\n    s.frequency                                          AS curr_subscription_frequency,\n    FIRST_VALUE(s.frequency IGNORE NULLS)\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time\n      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) AS first_subscription_frequency,\n    LAG(s.frequency)\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time )                       AS previous_subscription_frequency,\n    row_number()\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time DESC )                  AS rnk\n  --, *\n  FROM dmt.d_customer_subscription s\n) s1\nwhere 1=1\n    and s1.rnk = 1\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_status"
                    ],
                    "select": [
                        "o.curr_date",
                        "o.customer_id",
                        "o.curr_order_id",
                        "o.first_order_id",
                        "o.previous_order_id",
                        "o.curr_subscription_id",
                        "o.first_subscription_id",
                        "o.previous_subscription_id",
                        "o.last_subscription_id",
                        "o.curr_order_date",
                        "o.first_order_date",
                        "o.previous_order_date",
                        "o.total_orders_num",
                        "o.total_orders_amt",
                        "o.days_from_curr_order",
                        "o.days_from_first_order",
                        "o.days_from_previous_order",
                        "o.days_between_curr_and_prev_order",
                        "s.curr_subscription_id",
                        "s.first_subscription_id",
                        "s.previous_subscription_id",
                        "s.curr_subscription_start_date",
                        "s.curr_subscription_end_date",
                        "s.first_subscription_start_date",
                        "s.first_subscription_end_date",
                        "s.previous_subscription_start_date",
                        "s.previous_subscription_end_date",
                        "s.total_subscriptions_num",
                        "s.total_product_quantity_num",
                        "s.total_subscriptions_amt",
                        "s.curr_subscription_status_id",
                        "s.first_subscription_status_id",
                        "s.previous_subscription_status_id",
                        "s.curr_subscription_plan",
                        "s.first_subscription_plan",
                        "s.previous_subscription_plan",
                        "s.curr_subscription_frequency",
                        "s.first_subscription_frequency",
                        "s.previous_subscription_frequency",
                        "s.days_from_curr_subscription",
                        "s.days_from_first_subscription",
                        "s.days_from_previous_subscription"
                    ]
                },
                "tables": [
                    "stg.customer_status"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.customer_status\nselect\n    o.curr_date\n  , o.customer_id\n  , o.curr_order_id\n  , o.first_order_id\n  , o.previous_order_id\n  , o.curr_subscription_id as curr_order_subscription_id\n  , o.first_subscription_id as first_order_subscription_id\n  , o.previous_subscription_id as previous_order_subscription_id\n  , o.last_subscription_id as last_order_subscription_id\n  , o.curr_order_date\n  , o.first_order_date\n  , o.previous_order_date\n  , o.total_orders_num\n  , o.total_orders_amt\n  , o.days_from_curr_order\n  , o.days_from_first_order\n  , o.days_from_previous_order\n  , o.days_between_curr_and_prev_order\n\n  , s.curr_subscription_id\n  , s.first_subscription_id\n  , s.previous_subscription_id\n  , s.curr_subscription_start_date\n  , s.curr_subscription_end_date\n  , s.first_subscription_start_date\n  , s.first_subscription_end_date\n  , s.previous_subscription_start_date\n  , s.previous_subscription_end_date\n  , s.total_subscriptions_num\n  , s.total_product_quantity_num\n  , s.total_subscriptions_amt\n  , s.curr_subscription_status_id\n  , s.first_subscription_status_id\n  , s.previous_subscription_status_id\n  , s.curr_subscription_plan\n  , s.first_subscription_plan\n  , s.previous_subscription_plan\n  , s.curr_subscription_frequency\n  , s.first_subscription_frequency\n  , s.previous_subscription_frequency\n  , s.days_from_curr_subscription\n  , s.days_from_first_subscription\n  , s.days_from_previous_subscription\n\n ,CASE\n      WHEN s.curr_subscription_status_id = 0 THEN 'Cancelled'\n      WHEN s.curr_subscription_status_id = 1 THEN 'Active'\n      WHEN s.curr_subscription_status_id = 2 THEN 'Suspended'\n      WHEN s.curr_subscription_status_id = 3 THEN 'Suspended Timeout'\n      WHEN s.curr_subscription_status_id = 4 THEN 'Paused'\n      ELSE 'No Subscription'\n   END as subscription_status\n  , CASE\n        WHEN (o.days_from_curr_order <= 360) -- there are orders in the last 360 days\n          THEN 'Active'\n        WHEN (o.days_from_curr_order > 360)  -- there are no orders in the last 360 days\n          THEN 'Inactive'\n    END as customer_status\n  , CASE\n      WHEN (o.total_orders_num >= 1  -- even a single order converts prospect to a customer\n            AND o.days_from_first_order <= 30 -- first order not more than 30 days ago\n            AND (\n              s.curr_subscription_id IS NULL -- never had any subscriptions\n              OR s.curr_subscription_status_id in (0,3) -- Cancelled, Suspended Timeout\n            )\n        )\n        THEN 'New (Non Subscriber)'\n      WHEN (o.total_orders_num >= 1 -- even a single order converts prospect to a customer\n            AND o.days_from_first_order <= 30 -- first order not more than 30 days ago\n            AND s.curr_subscription_id IS NOT NULL   -- has subscription\n            AND s.curr_subscription_status_id in (1,2,4)  -- subscription - Not Cancelled\n        )\n        THEN 'New (Subscriber)'\n\n      WHEN (o.total_orders_num >= 1 -- even a single order converts prospect to a customer\n            -- if new non subscriber customer did not make any purchase after 30 days she cannot be new anymore\n            -- so setting it as active since she cannot be made At risk or inactive\n            AND o.days_from_first_order > 30  -- more than 30 days since first order  -- not new\n            AND o.days_from_curr_order <= 180 -- not at risk\n            AND (\n              s.curr_subscription_id IS NULL -- never had any subscriptions\n              OR s.curr_subscription_status_id in (0,3) -- Cancelled, Suspended Timeout\n            )\n      )\n        THEN 'Active (Non Subscriber)'\n      WHEN (o.total_orders_num >= 1\n            AND o.days_from_first_order > 30  -- more than 30 days since first order  -- not new\n            AND o.days_from_curr_order <= 180 -- not at risk\n            AND s.curr_subscription_id IS NOT NULL   -- has subscription\n            AND s.curr_subscription_status_id in (1,2,4)  -- subscription - Not Cancelled\n      )\n        THEN 'Active (Subscriber)'\n\n      WHEN (o.total_orders_num > 1 -- even a single order converts prospect to a customer\n            AND o.days_from_first_order > 30  -- more than 30 days since first order  -- not new\n            AND o.days_from_curr_order <= 180 -- not at risk\n            AND o.days_between_curr_and_prev_order > 360\n            AND (\n              s.curr_subscription_id IS NULL -- never had any subscriptions\n              OR s.curr_subscription_status_id in (0,3) -- Cancelled, Suspended Timeout\n            )\n      )\n        THEN 'Re-Activated (Non Subscriber)'\n      WHEN (o.total_orders_num > 1\n            AND o.days_from_first_order > 30  -- more than 30 days since first order  -- not new\n            AND o.days_from_curr_order <= 180 -- not at risk\n            AND o.days_between_curr_and_prev_order > 360\n            AND s.curr_subscription_id IS NOT NULL   -- has subscription\n            AND s.curr_subscription_status_id in (1,2,4)  -- subscription - Not Cancelled\n      )\n        THEN 'Re-Activated (Subscriber)'\n      WHEN (o.total_orders_num >= 1\n            AND o.days_from_curr_order between 180 and 360 -- at risk\n            AND (\n              s.curr_subscription_id IS NULL -- never had any subscriptions\n              OR s.curr_subscription_status_id in (0,3) -- Cancelled, Suspended Timeout\n            )\n      )\n        THEN 'At-Risk (Non Subscriber)'\n      WHEN (o.total_orders_num >= 1\n            AND o.days_from_curr_order between 180 and 360 -- at risk\n            AND s.curr_subscription_id IS NOT NULL   -- has subscription\n            AND s.curr_subscription_status_id in (1,2,4)  -- subscription - Not Cancelled\n      )\n        THEN 'At-Risk (Subscriber)'\n      WHEN (o.total_orders_num >= 1\n            AND o.days_from_curr_order > 360\n            AND (\n              s.curr_subscription_id IS NULL -- never had any subscriptions\n              --OR s.curr_subscription_status_id in (0,3) -- Subscription Cancelled\n              OR o.curr_subscription_id is NULL -- the most recent oder was NOT on subscription\n            )\n      )\n        THEN 'Inactive (Non Subscriber), NSRQ Lapsed'\n      WHEN (o.total_orders_num >= 1\n            AND o.days_from_curr_order > 360\n            AND s.curr_subscription_id IS NOT NULL   -- has subscription\n            AND o.curr_subscription_id is NOT NULL -- the most recent oder was on subscription\n      )\n        THEN 'Inactive (Non Subscriber), Cancelled'\n    END AS customer_sub_status\n\n    , CASE\n      WHEN o.days_between_curr_and_prev_order > 360\n        THEN True\n        ELSE False\n      END as re_activated_by_order\n    , CASE\n        when (s.curr_subscription_id IS NULL -- never had subscriptions\n              OR o.days_from_curr_order > 360 -- inactive customer (timeout)\n              OR s.curr_subscription_status_id in (0,3) -- Cancelled, Suspended Timeout\n              )\n          then 'Non Subscriber'\n          else 'Subscriber'\n      END as customer_category\nFROM stg.customer_order_status o\n  LEFT OUTER JOIN stg.customer_subscription_status s\n    ON o.customer_id = s.customer_id\nWHERE 1 = 1\n;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- refresh tmp.customer_status_history\n-- adds new days to the tmp.customer_status_history\n\ndelete from stg.customer_status_history\nwhere 1=1\n  and stg.customer_status_history.curr_date in (select curr_date from stg.customer_status group by curr_date)\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_status_history"
                    ],
                    "select": [
                        "*"
                    ]
                },
                "tables": [
                    "stg.customer_status_history",
                    "stg.customer_status"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.customer_status_history\nselect * from stg.customer_status;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_status_changes"
                    ],
                    "select": [
                        "stg.customer_status_history.customer_id",
                        "subscription_status",
                        "customer_status",
                        "customer_sub_status",
                        "re_activated_by_order",
                        "customer_category",
                        "stg.customer_status_history.curr_date"
                    ]
                },
                "tables": [
                    "tmp.customer_status_changes",
                    "stg.customer_status_history"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into tmp.customer_status_changes\nselect\n    csh.customer_id\n\t, subscription_status\n\t, customer_status\n\t, customer_sub_status\n\t, re_activated_by_order\n\t, customer_category\n  , min(csh.curr_date) start_date\n  , max(csh.curr_date) end_date\nfrom stg.customer_status_history csh\ngroup by\n    csh.customer_id\n\t, subscription_status\n\t, customer_status\n\t, customer_sub_status\n\t, re_activated_by_order\n\t, customer_category\n;"
            }
        ],
        "transform.dmt.planetarium_kpi.sql": [
            {
                "type": "CREATE",
                "columns": null,
                "tables": [
                    "stg.planetarium_invoice"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "create table stg.planetarium_invoice\nas\nselect\n\tdate_trunc('month', s.shipped_at)::Date shipped_at,\n\ti.id as invoice_id,\n\trank() over (partition by ii.invoice_id order by p.sku) as item_rank,\n\tp.sku,\n\tp.name,\n\tii.quantity\nfrom stg.erp_invoice_items ii\njoin stg.erp_invoices i\n\ton ii.invoice_id = i.id\njoin stg.erp_shipments s\n\ton i.order_id = s.order_id\njoin stg.products p\n\ton ii.product_id = p.id\n\tand p.nature = 0 and p.type in (2,3,6,9,10,11,12,17,18,19,20,21,22,24,26,27)\nwhere s.shipped_at >= (date_trunc('month', current_date) - interval '1 month') --Always doing last two months processing because of shipped_at and cost_calculation_complted thing\nand s.shipped_at >= '2018-02-01'\norder by 1,2;"
            },
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "shipped_at",
                        "invoice_id",
                        "item_rank",
                        "sku",
                        "name",
                        "quantity"
                    ]
                },
                "tables": [
                    "stg.planetarium_invoice_agg",
                    "stg.planetarium_invoice"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "create table stg.planetarium_invoice_agg\nas\nselect\n\tshipped_at,\n\tinvoice_id,\n\titem_rank,\n\tsku,\n\tname,\n\tsum(quantity) as quantity\nfrom stg.planetarium_invoice\ngroup by shipped_at,invoice_id, item_rank, sku, name;"
            },
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "stg.planetarium_invoice_agg.shipped_at",
                        "i.id",
                        "i.grand_total",
                        "i.total_tax",
                        "i.profit",
                        "i.cost_calculation_completed",
                        "stg.planetarium_invoice_agg.sku",
                        "stg.planetarium_invoice_agg.quantity",
                        "stg.planetarium_invoice_agg.name",
                        "x.id"
                    ],
                    "join": [
                        "i.id",
                        "x.id",
                        "stg.planetarium_invoice_agg.invoice_id",
                        "stg.planetarium_invoice_agg.item_rank"
                    ]
                },
                "tables": [
                    "stg.planetarium_revenue_margin",
                    "stg.planetarium_invoice_agg"
                ],
                "subqueries": {
                    "x": "select distinct i.id, case when p.id = 449 then 'discounted' else 'nrp bundle' end as shipment_type from stg.erp_invoice_items ii join stg.erp_invoices i on ii.invoice_id = i.id join stg.erp_shipments s on i.order_id = s.order_id join stg.products p on ii.product_id = p.id and p.type = 14"
                },
                "skipped": false,
                "value": "create table stg.planetarium_revenue_margin\nas\nselect distinct\n\tp.shipped_at,\n\ti.id,\n\ti.grand_total - i.total_tax as revenue,\n\ti.profit as margin,\n\ti.cost_calculation_completed,\n\tp.sku as p1_sku, \t\tp.quantity as p1_quantity,\t\tp.name as p1_name,\n\tp2.sku as p2_sku, \tp2.quantity as p2_quantity,  \tp2.name as p2_name,\n\tp3.sku as p3_sku, \tp3.quantity as p3_quantity,  \tp3.name as p3_name,\n\tp4.sku as p4_sku, \tp4.quantity as p4_quantity,  \tp4.name as p4_name,\n\tp5.sku as p5_sku, \tp5.quantity as p5_quantity,\t\tp5.name as p5_name,\n\tp6.sku as p6_sku, \tp6.quantity as p6_quantity,\t\tp6.name as p6_name,\n\tp7.sku as p7_sku, \tp7.quantity as p7_quantity,  \tp7.name as p7_name,\n\tp8.sku as p8_sku, \tp8.quantity as p8_quantity,  \tp8.name as p8_name,\n\tp9.sku as p9_sku, \tp9.quantity as p9_quantity,  \tp9.name as p9_name,\n\tp10.sku as p10_sku, p10.quantity as p10_quantity,\tp10.name as p10_name,\n\n\t(case when i.order_attribution_attribution_type = 'scheduledcart' then 'scheduledcart'\n\t\twhen i.order_attribution_attribution_type = 'standalonecart' then 'standalonecart'\n\t\twhen o.coupon_instance_id is not null then 'discounted'\n\t\twhen o.creation_reason = 10 and i.total_shipping = 0 and (i.grand_total - i.total_tax) <15 then 'ship now new sub'\n\t\twhen o.creation_reason = 10 then 'ship now'\n\t\twhen o.creation_reason = 14 then 'nsrq'\n\t\twhen o.creation_source in (3,4) then 'msa'\n\t\twhen x.id is not null then x.shipment_type\n\t\telse 'standard' end) as shipment_type,\n\n\t(case when o.shop_id = 1 then 'US'\n\t\twhen o.shop_id = 2 then 'AU'\n\t\twhen o.shop_id = 3 then 'CA'\n\t\twhen o.shop_id = 5 then 'UK'\n\t\telse 'Unknown' end) as shop_name\n\nfrom stg.erp_invoices i\njoin stg.orders o\n\ton i.order_id = o.id\nleft join\n\t(select distinct i.id, case when p.id = 449 then 'discounted' else 'nrp bundle' end as shipment_type\n\t\tfrom stg.erp_invoice_items ii\n\t\tjoin stg.erp_invoices i\n\t\t\ton ii.invoice_id = i.id\n\t\tjoin stg.erp_shipments s\n\t\t\ton i.order_id = s.order_id\n\t\tjoin stg.products p\n\t\t\ton ii.product_id = p.id\n\t\t\t\tand p.type = 14\n\t) x\n\ton i.id = x.id\ninner join stg.planetarium_invoice_agg p\n\ton i.id = p.invoice_id and p.item_rank = 1\nleft join stg.planetarium_invoice_agg p2\n\ton i.id = p2.invoice_id and p2.item_rank = 2\nleft join stg.planetarium_invoice_agg p3\n\ton i.id = p3.invoice_id and p3.item_rank = 3\nleft join stg.planetarium_invoice_agg p4\n\ton i.id = p4.invoice_id and p4.item_rank = 4\nleft join stg.planetarium_invoice_agg p5\n\ton i.id = p5.invoice_id and p5.item_rank = 5\nleft join stg.planetarium_invoice_agg p6\n\ton i.id = p6.invoice_id and p6.item_rank = 6\nleft join stg.planetarium_invoice_agg p7\n\ton i.id = p7.invoice_id and p7.item_rank = 7\nleft join stg.planetarium_invoice_agg p8\n\ton i.id = p8.invoice_id and p8.item_rank = 8\nleft join stg.planetarium_invoice_agg p9\n\ton i.id = p9.invoice_id and p9.item_rank = 9\nleft join stg.planetarium_invoice_agg p10\n\ton i.id = p10.invoice_id and p10.item_rank = 10;"
            },
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "shipped_at",
                        "shipment_type",
                        "shop_name",
                        "p1_sku",
                        "p2_sku",
                        "p3_sku",
                        "p4_sku",
                        "p5_sku",
                        "p6_sku",
                        "p7_sku",
                        "p8_sku",
                        "p9_sku",
                        "p10_sku",
                        "p1_quantity",
                        "p2_quantity",
                        "p3_quantity",
                        "p4_quantity",
                        "p5_quantity",
                        "p6_quantity",
                        "p7_quantity",
                        "p8_quantity",
                        "p9_quantity",
                        "p10_quantity",
                        "p1_name",
                        "p2_name",
                        "p3_name",
                        "p4_name",
                        "p5_name",
                        "p6_name",
                        "p7_name",
                        "p8_name",
                        "p9_name",
                        "p10_name",
                        [],
                        "*"
                    ],
                    "where": [
                        "shipment_type",
                        []
                    ]
                },
                "tables": [
                    "stg.planetarium_revenue_margin_avg"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "create table stg.planetarium_revenue_margin_avg\nas\nselect\n\tshipped_at,\n\tshipment_type,\n\tshop_name,\n\tp1_sku, p2_sku, p3_sku, p4_sku, p5_sku, p6_sku, p7_sku, p8_sku, p9_sku, p10_sku,\n\tp1_quantity, p2_quantity, p3_quantity, p4_quantity, p5_quantity, p6_quantity, p7_quantity, p8_quantity, p9_quantity, p10_quantity,\n\tp1_name, p2_name, p3_name, p4_name, p5_name, p6_name, p7_name, p8_name, p9_name, p10_name,\n\tround(revenue,2) as revenue,\n\tsum(round(margin,2)) * 1.0 / count(1) as avg_margin,\n\tcount(1) as shipments\n\nfrom stg.planetarium_revenue_margin\nwhere (cost_calculation_completed = 1\n\tor shipment_type = 'msa' or revenue = 0)\ngroup by shipped_at,\n\tshipment_type,\n\tshop_name,\n\tp1_sku, p2_sku, p3_sku, p4_sku, p5_sku, p6_sku, p7_sku, p8_sku, p9_sku, p10_sku,\n\tp1_quantity, p2_quantity, p3_quantity, p4_quantity, p5_quantity, p6_quantity, p7_quantity, p8_quantity, p9_quantity, p10_quantity,\n\tp1_name, p2_name, p3_name, p4_name, p5_name, p6_name, p7_name, p8_name, p9_name, p10_name,\n\tround(revenue,2)\norder by 36 desc;"
            },
            {
                "skipped": true,
                "value": "Delete from dmt.planetarium_kpi\nwhere shipped_at_month in (select distinct shipped_at from stg.planetarium_revenue_margin_avg);"
            },
            {
                "skipped": true,
                "value": "Insert into dmt.planetarium_kpi\nselect shipped_at as shipped_at_month\n\t, shipment_type\n\t, shop_name\n  , p1_sku, p2_sku, p3_sku, p4_sku, p5_sku, p6_sku, p7_sku, p8_sku, p9_sku, p10_sku\n\t, p1_quantity, p2_quantity, p3_quantity, p4_quantity, p5_quantity, p6_quantity, p7_quantity, p8_quantity, p9_quantity, p10_quantity\n\t, p1_name, p2_name, p3_name, p4_name, p5_name, p6_name, p7_name, p8_name, p9_name, p10_name\n\t, revenue\n\t, avg_margin\n\t, shipments\n\t, rank() over(partition by shipment_type order by shipments desc) shipment_type_rank\n\t, rank() over(order by shipments desc) shipment_rank\n\t, rank() over(order by avg_margin asc) gross_margin_rank\n\t, isnull(p1_sku,'') || ' (' || isnull(p1_quantity,0) || ')'  ||'\t'|| isnull(p2_sku,'') || ' (' || isnull(p2_quantity,0) || ')' ||'\t'|| isnull(p3_sku,'') || ' (' || isnull(p3_quantity,0) || ')'\n\t||'\t'|| isnull(p4_sku,'') || ' (' || isnull(p4_quantity,0) || ')' ||'\t'|| isnull(p5_sku,'') || ' (' || isnull(p5_quantity,0) || ')'  ||'\t'|| isnull(p6_sku,'') || ' (' || isnull(p6_quantity,0) || ')'\n\t||'\t'|| isnull(p7_sku,'') || ' (' || isnull(p7_quantity,0) || ')' ||'\t'|| isnull(p8_sku,'') || ' (' || isnull(p8_quantity,0) || ')' ||'\t'|| isnull(p9_sku,'') || ' (' || isnull(p9_quantity,0) || ')' ||'\t'|| isnull(p10_sku,'') || ' (' || isnull(p10_quantity,0) || ')' as contents\n  ,getdate() as dw_load_date_time\n\t,case when p1_name like '%Executive%' or p2_name like '%Executive%' or p3_name like '%Executive%' or p4_name like '%Executive%' or p5_name like '%Executive%'\n\t\t\t\t\t\tor p6_name like '%Executive%' or p7_name like '%Executive%' or p8_name like '%Executive%' or p9_name like '%Executive%' or p10_name like '%Executive%' THEN 'Executive'\n\t\t\t when p1_name like '%4X%' or p2_name like '%4X%' or p3_name like '%4X%' or p4_name like '%4X%' or p5_name like '%4X%'\n\t\t\t\t\t\tor p6_name like '%4X%' or p7_name like '%4X%' or p8_name like '%4X%' or p9_name like '%4X%' or p10_name like '%4X%' THEN '4X'\n\t\t\t when p1_name like '%Twin%' or p2_name like '%Twin%' or p3_name like '%Twin%' or p4_name like '%Twin%' or p5_name like '%Twin%'\n\t\t\t\t\t\tor p6_name like '%Twin%' or p7_name like '%Twin%' or p8_name like '%Twin%' or p9_name like '%Twin%' or p10_name like '%Twin%' THEN 'Twin'\n\t\telse NULL end as plan\nfrom stg.planetarium_revenue_margin_avg\norder by shipments desc;"
            }
        ]
    },
    "dm-adobe": {
        "load.stg.adobe_src_stg.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "adobe_src_stg"
                    ],
                    "select": [
                        "extract.adobe_src_staging.*",
                        "*"
                    ],
                    "where": [
                        "hit_time_gmt",
                        "tgt.hitid_low"
                    ],
                    "join": [
                        "extract.adobe_src_staging.hitid_high",
                        "tgt.hitid_high",
                        "extract.adobe_src_staging.hitid_low",
                        "tgt.hitid_low"
                    ]
                },
                "tables": [
                    "stg.adobe_src_stg",
                    "extract.adobe_src_staging",
                    "timestamp"
                ],
                "subqueries": {
                    "tgt": "SELECT * FROM stg.adobe_src_stg WHERE hit_time_gmt BETWEEN EXTRACT (EPOCH FROM '<start_date>' :: timestamp) and EXTRACT (EPOCH FROM '<end_date>' :: timestamp)"
                },
                "skipped": false,
                "value": "insert into stg.adobe_src_stg\nSELECT src.* FROM extract.adobe_src_staging src\n  LEFT JOIN\n        (SELECT * FROM stg.adobe_src_stg\n            WHERE hit_time_gmt BETWEEN EXTRACT(EPOCH FROM '<start_date>'::timestamp) and EXTRACT(EPOCH FROM '<end_date>'::timestamp )) tgt\n  ON src.hitid_high = tgt.hitid_high\n    AND src.hitid_low = tgt.hitid_low\n  WHERE tgt.hitid_low IS NULL ;"
            }
        ],
        "load.stg.adobe_src.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "adobe_src"
                    ],
                    "select": [
                        "extract.adobe_src.*",
                        "*"
                    ],
                    "where": [
                        "hit_time_gmt",
                        "tgt.hitid_low"
                    ],
                    "join": [
                        "extract.adobe_src.hitid_high",
                        "tgt.hitid_high",
                        "extract.adobe_src.hitid_low",
                        "tgt.hitid_low"
                    ]
                },
                "tables": [
                    "stg.adobe_src",
                    "extract.adobe_src",
                    "timestamp"
                ],
                "subqueries": {
                    "tgt": "SELECT * FROM stg.adobe_src WHERE hit_time_gmt BETWEEN EXTRACT (EPOCH FROM '<start_date>' :: timestamp) and EXTRACT (EPOCH FROM '<end_date>' :: timestamp)"
                },
                "skipped": false,
                "value": "insert into stg.adobe_src\nSELECT src.* FROM extract.adobe_src src\n  LEFT JOIN\n        (SELECT * FROM stg.adobe_src\n            WHERE hit_time_gmt BETWEEN EXTRACT(EPOCH FROM '<start_date>'::timestamp) and EXTRACT(EPOCH FROM '<end_date>'::timestamp )) tgt\n  ON src.hitid_high = tgt.hitid_high\n    AND src.hitid_low = tgt.hitid_low\n  WHERE tgt.hitid_low IS NULL ;"
            }
        ],
        "load.public.dm_dpr_subs_spend.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "public.dm_dpr_subs_spend.date",
                        "public.stg_dm_dpr_subs_spend.date",
                        "public.dm_dpr_subs_spend.medium_code",
                        "public.stg_dm_dpr_subs_spend.medium_code",
                        "public.dm_dpr_subs_spend.source_code",
                        "public.stg_dm_dpr_subs_spend.source_code",
                        "public.dm_dpr_subs_spend.shop_name"
                    ]
                },
                "tables": [
                    "public.dm_dpr_subs_spend",
                    "public.stg_dm_dpr_subs_spend.shop_name"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from public.dm_dpr_subs_spend\nusing public.stg_dm_dpr_subs_spend\nwhere 1=1\n      and public.dm_dpr_subs_spend.date = public.stg_dm_dpr_subs_spend.date\n      and public.dm_dpr_subs_spend.medium_code = public.stg_dm_dpr_subs_spend.medium_code\n      and public.dm_dpr_subs_spend.source_code = public.stg_dm_dpr_subs_spend.source_code\n      and public.dm_dpr_subs_spend.shop_name = UPPER(TRIM(both ' ' from public.stg_dm_dpr_subs_spend.shop_name))\n;"
            },
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- select * from public.dm_dpr_subs_spend;\n-- select * from public.stg_dm_dpr_subs_spend;\n\ninsert into public.dm_dpr_subs_spend\nselect\n\t  date\n\t, medium_code\n\t, source_code\n\t, razor_subs\n\t, spend_usd\n\t-- , shop_id\n  , case\n      when UPPER(TRIM(both ' ' from shop_name)) = 'US' then 1\n      when UPPER(TRIM(both ' ' from shop_name)) = 'AU' then 2\n      when UPPER(TRIM(both ' ' from shop_name)) = 'OTHER' then 3\n      when UPPER(TRIM(both ' ' from shop_name)) = 'CA' then 4\n      when UPPER(TRIM(both ' ' from shop_name)) = 'UK' then 5\n    end as shop_id\n\t, UPPER(TRIM(both ' ' from shop_name)) as shop_name\n\t, getdate() as dw_load_date_time\nfrom public.stg_dm_dpr_subs_spend\n;"
            }
        ],
        "load.stg.adobe_web_orig.sql": [
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "--delete from stg.adobe_web_orig\n--using extract.adobe_web_orig\n--where 1=1\n--      and stg.adobe_web_orig.date_time between '<start_date>'::timestamp  and '<end_date>'::timestamp\n--      and stg.adobe_web_orig.hitid_high = extract.adobe_web_orig.hitid_high\n--      and stg.adobe_web_orig.hitid_low = extract.adobe_web_orig.hitid_low\n--;\n\ninsert into stg.adobe_web_orig\nselect\n  *\nfrom extract.adobe_web_orig adobe_extract\nWHERE NOT EXISTS (SELECT 1\n\t\t\t\t\t\t\t\t\t FROM stg.adobe_web_orig  stg\n                   WHERE  1 =1\n\t\t\t\t\t\t\t\t\t\t\t--AND stg.hit_time_gmt between EXTRACT(EPOCH FROM '<start_date>'::timestamp) and EXTRACT(EPOCH FROM '<end_date>'::timestamp)\n\t\t\t\t\t\t\t\t\t    AND stg.hitid_low = adobe_extract.hitid_low\n\t\t\t\t\t\t\t\t\t\t\tAND stg.hitid_high = adobe_extract.hitid_high\n)\n;"
            }
        ],
        "load.stg.adobe_src_ios.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "adobe_src_ios"
                    ],
                    "select": [
                        "extract.adobe_src_ios.*",
                        "*"
                    ],
                    "where": [
                        "hit_time_gmt",
                        "tgt.hitid_low"
                    ],
                    "join": [
                        "extract.adobe_src_ios.hitid_high",
                        "tgt.hitid_high",
                        "extract.adobe_src_ios.hitid_low",
                        "tgt.hitid_low"
                    ]
                },
                "tables": [
                    "stg.adobe_src_ios",
                    "extract.adobe_src_ios",
                    "timestamp"
                ],
                "subqueries": {
                    "tgt": "SELECT * FROM stg.adobe_src_ios WHERE hit_time_gmt BETWEEN EXTRACT (EPOCH FROM '<start_date>' :: timestamp) and EXTRACT (EPOCH FROM '<end_date>' :: timestamp)"
                },
                "skipped": false,
                "value": "insert into stg.adobe_src_ios\nSELECT src.*,\n        getdate() as dw_load_date_time\nFROM extract.adobe_src_ios src\n  LEFT JOIN\n        (SELECT * FROM stg.adobe_src_ios\n            WHERE hit_time_gmt BETWEEN EXTRACT(EPOCH FROM '<start_date>'::timestamp) and EXTRACT(EPOCH FROM '<end_date>'::timestamp )) tgt\n  ON src.hitid_high = tgt.hitid_high\n    AND src.hitid_low = tgt.hitid_low\n  WHERE tgt.hitid_low IS NULL ;"
            }
        ],
        "load.stg.adobe_src_prod.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "adobe_src_prod"
                    ],
                    "select": [
                        "extract.adobe_src_prod.*",
                        "*"
                    ],
                    "where": [
                        "hit_time_gmt",
                        "tgt.hitid_low"
                    ],
                    "join": [
                        "extract.adobe_src_prod.hitid_high",
                        "tgt.hitid_high",
                        "extract.adobe_src_prod.hitid_low",
                        "tgt.hitid_low"
                    ]
                },
                "tables": [
                    "stg.adobe_src_prod",
                    "extract.adobe_src_prod",
                    "timestamp"
                ],
                "subqueries": {
                    "tgt": "SELECT * FROM stg.adobe_src_prod WHERE hit_time_gmt BETWEEN EXTRACT (EPOCH FROM '<start_date>' :: timestamp) and EXTRACT (EPOCH FROM '<end_date>' :: timestamp)"
                },
                "skipped": false,
                "value": "insert into stg.adobe_src_prod\nSELECT src.* ,\n       getdate() as dw_load_date_time\nFROM extract.adobe_src_prod src\n  LEFT JOIN\n        (SELECT * FROM stg.adobe_src_prod\n            WHERE hit_time_gmt BETWEEN EXTRACT(EPOCH FROM '<start_date>'::timestamp) and EXTRACT(EPOCH FROM '<end_date>'::timestamp )) tgt\n  ON src.hitid_high = tgt.hitid_high\n    AND src.hitid_low = tgt.hitid_low\n  WHERE tgt.hitid_low IS NULL ;"
            }
        ],
        "transform.dmt.adobe_base.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "adobe_base"
                    ]
                },
                "tables": [
                    "dmt.adobe_base"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "Insert into dmt.adobe_base --tmp.adobe_base_1\nselect\ngetdate() dw_load_time_stamp\n,date_time as report_suite_time\n,timestamp 'epoch' + hit_time_gmt * interval '1 second' AS hit_time_gmt\n,convert_timezone('PST',timestamp 'epoch' + hit_time_gmt * interval '1 second') AS hit_time_pst\n,mcvisid\n,mcvisid||'-'||visit_num as visit_id\n,accept_language\n,browser              -- join with browser lookup table\n,left(campaign,1024)            --> post_campaign, evar57, evar58  --need to spit all of them\n  , split_part(left(campaign,1024),':',1) as campaign_name\n  , split_part(left(campaign,1024),':',2) as campaign_source\n  , split_part(left(campaign,1024),':',3) as campaign_medium\n  , split_part(left(campaign,1024),':',4) as campaign_content\n  , split_part(left(campaign,1024),':',5) as campaign_term\n,carrier\n,channel              --> values are empty they should be NULL -- sample value(found only 1 value) --> \"homepage: landing-page\"\n,click_action\n,click_action_type\n,click_context        --> example:   www|/your-account|us   www|/our-products/style/hair-cream|us  [click_context_subdomain,click_context_page,click_context_iso_code]\n,click_context_type\n,click_sourceid\n,click_tag\n,connection_type\n,cookies\n,country\n,ct_connect_type\n,curr_rate\n,currency\n,daily_visitor\n,domain\n,duplicate_purchase\n,evar1  as e_site_id\n,evar2  as e_site_type\n,evar3  as e_site_section_hierarchy\n,evar8  as e_ab_test_variation\n,left(evar9,500)  as e_pagename                       --NOT NULL --subdomain|pagepath|iso_code\n,evar10 as e_page_type\n,left(evar11,1024)\tas e_pageurl                        --NOT NULL\n,evar13 as e_event_group\n,evar14 as e_event_action\n,evar15 as e_event_name\n,evar17\tas e_login_status                   --NOT NULL\n,evar18 as e_login_type\n,evar19\tas e_membership_status              --NOT NULL\n,evar20\tas e_membership_type                --NOT NULL -- Looks like not being tracked correctly ?? what's the number?\n,evar21::timestamp\tas e_membership_creation_date       --NOT NULL\n,evar23\tas e_user_id                        --NOT NULL\n,left(evar25,1024) as e_user_agent\n,evar26 as e_visitor_ip\n\n,evar29 as e_visitor_time_zone\n,evar35\tas e_addtobox_location\n,evar36\tas e_funnel_type\n,evar37\tas e_funnel_blade_selection\n,evar38\tas e_addtobox_location_1\n,evar39\tas e_addtonextbox_cartid\n,evar40\tas e_transaction_id                 --NOT NULL --check if it's order_id\n,evar41\tas e_promo_code                     --NOT NULL --always null or empty??\n,evar42\tas e_referral_link_type\n,evar43\tas e_social_media_interaction\n,evar44\tas e_change_razor_selection\n,evar45 as e_change_frequency_selection\n,evar46\tas e_payment_method\n,evar47\tas e_currency\n,left(evar49,1024)\tas e_cancellation_reason\n,evar51\tas e_article_author_name\n,evar52\tas e_article_create_date\n,evar53\tas e_article_tags\n,evar55\tas e_internal_campaign_variable\n,left(evar57,1024)\tas e_utm_parameters_visit           --NOT NULL\n,left(evar58,1024)\tas e_utm_parameters_30day           --NOT NULL\n,evar60::timestamp\tas e_dtm_build_date\n,left(evar61,500)\tas e_form_type\n,left(evar62,500)\tas e_form_name\n,left(evar63,500)\tas e_form_text\n,left(evar64,500)\tas e_form_origination_page\n,evar65\tas e_snowplow_id                    --NOT NULL\n,evar100                                    --place holders\n,evar101\n,evar102\n,evar103\n,evar104\n,evar105\n,evar106\n,evar107\n,evar108\n,evar109\n,evar110\n,evar111\n,evar112\n,evar113\n,evar114\n,evar115\n,left(event_list,500) as event_list\n,left(first_hit_page_url,1024) as first_hit_page_url\n  , split_part(first_hit_pagename,'|',1) as first_hit_pagename_subdomain\n  , split_part(left(first_hit_page_url,1024),'|',2) as first_hit_pagename_pagePath\n  , split_part(first_hit_pagename,'|',3) as first_hit_pagename_iso_code\n,first_hit_ref_domain\n,first_hit_ref_type\n,left(first_hit_referrer,1024) as first_hit_referrer   -- this is the URL\n,timestamp 'epoch' + first_hit_time_gmt * interval '1 second' AS first_hit_time_gmt   --,first_hit_time_gmt\n,geo_city\n,geo_country\n,geo_dma\n,geo_region\n,geo_zip\n,hier1\n,hitid_high\n,hitid_low\n,hitid_high||'-'||hitid_low as hitid_high_low\n,hourly_visitor\n,ip\n,language\n,timestamp 'epoch' + last_hit_time_gmt * interval '1 second' AS last_hit_time_gmt\n,last_purchase_num\n,timestamp 'epoch' + last_purchase_time_gmt * interval '1 second' AS last_purchase_time_gmt\n,mobile_id\n,monthly_visitor\n,mvvar1\n,mvvar2\n,new_visit\n,os\n,page_event\n,left(page_event_var1,1024) as page_event_var1\n,left(page_event_var2,500) as page_event_var2\n,left(page_url,1024) as page_url\n,left(pagename,1024) as pagename  -- can't split pagename <> post_evar9\n,paid_search\n,persistent_cookie\n,left(post_campaign,1024) as post_campaign\n  , split_part(left(post_campaign,1024),':',1) as post_campaign_name\n  , split_part(left(post_campaign,1024),':',2) as post_campaign_source\n  , split_part(left(post_campaign,1024),':',3) as post_campaign_medium\n  , split_part(left(post_campaign,1024),':',4) as post_campaign_content\n  , split_part(left(post_campaign,1024),':',5) as post_campaign_term\n,post_channel\n,post_cookies\n,post_currency\n,timestamp 'epoch' + post_cust_hit_time_gmt * interval '1 second' AS post_cust_hit_time_gmt\n,post_evar1  as pe_site_id\n,post_evar2  as pe_site_type\n,post_evar3  as pe_site_section_hierarchy\n,post_evar8  as pe_ab_test_variation\n,left(post_evar9,500)  as pe_pagename   --subdomain|pagepath|iso_code\n  , split_part(left(post_evar9,500),'|',1) as pe_subdomain\n  , split_part(left(post_evar9,500),'|',2) as pe_pagepath\n  , split_part(left(post_evar9,500),'|',3) as pe_iso_code\n,post_evar10 as pe_page_type\n,post_evar11 as pe_pageurl\n,post_evar13 as pe_event_group\n,post_evar14 as pe_event_action\n,post_evar15 as pe_event_name\n,post_evar17 as pe_login_status\n,post_evar18 as pe_login_type\n,post_evar19 as pe_membership_status\n,post_evar20 as pe_membership_type\n,post_evar21 as pe_membership_creation_date\n,post_evar23 as pe_user_id\n,post_evar25 as pe_user_agent\n,post_evar26 as pe_visitor_ip\n,post_evar29 as pe_visitor_time_zone\n,post_evar35 as pe_addtobox_location\n,post_evar36 as pe_funnel_type\n,post_evar37 as pe_funnel_blade_selection\n,post_evar38 as pe_addtobox_location_1\n,post_evar39 as pe_addtonextbox_cartid\n,post_evar40 as pe_transaction_id\n,post_evar41 as pe_promo_code\n,post_evar42 as pe_referral_link_type\n,post_evar43 as pe_social_media_interaction\n,post_evar44 as pe_change_razor_selection\n,post_evar45 as pe_change_frequency_selection\n,post_evar46 as pe_payment_method\n,post_evar47 as pe_currency\n,left(post_evar49,1024) as pe_cancellation_reason\n,post_evar51 as pe_article_author_name\n,post_evar52::timestamp as pe_article_create_date\n,post_evar53 as pe_article_tags\n,post_evar55 as pe_internal_campaign_variable\n,post_evar57 as pe_utm_visit\n  , split_part(left(post_evar57,1024),':',1) as pe_utm_visit_campaign_name\n  , split_part(left(post_evar57,1024),':',2) as pe_utm_visit_campaign_source\n  , split_part(left(post_evar57,1024),':',3) as pe_utm_visit_campaign_medium\n  , split_part(left(post_evar57,1024),':',4) as pe_utm_visit_campaign_content\n  , split_part(left(post_evar57,1024),':',5) as pe_utm_visit_campaign_term\n,left(post_evar58,1024) as pe_utm_30day\n,post_evar60::timestamp\tas pe_dtm_build_date\n,post_evar61\tas pe_form_type\n,post_evar62\tas pe_form_name\n,post_evar63\tas pe_form_text\n,post_evar64\tas pe_form_origination_page\n,post_evar65  as pe_snowplow_id\n,post_evar100                                    --place holders\n,post_evar101\n,post_evar102\n,post_evar103\n,post_evar104\n,post_evar105\n,post_evar106\n,post_evar107\n,post_evar108\n,post_evar109\n,post_evar110\n,post_evar111\n,post_evar112\n,post_evar113\n,post_evar114\n,post_evar115\n,left(post_event_list,500) as post_event_list\n    ,case when ','||post_event_list||',' LIKE '%,1,%' THEN 1 else NULL end as post_event_purchase\n    ,case when ','||post_event_list||',' LIKE '%,2,%' THEN 2 else NULL end as post_event_product_view\n    ,case when ','||post_event_list||',' LIKE '%,10,%' THEN 10 else NULL end as post_event_cart_open\n    ,case when ','||post_event_list||',' LIKE '%,11,%' THEN 11 else NULL end as post_event_checkout\n    ,case when ','||post_event_list||',' LIKE '%,12,%' THEN 12 else NULL end as post_event_cart_add\n    ,case when ','||post_event_list||',' LIKE '%,13,%' THEN 13 else NULL end as post_event_cart_remove\n    ,case when ','||post_event_list||',' LIKE '%,14,%' THEN 14 else NULL end as post_event_cart_view\n    ,case when ','||post_event_list||',' LIKE '%,20,%' THEN 20 else NULL end as post_event_campaign_view\n,left(post_keywords,500) as post_keywords\n,left(post_mvvar1,500) as post_mvvar1\n,post_mvvar2\n,post_page_event\n,left(post_page_event_var1,500) as post_page_event_var1\n,post_page_event_var2\n,left(post_page_url,1024) as post_page_url\n,post_pagename   -- can't split pagename <> post_evar9\n,post_pagename_no_url\n,post_persistent_cookie\n,left(post_product_list,4000) as post_product_list\n,split_part(regexp_substr(left(post_product_list,4000),'136=[^,]*'),'=',2)   as merchandisingValue\n    ,case when left(post_product_list,4000) like '%136=Add to Next Box%' then split_part(post_product_list,';',2) else NULL end as addtonextbox_post_product_name\n    ,case when left(post_product_list,4000) like '%136=Add to Next Box%' then split_part(regexp_substr(post_product_list,'211=[^|]*'),'=',2) else null end as addtonextbox_post_product_quantity\n    ,case when left(post_product_list,4000) like '%136=Add to Next Box%' then split_part(regexp_substr(post_product_list,'212=[^;]*'),'=',2) else null end as addtonextbox_post_product_revenue\n,post_prop1\n,post_prop2\n,post_prop3\n,post_prop4\n,post_prop5\n,post_prop6\n,post_prop16\n,post_prop17\n,post_prop18\n,post_prop23\n,post_prop24\n,post_purchaseid\n,left(post_referrer,1024) as post_referrer\n,post_search_engine\n,post_t_time_info\n,post_transactionid  -- looks like its same as post_transactionid. If want to use persisted transaction_id --> use posr_evar40 [sp evar40,transactionid,posttransactionid all are same]\n,post_visid_high\n,post_visid_low\n,post_visid_high||'-'||post_visid_low as post_visid_high_low --,post_visid_high --,post_visid_low\n,post_visid_type\n,post_zip\n,prev_page\n,left(product_list,4000) as product_list\n,prop1\n,prop2\n,prop3\n,prop4\n,prop5\n,prop6\n,prop16\n,prop17\n,prop18\n,prop23\n,prop24\n,quarterly_visitor\n,ref_domain\n,ref_type\n,left(referrer,1024) as referrer\n,sampled_hit\n,search_engine\n,search_page_num\n,service\n,stats_server\n,t_time_info\n,transactionid\n,truncated_hit\n,left(user_agent,1024) user_agent\n,user_hash\n,user_server\n,userid\n,username\n,va_closer_detail\n,va_closer_id\n,va_finder_detail\n,va_finder_id\n,va_instance_event\n,va_new_engagement\n,visid_high\n,visid_low\n,visid_new\n,visid_timestamp\n,visid_type\n,visit_keywords\n,visit_page_num\n,visit_ref_domain\n,visit_ref_type\n,left(visit_referrer,1024) visit_referrer\n,visit_search_engine\n,left(visit_start_page_url,1024) visit_start_page_url\n,left(visit_start_pagename,500) visit_start_pagename\n,visit_start_time_gmt\n,timestamp 'epoch' + visit_start_time_gmt * interval '1 second' AS visit_start_date_time_gmt\n,weekly_visitor\n,yearly_visitor\n,NULL as browser_name --b.browser_name   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--> lookup table\n,NULL as browser_type_name --bt.browser_type_name    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--> lookup table\n,con.connection_type_name  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t\t\t--> lookup table\n,c.countryname            \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--> lookup table\n,NULL as os_name --os.os_name   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--> lookup table\n,e.event_name as post_page_event_name\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--> lookup table\n,NULL as search_engine_name --se.search_engine_name as post_search_engine_name\t  \t\t\t--> lookup table\n,rt.referrer_type_code as first_hit_referrer_type_code      \t\t\t\t\t\t\t\t\t\t\t\t\t\t--> lookup table   join on first_hit_ref_type\n,rt2.referrer_type_code as visit_ref_type_code   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--> lookup table   join on visit_ref_type\n,evar28 as e_visitor_timestamp\n,post_evar28 as pe_visitor_timestamp\n,evar54 as e_business_model\n,post_evar54 as pe_business_model\n--into tmp.adobe_base\n--from stg.adobe_web_orig aa\nfrom extract.adobe_web_orig adobe_extract\nleft join tmp.adobe_browser b on b.browser_id= adobe_extract.browser\nleft join tmp.adobe_browser_type bt on bt.browser_type_id = adobe_extract.browser\nleft join tmp.adobe_country c on c.countryid = adobe_extract.country\nleft join tmp.adobe_connection_type con on con.connection_type_id = adobe_extract.connection_type\nleft join tmp.adobe_referrer_type rt on rt.referrer_type_id = adobe_extract.first_hit_ref_type\nleft join tmp.adobe_referrer_type rt2 on rt2.referrer_type_id = adobe_extract.visit_ref_type\nleft join tmp.adobe_event e on e.event_id = adobe_extract.page_event\nleft join tmp.adobe_os os on os.os_id = adobe_extract.os\nleft join tmp.adobe_search_engine se on se.search_engine_id = adobe_extract.post_search_engine\nWHERE  1 =1\nAND NOT EXISTS (SELECT 1\n                   --FROM   tmp.adobe_base_1 adobe_base\n\t\t\t\t\t\t\t\t\t FROM dmt.adobe_base adobe_base  --final table\n                   WHERE  1 =1\n\t\t\t\t\t\t\t\t\t\t\tAND adobe_base.hit_time_gmt >= EXTRACT(EPOCH FROM '<start_date>'::timestamp)\n\t\t\t\t\t\t\t\t\t    AND adobe_base.hitid_low = adobe_extract.hitid_low\n\t\t\t\t\t\t\t\t\t\t\tAND adobe_base.hitid_high = adobe_extract.hitid_high )\n--and mcvisid = '57933688587015359797377964551570208789'\nand hit_source not in (5,7,8,9)\nand exclude_hit = 0\n;"
            }
        ],
        "load.stg.adobe_src_android.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "adobe_src_android"
                    ],
                    "select": [
                        "extract.adobe_src_android.*",
                        "*"
                    ],
                    "where": [
                        "hit_time_gmt",
                        "tgt.hitid_low"
                    ],
                    "join": [
                        "extract.adobe_src_android.hitid_high",
                        "tgt.hitid_high",
                        "extract.adobe_src_android.hitid_low",
                        "tgt.hitid_low"
                    ]
                },
                "tables": [
                    "stg.adobe_src_android",
                    "extract.adobe_src_android",
                    "timestamp"
                ],
                "subqueries": {
                    "tgt": "SELECT * FROM stg.adobe_src_android WHERE hit_time_gmt BETWEEN EXTRACT (EPOCH FROM '<start_date>' :: timestamp) and EXTRACT (EPOCH FROM '<end_date>' :: timestamp)"
                },
                "skipped": false,
                "value": "insert into stg.adobe_src_android\nSELECT src.*,\n        getdate() as dw_load_date_time\nFROM extract.adobe_src_android src\n  LEFT JOIN\n        (SELECT * FROM stg.adobe_src_android\n            WHERE hit_time_gmt BETWEEN EXTRACT(EPOCH FROM '<start_date>'::timestamp) and EXTRACT(EPOCH FROM '<end_date>'::timestamp )) tgt\n  ON src.hitid_high = tgt.hitid_high\n    AND src.hitid_low = tgt.hitid_low\n  WHERE tgt.hitid_low IS NULL ;"
            }
        ],
        "transform.dmt.adobe_visit_summary.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "adobe_visit_delta"
                    ],
                    "select": [
                        "post_visid_high",
                        "post_visid_low",
                        "visit_num",
                        "visit_start_time_gmt",
                        "stg.adobe_src_prod.post_visid_high",
                        "stg.adobe_src_prod.post_visid_low",
                        "stg.adobe_src_prod.visit_num",
                        "stg.adobe_src_prod.visit_start_time_gmt"
                    ],
                    "where": [
                        "dw_load_date_time",
                        "stg.adobe_visit_customers.customer_id",
                        "stg.customers.created_at"
                    ],
                    "join": [
                        "stg.adobe_src_prod.evar23",
                        "stg.customers.obfuscated_id",
                        "stg.adobe_visit_customers.obfuscated_customer_id"
                    ]
                },
                "tables": [
                    "extract.adobe_visit_delta",
                    "stg.adobe_src_prod",
                    "stg.customers",
                    "stg.adobe_visit_customers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO extract.adobe_visit_delta\n\nSELECT post_visid_high\n    , post_visid_low\n    , visit_num\n    , visit_start_time_gmt\n    , md5(post_visid_high||'-'|| post_visid_low||'-'|| visit_num||'-'|| visit_start_time_gmt) AS visit_id\nFROM stg.adobe_src_prod a\nWHERE dw_load_date_time :: TIMESTAMP >= '<start_date>' :: TIMESTAMP - INTERVAL '8 hours'\nGROUP BY 1,2,3,4\nUNION\nSELECT a.post_visid_high\n    , a.post_visid_low\n    , a.visit_num\n    , a.visit_start_time_gmt\n    , md5(a.post_visid_high||'-'|| a.post_visid_low||'-'|| a.visit_num||'-'|| a.visit_start_time_gmt) AS visit_id\nFROM stg.adobe_src_prod a\n        JOIN stg.customers c\n        ON a.evar23 = c.obfuscated_id\n            LEFT JOIN stg.adobe_visit_customers vc\n            ON c.obfuscated_id = vc.obfuscated_customer_id\nWHERE vc.customer_id IS NULL\n    AND c.created_at BETWEEN getdate()::DATE - INTERVAL '1 week'\n                        AND getdate()::DATE - INTERVAL '8 hours'\nGROUP BY 1,2,3,4;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.adobe_visit_id_url.visit_id",
                        "extract.adobe_visit_delta.visit_id"
                    ]
                },
                "tables": [
                    "stg.adobe_visit_id_url"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.adobe_visit_id_url\nUSING extract.adobe_visit_delta\nWHERE stg.adobe_visit_id_url.visit_id = extract.adobe_visit_delta.visit_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "adobe_visit_id_url"
                    ],
                    "select": [
                        "stg.adobe_src_prod.post_visid_high",
                        "stg.adobe_src_prod.post_visid_low",
                        "stg.adobe_src_prod.visit_num",
                        "stg.adobe_src_prod.visit_start_time_gmt",
                        "evar11",
                        "S",
                        "hit_time_gmt"
                    ],
                    "join": [
                        "stg.adobe_src_prod.post_visid_high",
                        "extract.adobe_visit_delta.post_visid_high",
                        "stg.adobe_src_prod.post_visid_low",
                        "extract.adobe_visit_delta.post_visid_low",
                        "stg.adobe_src_prod.visit_num",
                        "extract.adobe_visit_delta.visit_num",
                        "stg.adobe_src_prod.visit_start_time_gmt",
                        "extract.adobe_visit_delta.visit_start_time_gmt"
                    ]
                },
                "tables": [
                    "stg.adobe_visit_id_url",
                    "stg.adobe_src_prod",
                    "extract.adobe_visit_delta"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.adobe_visit_id_url\n  SELECT\n    md5(a.post_visid_high || '-' || a.post_visid_low || '-' || a.visit_num || '-' || a.visit_start_time_gmt) AS visit_id,\n    evar11                                                                                           AS page_url,\n    min(dateadd(S, hit_time_gmt, '19700101'))                                                        AS min_hit_timestamp,\n    max(dateadd(S, hit_time_gmt, '19700101'))                                                        AS max_hit_timestamp\n  FROM stg.adobe_src_prod a\n           INNER JOIN extract.adobe_visit_delta dd\n                        ON a.post_visid_high = dd.post_visid_high\n                          AND a.post_visid_low = dd.post_visid_low\n                          AND a.visit_num = dd.visit_num\n                          AND a.visit_start_time_gmt = dd.visit_start_time_gmt\n  GROUP BY 1, 2\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.adobe_visit_customers.visit_id",
                        "extract.adobe_visit_delta.visit_id"
                    ]
                },
                "tables": [
                    "stg.adobe_visit_customers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.adobe_visit_customers\nUSING extract.adobe_visit_delta\nWHERE stg.adobe_visit_customers.visit_id = extract.adobe_visit_delta.visit_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "adobe_visit_customers"
                    ],
                    "select": [
                        "stg.adobe_src_prod.post_visid_high",
                        "stg.adobe_src_prod.post_visid_low",
                        "stg.adobe_src_prod.visit_num",
                        "stg.adobe_src_prod.visit_start_time_gmt",
                        "stg.adobe_src_prod.evar23",
                        "stg.customers.id",
                        "s",
                        "hit_time_gmt",
                        "evar11"
                    ],
                    "join": [
                        "stg.adobe_src_prod.post_visid_high",
                        "extract.adobe_visit_delta.post_visid_high",
                        "stg.adobe_src_prod.post_visid_low",
                        "extract.adobe_visit_delta.post_visid_low",
                        "stg.adobe_src_prod.visit_num",
                        "extract.adobe_visit_delta.visit_num",
                        "stg.adobe_src_prod.visit_start_time_gmt",
                        "extract.adobe_visit_delta.visit_start_time_gmt",
                        "stg.adobe_src_prod.evar23",
                        "stg.customers.obfuscated_id",
                        "v.visit_id"
                    ]
                },
                "tables": [
                    "stg.adobe_visit_customers",
                    "stg.adobe_src_prod",
                    "extract.adobe_visit_delta",
                    "stg.customers"
                ],
                "subqueries": {
                    "v": "SELECT md5 (a.post_visid_high || '-' || a.post_visid_low || '-' || a.visit_num || '-' || a.visit_start_time_gmt) AS visit_id, max(CASE WHEN evar11 SIMILAR TO '%(/get-started/complete|/welcome/|/welcome|/your-box/cart/checkout/success|/manage/now/checkout/success|/purchase/success|/gift/plan/success|/gift/ecard/purchase/success|gift/ecard/success|/preorder/confirmation|/upgrade/congratulations)' THEN 1 ELSE 0 END) AS purchase_flag FROM stg.adobe_src_prod a INNER JOIN extract.adobe_visit_delta dd ON a.post_visid_high = dd.post_visid_high AND a.post_visid_low = dd.post_visid_low AND a.visit_num = dd.visit_num AND a.visit_start_time_gmt = dd.visit_start_time_gmt GROUP BY 1"
                },
                "skipped": false,
                "value": "INSERT INTO stg.adobe_visit_customers\nSELECT\n       a.post_visid_high,\n       a.post_visid_low,\n       a.visit_num,\n       a.visit_start_time_gmt,\n       a.evar23 as obfuscated_customer_id,\n       cu.id AS customer_id,\n       md5(a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt) AS visit_id,\n       dateadd(s, min(hit_time_gmt),'19700101') :: TIMESTAMP as visit_customer_min_timestamp,\n       dateadd(s, max(hit_time_gmt),'19700101') :: TIMESTAMP as visit_customer_max_timestamp,\n       v.purchase_flag,\n       getdate() as dw_load_date_time\n     FROM stg.adobe_src_prod a\n       INNER JOIN extract.adobe_visit_delta dd\n                        ON a.post_visid_high = dd.post_visid_high\n                          AND a.post_visid_low = dd.post_visid_low\n                          AND a.visit_num = dd.visit_num\n                          AND a.visit_start_time_gmt = dd.visit_start_time_gmt\n       INNER JOIN stg.customers cu\n         ON a.evar23 = cu.obfuscated_id\n       INNER JOIN (\n                    SELECT md5(a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt) AS visit_id,\n                   max(CASE\n                       WHEN evar11 SIMILAR TO\n                        '%(/get-started/complete|/welcome/|/welcome|/your-box/cart/checkout/success|/manage/now/checkout/success|/purchase/success|/gift/plan/success|/gift/ecard/purchase/success|gift/ecard/success|/preorder/confirmation|/upgrade/congratulations)'\n                        THEN 1 ELSE 0 END) AS purchase_flag\n                   FROM stg.adobe_src_prod a\n                     INNER JOIN extract.adobe_visit_delta dd\n                        ON a.post_visid_high = dd.post_visid_high\n                          AND a.post_visid_low = dd.post_visid_low\n                          AND a.visit_num = dd.visit_num\n                          AND a.visit_start_time_gmt = dd.visit_start_time_gmt\n                   GROUP BY 1\n                  ) v on v.visit_id = md5(a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt)\n     GROUP BY 1, 2, 3, 4, 5, 6 ,10 ;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "dmt.adobe_visit_summary.visit_id",
                        "extract.adobe_visit_delta.visit_id"
                    ]
                },
                "tables": [
                    "dmt.adobe_visit_summary"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM dmt.adobe_visit_summary\nUSING extract.adobe_visit_delta\nWHERE dmt.adobe_visit_summary.visit_id = extract.adobe_visit_delta.visit_id\n;"
            },
            {
                "skipped": true,
                "value": "INSERT INTO dmt.adobe_visit_summary\n              SELECT\n                x.mcvisid,\n                x.visit_num,\n                x.post_visid_high,\n                x.post_visid_low,\n                x.visit_start_time_gmt_epoch,\n                x.visit_id,\n                x.visit_start_time_gmt ,\n                x.visit_end_time_gmt,\n                x.visit_start_time_pst,\n                x.visit_end_time_pst,\n                left(x.landing_url_with_params, 512) as landing_url_with_params,\n                left(x.landing_url_without_params, 512) as landing_url_without_params,\n                x.first_utm_source,\n                x.first_utm_medium,\n                x.first_utm_campaign,\n                x.first_utm_content,\n                left(x.first_utm_term, 512) as first_utm_term,\n                x.landing_pagename,\n                left(x.ab_test_assignment, 512) as ab_test_assignment,\n                x.last_utm_medium,\n                x.last_utm_source,\n                x.last_utm_campaign,\n                x.last_utm_content,\n                left(x.last_utm_term, 512) as last_utm_term,\n                x.platform,\n                left(x.useragent, 512) as useragent,\n                CASE WHEN x.shopcode IN ('WWW', 'UK', 'AU', 'CA', 'can', 'aus', 'uk', 'us') THEN UPPER(shopcode) ELSE 'NA' END AS shopcode,\n                left(x.referring_url, 512) as referring_url,\n                x.referring_domain,\n                z.obfuscated_customer_id as obfuscated_customer_id,\n                z.customer_id AS customer_id,\n                x.obfuscated_order_id,\n                x.visit_page_view_count,\n                left(x.exit_url, 512) AS exit_url,\n                x.exit_pagename,\n                x.browser,\n                x.browser_name,\n                x.browser_height,\n                x.browser_width,\n                x.os,\n                x.os_name,\n                x.visit_ref_type,\n                x.visit_keywords,\n                x.ip,\n                x.geo_country,\n                x.geo_region,\n                x.geo_zip,\n                x.geo_city,\n                x.mobile_id,\n                x.hourly_visitor,\n                x.daily_visitor,\n                x.weekly_visitor,\n                x.monthly_visitor,\n                x.quarterly_visitor,\n                x.plan_purchase_flag,\n                x.subscription_purchase_flag,\n                x.subscription_shipnow_purchase_flag,\n                x.plan_shipnow_purchase_flag,\n                x.nsrq_purchase_flag,\n                x.gift_bundle_purchase_flag,\n                x.gift_ecard_purchase_flag,\n                x.preorder_purchase_flag,\n                x.order_count,\n                x.first_va_finder_id, -- 20190319\n                x.first_va_closer_id, -- 20190319\n                x.last_va_closer_id, -- 20190319\n                getdate() as dw_load_date_time,-- 20190319\n                x.min_login_timestamp_pst\n\n     FROM     (\n\n                  SELECT\n\n                   md5(a.post_visid_high|| '-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt) AS visit_id,\n                   a.visit_num,\n                   a.mcvisid,\n                   a.post_visid_high,\n                   a.post_visid_low,\n                   a.visit_start_time_gmt AS visit_start_time_gmt_epoch,\n                   (TIMESTAMP 'epoch' + a.visit_start_time_gmt  * INTERVAL '1 Second') :: TIMESTAMP AS visit_start_time_gmt,\n\n                   TIMESTAMP 'epoch' + last_value(a.hit_time_gmt) IGNORE NULLS OVER( PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                  ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) * INTERVAL '1 Second' AS visit_end_time_gmt\n\n                  , convert_timezone('PST', TIMESTAMP 'epoch' + a.visit_start_time_gmt * INTERVAL '1 Second') AS visit_start_time_pst\n\n                  , convert_timezone('PST', TIMESTAMP 'epoch' + last_value(a.hit_time_gmt) IGNORE NULLS OVER ( PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                            ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) * INTERVAL '1 Second' ) AS visit_end_time_pst\n\n                  , first_value(a.evar12) OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                            ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS landing_url_with_params\n\n                  , first_value(a.evar11) OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                            ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS landing_url_without_params\n\n                  , first_value(a.post_evar51) OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                            ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS first_utm_source\n\n                  , first_value(left(a.post_evar49,128)) OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                            ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS first_utm_medium\n\n                  , first_value(a.post_evar48) OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                            ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS first_utm_campaign\n\n                  , first_value(a.post_evar50) OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                            ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS first_utm_content\n\n                  , first_value(a.post_evar52) OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                            ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS first_utm_term\n\n                  , first_value(a.pagename) IGNORE NULLS OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                            ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS landing_pagename\n\n                  , first_value(a.mvvar1) IGNORE NULLS OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                            ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS ab_test_assignment\n\n                  , last_value(left(a.post_evar49,128)) OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                            ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS last_utm_medium\n\n                  , last_value(a.post_evar51) OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                            ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS last_utm_source\n\n                  , last_value(a.post_evar48) OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                            ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS last_utm_campaign\n\n                  , last_value(a.post_evar50) OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                            ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS last_utm_content\n\n                  , last_value(a.post_evar52) OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                            ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS last_utm_term\n\n                  , first_value(a.prop12) IGNORE NULLS OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                            ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS platform\n\n                  , first_value(a.evar14) IGNORE NULLS OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                            ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS useragent\n\n                  , first_value(a.prop8) IGNORE NULLS OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                            ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS shopcode\n\n                  , first_value(a.referrer) OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                            ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS referring_url\n\n                  , first_value(a.ref_domain) OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                            ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS referring_domain\n\n                  , first_value(a.evar40) IGNORE NULLS OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                            ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS obfuscated_order_id\n\n                  , SUM(CASE WHEN a.page_event = 0 THEN 1 ELSE 0 END) OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                            ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS visit_page_view_count\n\n                  , last_value(a.evar11) IGNORE NULLS OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                            ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS exit_url\n\n                  , last_value(a.pagename) IGNORE NULLS OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                            ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS exit_pagename\n\n                  , a.browser\n\n                  , browser_name\n\n                  , a.browser_height\n\n                  , a.browser_width\n\n                  , a.os\n\n                  , os_name\n\n                  , first_value(a.ref_type) OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                  ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS visit_ref_type\n\n                  , first_value(a.post_keywords) OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                  ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS visit_keywords\n\n                  , ip\n\n                  , geo_country\n\n                  , geo_region\n\n                  , geo_zip\n\n                  , geo_city\n\n                  , mobile_id\n\n                  , max(hourly_visitor) IGNORE NULLS OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                           ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) as hourly_visitor\n\n                  , max(daily_visitor) IGNORE NULLS OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                           ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) as daily_visitor\n\n                  , max(weekly_visitor) IGNORE NULLS OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                           ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) as weekly_visitor\n\n                  , max(monthly_visitor) IGNORE NULLS OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                           ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) as monthly_visitor\n\n                  , max(quarterly_visitor) IGNORE NULLS OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                           ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) as quarterly_visitor\n\n                  , max( CASE WHEN a.evar11 LIKE '%/get-started/complete' or a.evar11 like '%/upgrade/congratulations' THEN 1 ELSE 0 END ) OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                           ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS plan_purchase_flag\n\n                  , max( CASE WHEN (a.evar11 LIKE '%/welcome/' OR a.evar11 LIKE '%/welcome') THEN 1 ELSE 0 END ) OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                           ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS subscription_purchase_flag\n\n                  , max( CASE WHEN a.evar11 LIKE '%/your-box/cart/checkout/success' THEN 1 ELSE 0 END ) OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                           ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS subscription_shipnow_purchase_flag\n\n                  , max( CASE WHEN a.evar11 LIKE '%/manage/now/checkout/success' THEN 1 ELSE 0 END ) OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                            ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS plan_shipnow_purchase_flag\n\n                  , max( CASE WHEN a.evar11 LIKE '%/purchase/success' THEN 1 ELSE 0 END ) OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                             ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS nsrq_purchase_flag\n\n                  , max( CASE WHEN a.evar11 LIKE '%/gift/checkout/success/%' THEN 1 ELSE 0 END ) OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                             ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS gift_bundle_purchase_flag\n\n                  , max( CASE WHEN (a.evar11 LIKE '%/gift/ecard/purchase/success' OR a.evar11 LIKE '%gift/ecard/success') THEN 1 ELSE 0 END ) OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                             ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS gift_ecard_purchase_flag\n\n                  , max( CASE WHEN a.evar11 LIKE '%/preorder/confirmation' THEN 1 ELSE 0 END) OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                             ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS preorder_purchase_flag\n\n                  , SUM( CASE WHEN ','||a.post_event_list||',' LIKE '%,1,%' THEN 1 ELSE 0 END ) OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                             ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS order_count\n\n                  , first_value(a.va_finder_id) OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                            ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) as first_va_finder_id\n\n                  , first_value(a.va_closer_id) OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                            ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) as first_va_closer_id\n\n                  , last_value(a.va_closer_id) OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                            ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) as last_va_closer_id\n\n                  , convert_timezone('PST', TIMESTAMP 'epoch' + min(CASE WHEN a.evar11 LIKE '%/login' THEN a.hit_time_gmt END) OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                           ORDER BY a.hit_time_gmt, a.prop14 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING )* INTERVAL '1 Second') as min_login_timestamp_pst\n\n                  , row_number() OVER (PARTITION BY a.post_visid_high||'-'||a.post_visid_low||'-'||a.visit_num||'-'||a.visit_start_time_gmt\n                                                                                  ORDER BY a.hit_time_gmt, a.prop14) AS rnk\n\n                    FROM stg.adobe_src_prod a\n                      INNER JOIN extract.adobe_visit_delta dd\n                        ON a.post_visid_high = dd.post_visid_high\n                          AND a.post_visid_low = dd.post_visid_low\n                          AND a.visit_num = dd.visit_num\n                          AND a.visit_start_time_gmt = dd.visit_start_time_gmt\n                      INNER JOIN map.user_server mu ON a.user_server = mu.user_server\n                      LEFT JOIN dmt.adobe_browser b ON a.browser = b.browser_id\n                      LEFT JOIN dmt.adobe_os o ON a.os = o.os_id\n                      WHERE 1 = 1\n                      AND a.exclude_hit = 0\n\n                ) x\n\n  LEFT JOIN\n            (\n              SELECT\n                  visit_id,\n                  COALESCE(purchase_customer_id, general_customer_id) as customer_id,\n                  COALESCE(purchase_obfuscated_id, general_obfuscated_id) as obfuscated_customer_id\n                FROM\n                  (\n                    SELECT\n                        visit_id,\n\n                        first_value(CASE WHEN purchase_flag = 1 THEN obfuscated_customer_id ELSE NULL END) OVER (PARTITION BY visit_id ORDER BY visit_customer_min_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS purchase_obfuscated_id,\n                        first_value(obfuscated_customer_id) OVER (PARTITION BY visit_id ORDER BY visit_customer_min_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS general_obfuscated_id,\n                        first_value(CASE WHEN purchase_flag = 1 THEN customer_id ELSE NULL END) OVER (PARTITION BY visit_id ORDER BY visit_customer_min_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS purchase_customer_id,\n                        first_value(customer_id) OVER (PARTITION BY visit_id ORDER BY visit_customer_min_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) as general_customer_id,\n\n                        row_number() OVER (PARTITION BY visit_id ORDER BY visit_customer_min_timestamp, obfuscated_customer_id) AS rnk\n                    FROM stg.adobe_visit_customers\n                  ) ab\n               WHERE ab.rnk = 1\n            ) z\n          ON x.visit_id = z.visit_id\n\nWHERE x.rnk = 1\n;"
            }
        ]
    },
    "dm-ml-import": {
        "load.stg.ml_churn_scores.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.ml_churn_scores.customer_id",
                        "extract.ml_churn_scores.customer_id"
                    ]
                },
                "tables": [
                    "stg.ml_churn_scores"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.ml_churn_scores\nUSING extract.ml_churn_scores\nWHERE stg.ml_churn_scores.customer_id = extract.ml_churn_scores.customer_id\n;"
            },
            {
                "skipped": true,
                "value": "INSERT INTO stg.ml_churn_scores\nSelect customer_id\n  , churn_score\n  , getdate() as dw_load_date_time\n  , churn_score_created_at\n  FROM (\n        SELECT\n            customer_id\n          , churn_score\n          , getdate() as dw_load_date_time\n          , churn_score_created_at::date\n          , row_number() over(partition by customer_id order by churn_score_created_at desc) rn\n        FROM extract.ml_churn_scores\n        --where customer_id in (14603409,14603851)\n) where rn = 1\n;"
            }
        ],
        "load.stg.ml_model_scores.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.ml_model_scores.customer_id",
                        "extract.ml_model_scores.customer_id"
                    ]
                },
                "tables": [
                    "stg.ml_model_scores"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.ml_model_scores\nUSING extract.ml_model_scores\nWHERE stg.ml_model_scores.customer_id = extract.ml_model_scores.customer_id\n;"
            },
            {
                "skipped": true,
                "value": "INSERT INTO stg.ml_model_scores\nSelect customer_id\n    ,data_dt\n    ,model_A\n    ,model_B\n    ,model_C\n    ,model_D\n    ,model_E\n    ,model_F\n    ,model_G\n    ,model_H\n    ,model_I\n    ,model_J\n    ,model_K\n    ,model_L\n    ,model_M\n    ,model_N\n    ,model_O\n    ,model_P\n    ,model_Q\n    ,model_R\n    ,model_S\n    ,model_T\n    ,model_U\n    ,model_V\n    ,model_W\n    ,model_X\n    ,model_Y\n    ,model_Z\n    ,getdate() as dw_load_date_time\n  FROM (\n        SELECT\n            customer_id::int\n            ,data_dt::date \n            ,model_A::numeric(5,4)\n            ,model_B::numeric(5,4)\n            ,model_C::numeric(5,4)\n            ,model_D::numeric(5,4)\n            ,model_E::numeric(5,4)\n            ,model_F::numeric(5,4)\n            ,model_G::numeric(5,4)\n            ,model_H::numeric(5,4)\n            ,model_I::numeric(5,4)\n            ,model_J::numeric(5,4)\n            ,model_K::numeric(5,4)\n            ,model_L::numeric(5,4)\n            ,model_M::numeric(5,4)\n            ,model_N::numeric(5,4)\n            ,model_O::numeric(5,4)\n            ,model_P::numeric(5,4)\n            ,model_Q::numeric(5,4)\n            ,model_R::numeric(5,4)\n            ,model_S::numeric(5,4)\n            ,model_T::numeric(5,4)\n            ,model_U::numeric(5,4)\n            ,model_V::numeric(5,4)\n            ,model_W::numeric(5,4)\n            ,model_X::numeric(5,4)\n            ,model_Y::numeric(5,4)\n            ,model_Z::numeric(5,4)\n            ,getdate() as dw_load_date_time\n            ,row_number() over(partition by customer_id order by data_dt::date desc) rn\n        FROM extract.ml_model_scores\n        --where customer_id in (14603409,14603851)\n) where rn = 1\n;"
            }
        ]
    },
    "dm-load": {
        "load.stg.customer_subscriptions.sql": [
            {
                "skipped": true,
                "value": "delete from dm.stg.customer_subscriptions\nusing dm.extract.customer_subscriptions\nwhere dm.stg.customer_subscriptions.id = dm.extract.customer_subscriptions.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_subscriptions"
                    ],
                    "select": [
                        "id",
                        "subscription_id",
                        "start_date_time",
                        "end_date_time",
                        "shipping_address_id",
                        "product_quantity",
                        "created_at",
                        "updated_at",
                        "customer_id",
                        "frequency",
                        "zuora_latest_subscription_id",
                        "status",
                        "product_rate_plan_id",
                        "zuora_original_subscription_id",
                        "zuora_subscription_status",
                        "current_cycle_start_date_time",
                        "current_cycle_end_date_time",
                        "last_add_amendment_date_time",
                        "iteration_count",
                        "current_iteration_count",
                        "obfuscated_id",
                        "last_bill_date_time",
                        "next_bill_date_time",
                        "bill_cycle_reference_date_time",
                        "scheduled_for_cancellation_at_date_time",
                        "shop_id"
                    ]
                },
                "tables": [
                    "dm.stg.customer_subscriptions",
                    "dm.extract.customer_subscriptions"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into dm.stg.customer_subscriptions\nselect\n    id \n\t,subscription_id \n\t,start_date_time  \n\t,end_date_time  \n\t,shipping_address_id \n\t,product_quantity \n\t,created_at   \n\t,updated_at \n\t,customer_id \n\t,frequency \n\t,zuora_latest_subscription_id \n\t,status \n\t,product_rate_plan_id  \n\t,zuora_original_subscription_id \n\t,zuora_subscription_status \n\t,current_cycle_start_date_time \n\t,current_cycle_end_date_time \n\t,last_add_amendment_date_time   \n\t,iteration_count \n\t,current_iteration_count \n\t,obfuscated_id \n\t,last_bill_date_time \n\t,next_bill_date_time  \n\t,bill_cycle_reference_date_time   \n\t,scheduled_for_cancellation_at_date_time\n\t,shop_id \nfrom dm.extract.customer_subscriptions\n;"
            }
        ],
        "load.stg.customer_phone_numbers.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.customer_phone_numbers.id",
                        "extract.customer_phone_numbers.id"
                    ]
                },
                "tables": [
                    "stg.customer_phone_numbers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.customer_phone_numbers\nusing extract.customer_phone_numbers\nwhere stg.customer_phone_numbers.id = extract.customer_phone_numbers.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_phone_numbers"
                    ],
                    "select": [
                        "*"
                    ]
                },
                "tables": [
                    "stg.customer_phone_numbers",
                    "extract.customer_phone_numbers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.customer_phone_numbers\nselect\n  *\nfrom extract.customer_phone_numbers\n;"
            }
        ],
        "load.stg.customer_subscription_cancellation_reasons.sql": [
            {
                "skipped": true,
                "value": "delete from dm.stg.customer_subscription_cancellation_reasons\nusing dm.extract.customer_subscription_cancellation_reasons\nwhere dm.stg.customer_subscription_cancellation_reasons.id = dm.extract.customer_subscription_cancellation_reasons.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_subscription_cancellation_reasons"
                    ],
                    "select": [
                        "id",
                        "customer_subscription_id",
                        "reason",
                        "created_at",
                        "updated_at",
                        "survey_option_id",
                        "parent_id",
                        "admin_id"
                    ]
                },
                "tables": [
                    "stg.customer_subscription_cancellation_reasons",
                    "extract.customer_subscription_cancellation_reasons"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.customer_subscription_cancellation_reasons\nselect\n    id \n\t,customer_subscription_id    \n\t,reason \n\t,created_at  \n\t,updated_at \n\t,survey_option_id \n\t,parent_id    \n\t,admin_id \nfrom extract.customer_subscription_cancellation_reasons\n;"
            }
        ],
        "transform.dmt.d_product.sql": [
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "stg.products.id"
                    ],
                    "where": [
                        "stg.products.updated_at"
                    ]
                },
                "tables": [
                    "dm_delta",
                    "stg.products"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "CREATE TEMP TABLE dm_delta AS\nSelect p.id as id\nfrom stg.products p\nwhere p.updated_at >= '<start_date>'::timestamp\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "dmt.d_product.product_id",
                        "dm_delta.id"
                    ]
                },
                "tables": [
                    "dmt.d_product"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from dmt.d_product\nusing dm_delta\nwhere dmt.d_product.product_id = dm_delta.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "d_product"
                    ],
                    "select": [
                        "p.id",
                        "sku",
                        "name",
                        "description",
                        "primary_image",
                        "created_at",
                        "updated_at"
                    ]
                },
                "tables": [
                    "dmt.d_product"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO dmt.d_product\nSelect\n    p.id as product_id \n\t,sku \n\t,name\n\t,description  \n\t,primary_image \n\t,created_at   \n\t,updated_at  \n\t,type \n\t,nature \n\t,status\n\t,internal_description \n\t,internal_name  \n\t,secondary_image   \n\t,taxable  \n\t,brand_id\n--derived columns\n    ,CASE WHEN brand_id = 2 THEN 'Humble Twin'   \n        WHEN brand_id = 1 THEN '4x' \n        WHEN brand_id = 5 THEN 'Executive'      \n        WHEN brand_id = 8 THEN 'Big Cloud'       \n        WHEN brand_id = 6 THEN 'Boogies' \n        WHEN brand_id = 7 THEN 'Charlies' \n        WHEN brand_id = 4 THEN 'Dr. Carvers'    \n        WHEN brand_id = 9 THEN 'Wanderer' \n        WHEN brand_id = 10 THEN 'Physical Goods' \n        else 'Other' END \n        AS brand_id_name\n\n    ,CASE WHEN type in (0,1) THEN 'Razor Subs'\n       WHEN type in (2,3) THEN 'Razor Extras'\n       WHEN type in (6,10,11,17,20) THEN 'Dr. Carvers'\n       WHEN type = 9 THEN 'Charlies'\n       WHEN type = 8 THEN 'Gift Card'\n       WHEN type = 12 THEN 'Boogies'\n       WHEN type = 18 THEN 'Big Cloud'\n       WHEN type = 14 THEN 'Bundle'\n       WHEN type = 19 THEN 'Wanderer'\n       WHEN type = 22 THEN 'Traveler'\n       WHEN type = 24 and brand_id = 8 THEN 'Trial Size - Big Cloud'\n       WHEN type = 24 and brand_id = 6 THEN 'Trial Size - Boogies'\n       WHEN type = 24 and brand_id = 7 THEN 'Trial Size - Charlies'\n       WHEN type = 24 and brand_id = 4 THEN 'Trial Size - Dr. Carvers'\n       WHEN type = 24 and brand_id = 9 THEN 'Trial Size - Wanderer'       \n      else 'Other' END \n      AS class    \n      \n    ,CASE WHEN type in (0,1,2,3) THEN 'Razor'\n        WHEN type in (6,9,10,11,12,17,18,19,20,22) THEN 'Nrp'\n        WHEN type in (8,13,16,21) THEN 'Gift'\n        WHEN type in (14) THEN 'Bundle' \n        WHEN type = 24 THEN 'Minis'\n        else 'Other' END \n        AS class_type    \n        \n    , CASE\n            WHEN type in (0,1) and left(name,2) = 'Hu' THEN 'HT'   -- type in (0,1) means 'Razor Subs'\n            WHEN type in (0,1) and left(name,2) = '4X' THEN '4x'\n            WHEN type in (0,1) and left(name,2) = 'Ex' THEN 'Exec'\n            ELSE 'other' END \n            AS name_umbrella \n\n    ,CASE WHEN nature = 0 THEN 'Physical'\n        WHEN nature = 1 THEN 'Composite'\n        WHEN nature = 2 THEN 'Digital'\n        WHEN nature = 3 THEN 'Virtual'\n        WHEN nature = 4 THEN 'Process'\n        WHEN nature = 5 THEN 'Product Bundle'\n        WHEN nature = 6 THEN 'Kit'     \n        else 'unknown' END  \n        AS nature_name \n\n    ,CASE \n            WHEN left(sku,5) = 'M-4X-' THEN '4x'\n            WHEN left(sku,5) = 'MRZ-4' THEN '4x'\n            WHEN left(sku,8) = 'M-DTWIN-' THEN 'Twin'\n            WHEN left(sku,5) = 'MRZ-2' THEN 'Twin'\n            WHEN left(sku,7) = 'M-EXEC-' THEN 'Exec'\n            WHEN left(sku,5) = 'MRZ-6' THEN 'Exec'\n            ELSE sku END \n            AS razor_plan \n\n    , CASE WHEN sku = 'ESB-6Z-1' THEN 'Shave Butter 6oz' \n        WHEN sku = 'ESB-3Z-1' THEN 'Shave Butter 3oz' \n        WHEN sku = 'MPS-3Z-2' THEN 'Post Shave' \n        WHEN sku = 'OWC-40C-3' THEN 'One Wipe Charlies' \n        WHEN sku = 'OWC-40T-2' THEN 'One Wipe Charlies - Travel' \n        WHEN sku = 'MRZ-2B-2' THEN 'Twin Blade' \n        WHEN sku = 'MRZ-2H-3' THEN 'Twin Handle' \n        WHEN sku = 'MRZ-4B-2' THEN '4x Blade' \n        WHEN sku = 'MRZ-4B-1' THEN '4x Blade' \n        WHEN sku = 'MRZ-4H-2' THEN '4x Handle' \n        WHEN sku = 'MRZ-6B-3' THEN 'Exec Blade' \n        WHEN sku = 'MRZ-6H-2' THEN 'Exec Handle' \n        WHEN sku = 'MPS-SRM-2Z-1' THEN 'Repair Serum' \n        WHEN sku = 'BGEL-3Z-CURRENT' THEN 'Boogies Gel 3oz' \n        WHEN sku = 'BGEL-5Z-CURRENT' THEN 'Boogies Gel 5oz' \n        WHEN sku = 'BFIB-2Z-CURRENT' THEN 'Boogies Fiber' \n        WHEN sku = 'BCLAY-2Z-CURRENT' THEN 'Boogies Clay' \n        WHEN sku = 'BTP-3Z-CURRENT' THEN 'Boogies Paste' \n        WHEN sku = 'BCREM-3Z-CURRENT' THEN 'Boogies Cream' \n        WHEN sku = 'MPS-SAMPLE-BUNDLE' THEN 'Post Shave Sample' \n        WHEN sku = 'OWC-SAMPLE-BUNDLE' THEN 'OWC Sample' \n        WHEN sku = 'MPS-SRM-SAMPLE-BUNDLE' THEN 'Repair Serum Sample' \n        WHEN sku = 'ESB-SAMPLE-BUNDLE' THEN 'Shave Butter Sample' \n        else 'Other' END\n        AS sku_code \n\n    ,CASE \n       WHEN left(sku,5) = 'M-4X-' THEN 'MRZ-4B-X'\n       WHEN left(sku,8) = 'M-DTWIN-' THEN 'MRZ-2B-X'\n       WHEN left(sku,7) = 'M-EXEC-' THEN 'MRZ-6B-X'\n       ELSE sku END \n       AS sku_razor_clean \n\n    ,CASE WHEN status = 0 THEN 1 ELSE 0 END AS status_retention_science \n\n    ,CASE WHEN status = 0 THEN 'Active'\n          WHEN status = 1 THEN 'Pending Review'\n          WHEN status = 2 THEN 'Inactive'\n          WHEN status = 3 THEN 'Retired'\n          WHEN status = 4  THEN 'Coming Soon' \n        else 'Other' END  \n        AS status_name\n    \n    ,CASE WHEN type = 0 THEN 'Subscription'\n       WHEN type = 1 THEN 'Subscription Bundle'\n       WHEN type = 2 THEN 'Blade'\n       WHEN type = 3 THEN 'Handle'\n       WHEN type = 4 THEN 'Packaging'\n       WHEN type = 5 THEN 'Marketing'\n       WHEN type = 6 THEN 'Shave Butter'\n       WHEN type = 7 THEN 'Sample'\n       WHEN type = 8 THEN 'Gift Card'\n       WHEN type = 9 THEN 'Wipe'\n       WHEN type = 10 THEN 'Post Shave'\n       WHEN type = 11 THEN 'Serum'\n       WHEN type = 12 THEN 'Hair'\n       WHEN type = 13 THEN 'Gift Plan'\n       WHEN type = 14 THEN 'Bundle'\n       WHEN type = 15 THEN 'Gifting Overbox'\n       WHEN type = 16 THEN 'Gift Kit'\n       WHEN type = 17 THEN 'Shave Lather'\n       WHEN type = 18 THEN 'Big Cloud'\n       WHEN type = 19 THEN 'Wanderer'\n       WHEN type = 20 THEN 'Pre-Shave'\n       WHEN type = 21 THEN 'Gift Wrap'\n       WHEN type = 22 THEN 'Traveler'\n       WHEN type = 24 THEN 'Minis'\n      else 'Other' END \n      AS type_name \n\n    from dm_delta dd\n    inner join stg.products p\n    on dd.id = p.id\n;"
            }
        ],
        "extract.dsc_prod.customer_attributes.sql": [],
        "load.stg.products.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.products.id",
                        "extract.products.id"
                    ]
                },
                "tables": [
                    "stg.products"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.products\nusing extract.products\nwhere stg.products.id = extract.products.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "products"
                    ],
                    "select": [
                        "id",
                        "sku",
                        "name",
                        "description",
                        "primary_image",
                        "created_at",
                        "updated_at"
                    ]
                },
                "tables": [
                    "stg.products",
                    "extract.products"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.products\nselect\n    id  \n\t,sku \n\t,name  \n\t,description  \n\t,primary_image \n\t,created_at   \n\t,updated_at  \n\t,type \n\t,nature \n\t,status\n\t,internal_description \n\t,internal_name  \n\t,secondary_image   \n\t,taxable  \n\t,brand_id\nfrom extract.products\n;"
            }
        ],
        "load.stg.survey_options.sql": [
            {
                "skipped": true,
                "value": "delete from dm.stg.survey_options\nusing dm.extract.survey_options\nwhere dm.stg.survey_options.id = dm.extract.survey_options.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "survey_options"
                    ],
                    "select": [
                        "id",
                        "target",
                        "message",
                        "created_at",
                        "updated_at",
                        "is_custom",
                        "code"
                    ]
                },
                "tables": [
                    "dm.stg.survey_options",
                    "dm.extract.survey_options"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into dm.stg.survey_options\nselect\n    id \n\t,target    \n\t,message   \n\t,created_at  \n\t,updated_at  \n\t,is_custom \n\t,code \n\t,ordinality \n\t,is_internal\n\t,parent_id  \n\t,placeholder \nfrom dm.extract.survey_options\n;"
            }
        ],
        "load.stg.customers.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.customers.id",
                        "extract.customers.id"
                    ]
                },
                "tables": [
                    "stg.customers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.customers\nusing extract.customers\nwhere stg.customers.id = extract.customers.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customers"
                    ],
                    "select": [
                        "*"
                    ]
                },
                "tables": [
                    "stg.customers",
                    "extract.customers"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.customers\nselect\n  *\nfrom extract.customers\n;"
            }
        ],
        "extract.dsc_prod.customer_phone_numbers.sql": [],
        "transform.dmt.d_customer.sql": [
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "stg.customers.id"
                    ],
                    "join": [
                        "stg.customers.id",
                        "stg.customer_attributes.customer_id"
                    ],
                    "where": [
                        "stg.customers.updated_at"
                    ]
                },
                "tables": [
                    "dm_delta",
                    "stg.customers",
                    "stg.customer_attributes"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "CREATE TEMP TABLE dm_delta AS\nSelect c.id as myid\nfrom stg.customers c\n  left outer join stg.customer_attributes ca\n    on c.id = ca.customer_id\nwhere (c.updated_at >= '<start_date>'::timestamp\n       OR ca.updated_at >= '<start_date>'::timestamp)\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "dmt.d_customer.customer_id",
                        "dm_delta.myid"
                    ]
                },
                "tables": [
                    "dmt.d_customer"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from dmt.d_customer\nusing dm_delta\nwhere dmt.d_customer.customer_id = dm_delta.myid\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "d_customer"
                    ],
                    "select": [
                        "c.id",
                        "c.email",
                        "c.encrypted_password",
                        "c.reset_password_token",
                        "c.reset_password_sent_at",
                        "c.remember_created_at",
                        "c.sign_in_count",
                        "c.current_sign_in_at",
                        "c.last_sign_in_at",
                        "c.current_sign_in_ip",
                        "c.last_sign_in_ip",
                        "c.created_at",
                        "c.updated_at",
                        "c.first_name",
                        "c.last_name",
                        "c.location_id",
                        "c.zuora_account_id",
                        "c.referral_code",
                        "c.wallet_balance",
                        "c.provider",
                        "c.uid",
                        "c.gender",
                        "c.birthday",
                        "c.relationship_status",
                        "c.time_zone",
                        "c.audience_type",
                        "c.allow_resubscription",
                        "c.zuora_account_number",
                        "c.fb_token",
                        "c.customer_type",
                        "c.obfuscated_id",
                        "c.last_vip_date_time",
                        "c.rank",
                        "c.authentication_token",
                        "c.force_logout"
                    ]
                },
                "tables": [
                    "dmt.d_customer"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into dmt.d_customer\nselect\n   c.id as customer_id\n\t,c.email\n\t,c.encrypted_password\n\t,c.reset_password_token\n\t,c.reset_password_sent_at\n\t,c.remember_created_at\n\t,c.sign_in_count\n\t,c.current_sign_in_at\n\t,c.last_sign_in_at\n\t,c.current_sign_in_ip\n\t,c.last_sign_in_ip\n\t,c.created_at\n\t,c.updated_at\n\t,c.first_name\n\t,c.last_name\n\t,c.location_id\n\t,c.zuora_account_id\n\t,c.referral_code\n\t,c.wallet_balance\n\t,c.provider\n\t,c.uid\n\t,c.gender\n\t,c.birthday\n\t,c.relationship_status\n\t,c.time_zone\n\t,c.audience_type\n\t,c.allow_resubscription\n\t,c.zuora_account_number\n\t,c.fb_token\n\t,c.customer_type\n\t,c.obfuscated_id\n\t,c.last_vip_date_time\n\t,c.rank\n\t,c.authentication_token\n\t,c.force_logout\n    -- customer attributes\n\t,ca.convertro_id\n\t,ca.initial_referrer\n\t,ca.twitter\n\t,ca.facebook\n\t,ca.cellphone_number\n\t,ca.last_user_agent\n\t,ca.fraud_score\n\t,ca.klout_score\n\t,ca.full_contact_status\n\t,ca.satisfaction_score\n\t,ca.browser_hash\n\t,ca.permanent_cookie\n\t,ca.last_login_request_headers\n\t,ca.failed_credit_card_attempt_count\n\t,ca.primary_referral_name\n\t,ca.secondary_referral_name\n\t,ca.proxy_score\n\t,ca.id  as customer_attributes_id\n\t,ca.registered_in_shop_id\nfrom dm_delta dd\n  inner join stg.customers c\n    on c.id = dd.myid\n  left outer join stg.customer_attributes ca\n    on c.id = ca.customer_id\n;"
            }
        ],
        "extract.dsc_prod.customer_subscriptions.sql": [],
        "transform.dmt.d_customer_subscription.sql": [
            {
                "type": "CREATE",
                "columns": {
                    "select": [
                        "stg.customer_subscriptions.customer_id"
                    ],
                    "join": [
                        "stg.customer_subscriptions.id",
                        "stg.customer_subscription_cancellation_reasons.customer_subscription_id",
                        "stg.customer_subscription_cancellation_reasons.survey_option_id",
                        "stg.survey_options.id"
                    ],
                    "where": [
                        "stg.customer_subscriptions.updated_at"
                    ]
                },
                "tables": [
                    "dm_delta",
                    "stg.customer_subscriptions",
                    "stg.customer_subscription_cancellation_reasons",
                    "stg.survey_options"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "CREATE TEMP TABLE dm_delta AS\nSelect distinct cs.customer_id as customer_id\nfrom stg.customer_subscriptions cs\n  left outer join stg.customer_subscription_cancellation_reasons cr\n    on cs.id = cr.customer_subscription_id\n  left outer join stg.survey_options so  \n  on cr.survey_option_id = so.id\nwhere (\n       cs.updated_at >= '<start_date>'::timestamp - 1\n       OR cr.updated_at >= '<start_date>'::timestamp - 1\n       OR so.updated_at >= '<start_date>'::timestamp - 1\n       )\n;"
            },
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "dmt.d_customer_subscription.customer_id",
                        "dm_delta.customer_id"
                    ]
                },
                "tables": [
                    "dmt.d_customer_subscription"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from dmt.d_customer_subscription\nusing dm_delta\nwhere dmt.d_customer_subscription.customer_id = dm_delta.customer_id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "d_customer_subscription"
                    ],
                    "select": [
                        "cs.id",
                        "first_subscription.first_customer_subscription_id"
                    ]
                },
                "tables": [
                    "dmt.d_customer_subscription"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into dmt.d_customer_subscription\n Select \n\tcs.id as customer_subscription_id\n  ,first_subscription.first_customer_subscription_id      --derived column\n  ,current_subscription.current_customer_subscription_id  --derived column\n\t,cs.subscription_id \n\t,cs.start_date_time  \n\t,cs.end_date_time  \n\t,cs.shipping_address_id \n\t,cs.product_quantity \n\t,cs.created_at   \n\t,cs.updated_at \n\t,cs.customer_id \n\t,cs.frequency \n\t,cs.zuora_latest_subscription_id \n\t,cs.status \n\t,cs.product_rate_plan_id  \n\t,cs.zuora_original_subscription_id \n\t,cs.zuora_subscription_status \n\t,cs.current_cycle_start_date_time \n\t,cs.current_cycle_end_date_time \n\t,cs.last_add_amendment_date_time   \n\t,cs.iteration_count \n\t,cs.current_iteration_count \n\t,cs.obfuscated_id \n\t,cs.last_bill_date_time \n\t,cs.next_bill_date_time  \n\t,cs.bill_cycle_reference_date_time   \n\t,cs.scheduled_for_cancellation_at_date_time\n\t,cs.shop_id\n    --derived columns  \n  ,NVL(sh.shop_name,'Other') shop_name\n  ,CASE \n      WHEN cs.status = 0 THEN 'Cancelled'\n      WHEN cs.status = 1 THEN 'Active'\n      WHEN cs.status = 2 THEN 'Suspended'\n      WHEN cs.status = 3 THEN 'S Timeout'\n      WHEN cs.status = 4 THEN 'Paused'\n      ELSE 'Other' END status_name   \n  ,reason.customer_subscription_cancellation_reason_id  \n\t,reason.reason\t\n\t,reason.customer_subscription_cancellation_reason_created_at \n\t,reason.reason_parent_id \n\t,reason.survey_option_id \n\t,reason.survey_option_target \n\t,reason.survey_option_message\n\t,reason.survey_option_parent_id\n  ,reason.survey_option_code\n  ,reason.survey_option_id_check\n  ,getdate() \n    from\n    dm_delta dd\n    inner join stg.customer_subscriptions cs\n    ON dd.customer_id = cs.customer_id\n    left outer join (\n                        select * from (     \n                            select \n                            cs.id as customer_subscription_id\n                            ,cr.id customer_subscription_cancellation_reason_id  \n                            ,cr.reason\t\n                            ,cr.created_at as customer_subscription_cancellation_reason_created_at \n                            ,cr.parent_id as reason_parent_id \n                            ,cr.survey_option_id\n                            ,so.target as survey_option_target\n                            ,so.message as survey_option_message \n                            ,so.parent_id as survey_option_parent_id\n                            ,so.code as survey_option_code\n                            ,case when cr.survey_option_id is NULL OR cr.survey_option_id IN (1,2,3,4,5,6,11,31) THEN 'true' else 'false' end survey_option_id_check\n                            ,Row_Number() OVER(partition by cs.id order by cr.created_at desc) rnk\n                            from \n                            dm_delta dd\n                            inner join stg.customer_subscriptions cs\n                            ON dd.customer_id = cs.customer_id\n                            inner join stg.customer_subscription_cancellation_reasons cr\n                            on cs.id = cr.customer_subscription_id\n                            left join stg.survey_options so\n                            ON cr.survey_option_id = so.id\n                            where cr.parent_id is null  \t\n                        ) dedupe where rnk = 1\n                ) reason\n    ON cs.id = reason.customer_subscription_id\n    left join map.shop shop on shop.shop_id = cs.shop_id\n    left join (select dd.customer_id, min(cs.id) as first_customer_subscription_id\n                from dm_delta dd\n                inner join stg.customer_subscriptions cs\n\t\t\t\t\t\t\t\tON dd.customer_id = cs.customer_id\n                group by dd.customer_id\n              ) first_subscription\n    ON dd.customer_id = first_subscription.customer_id \n    left join (select dd.customer_id, max(cs.id) as current_customer_subscription_id\n                from dm_delta dd\n                inner join stg.customer_subscriptions cs\n\t\t\t\t\t\t\t\tON dd.customer_id = cs.customer_id\n                group by dd.customer_id\n              ) current_subscription\n    ON dd.customer_id = current_subscription.customer_id\n\t\tleft join map.shop sh\n\t\tON sh.shop_id =  cs.shop_id\n    ;"
            }
        ],
        "extract.dsc_prod.products.sql": [],
        "extract.dsc_prod.customer_subscription_cancellation_reasons.sql": [],
        "extract.dsc_prod.customers.sql": [],
        "extract.dsc_prod.survey_options.sql": [],
        "load.stg.customer_attributes.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "stg.customer_attributes.id",
                        "extract.customer_attributes.id"
                    ]
                },
                "tables": [
                    "stg.customer_attributes"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "delete from stg.customer_attributes\nusing extract.customer_attributes\nwhere stg.customer_attributes.id = extract.customer_attributes.id\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_attributes"
                    ],
                    "select": [
                        "*"
                    ]
                },
                "tables": [
                    "stg.customer_attributes",
                    "extract.customer_attributes"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.customer_attributes\nselect\n  *\nfrom extract.customer_attributes\n;"
            }
        ]
    },
    "dm-customer-status": {
        "load.map.numbers.sql": [
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- TRUNCATE TABLE map.numbers;\n\nINSERT INTO map.numbers\nSELECT\n  row_number() over() as number\nFROM dmt.d_customer\nlimit 20000"
            }
        ],
        "load.dmt.d_date.sql": [
            {
                "type": "INSERT",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- https://forums.aws.amazon.com/thread.jspa?threadID=224094\n\n-- TRUNCATE TABLE dmt.d_date;\n\nINSERT INTO dmt.d_date\n    (\n      tk\n    , date\n    , day_of_week\n    , day_of_week_name\n    , day_of_month\n    , day_of_month_name\n    , day_of_year\n    , day_of_year_name\n    , week\n    , week_name\n    , week_end_date\n    , month\n    , month_name\n    , month_end_date\n    , quarter\n    , quarter_name\n    , half_year\n    , half_year_name\n    , year\n    , is_weekday\n    , is_weekend\n    , is_outlier\n    , created_batch_id\n    )\nSELECT bas.tk\n      ,bas.date\n      ,bas.day_of_week\n      ,CASE bas.day_of_week\n            WHEN 1 THEN 'Sunday'\n            WHEN 2 THEN 'Monday'\n            WHEN 3 THEN 'Tuesday'\n            WHEN 4 THEN 'Wednesday'\n            WHEN 5 THEN 'Thursday'\n            WHEN 6 THEN 'Friday'\n            WHEN 7 THEN 'Saturday'\n       END  as day_of_week_name\n      ,bas.day_of_month\n      ,CONVERT(VARCHAR(2),bas.day_of_month)\n       + CASE RIGHT(CONVERT(VARCHAR(2),bas.day_of_month),1)\n              WHEN 1 THEN CASE WHEN CONVERT(VARCHAR(2),bas.day_of_month) = '11' THEN 'th' ELSE 'st' END\n              WHEN 2 THEN CASE WHEN CONVERT(VARCHAR(2),bas.day_of_month) = '12' THEN 'th' ELSE 'nd' END\n              WHEN 3 THEN CASE WHEN CONVERT(VARCHAR(2),bas.day_of_month) = '13' THEN 'th' ELSE 'rd' END\n              WHEN 4 THEN 'th' WHEN 5 THEN 'th' WHEN 6 THEN 'th' WHEN 7 THEN 'th'\n              WHEN 8 THEN 'th' WHEN 9 THEN 'th' WHEN 0 THEN 'th' END as Day_of_month_name\n      ,bas.day_of_year\n      ,CONVERT(VARCHAR(3),bas.day_of_year)\n       + CASE RIGHT(CONVERT(VARCHAR(2),bas.day_of_year),1)\n              WHEN 1 THEN CASE WHEN RIGHT(CONVERT(VARCHAR(2),bas.day_of_year),2) = '11' THEN 'th' ELSE 'st' END\n              WHEN 2 THEN CASE WHEN RIGHT(CONVERT(VARCHAR(2),bas.day_of_year),2) = '12' THEN 'th' ELSE 'nd' END\n              WHEN 3 THEN CASE WHEN RIGHT(CONVERT(VARCHAR(2),bas.day_of_year),2) = '13' THEN 'th' ELSE 'rd' END\n              WHEN 4 THEN 'th' WHEN 5 THEN 'th' WHEN 6 THEN 'th' WHEN 7 THEN 'th'\n              WHEN 8 THEN 'th' WHEN 9 THEN 'th' WHEN 0 THEN 'th' END as Day_of_year_name\n      ,bas.week\n      ,CONVERT(VARCHAR(2),bas.week)\n       + CASE RIGHT(CONVERT(VARCHAR(2),bas.week),1)\n              WHEN 1 THEN CASE WHEN CONVERT(VARCHAR(2),bas.week) = '11' THEN 'th' ELSE 'st' END\n              WHEN 2 THEN CASE WHEN CONVERT(VARCHAR(2),bas.week) = '12' THEN 'th' ELSE 'nd' END\n              WHEN 3 THEN CASE WHEN CONVERT(VARCHAR(2),bas.week) = '13' THEN 'th' ELSE 'rd' END\n              WHEN 4 THEN 'th' WHEN 5 THEN 'th' WHEN 6 THEN 'th' WHEN 7 THEN 'th'\n              WHEN 8 THEN 'th' WHEN 9 THEN 'th' WHEN 0 THEN 'th' END as Week_name\n      ,DATEADD(day,7-(CONVERT(INT,bas.day_of_week)),bas.date) as Week_end_date\n      ,bas.month\n      ,CASE bas.month\n            WHEN  1 THEN 'January'\n            WHEN  2 THEN 'February'\n            WHEN  3 THEN 'March'\n            WHEN  4 THEN 'April'\n            WHEN  5 THEN 'May'\n            WHEN  6 THEN 'June'\n            WHEN  7 THEN 'July'\n            WHEN  8 THEN 'August'\n            WHEN  9 THEN 'September'\n            WHEN 10 THEN 'October'\n            WHEN 11 THEN 'November'\n            WHEN 12 THEN 'December'\n       END  as  month_name\n      ,DATEADD(day,-1,DATEADD(month,1,DATEADD(day,-(bas.day_of_month-1),bas.date))) as Month_end_date\n      ,bas.quarter\n      ,'Q' + CONVERT(VARCHAR(1),bas.quarter)  as quarter_name\n      ,bas.half_year\n      ,'H' + CONVERT(VARCHAR(1),bas.half_year) as half_year_name\n      ,bas.year\n      ,bas.is_weekday\n      ,bas.is_weekend\n      ,0 as is_outlier\n      ,0 as created_batch_id\n  FROM (SELECT CONVERT(INT,TO_CHAR(     DATEADD(day,num.number,'2001-01-01'),'YYYYMMDD'))                as tk\n              ,CAST(                    DATEADD(day,num.number,'2001-01-01') AS DATE)                    as \"date\"\n              ,DATE_PART(dow,           DATEADD(day,num.number,'2001-01-01'))+1                          as day_of_week\n              ,DATEPART(day,            DATEADD(day,num.number,'2001-01-01'))                            as day_of_month\n              ,DATEPART(doy,            DATEADD(day,num.number,'2001-01-01'))                            as day_of_year\n              ,DATEPART(week,           DATEADD(day,num.number,'2001-01-01'))                            as week\n              ,DATEPART(month,          DATEADD(day,num.number,'2001-01-01'))                            as \"month\"\n              ,DATEPART(quarter,        DATEADD(day,num.number,'2001-01-01'))                            as quarter\n              ,CASE WHEN DATEPART(qtr,  DATEADD(day,num.number,'2001-01-01')) < 3 THEN 1 ELSE 2 END      as half_year\n              ,DATEPART(year,           DATEADD(day,num.number,'2001-01-01'))                            as \"year\"\n              ,CASE WHEN DATEPART(dow,  DATEADD(day,num.number,'2001-01-01')) IN (0,6) THEN 0 ELSE 1 END as is_weekday\n              ,CASE WHEN DATEPART(dow,  DATEADD(day,num.number,'2001-01-01')) IN (0,6) THEN 1 ELSE 0 END as is_weekend\n          FROM (      SELECT one.number               FROM map.numbers one\n                UNION SELECT two.number + 1000 number FROM map.numbers two\n                UNION SELECT thr.number + 2000 number FROM map.numbers thr\n                UNION SELECT fou.number + 3000 number FROM map.numbers fou\n                UNION SELECT fiv.number + 4000 number FROM map.numbers fiv\n                UNION SELECT six.number + 5000 number FROM map.numbers six\n                UNION SELECT sev.number + 6000 number FROM map.numbers sev) num\n         UNION ALL\n        /* Default Start and End dates */\n        SELECT CONVERT(INT,19700101)                                                                         as tk\n              ,                         CAST('1970-01-01' AS DATE)                              as \"date\"\n              ,DATE_PART(dow,           CAST('1970-01-01' AS DATE))+1                           as day_of_weekeek\n              ,DATEPART(day,            CAST('1970-01-01' AS DATE))                             as day_of_monthonth\n              ,DATEPART(doy,            CAST('1970-01-01' AS DATE))                             as day_of_yearear\n              ,DATEPART(week,           CAST('1970-01-01' AS DATE))                             as week\n              ,DATEPART(month,          CAST('1970-01-01' AS DATE))                             as \"month\"\n              ,DATEPART(quarter,        CAST('1970-01-01' AS DATE))                             as quarter\n              ,CASE WHEN DATEPART(qtr,  CAST('1970-01-01' AS DATE)) < 3 THEN 1 ELSE 2 END       as half_yearr\n              ,DATEPART(year,           CAST('1970-01-01' AS DATE))                             as \"year\"\n              ,CASE WHEN DATEPART(dow,  CAST('1970-01-01' AS DATE)) IN (0,6) THEN 0 ELSE 1 END  as weekday\n              ,CASE WHEN DATEPART(dow,  CAST('1970-01-01' AS DATE)) IN (0,6) THEN 1 ELSE 0 END  as weekend\n         UNION ALL\n        SELECT CONVERT(INT,34991231)                                                                         as tk\n              ,                         CAST('3499-12-31' AS DATE)                              as \"date\"\n              ,DATE_PART(dow,           CAST('3499-12-31' AS DATE))+1                           as day_of_week\n              ,DATEPART(day,            CAST('3499-12-31' AS DATE))                             as day_of_month\n              ,DATEPART(doy,            CAST('3499-12-31' AS DATE))                             as day_of_year\n              ,DATEPART(week,           CAST('3499-12-31' AS DATE))                             as week\n              ,DATEPART(month,          CAST('3499-12-31' AS DATE))                             as \"month\"\n              ,DATEPART(quarter,        CAST('3499-12-31' AS DATE))                             as quarter\n              ,CASE WHEN DATEPART(qtr,  CAST('3499-12-31' AS DATE)) < 3 THEN 1 ELSE 2 END       as half_year\n              ,DATEPART(year,           CAST('3499-12-31' AS DATE))                             as \"year\"\n              ,CASE WHEN DATEPART(dow,  CAST('3499-12-31' AS DATE)) IN (0,6) THEN 0 ELSE 1 END  as is_weekday\n              ,CASE WHEN DATEPART(dow,  CAST('3499-12-31' AS DATE)) IN (0,6) THEN 1 ELSE 0 END  as is_weekend\n        )                       bas\n;"
            }
        ],
        "load.stg.customer_status.sql": [
            {
                "skipped": true,
                "value": "INSERT INTO stg.customer_order_status\nselect\n    getdate()::date as curr_date\n  , o2.customer_id\n\n  , o2.curr_order_id\n  , o2.first_order_id\n  , ISNULL(o2.previous_order_id, o2.first_order_id) as previous_order_id\n\n  , o2.curr_subscription_id\n  , o2.first_subscription_id\n  , ISNULL(o2.previous_subscription_id, o2.first_subscription_id) as previous_subscription_id\n  , o2.last_subscription_id\n\n  , o2.curr_order_date\n  , o2.first_order_date\n  , ISNULL(o2.previous_order_date, o2.first_order_date) as previous_order_date\n\n  , o2.total_orders_num\n  , o2.total_orders_amt\n\n  , DATEDIFF(DAY, o2.curr_order_date, getdate()::date)+1 AS days_from_curr_order\n  , DATEDIFF(DAY, o2.first_order_date, getdate()::date)+1 AS days_from_first_order\n  , DATEDIFF(DAY, ISNULL(o2.previous_order_date, o2.first_order_date), getdate()::date)+1 AS days_from_previous_order\n  , DATEDIFF(DAY, ISNULL(o2.previous_order_date, o2.first_order_date), o2.curr_order_date)+1 AS days_between_curr_and_prev_order\nfrom (\n  select\n      o1.customer_id\n\n    , o1.order_id as curr_order_id\n    , FIRST_VALUE(o1.order_id IGNORE NULLS) OVER(PARTITION BY o1.customer_id ORDER BY o1.order_date rows between unbounded preceding and CURRENT ROW) as first_order_id\n    , LAG(o1.order_id) OVER(PARTITION BY o1.customer_id order by o1.order_date) as previous_order_id\n\n    , o1.customer_subscription_id curr_subscription_id\n    , FIRST_VALUE(o1.customer_subscription_id IGNORE NULLS) OVER(PARTITION BY o1.customer_id ORDER BY o1.order_date rows between unbounded preceding and CURRENT ROW) as first_subscription_id\n    , LAG(o1.customer_subscription_id) OVER(PARTITION BY o1.customer_id order by o1.order_date) as previous_subscription_id\n    -- most recent valid subscription id; can be the same as current subscription_id\n    , LAST_VALUE(o1.customer_subscription_id IGNORE NULLS) OVER(partition by o1.customer_id  ORDER BY o1.order_date rows between unbounded preceding and CURRENT ROW) as last_subscription_id\n\n    , o1.order_date as curr_order_date\n    , FIRST_VALUE(o1.order_date IGNORE NULLS) OVER(PARTITION BY o1.customer_id ORDER BY o1.order_date rows between unbounded preceding and CURRENT ROW) as first_order_date\n    , LAG(o1.order_date) OVER(PARTITION BY o1.customer_id order by o1.order_date) as previous_order_date\n\n    -- total orders as of order date\n    , row_number() OVER (PARTITION BY o1.customer_id ORDER BY o1.order_date) as total_orders_num\n    , sum(o1.total) OVER(PARTITION BY o1.customer_id order by o1.order_date rows unbounded preceding) as total_orders_amt\n\n    , row_number() OVER (PARTITION BY o1.customer_id ORDER BY o1.order_date desc) as rnk\n  from (\n    -- group to avoid dups in case of multiple orders on the same date\n    SELECT\n        max(o.id) AS order_id\n      , max(o.customer_subscription_id) AS customer_subscription_id\n      , o.customer_id\n      , max(o.total) AS total\n      , o.created_at::date AS order_date\n      , max(o.updated_at::date) AS order_updated_date\n    FROM stg.orders o\n    GROUP BY\n        o.customer_id\n      , o.created_at::date\n  ) o1\n  where 1=1\n) o2\nwhere 1=1\n  and o2.rnk = 1\n;"
            },
            {
                "skipped": true,
                "value": "INSERT INTO stg.customer_subscription_status\nselect\n    getdate()::date as curr_date\n  , s1.customer_id\n\n  , s1.curr_subscription_id\n  , s1.first_subscription_id\n  , ISNULL(s1.previous_subscription_id, s1.first_subscription_id) as previous_subscription_id\n\n  , s1.curr_subscription_start_date\n  , s1.curr_subscription_end_date\n\n  , s1.first_subscription_start_date\n  , s1.first_subscription_end_date\n\n  , ISNULL(s1.previous_subscription_start_date, s1.first_subscription_start_date) as previous_subscription_start_date\n  , ISNULL(s1.previous_subscription_end_date, s1.first_subscription_end_date) as previous_subscription_end_date\n\n  , s1.total_subscriptions_num\n  , s1.total_product_quantity_num\n  , s1.total_subscriptions_amt\n\n  , s1.curr_subscription_status_id\n  , s1.first_subscription_status_id\n  , ISNULL(s1.previous_subscription_status_id, s1.first_subscription_status_id) as previous_subscription_status_id\n\n  , s1.curr_subscription_plan\n  , s1.first_subscription_subscription_plan\n  , ISNULL(s1.previous_subscription_plan, s1.first_subscription_subscription_plan) as previous_subscription_plan\n\n  , s1.curr_subscription_frequency\n  , s1.first_subscription_frequency\n  , ISNULL(s1.previous_subscription_frequency, s1.first_subscription_frequency) as previous_subscription_frequency\n\n  , DATEDIFF(DAY, s1.curr_subscription_start_date, getdate()::date)+1 AS days_from_curr_subscription\n  , DATEDIFF(DAY, s1.first_subscription_start_date, getdate()::date)+1 AS days_from_first_subscription\n  , DATEDIFF(DAY, ISNULL(s1.previous_subscription_start_date, s1.first_subscription_start_date), getdate()::date)+1 AS days_from_previous_subscription\nfrom (\n  SELECT\n    s.customer_id,\n    s.customer_subscription_id                           AS curr_subscription_id,\n    -- s.first_customer_subscription_id                     as first_subscription_id,\n    FIRST_VALUE(s.customer_subscription_id IGNORE NULLS)\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time\n      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) AS first_subscription_id,\n\n    LAG(s.customer_subscription_id)\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time )                       AS previous_subscription_id,\n    s.start_date_time :: DATE                            AS curr_subscription_start_date,\n    s.end_date_time :: DATE                              AS curr_subscription_end_date,\n    FIRST_VALUE(s.start_date_time :: DATE IGNORE NULLS)\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time\n      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) AS first_subscription_start_date,\n    FIRST_VALUE(s.end_date_time :: DATE IGNORE NULLS)\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time\n      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) AS first_subscription_end_date,\n    LAG(s.start_date_time :: DATE)\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time )                       AS previous_subscription_start_date,\n    LAG(s.end_date_time :: DATE)\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time )                       AS previous_subscription_end_date,\n    row_number()\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time )                       AS total_subscriptions_num,\n    sum(s.product_quantity)\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time\n      ROWS UNBOUNDED PRECEDING )                         AS total_product_quantity_num,\n    sum(s.subscription_amount)\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time\n      ROWS UNBOUNDED PRECEDING )                         AS total_subscriptions_amt,\n    s.status                                             AS curr_subscription_status_id,\n    FIRST_VALUE(s.status IGNORE NULLS)\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time\n      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) AS first_subscription_status_id,\n    LAG(s.status)\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time )                       AS previous_subscription_status_id,\n    s.subscription_plan                                  AS curr_subscription_plan,\n    FIRST_VALUE(s.subscription_plan IGNORE NULLS)\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time\n      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) AS first_subscription_subscription_plan,\n    LAG(s.subscription_plan)\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time )                       AS previous_subscription_plan,\n    s.frequency                                          AS curr_subscription_frequency,\n    FIRST_VALUE(s.frequency IGNORE NULLS)\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time\n      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) AS first_subscription_frequency,\n    LAG(s.frequency)\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time )                       AS previous_subscription_frequency,\n    row_number()\n    OVER (\n      PARTITION BY s.customer_id\n      ORDER BY s.start_date_time DESC )                  AS rnk\n  --, *\n  FROM dmt.d_customer_subscription s\n) s1\nwhere 1=1\n    and s1.rnk = 1\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_status"
                    ],
                    "select": [
                        "o.curr_date",
                        "o.customer_id",
                        "o.curr_order_id",
                        "o.first_order_id",
                        "o.previous_order_id",
                        "o.curr_subscription_id",
                        "o.first_subscription_id",
                        "o.previous_subscription_id",
                        "o.last_subscription_id",
                        "o.curr_order_date",
                        "o.first_order_date",
                        "o.previous_order_date",
                        "o.total_orders_num",
                        "o.total_orders_amt",
                        "o.days_from_curr_order",
                        "o.days_from_first_order",
                        "o.days_from_previous_order",
                        "o.days_between_curr_and_prev_order",
                        "s.curr_subscription_id",
                        "s.first_subscription_id",
                        "s.previous_subscription_id",
                        "s.curr_subscription_start_date",
                        "s.curr_subscription_end_date",
                        "s.first_subscription_start_date",
                        "s.first_subscription_end_date",
                        "s.previous_subscription_start_date",
                        "s.previous_subscription_end_date",
                        "s.total_subscriptions_num",
                        "s.total_product_quantity_num",
                        "s.total_subscriptions_amt",
                        "s.curr_subscription_status_id",
                        "s.first_subscription_status_id",
                        "s.previous_subscription_status_id",
                        "s.curr_subscription_plan",
                        "s.first_subscription_plan",
                        "s.previous_subscription_plan",
                        "s.curr_subscription_frequency",
                        "s.first_subscription_frequency",
                        "s.previous_subscription_frequency",
                        "s.days_from_curr_subscription",
                        "s.days_from_first_subscription",
                        "s.days_from_previous_subscription"
                    ]
                },
                "tables": [
                    "stg.customer_status"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.customer_status\nselect\n    o.curr_date\n  , o.customer_id\n  , o.curr_order_id\n  , o.first_order_id\n  , o.previous_order_id\n  , o.curr_subscription_id as curr_order_subscription_id\n  , o.first_subscription_id as first_order_subscription_id\n  , o.previous_subscription_id as previous_order_subscription_id\n  , o.last_subscription_id as last_order_subscription_id\n  , o.curr_order_date\n  , o.first_order_date\n  , o.previous_order_date\n  , o.total_orders_num\n  , o.total_orders_amt\n  , o.days_from_curr_order\n  , o.days_from_first_order\n  , o.days_from_previous_order\n  , o.days_between_curr_and_prev_order\n\n  , s.curr_subscription_id\n  , s.first_subscription_id\n  , s.previous_subscription_id\n  , s.curr_subscription_start_date\n  , s.curr_subscription_end_date\n  , s.first_subscription_start_date\n  , s.first_subscription_end_date\n  , s.previous_subscription_start_date\n  , s.previous_subscription_end_date\n  , s.total_subscriptions_num\n  , s.total_product_quantity_num\n  , s.total_subscriptions_amt\n  , s.curr_subscription_status_id\n  , s.first_subscription_status_id\n  , s.previous_subscription_status_id\n  , s.curr_subscription_plan\n  , s.first_subscription_plan\n  , s.previous_subscription_plan\n  , s.curr_subscription_frequency\n  , s.first_subscription_frequency\n  , s.previous_subscription_frequency\n  , s.days_from_curr_subscription\n  , s.days_from_first_subscription\n  , s.days_from_previous_subscription\n\n ,CASE\n      WHEN s.curr_subscription_status_id = 0 THEN 'Cancelled'\n      WHEN s.curr_subscription_status_id = 1 THEN 'Active'\n      WHEN s.curr_subscription_status_id = 2 THEN 'Suspended'\n      WHEN s.curr_subscription_status_id = 3 THEN 'Suspended Timeout'\n      WHEN s.curr_subscription_status_id = 4 THEN 'Paused'\n      ELSE 'No Subscription'\n   END as subscription_status\n  , CASE\n        WHEN (o.days_from_curr_order <= 360) -- there are orders in the last 360 days\n          THEN 'Active'\n        WHEN (o.days_from_curr_order > 360)  -- there are no orders in the last 360 days\n          THEN 'Inactive'\n    END as customer_status\n  , CASE\n      WHEN (o.total_orders_num >= 1  -- even a single order converts prospect to a customer\n            AND o.days_from_first_order <= 30 -- first order not more than 30 days ago\n            AND (\n              s.curr_subscription_id IS NULL -- never had any subscriptions\n              OR s.curr_subscription_status_id in (0,3) -- Cancelled, Suspended Timeout\n            )\n        )\n        THEN 'New (Non Subscriber)'\n      WHEN (o.total_orders_num >= 1 -- even a single order converts prospect to a customer\n            AND o.days_from_first_order <= 30 -- first order not more than 30 days ago\n            AND s.curr_subscription_id IS NOT NULL   -- has subscription\n            AND s.curr_subscription_status_id in (1,2,4)  -- subscription - Not Cancelled\n        )\n        THEN 'New (Subscriber)'\n\n      WHEN (o.total_orders_num >= 1 -- even a single order converts prospect to a customer\n            -- if new non subscriber customer did not make any purchase after 30 days she cannot be new anymore\n            -- so setting it as active since she cannot be made At risk or inactive\n            AND o.days_from_first_order > 30  -- more than 30 days since first order  -- not new\n            AND o.days_from_curr_order <= 180 -- not at risk\n            AND (\n              s.curr_subscription_id IS NULL -- never had any subscriptions\n              OR s.curr_subscription_status_id in (0,3) -- Cancelled, Suspended Timeout\n            )\n      )\n        THEN 'Active (Non Subscriber)'\n      WHEN (o.total_orders_num >= 1\n            AND o.days_from_first_order > 30  -- more than 30 days since first order  -- not new\n            AND o.days_from_curr_order <= 180 -- not at risk\n            AND s.curr_subscription_id IS NOT NULL   -- has subscription\n            AND s.curr_subscription_status_id in (1,2,4)  -- subscription - Not Cancelled\n      )\n        THEN 'Active (Subscriber)'\n\n      WHEN (o.total_orders_num > 1 -- even a single order converts prospect to a customer\n            AND o.days_from_first_order > 30  -- more than 30 days since first order  -- not new\n            AND o.days_from_curr_order <= 180 -- not at risk\n            AND o.days_between_curr_and_prev_order > 360\n            AND (\n              s.curr_subscription_id IS NULL -- never had any subscriptions\n              OR s.curr_subscription_status_id in (0,3) -- Cancelled, Suspended Timeout\n            )\n      )\n        THEN 'Re-Activated (Non Subscriber)'\n      WHEN (o.total_orders_num > 1\n            AND o.days_from_first_order > 30  -- more than 30 days since first order  -- not new\n            AND o.days_from_curr_order <= 180 -- not at risk\n            AND o.days_between_curr_and_prev_order > 360\n            AND s.curr_subscription_id IS NOT NULL   -- has subscription\n            AND s.curr_subscription_status_id in (1,2,4)  -- subscription - Not Cancelled\n      )\n        THEN 'Re-Activated (Subscriber)'\n      WHEN (o.total_orders_num >= 1\n            AND o.days_from_curr_order between 180 and 360 -- at risk\n            AND (\n              s.curr_subscription_id IS NULL -- never had any subscriptions\n              OR s.curr_subscription_status_id in (0,3) -- Cancelled, Suspended Timeout\n            )\n      )\n        THEN 'At-Risk (Non Subscriber)'\n      WHEN (o.total_orders_num >= 1\n            AND o.days_from_curr_order between 180 and 360 -- at risk\n            AND s.curr_subscription_id IS NOT NULL   -- has subscription\n            AND s.curr_subscription_status_id in (1,2,4)  -- subscription - Not Cancelled\n      )\n        THEN 'At-Risk (Subscriber)'\n      WHEN (o.total_orders_num >= 1\n            AND o.days_from_curr_order > 360\n            AND (\n              s.curr_subscription_id IS NULL -- never had any subscriptions\n              --OR s.curr_subscription_status_id in (0,3) -- Subscription Cancelled\n              OR o.curr_subscription_id is NULL -- the most recent oder was NOT on subscription\n            )\n      )\n        THEN 'Inactive (Non Subscriber), NSRQ Lapsed'\n      WHEN (o.total_orders_num >= 1\n            AND o.days_from_curr_order > 360\n            AND s.curr_subscription_id IS NOT NULL   -- has subscription\n            AND o.curr_subscription_id is NOT NULL -- the most recent oder was on subscription\n      )\n        THEN 'Inactive (Non Subscriber), Cancelled'\n    END AS customer_sub_status\n\n    , CASE\n      WHEN o.days_between_curr_and_prev_order > 360\n        THEN True\n        ELSE False\n      END as re_activated_by_order\n    , CASE\n        when (s.curr_subscription_id IS NULL -- never had subscriptions\n              OR o.days_from_curr_order > 360 -- inactive customer (timeout)\n              OR s.curr_subscription_status_id in (0,3) -- Cancelled, Suspended Timeout\n              )\n          then 'Non Subscriber'\n          else 'Subscriber'\n      END as customer_category\nFROM stg.customer_order_status o\n  LEFT OUTER JOIN stg.customer_subscription_status s\n    ON o.customer_id = s.customer_id\nWHERE 1 = 1\n;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- refresh tmp.customer_status_history\n-- adds new days to the tmp.customer_status_history\n\ndelete from stg.customer_status_history\nwhere 1=1\n  and stg.customer_status_history.curr_date in (select curr_date from stg.customer_status group by curr_date)\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_status_history"
                    ],
                    "select": [
                        "*"
                    ]
                },
                "tables": [
                    "stg.customer_status_history",
                    "stg.customer_status"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.customer_status_history\nselect * from stg.customer_status;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_status_changes"
                    ],
                    "select": [
                        "stg.customer_status_history.customer_id",
                        "subscription_status",
                        "customer_status",
                        "customer_sub_status",
                        "re_activated_by_order",
                        "customer_category",
                        "stg.customer_status_history.curr_date"
                    ]
                },
                "tables": [
                    "stg.customer_status_changes",
                    "stg.customer_status_history"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "insert into stg.customer_status_changes\nselect\n    csh.customer_id\n\t, subscription_status\n\t, customer_status\n\t, customer_sub_status\n\t, re_activated_by_order\n\t, customer_category\n  , min(csh.curr_date) start_date\n  , max(csh.curr_date) end_date\nfrom stg.customer_status_history csh\ngroup by\n    csh.customer_id\n\t, subscription_status\n\t, customer_status\n\t, customer_sub_status\n\t, re_activated_by_order\n\t, customer_category\n;"
            },
            {
                "skipped": true,
                "value": "INSERT INTO stg.invoice_billing_shipping_address_id\nselect\n    i0.customer_id\n  , i0.shipping_address_id\n  , i0.billing_address_id\nfrom (\n  select\n      i.customer_id\n    , i.shipping_address_id\n    , i.billing_address_id\n    , row_number() OVER (PARTITION BY i.customer_id ORDER BY i.updated_at desc) as rnk\n    -- , i.*\n  from stg.invoices i\n  where 1=1\n    -- and  i.customer_id = 2464163\n) i0\nwhere 1=1\n  and i0.rnk = 1\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_billing_address"
                    ],
                    "select": [
                        "t.customer_id",
                        "t.address_id",
                        "t.address_line_1",
                        "t.address_line_2",
                        "t.city",
                        "t.state",
                        "t.zip_code",
                        "t.shop_id",
                        "stg.zuora_payment_methods.customer_id",
                        "stg.zuora_payment_methods.billing_address_id",
                        "stg.addresses.address_line_1",
                        "stg.addresses.address_line_2",
                        "stg.addresses.city",
                        "stg.addresses.state",
                        "stg.addresses.zip_code",
                        "stg.addresses.shop_id"
                    ],
                    "order_by": [
                        "stg.zuora_payment_methods.status"
                    ],
                    "join": [
                        "stg.zuora_payment_methods.billing_address_id",
                        "stg.addresses.id"
                    ],
                    "where": [
                        "t.rnk"
                    ]
                },
                "tables": [
                    "stg.customer_billing_address",
                    "stg.zuora_payment_methods",
                    "stg.addresses"
                ],
                "subqueries": {
                    "t": "select p.customer_id, p.billing_address_id as address_id, a.address_line_1, a.address_line_2, a.city, a.state, a.zip_code, a.shop_id, row_number () over (partition by p.customer_id order by p.status desc, p.created_at desc, p.updated_at desc) as rnk from stg.zuora_payment_methods p left outer join stg.addresses a on p.billing_address_id = a.id where 1 = 1"
                },
                "skipped": false,
                "value": "INSERT INTO stg.customer_billing_address\nselect\n      t.customer_id\n    , t.address_id\n    , t.address_line_1\n    , t.address_line_2\n    , t.city\n    , t.state\n    , t.zip_code\n    , t.shop_id\n    , getdate() as dw_load_date_time\nfrom (\n    select\n          p.customer_id\n        , p.billing_address_id as address_id\n        , a.address_line_1\n        , a.address_line_2\n        , a.city\n        , a.state\n        , a.zip_code\n        , a.shop_id\n        , row_number() over (partition by p.customer_id order by p.status desc, p.created_at desc, p.updated_at desc) as rnk\n    from stg.zuora_payment_methods p\n      left outer join stg.addresses a\n        on p.billing_address_id = a.id\n      where 1=1\n) t\nwhere 1=1\n  and t.rnk = 1\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_shipping_address"
                    ],
                    "select": [
                        "t.customer_id",
                        "t.address_id",
                        "t.address_line_1",
                        "t.address_line_2",
                        "t.city",
                        "t.state",
                        "t.zip_code",
                        "t.shop_id",
                        "stg.customer_primary_addresses.customer_id",
                        "stg.customer_primary_addresses.address_id",
                        "stg.addresses.address_line_1",
                        "stg.addresses.address_line_2",
                        "stg.addresses.city",
                        "stg.addresses.state",
                        "stg.addresses.zip_code",
                        "stg.addresses.shop_id"
                    ],
                    "order_by": [
                        "stg.addresses.created_at"
                    ],
                    "join": [
                        "stg.customer_primary_addresses.address_id",
                        "stg.addresses.id"
                    ],
                    "where": [
                        "t.rnk"
                    ]
                },
                "tables": [
                    "stg.customer_shipping_address",
                    "stg.customer_primary_addresses",
                    "stg.addresses"
                ],
                "subqueries": {
                    "t": "select p.customer_id, p.address_id, a.address_line_1 as address_line_1, a.address_line_2 as address_line_2, a.city as city, a.state as state, a.zip_code as zip_code, a.shop_id as shop_id, row_number () over (partition by p.customer_id order by a.created_at desc, a.updated_at desc) as rnk from stg.customer_primary_addresses p left outer join stg.addresses a on p.address_id = a.id where 1 = 1"
                },
                "skipped": false,
                "value": "INSERT INTO stg.customer_shipping_address\nselect\n      t.customer_id\n    , t.address_id\n    , t.address_line_1\n    , t.address_line_2\n    , t.city\n    , t.state\n    , t.zip_code\n    , t.shop_id\n    , getdate() as dw_load_date_time\nfrom (\n    select\n          p.customer_id\n        , p.address_id\n        , a.address_line_1 as address_line_1\n        , a.address_line_2 as address_line_2\n        , a.city as city\n        , a.state as state\n        , a.zip_code as zip_code\n        , a.shop_id as shop_id\n        , row_number() over (partition by p.customer_id order by a.created_at desc, a.updated_at desc) as rnk\n    from stg.customer_primary_addresses p\n      left outer join stg.addresses a\n        on p.address_id = a.id\n      where 1=1\n) t\nwhere 1=1\n  and t.rnk = 1\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "d_customer_status"
                    ],
                    "select": [
                        "c.customer_id",
                        "c.first_name",
                        "c.last_name"
                    ]
                },
                "tables": [
                    "dmt.d_customer_status"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO dmt.d_customer_status\nselect\n      c.customer_id\n    , left(c.first_name, 64) as first_name\n    , c.last_name\n---\n    , cs.subscription_status\n    , cs.customer_status\n    , cs.customer_sub_status\n    , cs.re_activated_by_order\n    , cs.customer_category\n-----\n    , sca.address_line_1 as shipping_address_line_1\n    , sca.address_line_2 as shipping_address_line_2\n    , left(sca.city, 48) as shipping_city\n    , sca.state as shipping_state\n    , sca.zip_code as shipping_zip_code\n\n    , bca.address_line_1 as billing_address_line_1\n    , bca.address_line_2 as billing_address_line_2\n    , left(bca.city, 48) as billing_city\n    , bca.state as billing_state\n    , bca.zip_code as billing_zip_code\n-----\n    , c.cellphone_number as phone\n    , c.email\n    , c.gender\n    , c.birthday\n    , c.relationship_status\n    , c.created_at\n    , c.updated_at\n    , c.sign_in_count\n    , c.current_sign_in_at\n    , c.last_sign_in_at\n    , c.current_sign_in_ip\n    , c.last_sign_in_ip\n    , c.referral_code\n    , c.wallet_balance\n    , c.provider\n    , c.uid\n    , c.time_zone\n    , c.zuora_account_number\n    , c.customer_type\n    , c.obfuscated_id\n    , c.convertro_id\n    , c.initial_referrer\n    , c.twitter\n    , c.facebook\n    , c.last_user_agent\n    , c.fraud_score\n    , c.klout_score\n    , c.full_contact_status\n    , c.satisfaction_score\n    , c.browser_hash\n    , c.permanent_cookie\n    , c.failed_credit_card_attempt_count\n    , c.primary_referral_name\n    , c.secondary_referral_name\n    , c.proxy_score\n    , c.customer_attributes_id\n    , c.registered_in_shop_id\n    , getdate() as  dw_load_date_time\nfrom dmt.d_customer c\n  inner join stg.customer_status cs\n    on c.customer_id = cs.customer_id\n  left outer join stg.customer_shipping_address sca\n    on c.customer_id = sca.customer_id\n  left outer join stg.customer_billing_address bca\n    on c.customer_id = bca.customer_id\n\n;"
            }
        ],
        "load.stg.customer_subscription_status_history.sql": [
            {
                "type": "DELETE",
                "columns": {
                    "where": [
                        "load_date"
                    ],
                    "select": [
                        "stg.customer_status.curr_date"
                    ]
                },
                "tables": [
                    "stg.customer_subscription_status_history",
                    "stg.customer_status"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "DELETE FROM stg.customer_subscription_status_history\n       where load_date = (select min(date_trunc('day', h.curr_date::DATE))::DATE from stg.customer_status h) ;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "customer_subscription_status_history"
                    ],
                    "select": [
                        "stg.customer_status.curr_date",
                        "stg.customer_status.subscription_status",
                        "dmt.d_customer.registered_in_shop_id",
                        "MAP.shop.shop_name",
                        "stg.customer_status.curr_subscription_plan",
                        "*"
                    ],
                    "join": [
                        "stg.customer_status.customer_id",
                        "dmt.d_customer.customer_id",
                        "stg.test_customers.customer_id",
                        "MAP.shop.shop_id",
                        "dmt.d_customer.registered_in_shop_id"
                    ],
                    "where": [
                        "stg.test_customers.customer_id",
                        "stg.customer_status.subscription_status"
                    ]
                },
                "tables": [
                    "stg.customer_subscription_status_history",
                    "stg.customer_status",
                    "dmt.d_customer",
                    "stg.test_customers",
                    "MAP.shop"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.customer_subscription_status_history\nSELECT\n\t  date_trunc('day', h.curr_date::DATE)   AS load_date\n\t, h.subscription_status      AS subscription_status\n\t, c.registered_in_shop_id    AS shop_id\n\t, m.shop_name                AS shop_name\n\t, h.curr_subscription_plan   AS curr_subscription_plan\n\t, COUNT(*)                   AS customer_count\nFROM\n\tstg.customer_status h \n\t\tLEFT JOIN dmt.d_customer c \n\t\tON h.customer_id = c.customer_id \n\t\t\tLEFT JOIN stg.test_customers t \n\t\t\tON t.customer_id = h.customer_id \n\t\t\t\tLEFT OUTER JOIN MAP.shop m \n\t\t\t\tON m.shop_id = c.registered_in_shop_id\nWHERE\n\tt.customer_id IS NULL AND\n\th.subscription_status <> 'No Subscription' \nGROUP BY\n\t 1,2,3,4,5\nORDER BY\n\t 1 DESC,3 ASC\n;"
            }
        ]
    },
    "dm-stream-import": {
        "spark.extract.survey_question_set_impression.sql": [],
        "load.stg.hl_remove_from_subscription.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "delta_hl_remove_from_subscription"
                    ],
                    "select": [
                        "kafka_key"
                    ]
                },
                "tables": [
                    "extract.delta_hl_remove_from_subscription",
                    "extract.hl_remove_from_subscription"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO extract.delta_hl_remove_from_subscription\nselect\n  kafka_key\nfrom extract.hl_remove_from_subscription e\ngroup by\n  1\n;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- 796,323\n\ndelete from stg.hl_remove_from_subscription\nusing extract.delta_hl_remove_from_subscription\nwhere stg.hl_remove_from_subscription.kafka_key = extract.delta_hl_remove_from_subscription.kafka_key\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "hl_remove_from_subscription"
                    ],
                    "select": [
                        "extract.hl_remove_from_subscription.session_id",
                        "extract.hl_remove_from_subscription.tracksuit_version",
                        "extract.hl_remove_from_subscription.user_agent",
                        "extract.hl_remove_from_subscription.request_ip",
                        "extract.hl_remove_from_subscription.uuid",
                        "extract.hl_remove_from_subscription.event_name",
                        "extract.hl_remove_from_subscription.subscription_position",
                        "extract.hl_remove_from_subscription.bill_date",
                        "extract.hl_remove_from_subscription.frequency_in_months",
                        "extract.hl_remove_from_subscription.is_recurring",
                        "extract.hl_remove_from_subscription.product_brand",
                        "extract.hl_remove_from_subscription.product_discount_position",
                        "extract.hl_remove_from_subscription.product_discount_calculated_total",
                        "extract.hl_remove_from_subscription.product_discount_name",
                        "extract.hl_remove_from_subscription.product_discount_unit",
                        "extract.hl_remove_from_subscription.product_discount_value",
                        "extract.hl_remove_from_subscription.product_effective_unit_price",
                        "extract.hl_remove_from_subscription.product_is_bundle",
                        "extract.hl_remove_from_subscription.product_name",
                        "extract.hl_remove_from_subscription.product_sku",
                        "extract.hl_remove_from_subscription.product_unit_price",
                        "extract.hl_remove_from_subscription.kafka_key",
                        "extract.hl_remove_from_subscription.kafka_topic",
                        "extract.hl_remove_from_subscription.kafka_partition",
                        "extract.hl_remove_from_subscription.kafka_offset",
                        "extract.hl_remove_from_subscription.kafka_timestamp",
                        "extract.hl_remove_from_subscription.kafka_date",
                        "extract.hl_remove_from_subscription.yyyy",
                        "extract.hl_remove_from_subscription.mm",
                        "extract.hl_remove_from_subscription.dd",
                        "extract.hl_remove_from_subscription.stream_load_timestamp",
                        "extract.hl_remove_from_subscription.dmp_uuid",
                        "extract.hl_remove_from_subscription.mcvisid",
                        "extract.hl_remove_from_subscription.obfuscated_customer_id",
                        "extract.hl_remove_from_subscription.url",
                        "extract.hl_remove_from_subscription.url_no_params",
                        "extract.hl_remove_from_subscription.product_displayed_effective_price",
                        "extract.hl_remove_from_subscription.product_displayed_retail_price"
                    ]
                },
                "tables": [
                    "stg.hl_remove_from_subscription",
                    "extract.hl_remove_from_subscription"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.hl_remove_from_subscription\nselect\n    e.session_id\n  , e.tracksuit_version\n  , e.user_agent\n  , e.request_ip\n  , e.uuid\n  , e.event_name\n  , e.subscription_position\n  , e.bill_date\n  , e.frequency_in_months\n  , e.is_recurring\n  , e.product_brand\n  , e.product_discount_position\n  , e.product_discount_calculated_total\n  , e.product_discount_name\n  , e.product_discount_unit\n  , e.product_discount_value\n  , e.product_effective_unit_price\n  , e.product_is_bundle\n  , e.product_name\n  , e.product_sku\n  , e.product_unit_price\n  , e.kafka_key\n  , e.kafka_topic\n  , e.kafka_partition\n  , e.kafka_offset\n  , e.kafka_timestamp\n  , e.kafka_date\n  , e.yyyy\n  , e.mm\n  , e.dd\n  , e.stream_load_timestamp\n  , getdate() as dw_load_timestamp\n  , e.dmp_uuid \n  , e.mcvisid \n  , e.obfuscated_customer_id \n  , e.url \n  , e.url_no_params \n  , e.product_displayed_effective_price \n  , e.product_displayed_retail_price\nfrom extract.hl_remove_from_subscription e\nwhere 1=1\n;"
            }
        ],
        "spark.extract.quantity_change_cart.sql": [],
        "load.stg.hl_base.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "delta_hl_base"
                    ],
                    "select": [
                        "kafka_key"
                    ]
                },
                "tables": [
                    "extract.delta_hl_base",
                    "extract.hl_base"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO extract.delta_hl_base\nselect\n  kafka_key\nfrom extract.hl_base e\ngroup by\n  1\n;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- 796,323\n\ndelete from stg.hl_base\nusing extract.delta_hl_base\nwhere stg.hl_base.kafka_key = extract.delta_hl_base.kafka_key\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "hl_base"
                    ],
                    "select": [
                        "extract.hl_base.kafka_key",
                        "extract.hl_base.kafka_data",
                        "extract.hl_base.kafka_meta",
                        "extract.hl_base.kafka_topic",
                        "extract.hl_base.kafka_partition",
                        "extract.hl_base.kafka_offset",
                        "extract.hl_base.kafka_timestamp",
                        "extract.hl_base.kafka_date",
                        "extract.hl_base.yyyy",
                        "extract.hl_base.mm",
                        "extract.hl_base.dd",
                        "extract.hl_base.stream_load_timestamp"
                    ]
                },
                "tables": [
                    "stg.hl_base",
                    "extract.hl_base"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.hl_base\nselect\n    e.kafka_key\n  , e.kafka_data\n  , e.kafka_meta\n  , e.kafka_topic\n  , e.kafka_partition\n  , e.kafka_offset\n  , e.kafka_timestamp\n  , e.kafka_date\n  , e.yyyy\n  , e.mm\n  , e.dd\n  , e.stream_load_timestamp\n  , getdate() as dw_load_timestamp\nfrom extract.hl_base e\nwhere 1=1\n;"
            }
        ],
        "spark.extract.product_impression.sql": [],
        "load.stg.hl_remove_from_cart.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "delta_hl_remove_from_cart"
                    ],
                    "select": [
                        "kafka_key"
                    ]
                },
                "tables": [
                    "extract.delta_hl_remove_from_cart",
                    "extract.hl_remove_from_cart"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO extract.delta_hl_remove_from_cart\nselect\n  kafka_key\nfrom extract.hl_remove_from_cart e\ngroup by\n  1\n;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- 796,323\n\ndelete from stg.hl_remove_from_cart\nusing extract.delta_hl_remove_from_cart\nwhere stg.hl_remove_from_cart.kafka_key = extract.delta_hl_remove_from_cart.kafka_key\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "hl_remove_from_cart"
                    ],
                    "select": [
                        "extract.hl_remove_from_cart.session_id",
                        "extract.hl_remove_from_cart.tracksuit_version",
                        "extract.hl_remove_from_cart.user_agent",
                        "extract.hl_remove_from_cart.request_ip",
                        "extract.hl_remove_from_cart.uuid",
                        "extract.hl_remove_from_cart.event_name",
                        "extract.hl_remove_from_cart.item_position",
                        "extract.hl_remove_from_cart.product_brand",
                        "extract.hl_remove_from_cart.product_bundled_sku_position",
                        "extract.hl_remove_from_cart.product_bundled_sku",
                        "extract.hl_remove_from_cart.product_discount_position",
                        "extract.hl_remove_from_cart.product_discount",
                        "extract.hl_remove_from_cart.product_effective_unit_price",
                        "extract.hl_remove_from_cart.product_is_bundle",
                        "extract.hl_remove_from_cart.product_name",
                        "extract.hl_remove_from_cart.product_sku",
                        "extract.hl_remove_from_cart.product_unit_price",
                        "extract.hl_remove_from_cart.kafka_key",
                        "extract.hl_remove_from_cart.kafka_topic",
                        "extract.hl_remove_from_cart.kafka_partition",
                        "extract.hl_remove_from_cart.kafka_offset",
                        "extract.hl_remove_from_cart.kafka_timestamp",
                        "extract.hl_remove_from_cart.kafka_date",
                        "extract.hl_remove_from_cart.yyyy",
                        "extract.hl_remove_from_cart.mm",
                        "extract.hl_remove_from_cart.dd",
                        "extract.hl_remove_from_cart.stream_load_timestamp",
                        "extract.hl_remove_from_cart.dmp_uuid",
                        "extract.hl_remove_from_cart.mcvisid",
                        "extract.hl_remove_from_cart.obfuscated_customer_id",
                        "extract.hl_remove_from_cart.url",
                        "extract.hl_remove_from_cart.url_no_params"
                    ]
                },
                "tables": [
                    "stg.hl_remove_from_cart",
                    "extract.hl_remove_from_cart"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.hl_remove_from_cart\nselect\n    e.session_id\n  , e.tracksuit_version\n  , e.user_agent\n  , e.request_ip\n  , e.uuid\n  , e.event_name\n  , e.item_position\n  , e.product_brand\n  , e.product_bundled_sku_position\n  , e.product_bundled_sku\n  , e.product_discount_position\n  , e.product_discount\n  , e.product_effective_unit_price\n  , e.product_is_bundle\n  , e.product_name\n  , e.product_sku\n  , e.product_unit_price\n  , e.kafka_key\n  , e.kafka_topic\n  , e.kafka_partition\n  , e.kafka_offset\n  , e.kafka_timestamp\n  , e.kafka_date\n  , e.yyyy\n  , e.mm\n  , e.dd\n  , e.stream_load_timestamp\n  , getdate() as dw_load_timestamp\n  , e.dmp_uuid\t\n  , e.mcvisid\t\n  , e.obfuscated_customer_id\t\n  , e.url\t\n  , e.url_no_params\nfrom extract.hl_remove_from_cart e\nwhere 1=1\n;"
            }
        ],
        "load.stg.hl_quantity_change_cart.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "delta_hl_quantity_change_cart"
                    ],
                    "select": [
                        "kafka_key"
                    ]
                },
                "tables": [
                    "extract.delta_hl_quantity_change_cart",
                    "extract.hl_quantity_change_cart"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO extract.delta_hl_quantity_change_cart\nselect\n  kafka_key\nfrom extract.hl_quantity_change_cart e\ngroup by\n  1\n;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- 796,323\n\ndelete from stg.hl_quantity_change_cart\nusing extract.delta_hl_quantity_change_cart\nwhere stg.hl_quantity_change_cart.kafka_key = extract.delta_hl_quantity_change_cart.kafka_key\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "hl_quantity_change_cart"
                    ],
                    "select": [
                        "extract.hl_quantity_change_cart.session_id",
                        "extract.hl_quantity_change_cart.tracksuit_version",
                        "extract.hl_quantity_change_cart.user_agent",
                        "extract.hl_quantity_change_cart.request_ip",
                        "extract.hl_quantity_change_cart.uuid",
                        "extract.hl_quantity_change_cart.event_name",
                        "extract.hl_quantity_change_cart.new_quantity",
                        "extract.hl_quantity_change_cart.original_quantity",
                        "extract.hl_quantity_change_cart.product_brand",
                        "extract.hl_quantity_change_cart.product_bundled_sku_position",
                        "extract.hl_quantity_change_cart.product_bundled_sku",
                        "extract.hl_quantity_change_cart.product_discount_position",
                        "extract.hl_quantity_change_cart.product_discount",
                        "extract.hl_quantity_change_cart.product_effective_unit_price",
                        "extract.hl_quantity_change_cart.product_is_bundle",
                        "extract.hl_quantity_change_cart.product_name",
                        "extract.hl_quantity_change_cart.product_sku",
                        "extract.hl_quantity_change_cart.product_unit_price",
                        "extract.hl_quantity_change_cart.kafka_key",
                        "extract.hl_quantity_change_cart.kafka_topic",
                        "extract.hl_quantity_change_cart.kafka_partition",
                        "extract.hl_quantity_change_cart.kafka_offset",
                        "extract.hl_quantity_change_cart.kafka_timestamp",
                        "extract.hl_quantity_change_cart.kafka_date",
                        "extract.hl_quantity_change_cart.yyyy",
                        "extract.hl_quantity_change_cart.mm",
                        "extract.hl_quantity_change_cart.dd",
                        "extract.hl_quantity_change_cart.stream_load_timestamp"
                    ]
                },
                "tables": [
                    "stg.hl_quantity_change_cart",
                    "extract.hl_quantity_change_cart"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.hl_quantity_change_cart\nselect\n    e.session_id\n  , e.tracksuit_version\n  , e.user_agent\n  , e.request_ip\n  , e.uuid\n  , e.event_name\n  , e.new_quantity\n  , e.original_quantity\n  , e.product_brand\n  , e.product_bundled_sku_position\n  , e.product_bundled_sku\n  , e.product_discount_position\n  , e.product_discount\n  , e.product_effective_unit_price\n  , e.product_is_bundle\n  , e.product_name\n  , e.product_sku\n  , e.product_unit_price\n  , e.kafka_key\n  , e.kafka_topic\n  , e.kafka_partition\n  , e.kafka_offset\n  , e.kafka_timestamp\n  , e.kafka_date\n  , e.yyyy\n  , e.mm\n  , e.dd\n  , e.stream_load_timestamp\n  , getdate() as dw_load_timestamp\nfrom extract.hl_quantity_change_cart e\nwhere 1=1\n;"
            }
        ],
        "load.stg.hl_add_to_subscription.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "delta_hl_add_to_subscription"
                    ],
                    "select": [
                        "kafka_key"
                    ]
                },
                "tables": [
                    "extract.delta_hl_add_to_subscription",
                    "extract.hl_add_to_subscription"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO extract.delta_hl_add_to_subscription\nselect\n  kafka_key\nfrom extract.hl_add_to_subscription e\ngroup by\n  1\n;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- 796,323\n\ndelete from stg.hl_add_to_subscription\nusing extract.delta_hl_add_to_subscription\nwhere stg.hl_add_to_subscription.kafka_key = extract.delta_hl_add_to_subscription.kafka_key\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "hl_add_to_subscription"
                    ],
                    "select": [
                        "extract.hl_add_to_subscription.session_id",
                        "extract.hl_add_to_subscription.tracksuit_version",
                        "extract.hl_add_to_subscription.user_agent",
                        "extract.hl_add_to_subscription.request_ip",
                        "extract.hl_add_to_subscription.uuid",
                        "extract.hl_add_to_subscription.event_name",
                        "extract.hl_add_to_subscription.subscription_position",
                        "extract.hl_add_to_subscription.bill_date",
                        "extract.hl_add_to_subscription.frequency_in_months",
                        "extract.hl_add_to_subscription.is_recurring",
                        "extract.hl_add_to_subscription.product_brand",
                        "extract.hl_add_to_subscription.product_bundled_sku_position",
                        "extract.hl_add_to_subscription.product_bundled_sku",
                        "extract.hl_add_to_subscription.product_discount_position",
                        "extract.hl_add_to_subscription.product_discount_calculated_total",
                        "extract.hl_add_to_subscription.product_discount_name",
                        "extract.hl_add_to_subscription.product_discount_unit",
                        "extract.hl_add_to_subscription.product_discount_value",
                        "extract.hl_add_to_subscription.product_effective_unit_price",
                        "extract.hl_add_to_subscription.product_is_bundle",
                        "extract.hl_add_to_subscription.product_name",
                        "extract.hl_add_to_subscription.product_sku",
                        "extract.hl_add_to_subscription.product_unit_price",
                        "extract.hl_add_to_subscription.kafka_key",
                        "extract.hl_add_to_subscription.kafka_topic",
                        "extract.hl_add_to_subscription.kafka_partition",
                        "extract.hl_add_to_subscription.kafka_offset",
                        "extract.hl_add_to_subscription.kafka_timestamp",
                        "extract.hl_add_to_subscription.kafka_date",
                        "extract.hl_add_to_subscription.yyyy",
                        "extract.hl_add_to_subscription.mm",
                        "extract.hl_add_to_subscription.dd",
                        "extract.hl_add_to_subscription.stream_load_timestamp",
                        "extract.hl_add_to_subscription.url",
                        "extract.hl_add_to_subscription.product_timestamp",
                        "extract.hl_add_to_subscription.obfuscated_customer_id",
                        "extract.hl_add_to_subscription.dmp_uuid",
                        "extract.hl_add_to_subscription.mcvisid",
                        "extract.hl_add_to_subscription.product_displayed_effective_price",
                        "extract.hl_add_to_subscription.product_displayed_retail_price",
                        "extract.hl_add_to_subscription.url_no_params"
                    ]
                },
                "tables": [
                    "stg.hl_add_to_subscription",
                    "extract.hl_add_to_subscription"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.hl_add_to_subscription\nselect\n    e.session_id\n  , e.tracksuit_version\n  , e.user_agent\n  , e.request_ip\n  , e.uuid\n  , e.event_name\n  , e.subscription_position\n  , e.bill_date\n  , e.frequency_in_months\n  , e.is_recurring\n  , e.product_brand\n  , e.product_bundled_sku_position\n  , e.product_bundled_sku\n  , e.product_discount_position\n  , e.product_discount_calculated_total\n  , e.product_discount_name\n  , e.product_discount_unit\n  , e.product_discount_value\n  , e.product_effective_unit_price\n  , e.product_is_bundle\n  , e.product_name\n  , e.product_sku\n  , e.product_unit_price\n  , e.kafka_key\n  , e.kafka_topic\n  , e.kafka_partition\n  , e.kafka_offset\n  , e.kafka_timestamp\n  , e.kafka_date\n  , e.yyyy\n  , e.mm\n  , e.dd\n  , e.stream_load_timestamp\n  , getdate() as dw_load_timestamp\n  , e.url\n  , e.product_timestamp\n  , e.obfuscated_customer_id\n  , e.dmp_uuid\n  , e.mcvisid\n  , e.product_displayed_effective_price\n  , e.product_displayed_retail_price\n  , e.url_no_params\nfrom extract.hl_add_to_subscription e\nwhere 1=1\n;"
            }
        ],
        "spark.extract.halo_base.sql": [],
        "spark.extract.add_to_cart.sql": [],
        "load.stg.hl_purchase.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "delta_hl_purchase"
                    ],
                    "select": [
                        "kafka_key"
                    ]
                },
                "tables": [
                    "extract.delta_hl_purchase",
                    "extract.hl_purchase"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO extract.delta_hl_purchase\nselect\n  kafka_key\nfrom extract.hl_purchase e\ngroup by\n  1\n;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- 796,323\n\ndelete from stg.hl_purchase\nusing extract.delta_hl_purchase\nwhere stg.hl_purchase.kafka_key = extract.delta_hl_purchase.kafka_key\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "hl_purchase"
                    ],
                    "select": [
                        "extract.hl_purchase.session_id",
                        "extract.hl_purchase.tracksuit_version",
                        "extract.hl_purchase.user_agent",
                        "extract.hl_purchase.request_ip",
                        "extract.hl_purchase.uuid",
                        "extract.hl_purchase.event_name",
                        "extract.hl_purchase.line_item_position",
                        "extract.hl_purchase.product_brand",
                        "extract.hl_purchase.product_bundled_skus_position",
                        "extract.hl_purchase.product_bundled_sku",
                        "extract.hl_purchase.product_effective_unit_price",
                        "extract.hl_purchase.product_is_bundle",
                        "extract.hl_purchase.product_name",
                        "extract.hl_purchase.product_sku",
                        "extract.hl_purchase.product_unit_price",
                        "extract.hl_purchase.items_quantity",
                        "extract.hl_purchase.ledger_shipping",
                        "extract.hl_purchase.ledger_subtotal",
                        "extract.hl_purchase.ledger_tax",
                        "extract.hl_purchase.ledger_wallet_balance",
                        "extract.hl_purchase.obfuscated_order_id",
                        "extract.hl_purchase.kafka_key",
                        "extract.hl_purchase.kafka_topic",
                        "extract.hl_purchase.kafka_partition",
                        "extract.hl_purchase.kafka_offset",
                        "extract.hl_purchase.kafka_timestamp",
                        "extract.hl_purchase.kafka_date",
                        "extract.hl_purchase.yyyy",
                        "extract.hl_purchase.mm",
                        "extract.hl_purchase.dd",
                        "extract.hl_purchase.stream_load_timestamp",
                        "extract.hl_purchase.dmp_uuid",
                        "extract.hl_purchase.mcvisid",
                        "extract.hl_purchase.obfuscated_customer_id",
                        "extract.hl_purchase.url",
                        "extract.hl_purchase.url_no_params",
                        "extract.hl_purchase.ledger_displayed_subtotal",
                        "extract.hl_purchase.product_displayed_effective_price",
                        "extract.hl_purchase.product_displayed_retail_price"
                    ]
                },
                "tables": [
                    "stg.hl_purchase",
                    "extract.hl_purchase"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.hl_purchase\nselect\n    e.session_id\n  , e.tracksuit_version\n  , e.user_agent\n  , e.request_ip\n  , e.uuid\n  , e.event_name\n  , e.line_item_position\n  , e.product_brand\n  , e.product_bundled_skus_position\n  , e.product_bundled_sku\n  , e.product_effective_unit_price\n  , e.product_is_bundle\n  , e.product_name\n  , e.product_sku\n  , e.product_unit_price\n  , e.items_quantity\n  , e.ledger_shipping\n  , e.ledger_subtotal\n  , e.ledger_tax\n  , e.ledger_wallet_balance\n  , e.obfuscated_order_id\n  , e.kafka_key\n  , e.kafka_topic\n  , e.kafka_partition\n  , e.kafka_offset\n  , e.kafka_timestamp\n  , e.kafka_date\n  , e.yyyy\n  , e.mm\n  , e.dd\n  , e.stream_load_timestamp\n  , getdate() as dw_load_timestamp\n  , e.dmp_uuid \n  , e.mcvisid \n  , e.obfuscated_customer_id \n  , e.url \n  , e.url_no_params \n  , e.ledger_displayed_subtotal \n  , e.product_displayed_effective_price \n  , e.product_displayed_retail_price\nfrom extract.hl_purchase e\nwhere 1=1\n;"
            }
        ],
        "load.stg.hl_survey_question_set_answered.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "delta_hl_survey_question_set_answered"
                    ],
                    "select": [
                        "kafka_key"
                    ]
                },
                "tables": [
                    "extract.delta_hl_survey_question_set_answered",
                    "extract.hl_survey_question_set_answered"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO extract.delta_hl_survey_question_set_answered\nselect\n  kafka_key\nfrom extract.hl_survey_question_set_answered e\ngroup by\n  1\n;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- 796,323\n\ndelete from stg.hl_survey_question_set_answered\nusing extract.delta_hl_survey_question_set_answered\nwhere stg.hl_survey_question_set_answered.kafka_key = extract.delta_hl_survey_question_set_answered.kafka_key\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "hl_survey_question_set_answered"
                    ],
                    "select": [
                        "extract.hl_survey_question_set_answered.dmp_uuid",
                        "extract.hl_survey_question_set_answered.mcvisid",
                        "extract.hl_survey_question_set_answered.obfuscated_customer_id",
                        "extract.hl_survey_question_set_answered.request_ip",
                        "extract.hl_survey_question_set_answered.session_id",
                        "extract.hl_survey_question_set_answered.tracksuit_version",
                        "extract.hl_survey_question_set_answered.url",
                        "extract.hl_survey_question_set_answered.url_no_params",
                        "extract.hl_survey_question_set_answered.user_agent",
                        "extract.hl_survey_question_set_answered.uuid",
                        "extract.hl_survey_question_set_answered.event_timestamp",
                        "extract.hl_survey_question_set_answered.event_name",
                        "extract.hl_survey_question_set_answered.line_item_position",
                        "extract.hl_survey_question_set_answered.question_id",
                        "extract.hl_survey_question_set_answered.answer_position",
                        "extract.hl_survey_question_set_answered.answer_id",
                        "extract.hl_survey_question_set_answered.answer_text",
                        "extract.hl_survey_question_set_answered.kafka_key",
                        "extract.hl_survey_question_set_answered.kafka_topic",
                        "extract.hl_survey_question_set_answered.kafka_partition",
                        "extract.hl_survey_question_set_answered.kafka_offset",
                        "extract.hl_survey_question_set_answered.kafka_timestamp",
                        "extract.hl_survey_question_set_answered.kafka_date",
                        "extract.hl_survey_question_set_answered.yyyy",
                        "extract.hl_survey_question_set_answered.mm",
                        "extract.hl_survey_question_set_answered.dd",
                        "extract.hl_survey_question_set_answered.stream_load_timestamp"
                    ]
                },
                "tables": [
                    "stg.hl_survey_question_set_answered",
                    "extract.hl_survey_question_set_answered"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.hl_survey_question_set_answered\nselect\n         e.dmp_uuid\n        ,e.mcvisid\n        ,e.obfuscated_customer_id\n        ,e.request_ip\n        ,e.session_id\n        ,e.tracksuit_version\n        ,e.url\n        ,e.url_no_params\n        ,e.user_agent\n        ,e.uuid\n        ,e.event_timestamp\n        ,e.event_name\n        ,e.line_item_position\n        ,e.question_id\n        ,e.answer_position\n        ,e.answer_id\n        ,e.answer_text\n        ,e.kafka_key\n        ,e.kafka_topic\n        ,e.kafka_partition\n        ,e.kafka_offset\n        ,e.kafka_timestamp\n        ,e.kafka_date\n        ,e.yyyy\n        ,e.mm\n        ,e.dd\n        ,e.stream_load_timestamp\n        , getdate() as dw_load_timestamp\nfrom extract.hl_survey_question_set_answered e\nwhere 1=1\n;"
            }
        ],
        "spark.extract.survey_question_set_answered.sql": [],
        "spark.extract.subscription_set_impression.sql": [],
        "spark.extract.quantity_change_subscription.sql": [],
        "spark.extract.remove_from_subscription.sql": [],
        "spark.extract.remove_from_cart.sql": [],
        "spark.extract.add_to_subscription.sql": [],
        "spark.extract.purchase.sql": [],
        "load.stg.hl_quantity_change_subscription.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "delta_hl_quantity_change_subscription"
                    ],
                    "select": [
                        "kafka_key"
                    ]
                },
                "tables": [
                    "extract.delta_hl_quantity_change_subscription",
                    "extract.hl_quantity_change_subscription"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO extract.delta_hl_quantity_change_subscription\nselect\n  kafka_key\nfrom extract.hl_quantity_change_subscription e\ngroup by\n  1\n;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- 796,323\n\ndelete from stg.hl_quantity_change_subscription\nusing extract.delta_hl_quantity_change_subscription\nwhere stg.hl_quantity_change_subscription.kafka_key = extract.delta_hl_quantity_change_subscription.kafka_key\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "hl_quantity_change_subscription"
                    ],
                    "select": [
                        "extract.hl_quantity_change_subscription.session_id",
                        "extract.hl_quantity_change_subscription.tracksuit_version",
                        "extract.hl_quantity_change_subscription.user_agent",
                        "extract.hl_quantity_change_subscription.request_ip",
                        "extract.hl_quantity_change_subscription.uuid",
                        "extract.hl_quantity_change_subscription.event_name",
                        "extract.hl_quantity_change_subscription.new_quantity",
                        "extract.hl_quantity_change_subscription.original_quantity",
                        "extract.hl_quantity_change_subscription.product_brand",
                        "extract.hl_quantity_change_subscription.product_discount_position",
                        "extract.hl_quantity_change_subscription.product_discount_calculated_total",
                        "extract.hl_quantity_change_subscription.product_discount_name",
                        "extract.hl_quantity_change_subscription.product_discount_unit",
                        "extract.hl_quantity_change_subscription.product_discount_value",
                        "extract.hl_quantity_change_subscription.product_effective_unit_price",
                        "extract.hl_quantity_change_subscription.product_is_bundle",
                        "extract.hl_quantity_change_subscription.product_name",
                        "extract.hl_quantity_change_subscription.product_sku",
                        "extract.hl_quantity_change_subscription.product_unit_price",
                        "extract.hl_quantity_change_subscription.kafka_key",
                        "extract.hl_quantity_change_subscription.kafka_topic",
                        "extract.hl_quantity_change_subscription.kafka_partition",
                        "extract.hl_quantity_change_subscription.kafka_offset",
                        "extract.hl_quantity_change_subscription.kafka_timestamp",
                        "extract.hl_quantity_change_subscription.kafka_date",
                        "extract.hl_quantity_change_subscription.yyyy",
                        "extract.hl_quantity_change_subscription.mm",
                        "extract.hl_quantity_change_subscription.dd",
                        "extract.hl_quantity_change_subscription.stream_load_timestamp"
                    ]
                },
                "tables": [
                    "stg.hl_quantity_change_subscription",
                    "extract.hl_quantity_change_subscription"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.hl_quantity_change_subscription\nselect\n    e.session_id\n  , e.tracksuit_version\n  , e.user_agent\n  , e.request_ip\n  , e.uuid\n  , e.event_name\n  , e.new_quantity\n  , e.original_quantity\n  , e.product_brand\n  , e.product_discount_position\n  , e.product_discount_calculated_total\n  , e.product_discount_name\n  , e.product_discount_unit\n  , e.product_discount_value\n  , e.product_effective_unit_price\n  , e.product_is_bundle\n  , e.product_name\n  , e.product_sku\n  , e.product_unit_price\n  , e.kafka_key\n  , e.kafka_topic\n  , e.kafka_partition\n  , e.kafka_offset\n  , e.kafka_timestamp\n  , e.kafka_date\n  , e.yyyy\n  , e.mm\n  , e.dd\n  , e.stream_load_timestamp\n  , getdate() as dw_load_timestamp\nfrom extract.hl_quantity_change_subscription e\nwhere 1=1\n;"
            }
        ],
        "load.stg.hl_add_to_cart.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "delta_hl_add_to_cart"
                    ],
                    "select": [
                        "kafka_key"
                    ]
                },
                "tables": [
                    "extract.delta_hl_add_to_cart",
                    "extract.hl_add_to_cart"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO extract.delta_hl_add_to_cart\nselect\n  kafka_key\nfrom extract.hl_add_to_cart e\ngroup by\n  1\n;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- 796,323\n\ndelete from stg.hl_add_to_cart\nusing extract.delta_hl_add_to_cart\nwhere stg.hl_add_to_cart.kafka_key = extract.delta_hl_add_to_cart.kafka_key\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "hl_add_to_cart"
                    ],
                    "select": [
                        "extract.hl_add_to_cart.session_id",
                        "extract.hl_add_to_cart.tracksuit_version",
                        "extract.hl_add_to_cart.user_agent",
                        "extract.hl_add_to_cart.request_ip",
                        "extract.hl_add_to_cart.uuid",
                        "extract.hl_add_to_cart.event_name",
                        "extract.hl_add_to_cart.item_position",
                        "extract.hl_add_to_cart.product_brand",
                        "extract.hl_add_to_cart.product_bundled_sku_position",
                        "extract.hl_add_to_cart.product_bundled_sku",
                        "extract.hl_add_to_cart.product_discount_position",
                        "extract.hl_add_to_cart.product_discount",
                        "extract.hl_add_to_cart.product_effective_unit_price",
                        "extract.hl_add_to_cart.product_is_bundle",
                        "extract.hl_add_to_cart.product_name",
                        "extract.hl_add_to_cart.product_sku",
                        "extract.hl_add_to_cart.product_unit_price",
                        "extract.hl_add_to_cart.kafka_key",
                        "extract.hl_add_to_cart.kafka_topic",
                        "extract.hl_add_to_cart.kafka_partition",
                        "extract.hl_add_to_cart.kafka_offset",
                        "extract.hl_add_to_cart.kafka_timestamp",
                        "extract.hl_add_to_cart.kafka_date",
                        "extract.hl_add_to_cart.yyyy",
                        "extract.hl_add_to_cart.mm",
                        "extract.hl_add_to_cart.dd",
                        "extract.hl_add_to_cart.stream_load_timestamp"
                    ]
                },
                "tables": [
                    "stg.hl_add_to_cart",
                    "extract.hl_add_to_cart"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.hl_add_to_cart\nselect\n    e.session_id\n  , e.tracksuit_version\n  , e.user_agent\n  , e.request_ip\n  , e.uuid\n  , e.event_name\n  , e.item_position\n  , e.product_brand\n  , e.product_bundled_sku_position\n  , e.product_bundled_sku\n  , e.product_discount_position\n  , e.product_discount\n  , e.product_effective_unit_price\n  , e.product_is_bundle\n  , e.product_name\n  , e.product_sku\n  , e.product_unit_price\n  , e.kafka_key\n  , e.kafka_topic\n  , e.kafka_partition\n  , e.kafka_offset\n  , e.kafka_timestamp\n  , e.kafka_date\n  , e.yyyy\n  , e.mm\n  , e.dd\n  , e.stream_load_timestamp\n  , getdate() as dw_load_timestamp\nfrom extract.hl_add_to_cart e\nwhere 1=1\n;"
            }
        ],
        "load.stg.hl_user_info.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "delta_hl_user_info"
                    ],
                    "select": [
                        "kafka_key"
                    ]
                },
                "tables": [
                    "extract.delta_hl_user_info",
                    "extract.hl_user_info"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO extract.delta_hl_user_info\nselect\n  kafka_key\nfrom extract.hl_user_info e\ngroup by\n  1\n;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- 796,323\n\ndelete from stg.hl_user_info\nusing extract.delta_hl_user_info\nwhere stg.hl_user_info.kafka_key = extract.delta_hl_user_info.kafka_key\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "hl_user_info"
                    ],
                    "select": [
                        "extract.hl_user_info.dmp_uuid",
                        "extract.hl_user_info.mcvisid",
                        "extract.hl_user_info.obfuscatedCustomerId",
                        "extract.hl_user_info.request_ip",
                        "extract.hl_user_info.session_id",
                        "extract.hl_user_info.tracksuit_version",
                        "extract.hl_user_info.url",
                        "extract.hl_user_info.url_no_params",
                        "extract.hl_user_info.user_agent",
                        "extract.hl_user_info.uuid",
                        "extract.hl_user_info.event_name",
                        "extract.hl_user_info.action",
                        "extract.hl_user_info.obfuscated_customer_id",
                        "extract.hl_user_info.email",
                        "extract.hl_user_info.login_state",
                        "extract.hl_user_info.kafka_key",
                        "extract.hl_user_info.kafka_topic",
                        "extract.hl_user_info.kafka_partition",
                        "extract.hl_user_info.kafka_offset",
                        "extract.hl_user_info.kafka_timestamp",
                        "extract.hl_user_info.kafka_date",
                        "extract.hl_user_info.yyyy",
                        "extract.hl_user_info.mm",
                        "extract.hl_user_info.dd",
                        "extract.hl_user_info.stream_load_timestamp"
                    ]
                },
                "tables": [
                    "stg.hl_user_info",
                    "extract.hl_user_info"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.hl_user_info\nselect\n     e.dmp_uuid\n    ,e.mcvisid\n    ,e.obfuscatedCustomerId\n    ,e.request_ip\n    ,e.session_id\n    ,e.tracksuit_version\n    ,e.url\n    ,e.url_no_params\n    ,e.user_agent\n    ,e.uuid\n    ,e.event_name\n    ,e.action\n    ,e.obfuscated_customer_id\n    ,e.email\n    ,e.login_state\n    ,e.kafka_key\n    ,e.kafka_topic\n    ,e.kafka_partition\n    ,e.kafka_offset\n    ,e.kafka_timestamp\n    ,e.kafka_date\n    ,e.yyyy\n    ,e.mm\n    ,e.dd\n    ,e.stream_load_timestamp\n    ,getdate() as dw_load_timestamp\nfrom extract.hl_user_info e\nwhere 1=1\n;"
            }
        ],
        "load.stg.hl_survey_question_set_impression.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "delta_hl_survey_question_set_impression"
                    ],
                    "select": [
                        "kafka_key"
                    ]
                },
                "tables": [
                    "extract.delta_hl_survey_question_set_impression",
                    "extract.hl_survey_question_set_impression"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO extract.delta_hl_survey_question_set_impression\nselect\n  kafka_key\nfrom extract.hl_survey_question_set_impression e\ngroup by\n  1\n;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- 796,323\n\ndelete from stg.hl_survey_question_set_impression\nusing extract.delta_hl_survey_question_set_impression\nwhere stg.hl_survey_question_set_impression.kafka_key = extract.delta_hl_survey_question_set_impression.kafka_key\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "hl_survey_question_set_impression"
                    ],
                    "select": [
                        "extract.hl_survey_question_set_impression.dmp_uuid",
                        "extract.hl_survey_question_set_impression.mcvisid",
                        "extract.hl_survey_question_set_impression.obfuscated_customer_id",
                        "extract.hl_survey_question_set_impression.request_ip",
                        "extract.hl_survey_question_set_impression.session_id",
                        "extract.hl_survey_question_set_impression.tracksuit_version",
                        "extract.hl_survey_question_set_impression.url",
                        "extract.hl_survey_question_set_impression.url_no_params",
                        "extract.hl_survey_question_set_impression.user_agent",
                        "extract.hl_survey_question_set_impression.uuid",
                        "extract.hl_survey_question_set_impression.event_timestamp",
                        "extract.hl_survey_question_set_impression.event_name",
                        "extract.hl_survey_question_set_impression.line_item_position",
                        "extract.hl_survey_question_set_impression.question_id",
                        "extract.hl_survey_question_set_impression.question_text",
                        "extract.hl_survey_question_set_impression.kafka_key",
                        "extract.hl_survey_question_set_impression.kafka_topic",
                        "extract.hl_survey_question_set_impression.kafka_partition",
                        "extract.hl_survey_question_set_impression.kafka_offset",
                        "extract.hl_survey_question_set_impression.kafka_timestamp",
                        "extract.hl_survey_question_set_impression.kafka_date",
                        "extract.hl_survey_question_set_impression.yyyy",
                        "extract.hl_survey_question_set_impression.mm",
                        "extract.hl_survey_question_set_impression.dd",
                        "extract.hl_survey_question_set_impression.stream_load_timestamp"
                    ]
                },
                "tables": [
                    "stg.hl_survey_question_set_impression",
                    "extract.hl_survey_question_set_impression"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.hl_survey_question_set_impression\nselect\n    e.dmp_uuid\n        ,e.mcvisid\n        ,e.obfuscated_customer_id\n        ,e.request_ip\n        ,e.session_id\n        ,e.tracksuit_version\n        ,e.url\n        ,e.url_no_params\n        ,e.user_agent\n        ,e.uuid\n        ,e.event_timestamp\n        ,e.event_name\n        ,e.line_item_position\n        ,e.question_id\n        ,e.question_text\n        ,e.kafka_key\n        ,e.kafka_topic\n        ,e.kafka_partition\n        ,e.kafka_offset\n        ,e.kafka_timestamp\n        ,e.kafka_date\n        ,e.yyyy\n        ,e.mm\n        ,e.dd\n        ,e.stream_load_timestamp\n  , getdate() as dw_load_timestamp\nfrom extract.hl_survey_question_set_impression e\nwhere 1=1\n;"
            }
        ],
        "spark.extract.user_info.sql": [],
        "load.stg.hl_product_impression.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "delta_hl_product_impression"
                    ],
                    "select": [
                        "kafka_key"
                    ]
                },
                "tables": [
                    "extract.delta_hl_product_impression",
                    "extract.hl_product_impression"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO extract.delta_hl_product_impression\nselect\n  kafka_key\nfrom extract.hl_product_impression e\ngroup by\n  1\n;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- 796,323\n\ndelete from stg.hl_product_impression\nusing extract.delta_hl_product_impression\nwhere stg.hl_product_impression.kafka_key = extract.delta_hl_product_impression.kafka_key\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "hl_product_impression"
                    ],
                    "select": [
                        "extract.hl_product_impression.session_id",
                        "extract.hl_product_impression.tracksuit_version",
                        "extract.hl_product_impression.user_agent",
                        "extract.hl_product_impression.request_ip",
                        "extract.hl_product_impression.uuid",
                        "extract.hl_product_impression.event_name",
                        "extract.hl_product_impression.product_brand",
                        "extract.hl_product_impression.bundled_sku_position",
                        "extract.hl_product_impression.bundled_sku",
                        "extract.hl_product_impression.product_effective_unit_price",
                        "extract.hl_product_impression.product_is_bundle",
                        "extract.hl_product_impression.product_name",
                        "extract.hl_product_impression.product_sku",
                        "extract.hl_product_impression.product_unit_price",
                        "extract.hl_product_impression.kafka_key",
                        "extract.hl_product_impression.kafka_topic",
                        "extract.hl_product_impression.kafka_partition",
                        "extract.hl_product_impression.kafka_offset",
                        "extract.hl_product_impression.kafka_timestamp",
                        "extract.hl_product_impression.kafka_date",
                        "extract.hl_product_impression.yyyy",
                        "extract.hl_product_impression.mm",
                        "extract.hl_product_impression.dd",
                        "extract.hl_product_impression.stream_load_timestamp",
                        "extract.hl_product_impression.url",
                        "extract.hl_product_impression.url_no_params",
                        "extract.hl_product_impression.product_timestamp",
                        "extract.hl_product_impression.obfuscated_customer_id",
                        "extract.hl_product_impression.dmp_uuid",
                        "extract.hl_product_impression.mcvisid",
                        "extract.hl_product_impression.product_displayed_effective_price",
                        "extract.hl_product_impression.product_displayed_effective_price_2",
                        "extract.hl_product_impression.product_displayed_retail_price"
                    ]
                },
                "tables": [
                    "stg.hl_product_impression",
                    "extract.hl_product_impression"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.hl_product_impression\nselect\n    e.session_id\n  , e.tracksuit_version\n  , e.user_agent\n  , e.request_ip\n  , e.uuid\n  , e.event_name\n  , e.product_brand\n  , e.bundled_sku_position\n  , e.bundled_sku\n  , e.product_effective_unit_price\n  , e.product_is_bundle\n  , e.product_name\n  , e.product_sku\n  , e.product_unit_price\n  , e.kafka_key\n  , e.kafka_topic\n  , e.kafka_partition\n  , e.kafka_offset\n  , e.kafka_timestamp\n  , e.kafka_date\n  , e.yyyy\n  , e.mm\n  , e.dd\n  , e.stream_load_timestamp\n  , getdate() as dw_load_timestamp\n\n  , e.url\n  , e.url_no_params\n  , e.product_timestamp\n  , e.obfuscated_customer_id\n  , e.dmp_uuid\n  , e.mcvisid\n  , e.product_displayed_effective_price\n  , e.product_displayed_effective_price_2\n  , e.product_displayed_retail_price\nfrom extract.hl_product_impression e\nwhere 1=1\n;"
            }
        ],
        "load.stg.hl_subscription_set_impression.sql": [
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "delta_hl_subscription_set_impression"
                    ],
                    "select": [
                        "kafka_key"
                    ]
                },
                "tables": [
                    "extract.delta_hl_subscription_set_impression",
                    "extract.hl_subscription_set_impression"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO extract.delta_hl_subscription_set_impression\nselect\n  kafka_key\nfrom extract.hl_subscription_set_impression e\ngroup by\n  1\n;"
            },
            {
                "type": "DELETE",
                "columns": null,
                "tables": [],
                "subqueries": {},
                "skipped": false,
                "value": "-- 796,323\n\ndelete from stg.hl_subscription_set_impression\nusing extract.delta_hl_subscription_set_impression\nwhere stg.hl_subscription_set_impression.kafka_key = extract.delta_hl_subscription_set_impression.kafka_key\n;"
            },
            {
                "type": "INSERT",
                "columns": {
                    "insert": [
                        "hl_subscription_set_impression"
                    ],
                    "select": [
                        "e.session_id",
                        "e.tracksuit_version",
                        "e.user_agent",
                        "e.request_ip"
                    ]
                },
                "tables": [
                    "stg.hl_subscription_set_impression"
                ],
                "subqueries": {},
                "skipped": false,
                "value": "INSERT INTO stg.hl_subscription_set_impression\nselect\n    e.session_id\n  , e.tracksuit_version\n  , e.user_agent\n  , e.request_ip\n  --, e.uuid\n  , e.event_name\n  , e.bill_date\n  , e.frequency_in_months\n  , e.is_recurring\n  , e.subscription_position\n  , e.product_brand\n  , e.product_bundled_sku_position\n  , e.product_bundled_sku\n  , e.product_discount_position\n  , e.product_discount_calculated_total\n  , e.product_discount_name\n  , e.product_discount_unit\n  , e.product_discount_value\n  , e.product_effective_unit_price\n  , e.product_is_bundle\n  , e.product_name\n  , e.product_sku\n  , e.product_unit_price\n  , e.kafka_key\n  , e.kafka_topic\n  , e.kafka_partition\n  , e.kafka_offset\n  , e.kafka_timestamp\n  , e.kafka_date\n  , e.yyyy\n  , e.mm\n  , e.dd\n  , e.stream_load_timestamp\n  , getdate() as dw_load_timestamp\nfrom extract.hl_subscription_set_impression e\nwhere 1=1\n;"
            }
        ]
    }
}